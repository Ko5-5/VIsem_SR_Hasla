
SR_MHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a150  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ebc  0800a2e8  0800a2e8  0001a2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1a4  0800b1a4  000203b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1a4  0800b1a4  0001b1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1ac  0800b1ac  000203b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1ac  0800b1ac  0001b1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1b0  0800b1b0  0001b1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  0800b1b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd0  200003b0  0800b564  000203b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001380  0800b564  00021380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021308  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004545  00000000  00000000  000416e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001808  00000000  00000000  00045c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001670  00000000  00000000  00047438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007223  00000000  00000000  00048aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016e3a  00000000  00000000  0004fccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009409d  00000000  00000000  00066b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000faba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000654c  00000000  00000000  000fac20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003b0 	.word	0x200003b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a2d0 	.word	0x0800a2d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003b4 	.word	0x200003b4
 80001d4:	0800a2d0 	.word	0x0800a2d0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	; 0x28
 80004ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	4b4a      	ldr	r3, [pc, #296]	; (800062c <MX_GPIO_Init+0x144>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a49      	ldr	r2, [pc, #292]	; (800062c <MX_GPIO_Init+0x144>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b47      	ldr	r3, [pc, #284]	; (800062c <MX_GPIO_Init+0x144>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	4b43      	ldr	r3, [pc, #268]	; (800062c <MX_GPIO_Init+0x144>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a42      	ldr	r2, [pc, #264]	; (800062c <MX_GPIO_Init+0x144>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b40      	ldr	r3, [pc, #256]	; (800062c <MX_GPIO_Init+0x144>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	4b3c      	ldr	r3, [pc, #240]	; (800062c <MX_GPIO_Init+0x144>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a3b      	ldr	r2, [pc, #236]	; (800062c <MX_GPIO_Init+0x144>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b39      	ldr	r3, [pc, #228]	; (800062c <MX_GPIO_Init+0x144>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	4b35      	ldr	r3, [pc, #212]	; (800062c <MX_GPIO_Init+0x144>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a34      	ldr	r2, [pc, #208]	; (800062c <MX_GPIO_Init+0x144>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b32      	ldr	r3, [pc, #200]	; (800062c <MX_GPIO_Init+0x144>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000574:	482e      	ldr	r0, [pc, #184]	; (8000630 <MX_GPIO_Init+0x148>)
 8000576:	f002 fb7f 	bl	8002c78 <HAL_GPIO_WritePin>
                          |CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000580:	482c      	ldr	r0, [pc, #176]	; (8000634 <MX_GPIO_Init+0x14c>)
 8000582:	f002 fb79 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin;
 8000586:	231c      	movs	r3, #28
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_GPIO_Init+0x150>)
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4825      	ldr	r0, [pc, #148]	; (8000630 <MX_GPIO_Init+0x148>)
 800059a:	f002 f9d3 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800059e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80005a2:	617b      	str	r3, [r7, #20]
                          |CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	481e      	ldr	r0, [pc, #120]	; (8000630 <MX_GPIO_Init+0x148>)
 80005b8:	f002 f9c4 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_BUT_Pin;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	4819      	ldr	r0, [pc, #100]	; (8000634 <MX_GPIO_Init+0x14c>)
 80005d0:	f002 f9b8 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 80005d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4811      	ldr	r0, [pc, #68]	; (8000634 <MX_GPIO_Init+0x14c>)
 80005ee:	f002 f9a9 	bl	8002944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2008      	movs	r0, #8
 80005f8:	f002 f96d 	bl	80028d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005fc:	2008      	movs	r0, #8
 80005fe:	f002 f986 	bl	800290e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2009      	movs	r0, #9
 8000608:	f002 f965 	bl	80028d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800060c:	2009      	movs	r0, #9
 800060e:	f002 f97e 	bl	800290e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	200a      	movs	r0, #10
 8000618:	f002 f95d 	bl	80028d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800061c:	200a      	movs	r0, #10
 800061e:	f002 f976 	bl	800290e <HAL_NVIC_EnableIRQ>

}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000
 8000634:	40020400 	.word	0x40020400
 8000638:	10110000 	.word	0x10110000

0800063c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_I2C1_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_I2C1_Init+0x50>)
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_I2C1_Init+0x58>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_I2C1_Init+0x50>)
 800065a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_I2C1_Init+0x50>)
 800067a:	f002 fb2f 	bl	8002cdc <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 fe82 	bl	800138c <Error_Handler>
  }

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000830 	.word	0x20000830
 8000690:	40005400 	.word	0x40005400
 8000694:	00061a80 	.word	0x00061a80

08000698 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <HAL_I2C_MspInit+0x84>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d12b      	bne.n	8000712 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006da:	2312      	movs	r3, #18
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006de:	2301      	movs	r3, #1
 80006e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e6:	2304      	movs	r3, #4
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <HAL_I2C_MspInit+0x8c>)
 80006f2:	f002 f927 	bl	8002944 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_I2C_MspInit+0x88>)
 8000700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000704:	6413      	str	r3, [r2, #64]	; 0x40
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_I2C_MspInit+0x88>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40005400 	.word	0x40005400
 8000720:	40023800 	.word	0x40023800
 8000724:	40020400 	.word	0x40020400

08000728 <XORCipher>:

/*! \brief Funkcja szyfrująca hasło przy pomocy operacji binarnego XOR
 * 	Funkcja szyfrująca hasło przy pomocy operacji binarnego XOR, dostaje tablice char oraz klucz do szyfrowania
 */
void XORCipher(uint8_t* string, uint8_t* key)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < strlen(string); i++)
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	e018      	b.n	800076a <XORCipher+0x42>
	{
		string[i] = string[i] ^ key[i % 8];
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	7819      	ldrb	r1, [r3, #0]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	425a      	negs	r2, r3
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	f002 0207 	and.w	r2, r2, #7
 800074c:	bf58      	it	pl
 800074e:	4253      	negpl	r3, r2
 8000750:	461a      	mov	r2, r3
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4413      	add	r3, r2
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	4403      	add	r3, r0
 800075e:	404a      	eors	r2, r1
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < strlen(string); i++)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fd34 	bl	80001d8 <strlen>
 8000770:	4602      	mov	r2, r0
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	429a      	cmp	r2, r3
 8000776:	d8df      	bhi.n	8000738 <XORCipher+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <OLED_write_sc>:

/*! \brief Funkcja wyświetlająca ekran trybu wpisywania
 * 	Funkcja wyświetlająca ekran trybu wpisywania na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_write_sc(){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000786:	f001 ff9d 	bl	80026c4 <HAL_GetTick>
 800078a:	4602      	mov	r2, r0
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <OLED_write_sc+0x8c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000796:	d936      	bls.n	8000806 <OLED_write_sc+0x86>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000798:	2000      	movs	r0, #0
 800079a:	f000 ff6f 	bl	800167c <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 800079e:	2106      	movs	r1, #6
 80007a0:	2004      	movs	r0, #4
 80007a2:	f000 ffe3 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Puts ("-- WRITE --", &Font_11x18, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	4919      	ldr	r1, [pc, #100]	; (8000810 <OLED_write_sc+0x90>)
 80007aa:	481a      	ldr	r0, [pc, #104]	; (8000814 <OLED_write_sc+0x94>)
 80007ac:	f001 f874 	bl	8001898 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 80007b0:	2119      	movs	r1, #25
 80007b2:	2004      	movs	r0, #4
 80007b4:	f000 ffda 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Puts ("-- MODE  --", &Font_11x18, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	4915      	ldr	r1, [pc, #84]	; (8000810 <OLED_write_sc+0x90>)
 80007bc:	4816      	ldr	r0, [pc, #88]	; (8000818 <OLED_write_sc+0x98>)
 80007be:	f001 f86b 	bl	8001898 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 80007c2:	2301      	movs	r3, #1
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2301      	movs	r3, #1
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	2101      	movs	r1, #1
 80007cc:	2000      	movs	r0, #0
 80007ce:	f001 f888 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 80007d2:	2301      	movs	r3, #1
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2340      	movs	r3, #64	; 0x40
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	2000      	movs	r0, #0
 80007de:	f001 f880 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 80007e2:	2301      	movs	r3, #1
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2340      	movs	r3, #64	; 0x40
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	2100      	movs	r1, #0
 80007ec:	2080      	movs	r0, #128	; 0x80
 80007ee:	f001 f878 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 80007f2:	2301      	movs	r3, #1
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	2140      	movs	r1, #64	; 0x40
 80007fc:	2000      	movs	r0, #0
 80007fe:	f001 f870 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 8000802:	f000 ff0d 	bl	8001620 <SSD1306_UpdateScreen>
	}
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000408 	.word	0x20000408
 8000810:	20000000 	.word	0x20000000
 8000814:	0800a2e8 	.word	0x0800a2e8
 8000818:	0800a2f4 	.word	0x0800a2f4

0800081c <OLED_page_sc>:

/*! \brief Funkcja wyświetlająca ekran wyboru strony
 * 	Funkcja wyświetlająca ekran wyboru strony na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_page_sc(){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000822:	f001 ff4f 	bl	80026c4 <HAL_GetTick>
 8000826:	4602      	mov	r2, r0
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <OLED_page_sc+0xcc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000832:	d955      	bls.n	80008e0 <OLED_page_sc+0xc4>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000834:	2000      	movs	r0, #0
 8000836:	f000 ff21 	bl	800167c <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 800083a:	2106      	movs	r1, #6
 800083c:	2004      	movs	r0, #4
 800083e:	f000 ff95 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Puts ("--MHS--", &Font_11x18, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	4929      	ldr	r1, [pc, #164]	; (80008ec <OLED_page_sc+0xd0>)
 8000846:	482a      	ldr	r0, [pc, #168]	; (80008f0 <OLED_page_sc+0xd4>)
 8000848:	f001 f826 	bl	8001898 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 800084c:	2119      	movs	r1, #25
 800084e:	2004      	movs	r0, #4
 8000850:	f000 ff8c 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Puts ("PAGE", &Font_11x18, 1);
 8000854:	2201      	movs	r2, #1
 8000856:	4925      	ldr	r1, [pc, #148]	; (80008ec <OLED_page_sc+0xd0>)
 8000858:	4826      	ldr	r0, [pc, #152]	; (80008f4 <OLED_page_sc+0xd8>)
 800085a:	f001 f81d 	bl	8001898 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 800085e:	212c      	movs	r1, #44	; 0x2c
 8000860:	2004      	movs	r0, #4
 8000862:	f000 ff83 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Puts ("NUMBER:", &Font_11x18, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	4920      	ldr	r1, [pc, #128]	; (80008ec <OLED_page_sc+0xd0>)
 800086a:	4823      	ldr	r0, [pc, #140]	; (80008f8 <OLED_page_sc+0xdc>)
 800086c:	f001 f814 	bl	8001898 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000870:	2301      	movs	r3, #1
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2301      	movs	r3, #1
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	2101      	movs	r1, #1
 800087a:	2000      	movs	r0, #0
 800087c:	f001 f831 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000880:	2301      	movs	r3, #1
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2000      	movs	r0, #0
 800088c:	f001 f829 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000890:	2301      	movs	r3, #1
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	2100      	movs	r1, #0
 800089a:	2080      	movs	r0, #128	; 0x80
 800089c:	f001 f821 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 80008a0:	2301      	movs	r3, #1
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	2000      	movs	r0, #0
 80008ac:	f001 f819 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 80008b0:	2301      	movs	r3, #1
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	233e      	movs	r3, #62	; 0x3e
 80008b6:	221b      	movs	r2, #27
 80008b8:	2102      	movs	r1, #2
 80008ba:	2064      	movs	r0, #100	; 0x64
 80008bc:	f001 f90c 	bl	8001ad8 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 80008c0:	2119      	movs	r1, #25
 80008c2:	206e      	movs	r0, #110	; 0x6e
 80008c4:	f000 ff52 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Putc ((char)(pageNumber+'0'), &Font_11x18, 1);
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <OLED_page_sc+0xe0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	3330      	adds	r3, #48	; 0x30
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2201      	movs	r2, #1
 80008d4:	4905      	ldr	r1, [pc, #20]	; (80008ec <OLED_page_sc+0xd0>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 ff5e 	bl	8001798 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 80008dc:	f000 fea0 	bl	8001620 <SSD1306_UpdateScreen>
	}
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000040c 	.word	0x2000040c
 80008ec:	20000000 	.word	0x20000000
 80008f0:	0800a300 	.word	0x0800a300
 80008f4:	0800a308 	.word	0x0800a308
 80008f8:	0800a310 	.word	0x0800a310
 80008fc:	20000404 	.word	0x20000404

08000900 <OLED_login_sc>:

/*! \brief Funkcja wyświetlająca ekran logowania
 * 	Funkcja wyświetlająca ekran logowania na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_login_sc(){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000906:	f001 fedd 	bl	80026c4 <HAL_GetTick>
 800090a:	4602      	mov	r2, r0
 800090c:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <OLED_login_sc+0xc8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000916:	d954      	bls.n	80009c2 <OLED_login_sc+0xc2>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000918:	2000      	movs	r0, #0
 800091a:	f000 feaf 	bl	800167c <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 800091e:	2106      	movs	r1, #6
 8000920:	2004      	movs	r0, #4
 8000922:	f000 ff23 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Puts ("-ENTER-", &Font_11x18, 1);
 8000926:	2201      	movs	r2, #1
 8000928:	4928      	ldr	r1, [pc, #160]	; (80009cc <OLED_login_sc+0xcc>)
 800092a:	4829      	ldr	r0, [pc, #164]	; (80009d0 <OLED_login_sc+0xd0>)
 800092c:	f000 ffb4 	bl	8001898 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000930:	2119      	movs	r1, #25
 8000932:	2004      	movs	r0, #4
 8000934:	f000 ff1a 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Puts ("PASSWORD", &Font_11x18, 1);
 8000938:	2201      	movs	r2, #1
 800093a:	4924      	ldr	r1, [pc, #144]	; (80009cc <OLED_login_sc+0xcc>)
 800093c:	4825      	ldr	r0, [pc, #148]	; (80009d4 <OLED_login_sc+0xd4>)
 800093e:	f000 ffab 	bl	8001898 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 8000942:	212c      	movs	r1, #44	; 0x2c
 8000944:	2004      	movs	r0, #4
 8000946:	f000 ff11 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Puts ("TRIES:", &Font_11x18, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	491f      	ldr	r1, [pc, #124]	; (80009cc <OLED_login_sc+0xcc>)
 800094e:	4822      	ldr	r0, [pc, #136]	; (80009d8 <OLED_login_sc+0xd8>)
 8000950:	f000 ffa2 	bl	8001898 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000954:	2301      	movs	r3, #1
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	2101      	movs	r1, #1
 800095e:	2000      	movs	r0, #0
 8000960:	f000 ffbf 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000964:	2301      	movs	r3, #1
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2340      	movs	r3, #64	; 0x40
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2000      	movs	r0, #0
 8000970:	f000 ffb7 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000974:	2301      	movs	r3, #1
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	2100      	movs	r1, #0
 800097e:	2080      	movs	r0, #128	; 0x80
 8000980:	f000 ffaf 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000984:	2301      	movs	r3, #1
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2340      	movs	r3, #64	; 0x40
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	2140      	movs	r1, #64	; 0x40
 800098e:	2000      	movs	r0, #0
 8000990:	f000 ffa7 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 8000994:	2301      	movs	r3, #1
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	233e      	movs	r3, #62	; 0x3e
 800099a:	221b      	movs	r2, #27
 800099c:	2102      	movs	r1, #2
 800099e:	2064      	movs	r0, #100	; 0x64
 80009a0:	f001 f89a 	bl	8001ad8 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 80009a4:	2119      	movs	r1, #25
 80009a6:	206e      	movs	r0, #110	; 0x6e
 80009a8:	f000 fee0 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Putc ((char)(loginTries+'0'), &Font_11x18, 1);
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <OLED_login_sc+0xdc>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	3330      	adds	r3, #48	; 0x30
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2201      	movs	r2, #1
 80009b6:	4905      	ldr	r1, [pc, #20]	; (80009cc <OLED_login_sc+0xcc>)
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 feed 	bl	8001798 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 80009be:	f000 fe2f 	bl	8001620 <SSD1306_UpdateScreen>
	}
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000410 	.word	0x20000410
 80009cc:	20000000 	.word	0x20000000
 80009d0:	0800a318 	.word	0x0800a318
 80009d4:	0800a320 	.word	0x0800a320
 80009d8:	0800a32c 	.word	0x0800a32c
 80009dc:	20000092 	.word	0x20000092

080009e0 <OLED_block_sc>:

/*! \brief Funkcja wyświetlająca ekran blokady
 * 	Funkcja wyświetlająca ekran blokady na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_block_sc(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 80009e6:	f001 fe6d 	bl	80026c4 <HAL_GetTick>
 80009ea:	4602      	mov	r2, r0
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <OLED_block_sc+0x8c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009f6:	d936      	bls.n	8000a66 <OLED_block_sc+0x86>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 fe3f 	bl	800167c <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 80009fe:	2106      	movs	r1, #6
 8000a00:	2004      	movs	r0, #4
 8000a02:	f000 feb3 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Puts ("- DEVICE  -", &Font_11x18, 1);
 8000a06:	2201      	movs	r2, #1
 8000a08:	4919      	ldr	r1, [pc, #100]	; (8000a70 <OLED_block_sc+0x90>)
 8000a0a:	481a      	ldr	r0, [pc, #104]	; (8000a74 <OLED_block_sc+0x94>)
 8000a0c:	f000 ff44 	bl	8001898 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000a10:	2119      	movs	r1, #25
 8000a12:	2004      	movs	r0, #4
 8000a14:	f000 feaa 	bl	800176c <SSD1306_GotoXY>
		SSD1306_Puts ("- BLOCKED -", &Font_11x18, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4915      	ldr	r1, [pc, #84]	; (8000a70 <OLED_block_sc+0x90>)
 8000a1c:	4816      	ldr	r0, [pc, #88]	; (8000a78 <OLED_block_sc+0x98>)
 8000a1e:	f000 ff3b 	bl	8001898 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000a22:	2301      	movs	r3, #1
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	2301      	movs	r3, #1
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 ff58 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000a32:	2301      	movs	r3, #1
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2340      	movs	r3, #64	; 0x40
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f000 ff50 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000a42:	2301      	movs	r3, #1
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2340      	movs	r3, #64	; 0x40
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2080      	movs	r0, #128	; 0x80
 8000a4e:	f000 ff48 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000a52:	2301      	movs	r3, #1
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 ff40 	bl	80018e2 <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 8000a62:	f000 fddd 	bl	8001620 <SSD1306_UpdateScreen>
	}
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000414 	.word	0x20000414
 8000a70:	20000000 	.word	0x20000000
 8000a74:	0800a334 	.word	0x0800a334
 8000a78:	0800a340 	.word	0x0800a340

08000a7c <sendUSB>:

/*! \brief Funkcja przesyłająca hasło do komputera po USB
 * 	Funkcja dostaje tablice znaków char, którą po literze wysyła do komputera poprzez połączenie USB
 */
void sendUSB(uint8_t *pass){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	while(*pass != '\0'){
 8000a84:	e066      	b.n	8000b54 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e060      	b.n	8000b4e <sendUSB+0xd2>
			if(*pass == keys[i].value){
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7819      	ldrb	r1, [r3, #0]
 8000a90:	4834      	ldr	r0, [pc, #208]	; (8000b64 <sendUSB+0xe8>)
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	4403      	add	r3, r0
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4299      	cmp	r1, r3
 8000aa2:	d11f      	bne.n	8000ae4 <sendUSB+0x68>
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000aa4:	492f      	ldr	r1, [pc, #188]	; (8000b64 <sendUSB+0xe8>)
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <sendUSB+0xec>)
 8000ab4:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	492b      	ldr	r1, [pc, #172]	; (8000b68 <sendUSB+0xec>)
 8000aba:	482c      	ldr	r0, [pc, #176]	; (8000b6c <sendUSB+0xf0>)
 8000abc:	f007 fc3a 	bl	8008334 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000ac0:	2032      	movs	r0, #50	; 0x32
 8000ac2:	f001 fe0b 	bl	80026dc <HAL_Delay>
				keyboardhid.KEYCODE1 = 0x00;
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <sendUSB+0xec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000acc:	2208      	movs	r2, #8
 8000ace:	4926      	ldr	r1, [pc, #152]	; (8000b68 <sendUSB+0xec>)
 8000ad0:	4826      	ldr	r0, [pc, #152]	; (8000b6c <sendUSB+0xf0>)
 8000ad2:	f007 fc2f 	bl	8008334 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000ad6:	2032      	movs	r0, #50	; 0x32
 8000ad8:	f001 fe00 	bl	80026dc <HAL_Delay>
				pass++;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	607b      	str	r3, [r7, #4]
				break;
 8000ae2:	e037      	b.n	8000b54 <sendUSB+0xd8>
			}
			else if(*pass == keys[i].shiftValue){
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7819      	ldrb	r1, [r3, #0]
 8000ae8:	481e      	ldr	r0, [pc, #120]	; (8000b64 <sendUSB+0xe8>)
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	4403      	add	r3, r0
 8000af4:	3302      	adds	r3, #2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d125      	bne.n	8000b48 <sendUSB+0xcc>
				keyboardhid.MODIFIER = 0x02;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <sendUSB+0xec>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000b02:	4918      	ldr	r1, [pc, #96]	; (8000b64 <sendUSB+0xe8>)
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4613      	mov	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4413      	add	r3, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <sendUSB+0xec>)
 8000b12:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b14:	2208      	movs	r2, #8
 8000b16:	4914      	ldr	r1, [pc, #80]	; (8000b68 <sendUSB+0xec>)
 8000b18:	4814      	ldr	r0, [pc, #80]	; (8000b6c <sendUSB+0xf0>)
 8000b1a:	f007 fc0b 	bl	8008334 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000b1e:	2032      	movs	r0, #50	; 0x32
 8000b20:	f001 fddc 	bl	80026dc <HAL_Delay>
				keyboardhid.MODIFIER = 0x00;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <sendUSB+0xec>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = 0x00;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <sendUSB+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b30:	2208      	movs	r2, #8
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <sendUSB+0xec>)
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <sendUSB+0xf0>)
 8000b36:	f007 fbfd 	bl	8008334 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000b3a:	2032      	movs	r0, #50	; 0x32
 8000b3c:	f001 fdce 	bl	80026dc <HAL_Delay>
				pass++;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3301      	adds	r3, #1
 8000b44:	607b      	str	r3, [r7, #4]
				break;
 8000b46:	e005      	b.n	8000b54 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2b2e      	cmp	r3, #46	; 0x2e
 8000b52:	dd9b      	ble.n	8000a8c <sendUSB+0x10>
	while(*pass != '\0'){
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d194      	bne.n	8000a86 <sendUSB+0xa>
			}
		}
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000008 	.word	0x20000008
 8000b68:	200003f8 	.word	0x200003f8
 8000b6c:	20000a3c 	.word	0x20000a3c

08000b70 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	b09b      	sub	sp, #108	; 0x6c
 8000b74:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b76:	f001 fd3f 	bl	80025f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b7a:	f000 fa6d 	bl	8001058 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b7e:	f7ff fcb3 	bl	80004e8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b82:	f7ff fd5b 	bl	800063c <MX_I2C1_Init>
	MX_SPI3_Init();
 8000b86:	f000 fc09 	bl	800139c <MX_SPI3_Init>
	MX_TIM2_Init();
 8000b8a:	f001 f955 	bl	8001e38 <MX_TIM2_Init>
	if(HAL_GPIO_ReadPin(ROT_BUT_GPIO_Port, ROT_BUT_Pin)){
 8000b8e:	2102      	movs	r1, #2
 8000b90:	48b0      	ldr	r0, [pc, #704]	; (8000e54 <main+0x2e4>)
 8000b92:	f002 f859 	bl	8002c48 <HAL_GPIO_ReadPin>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <main+0x3a>
		MX_USB_DEVICE_Init(0);
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f008 fd43 	bl	8009628 <MX_USB_DEVICE_Init>
		deviceFLAG = 0;
 8000ba2:	4bad      	ldr	r3, [pc, #692]	; (8000e58 <main+0x2e8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e005      	b.n	8000bb6 <main+0x46>
	}else{
		MX_USB_DEVICE_Init(1);
 8000baa:	2001      	movs	r0, #1
 8000bac:	f008 fd3c 	bl	8009628 <MX_USB_DEVICE_Init>
		deviceFLAG = 1;
 8000bb0:	4ba9      	ldr	r3, [pc, #676]	; (8000e58 <main+0x2e8>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE BEGIN 2 */

	//---- Inicjalizacja wyświetlacza OLED ----
	SSD1306_Init();
 8000bb6:	f000 fc6f 	bl	8001498 <SSD1306_Init>

	//---- Inicjalizacja obsługi enkodera ----
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000bba:	213c      	movs	r1, #60	; 0x3c
 8000bbc:	48a7      	ldr	r0, [pc, #668]	; (8000e5c <main+0x2ec>)
 8000bbe:	f005 f98b 	bl	8005ed8 <HAL_TIM_Encoder_Start_IT>

	//---- Inicjalizacja pamięci FLASH ----
	W25qxx_Init();
 8000bc2:	f001 faed 	bl	80021a0 <W25qxx_Init>
	//---- Wypełnianie pamięci domyślnymi hasłami ----
	W25qxx_EraseChip();
 8000bc6:	f001 fbb7 	bl	8002338 <W25qxx_EraseChip>
	memcpy(passwordWrite, "123456\0", sizeof(passwordWrite));
 8000bca:	4ba5      	ldr	r3, [pc, #660]	; (8000e60 <main+0x2f0>)
 8000bcc:	4aa5      	ldr	r2, [pc, #660]	; (8000e64 <main+0x2f4>)
 8000bce:	4614      	mov	r4, r2
 8000bd0:	469c      	mov	ip, r3
 8000bd2:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000bd6:	4665      	mov	r5, ip
 8000bd8:	4626      	mov	r6, r4
 8000bda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bdc:	6028      	str	r0, [r5, #0]
 8000bde:	6069      	str	r1, [r5, #4]
 8000be0:	60aa      	str	r2, [r5, #8]
 8000be2:	60eb      	str	r3, [r5, #12]
 8000be4:	3410      	adds	r4, #16
 8000be6:	f10c 0c10 	add.w	ip, ip, #16
 8000bea:	4574      	cmp	r4, lr
 8000bec:	d1f3      	bne.n	8000bd6 <main+0x66>
	XORCipher(passwordWrite, cipherKey);
 8000bee:	499e      	ldr	r1, [pc, #632]	; (8000e68 <main+0x2f8>)
 8000bf0:	489b      	ldr	r0, [pc, #620]	; (8000e60 <main+0x2f0>)
 8000bf2:	f7ff fd99 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 1, 0, 64);
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4898      	ldr	r0, [pc, #608]	; (8000e60 <main+0x2f0>)
 8000bfe:	f001 fbcb 	bl	8002398 <W25qxx_WritePage>
	memcpy(passwordWrite, "654321\0", sizeof(passwordWrite));
 8000c02:	4b97      	ldr	r3, [pc, #604]	; (8000e60 <main+0x2f0>)
 8000c04:	4a99      	ldr	r2, [pc, #612]	; (8000e6c <main+0x2fc>)
 8000c06:	4614      	mov	r4, r2
 8000c08:	469c      	mov	ip, r3
 8000c0a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000c0e:	4665      	mov	r5, ip
 8000c10:	4626      	mov	r6, r4
 8000c12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c14:	6028      	str	r0, [r5, #0]
 8000c16:	6069      	str	r1, [r5, #4]
 8000c18:	60aa      	str	r2, [r5, #8]
 8000c1a:	60eb      	str	r3, [r5, #12]
 8000c1c:	3410      	adds	r4, #16
 8000c1e:	f10c 0c10 	add.w	ip, ip, #16
 8000c22:	4574      	cmp	r4, lr
 8000c24:	d1f3      	bne.n	8000c0e <main+0x9e>
	XORCipher(passwordWrite, cipherKey);
 8000c26:	4990      	ldr	r1, [pc, #576]	; (8000e68 <main+0x2f8>)
 8000c28:	488d      	ldr	r0, [pc, #564]	; (8000e60 <main+0x2f0>)
 8000c2a:	f7ff fd7d 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 2, 0, 64);
 8000c2e:	2340      	movs	r3, #64	; 0x40
 8000c30:	2200      	movs	r2, #0
 8000c32:	2102      	movs	r1, #2
 8000c34:	488a      	ldr	r0, [pc, #552]	; (8000e60 <main+0x2f0>)
 8000c36:	f001 fbaf 	bl	8002398 <W25qxx_WritePage>
	memcpy(passwordWrite, "HaloHalo\0", sizeof(passwordWrite));
 8000c3a:	4b89      	ldr	r3, [pc, #548]	; (8000e60 <main+0x2f0>)
 8000c3c:	4a8c      	ldr	r2, [pc, #560]	; (8000e70 <main+0x300>)
 8000c3e:	4614      	mov	r4, r2
 8000c40:	469c      	mov	ip, r3
 8000c42:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000c46:	4665      	mov	r5, ip
 8000c48:	4626      	mov	r6, r4
 8000c4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c4c:	6028      	str	r0, [r5, #0]
 8000c4e:	6069      	str	r1, [r5, #4]
 8000c50:	60aa      	str	r2, [r5, #8]
 8000c52:	60eb      	str	r3, [r5, #12]
 8000c54:	3410      	adds	r4, #16
 8000c56:	f10c 0c10 	add.w	ip, ip, #16
 8000c5a:	4574      	cmp	r4, lr
 8000c5c:	d1f3      	bne.n	8000c46 <main+0xd6>
	XORCipher(passwordWrite, cipherKey);
 8000c5e:	4982      	ldr	r1, [pc, #520]	; (8000e68 <main+0x2f8>)
 8000c60:	487f      	ldr	r0, [pc, #508]	; (8000e60 <main+0x2f0>)
 8000c62:	f7ff fd61 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 3, 0, 64);
 8000c66:	2340      	movs	r3, #64	; 0x40
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	487c      	ldr	r0, [pc, #496]	; (8000e60 <main+0x2f0>)
 8000c6e:	f001 fb93 	bl	8002398 <W25qxx_WritePage>
	memcpy(passwordWrite, "Cartoon-Duck-14-Coffee-Glvs\0", sizeof(passwordWrite));
 8000c72:	4b7b      	ldr	r3, [pc, #492]	; (8000e60 <main+0x2f0>)
 8000c74:	4a7f      	ldr	r2, [pc, #508]	; (8000e74 <main+0x304>)
 8000c76:	4614      	mov	r4, r2
 8000c78:	469c      	mov	ip, r3
 8000c7a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000c7e:	4665      	mov	r5, ip
 8000c80:	4626      	mov	r6, r4
 8000c82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c84:	6028      	str	r0, [r5, #0]
 8000c86:	6069      	str	r1, [r5, #4]
 8000c88:	60aa      	str	r2, [r5, #8]
 8000c8a:	60eb      	str	r3, [r5, #12]
 8000c8c:	3410      	adds	r4, #16
 8000c8e:	f10c 0c10 	add.w	ip, ip, #16
 8000c92:	4574      	cmp	r4, lr
 8000c94:	d1f3      	bne.n	8000c7e <main+0x10e>
	XORCipher(passwordWrite, cipherKey);
 8000c96:	4974      	ldr	r1, [pc, #464]	; (8000e68 <main+0x2f8>)
 8000c98:	4871      	ldr	r0, [pc, #452]	; (8000e60 <main+0x2f0>)
 8000c9a:	f7ff fd45 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 4, 0, 64);
 8000c9e:	2340      	movs	r3, #64	; 0x40
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	486e      	ldr	r0, [pc, #440]	; (8000e60 <main+0x2f0>)
 8000ca6:	f001 fb77 	bl	8002398 <W25qxx_WritePage>
	memcpy(passwordWrite, "doubleclick\0", sizeof(passwordWrite));
 8000caa:	4b6d      	ldr	r3, [pc, #436]	; (8000e60 <main+0x2f0>)
 8000cac:	4a72      	ldr	r2, [pc, #456]	; (8000e78 <main+0x308>)
 8000cae:	4614      	mov	r4, r2
 8000cb0:	469c      	mov	ip, r3
 8000cb2:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000cb6:	4665      	mov	r5, ip
 8000cb8:	4626      	mov	r6, r4
 8000cba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cbc:	6028      	str	r0, [r5, #0]
 8000cbe:	6069      	str	r1, [r5, #4]
 8000cc0:	60aa      	str	r2, [r5, #8]
 8000cc2:	60eb      	str	r3, [r5, #12]
 8000cc4:	3410      	adds	r4, #16
 8000cc6:	f10c 0c10 	add.w	ip, ip, #16
 8000cca:	4574      	cmp	r4, lr
 8000ccc:	d1f3      	bne.n	8000cb6 <main+0x146>
	XORCipher(passwordWrite, cipherKey);
 8000cce:	4966      	ldr	r1, [pc, #408]	; (8000e68 <main+0x2f8>)
 8000cd0:	4863      	ldr	r0, [pc, #396]	; (8000e60 <main+0x2f0>)
 8000cd2:	f7ff fd29 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 5, 0, 64);
 8000cd6:	2340      	movs	r3, #64	; 0x40
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2105      	movs	r1, #5
 8000cdc:	4860      	ldr	r0, [pc, #384]	; (8000e60 <main+0x2f0>)
 8000cde:	f001 fb5b 	bl	8002398 <W25qxx_WritePage>
	memcpy(passwordWrite, "supersecure\0", sizeof(passwordWrite));
 8000ce2:	4b5f      	ldr	r3, [pc, #380]	; (8000e60 <main+0x2f0>)
 8000ce4:	4a65      	ldr	r2, [pc, #404]	; (8000e7c <main+0x30c>)
 8000ce6:	4614      	mov	r4, r2
 8000ce8:	469c      	mov	ip, r3
 8000cea:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000cee:	4665      	mov	r5, ip
 8000cf0:	4626      	mov	r6, r4
 8000cf2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cf4:	6028      	str	r0, [r5, #0]
 8000cf6:	6069      	str	r1, [r5, #4]
 8000cf8:	60aa      	str	r2, [r5, #8]
 8000cfa:	60eb      	str	r3, [r5, #12]
 8000cfc:	3410      	adds	r4, #16
 8000cfe:	f10c 0c10 	add.w	ip, ip, #16
 8000d02:	4574      	cmp	r4, lr
 8000d04:	d1f3      	bne.n	8000cee <main+0x17e>
	XORCipher(passwordWrite, cipherKey);
 8000d06:	4958      	ldr	r1, [pc, #352]	; (8000e68 <main+0x2f8>)
 8000d08:	4855      	ldr	r0, [pc, #340]	; (8000e60 <main+0x2f0>)
 8000d0a:	f7ff fd0d 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 6, 0, 64);
 8000d0e:	2340      	movs	r3, #64	; 0x40
 8000d10:	2200      	movs	r2, #0
 8000d12:	2106      	movs	r1, #6
 8000d14:	4852      	ldr	r0, [pc, #328]	; (8000e60 <main+0x2f0>)
 8000d16:	f001 fb3f 	bl	8002398 <W25qxx_WritePage>
	memcpy(passwordWrite, "Qwerty\0", sizeof(passwordWrite));
 8000d1a:	4b51      	ldr	r3, [pc, #324]	; (8000e60 <main+0x2f0>)
 8000d1c:	4a58      	ldr	r2, [pc, #352]	; (8000e80 <main+0x310>)
 8000d1e:	4614      	mov	r4, r2
 8000d20:	469c      	mov	ip, r3
 8000d22:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000d26:	4665      	mov	r5, ip
 8000d28:	4626      	mov	r6, r4
 8000d2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d2c:	6028      	str	r0, [r5, #0]
 8000d2e:	6069      	str	r1, [r5, #4]
 8000d30:	60aa      	str	r2, [r5, #8]
 8000d32:	60eb      	str	r3, [r5, #12]
 8000d34:	3410      	adds	r4, #16
 8000d36:	f10c 0c10 	add.w	ip, ip, #16
 8000d3a:	4574      	cmp	r4, lr
 8000d3c:	d1f3      	bne.n	8000d26 <main+0x1b6>
	XORCipher(passwordWrite, cipherKey);
 8000d3e:	494a      	ldr	r1, [pc, #296]	; (8000e68 <main+0x2f8>)
 8000d40:	4847      	ldr	r0, [pc, #284]	; (8000e60 <main+0x2f0>)
 8000d42:	f7ff fcf1 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 7, 0, 64);
 8000d46:	2340      	movs	r3, #64	; 0x40
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2107      	movs	r1, #7
 8000d4c:	4844      	ldr	r0, [pc, #272]	; (8000e60 <main+0x2f0>)
 8000d4e:	f001 fb23 	bl	8002398 <W25qxx_WritePage>
	memcpy(passwordWrite, "DEFAULT\0", sizeof(passwordWrite));
 8000d52:	4b43      	ldr	r3, [pc, #268]	; (8000e60 <main+0x2f0>)
 8000d54:	4a4b      	ldr	r2, [pc, #300]	; (8000e84 <main+0x314>)
 8000d56:	4614      	mov	r4, r2
 8000d58:	469c      	mov	ip, r3
 8000d5a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000d5e:	4665      	mov	r5, ip
 8000d60:	4626      	mov	r6, r4
 8000d62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d64:	6028      	str	r0, [r5, #0]
 8000d66:	6069      	str	r1, [r5, #4]
 8000d68:	60aa      	str	r2, [r5, #8]
 8000d6a:	60eb      	str	r3, [r5, #12]
 8000d6c:	3410      	adds	r4, #16
 8000d6e:	f10c 0c10 	add.w	ip, ip, #16
 8000d72:	4574      	cmp	r4, lr
 8000d74:	d1f3      	bne.n	8000d5e <main+0x1ee>
	XORCipher(passwordWrite, cipherKey);
 8000d76:	493c      	ldr	r1, [pc, #240]	; (8000e68 <main+0x2f8>)
 8000d78:	4839      	ldr	r0, [pc, #228]	; (8000e60 <main+0x2f0>)
 8000d7a:	f7ff fcd5 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 8, 0, 64);
 8000d7e:	2340      	movs	r3, #64	; 0x40
 8000d80:	2200      	movs	r2, #0
 8000d82:	2108      	movs	r1, #8
 8000d84:	4836      	ldr	r0, [pc, #216]	; (8000e60 <main+0x2f0>)
 8000d86:	f001 fb07 	bl	8002398 <W25qxx_WritePage>
	memcpy(passwordWrite, "password\0", sizeof(passwordWrite));
 8000d8a:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <main+0x2f0>)
 8000d8c:	4a3e      	ldr	r2, [pc, #248]	; (8000e88 <main+0x318>)
 8000d8e:	4614      	mov	r4, r2
 8000d90:	469c      	mov	ip, r3
 8000d92:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000d96:	4665      	mov	r5, ip
 8000d98:	4626      	mov	r6, r4
 8000d9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d9c:	6028      	str	r0, [r5, #0]
 8000d9e:	6069      	str	r1, [r5, #4]
 8000da0:	60aa      	str	r2, [r5, #8]
 8000da2:	60eb      	str	r3, [r5, #12]
 8000da4:	3410      	adds	r4, #16
 8000da6:	f10c 0c10 	add.w	ip, ip, #16
 8000daa:	4574      	cmp	r4, lr
 8000dac:	d1f3      	bne.n	8000d96 <main+0x226>
	XORCipher(passwordWrite, cipherKey);
 8000dae:	492e      	ldr	r1, [pc, #184]	; (8000e68 <main+0x2f8>)
 8000db0:	482b      	ldr	r0, [pc, #172]	; (8000e60 <main+0x2f0>)
 8000db2:	f7ff fcb9 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 9, 0, 64);
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	2200      	movs	r2, #0
 8000dba:	2109      	movs	r1, #9
 8000dbc:	4828      	ldr	r0, [pc, #160]	; (8000e60 <main+0x2f0>)
 8000dbe:	f001 faeb 	bl	8002398 <W25qxx_WritePage>
	memcpy(passwordWrite, "0\0", sizeof(passwordWrite));
	XORCipher(passwordWrite, cipherKey);
	W25qxx_WritePage(passwordWrite, 10, 0, 64);
	*/
	//---- Inicjalizacja obsługi macierzy przycisków
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	4831      	ldr	r0, [pc, #196]	; (8000e8c <main+0x31c>)
 8000dc8:	f001 ff56 	bl	8002c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2140      	movs	r1, #64	; 0x40
 8000dd0:	482e      	ldr	r0, [pc, #184]	; (8000e8c <main+0x31c>)
 8000dd2:	f001 ff51 	bl	8002c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	482c      	ldr	r0, [pc, #176]	; (8000e8c <main+0x31c>)
 8000ddc:	f001 ff4c 	bl	8002c78 <HAL_GPIO_WritePin>

	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de6:	481b      	ldr	r0, [pc, #108]	; (8000e54 <main+0x2e4>)
 8000de8:	f001 ff46 	bl	8002c78 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(deviceFLAG){  // Tryb urządzenia Virtual COM do zapisywania przesłanych haseł
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <main+0x2e8>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 80a0 	beq.w	8000f36 <main+0x3c6>
			OLED_write_sc();
 8000df6:	f7ff fcc3 	bl	8000780 <OLED_write_sc>
			uint8_t Text[] = "WRITE MODE -> len:nr:password\r\n";
 8000dfa:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <main+0x320>)
 8000dfc:	1d3c      	adds	r4, r7, #4
 8000dfe:	461d      	mov	r5, r3
 8000e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			CDC_Transmit_FS(Text,strlen(Text)); /*when commented the port is recognized*/
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff f9e2 	bl	80001d8 <strlen>
 8000e14:	4602      	mov	r2, r0
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f008 fd06 	bl	800982c <CDC_Transmit_FS>
			if(ReceivedDataFlag == 1){
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <main+0x324>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	f040 8081 	bne.w	8000f2c <main+0x3bc>
				ReceivedDataFlag = 0;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <main+0x324>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
				//MessageLength = sprintf(DataToSend, "Odebrano: %s\n\r", ReceivedData);
				//CDC_Transmit_FS(DataToSend, MessageLength);
				uint8_t text[64];
				ReceivedPassNr = (ReceivedData[0] - '0') * 10 + (ReceivedData[1] - '0');
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <main+0x328>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <main+0x328>)
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	4413      	add	r3, r2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3b10      	subs	r3, #16
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <main+0x32c>)
 8000e4c:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<strlen(ReceivedData)-3; i++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	667b      	str	r3, [r7, #100]	; 0x64
 8000e52:	e032      	b.n	8000eba <main+0x34a>
 8000e54:	40020400 	.word	0x40020400
 8000e58:	200003cc 	.word	0x200003cc
 8000e5c:	200009d0 	.word	0x200009d0
 8000e60:	200008f0 	.word	0x200008f0
 8000e64:	0800a34c 	.word	0x0800a34c
 8000e68:	20000098 	.word	0x20000098
 8000e6c:	0800a354 	.word	0x0800a354
 8000e70:	0800a35c 	.word	0x0800a35c
 8000e74:	0800a368 	.word	0x0800a368
 8000e78:	0800a388 	.word	0x0800a388
 8000e7c:	0800a398 	.word	0x0800a398
 8000e80:	0800a3a8 	.word	0x0800a3a8
 8000e84:	0800a3b0 	.word	0x0800a3b0
 8000e88:	0800a3bc 	.word	0x0800a3bc
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	0800a3c8 	.word	0x0800a3c8
 8000e94:	20000400 	.word	0x20000400
 8000e98:	20000934 	.word	0x20000934
 8000e9c:	20000974 	.word	0x20000974
					text[i] = ReceivedData[i+3];
 8000ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ea2:	3303      	adds	r3, #3
 8000ea4:	4a5f      	ldr	r2, [pc, #380]	; (8001024 <main+0x4b4>)
 8000ea6:	5cd1      	ldrb	r1, [r2, r3]
 8000ea8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000eae:	4413      	add	r3, r2
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<strlen(ReceivedData)-3; i++){
 8000eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	667b      	str	r3, [r7, #100]	; 0x64
 8000eba:	485a      	ldr	r0, [pc, #360]	; (8001024 <main+0x4b4>)
 8000ebc:	f7ff f98c 	bl	80001d8 <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	1eda      	subs	r2, r3, #3
 8000ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d8ea      	bhi.n	8000ea0 <main+0x330>
				}
				text[strlen(ReceivedData)-3] = '\0';
 8000eca:	4856      	ldr	r0, [pc, #344]	; (8001024 <main+0x4b4>)
 8000ecc:	f7ff f984 	bl	80001d8 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	3b03      	subs	r3, #3
 8000ed4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000ed8:	4413      	add	r3, r2
 8000eda:	2200      	movs	r2, #0
 8000edc:	f803 2c44 	strb.w	r2, [r3, #-68]
				memcpy(passwordWrite, text, sizeof(passwordWrite));
 8000ee0:	4b51      	ldr	r3, [pc, #324]	; (8001028 <main+0x4b8>)
 8000ee2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000eec:	4665      	mov	r5, ip
 8000eee:	4626      	mov	r6, r4
 8000ef0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ef2:	6028      	str	r0, [r5, #0]
 8000ef4:	6069      	str	r1, [r5, #4]
 8000ef6:	60aa      	str	r2, [r5, #8]
 8000ef8:	60eb      	str	r3, [r5, #12]
 8000efa:	3410      	adds	r4, #16
 8000efc:	f10c 0c10 	add.w	ip, ip, #16
 8000f00:	4574      	cmp	r4, lr
 8000f02:	d1f3      	bne.n	8000eec <main+0x37c>
				XORCipher(passwordWrite, cipherKey);
 8000f04:	4949      	ldr	r1, [pc, #292]	; (800102c <main+0x4bc>)
 8000f06:	4848      	ldr	r0, [pc, #288]	; (8001028 <main+0x4b8>)
 8000f08:	f7ff fc0e 	bl	8000728 <XORCipher>
				W25qxx_WritePage(passwordWrite, (uint32_t)ReceivedPassNr, 0, 64);
 8000f0c:	4b48      	ldr	r3, [pc, #288]	; (8001030 <main+0x4c0>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	2340      	movs	r3, #64	; 0x40
 8000f14:	2200      	movs	r2, #0
 8000f16:	4844      	ldr	r0, [pc, #272]	; (8001028 <main+0x4b8>)
 8000f18:	f001 fa3e 	bl	8002398 <W25qxx_WritePage>
				memset(ReceivedData,0, 64);
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4840      	ldr	r0, [pc, #256]	; (8001024 <main+0x4b4>)
 8000f22:	f009 f912 	bl	800a14a <memset>
				ReceivedPassNr = 0;
 8000f26:	4b42      	ldr	r3, [pc, #264]	; (8001030 <main+0x4c0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
			}
			HAL_Delay(1000);
 8000f2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f30:	f001 fbd4 	bl	80026dc <HAL_Delay>
 8000f34:	e75a      	b.n	8000dec <main+0x27c>
		}else{ // Tryb urządzenia HID do odczytywania haseł
			if(deviceState == 0){ // Urządzenie zablokowane -> wpisywanie hasła urządzenia
 8000f36:	4b3f      	ldr	r3, [pc, #252]	; (8001034 <main+0x4c4>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d149      	bne.n	8000fd2 <main+0x462>
				OLED_login_sc();
 8000f3e:	f7ff fcdf 	bl	8000900 <OLED_login_sc>
				if(keyFlag){
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <main+0x4c8>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d010      	beq.n	8000f6e <main+0x3fe>
					loginBuff[loginCounter] = keyPressed;
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	; (800103c <main+0x4cc>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <main+0x4d0>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b2d9      	uxtb	r1, r3
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <main+0x4d4>)
 8000f5a:	5499      	strb	r1, [r3, r2]
					loginCounter++;
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <main+0x4cc>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b35      	ldr	r3, [pc, #212]	; (800103c <main+0x4cc>)
 8000f66:	701a      	strb	r2, [r3, #0]
					keyFlag = 0;
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <main+0x4c8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
				}
				if(loginCounter == 4){
 8000f6e:	4b33      	ldr	r3, [pc, #204]	; (800103c <main+0x4cc>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d124      	bne.n	8000fc0 <main+0x450>
					if(login[0] == loginBuff[0] && login[1] == loginBuff[1] && login[2] == loginBuff[2] && login[3] == loginBuff[3]){
 8000f76:	4b34      	ldr	r3, [pc, #208]	; (8001048 <main+0x4d8>)
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <main+0x4d4>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d115      	bne.n	8000fae <main+0x43e>
 8000f82:	4b31      	ldr	r3, [pc, #196]	; (8001048 <main+0x4d8>)
 8000f84:	785a      	ldrb	r2, [r3, #1]
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <main+0x4d4>)
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d10f      	bne.n	8000fae <main+0x43e>
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <main+0x4d8>)
 8000f90:	789a      	ldrb	r2, [r3, #2]
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <main+0x4d4>)
 8000f94:	789b      	ldrb	r3, [r3, #2]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d109      	bne.n	8000fae <main+0x43e>
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <main+0x4d8>)
 8000f9c:	78da      	ldrb	r2, [r3, #3]
 8000f9e:	4b29      	ldr	r3, [pc, #164]	; (8001044 <main+0x4d4>)
 8000fa0:	78db      	ldrb	r3, [r3, #3]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d103      	bne.n	8000fae <main+0x43e>
						deviceState = 1;
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <main+0x4c4>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e008      	b.n	8000fc0 <main+0x450>
					}else{
						loginCounter = 0;
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <main+0x4cc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
						loginTries--;
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <main+0x4dc>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <main+0x4dc>)
 8000fbe:	701a      	strb	r2, [r3, #0]
					}
				}
				if(loginTries == 0){
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <main+0x4dc>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f47f af11 	bne.w	8000dec <main+0x27c>
					deviceState = 99;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <main+0x4c4>)
 8000fcc:	2263      	movs	r2, #99	; 0x63
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	e70c      	b.n	8000dec <main+0x27c>
				}
			}
			else if(deviceState == 99){ // Urządzenie całkowicie zablokowane
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <main+0x4c4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b63      	cmp	r3, #99	; 0x63
 8000fd8:	d102      	bne.n	8000fe0 <main+0x470>
				OLED_block_sc();
 8000fda:	f7ff fd01 	bl	80009e0 <OLED_block_sc>
 8000fde:	e705      	b.n	8000dec <main+0x27c>
			}
			else{ // Urządzenie odblokowane -> odczyt haseł
				OLED_page_sc();
 8000fe0:	f7ff fc1c 	bl	800081c <OLED_page_sc>
				if(keyFlag){
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <main+0x4c8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f43f aefe 	beq.w	8000dec <main+0x27c>
					W25qxx_ReadPage(passwordRead, pageNumber*9+keyPressed, 0, 64);
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <main+0x4e0>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a11      	ldr	r2, [pc, #68]	; (8001040 <main+0x4d0>)
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	1899      	adds	r1, r3, r2
 8001002:	2340      	movs	r3, #64	; 0x40
 8001004:	2200      	movs	r2, #0
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <main+0x4e4>)
 8001008:	f001 fa4c 	bl	80024a4 <W25qxx_ReadPage>
					XORCipher(passwordRead, cipherKey);
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <main+0x4bc>)
 800100e:	4811      	ldr	r0, [pc, #68]	; (8001054 <main+0x4e4>)
 8001010:	f7ff fb8a 	bl	8000728 <XORCipher>
					sendUSB(passwordRead);
 8001014:	480f      	ldr	r0, [pc, #60]	; (8001054 <main+0x4e4>)
 8001016:	f7ff fd31 	bl	8000a7c <sendUSB>
					keyFlag = 0;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <main+0x4c8>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
		if(deviceFLAG){  // Tryb urządzenia Virtual COM do zapisywania przesłanych haseł
 8001020:	e6e4      	b.n	8000dec <main+0x27c>
 8001022:	bf00      	nop
 8001024:	20000934 	.word	0x20000934
 8001028:	200008f0 	.word	0x200008f0
 800102c:	20000098 	.word	0x20000098
 8001030:	20000974 	.word	0x20000974
 8001034:	200003cd 	.word	0x200003cd
 8001038:	200003e5 	.word	0x200003e5
 800103c:	200003ce 	.word	0x200003ce
 8001040:	200003e4 	.word	0x200003e4
 8001044:	20000930 	.word	0x20000930
 8001048:	20000094 	.word	0x20000094
 800104c:	20000092 	.word	0x20000092
 8001050:	20000404 	.word	0x20000404
 8001054:	200008b0 	.word	0x200008b0

08001058 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f009 f86f 	bl	800a14a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <SystemClock_Config+0xc8>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a26      	ldr	r2, [pc, #152]	; (8001120 <SystemClock_Config+0xc8>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <SystemClock_Config+0xc8>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <SystemClock_Config+0xcc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a20      	ldr	r2, [pc, #128]	; (8001124 <SystemClock_Config+0xcc>)
 80010a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <SystemClock_Config+0xcc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80010c8:	2319      	movs	r3, #25
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 80010cc:	23c0      	movs	r3, #192	; 0xc0
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d4:	2304      	movs	r3, #4
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0320 	add.w	r3, r7, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fced 	bl	8004abc <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x94>
	{
		Error_Handler();
 80010e8:	f000 f950 	bl	800138c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ec:	230f      	movs	r3, #15
 80010ee:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f0:	2302      	movs	r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2103      	movs	r1, #3
 8001108:	4618      	mov	r0, r3
 800110a:	f003 ff47 	bl	8004f9c <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8001114:	f000 f93a 	bl	800138c <Error_Handler>
	}
}
 8001118:	bf00      	nop
 800111a:	3750      	adds	r7, #80	; 0x50
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000

08001128 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001138:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	b21a      	sxth	r2, r3
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001142:	801a      	strh	r2, [r3, #0]
	if(count - old_count > 5)
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114a:	461a      	mov	r2, r3
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_TIM_IC_CaptureCallback+0x94>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b05      	cmp	r3, #5
 8001156:	dd0e      	ble.n	8001176 <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(pageNumber > 0)
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x98>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <HAL_TIM_IC_CaptureCallback+0x42>
			pageNumber--;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3b01      	subs	r3, #1
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001168:	6013      	str	r3, [r2, #0]
		old_count = count;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_TIM_IC_CaptureCallback+0x90>)
 800116c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_TIM_IC_CaptureCallback+0x94>)
 8001172:	801a      	strh	r2, [r3, #0]
		if(pageNumber < 9)
			pageNumber++;
		old_count = count;
	}

}
 8001174:	e018      	b.n	80011a8 <HAL_TIM_IC_CaptureCallback+0x80>
	}else if(count - old_count < -5)
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117c:	461a      	mov	r2, r3
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_TIM_IC_CaptureCallback+0x94>)
 8001180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f113 0f05 	cmn.w	r3, #5
 800118a:	da0d      	bge.n	80011a8 <HAL_TIM_IC_CaptureCallback+0x80>
		if(pageNumber < 9)
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x98>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b08      	cmp	r3, #8
 8001192:	d804      	bhi.n	800119e <HAL_TIM_IC_CaptureCallback+0x76>
			pageNumber++;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x98>)
 800119c:	6013      	str	r3, [r2, #0]
		old_count = count;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_TIM_IC_CaptureCallback+0x90>)
 80011a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_TIM_IC_CaptureCallback+0x94>)
 80011a6:	801a      	strh	r2, [r3, #0]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	200003f0 	.word	0x200003f0
 80011b8:	200003f4 	.word	0x200003f4
 80011bc:	200003f6 	.word	0x200003f6
 80011c0:	20000404 	.word	0x20000404

080011c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80011ce:	f001 fa79 	bl	80026c4 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	4b66      	ldr	r3, [pc, #408]	; (8001370 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80011d6:	601a      	str	r2, [r3, #0]
	if(currentMillis - previousMillis > 300)
 80011d8:	4b65      	ldr	r3, [pc, #404]	; (8001370 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b65      	ldr	r3, [pc, #404]	; (8001374 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011e6:	f240 80be 	bls.w	8001366 <HAL_GPIO_EXTI_Callback+0x1a2>
	{
		GPIO_InitStructPrivate.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 80011ea:	4b63      	ldr	r3, [pc, #396]	; (8001378 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80011ec:	221c      	movs	r2, #28
 80011ee:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80011f0:	4b61      	ldr	r3, [pc, #388]	; (8001378 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80011f6:	4b60      	ldr	r3, [pc, #384]	; (8001378 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8001202:	495d      	ldr	r1, [pc, #372]	; (8001378 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001204:	485d      	ldr	r0, [pc, #372]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001206:	f001 fb9d 	bl	8002944 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	2120      	movs	r1, #32
 800120e:	485b      	ldr	r0, [pc, #364]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001210:	f001 fd32 	bl	8002c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2140      	movs	r1, #64	; 0x40
 8001218:	4858      	ldr	r0, [pc, #352]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800121a:	f001 fd2d 	bl	8002c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	4856      	ldr	r0, [pc, #344]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001224:	f001 fd28 	bl	8002c78 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8001228:	2110      	movs	r1, #16
 800122a:	4854      	ldr	r0, [pc, #336]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800122c:	f001 fd0c 	bl	8002c48 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_EXTI_Callback+0x7a>
			keyPressed = 1;
 8001236:	4b52      	ldr	r3, [pc, #328]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	e014      	b.n	8001268 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 800123e:	2108      	movs	r1, #8
 8001240:	484e      	ldr	r0, [pc, #312]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001242:	f001 fd01 	bl	8002c48 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_EXTI_Callback+0x90>
			keyPressed = 4;
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800124e:	2204      	movs	r2, #4
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	e009      	b.n	8001268 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8001254:	2104      	movs	r1, #4
 8001256:	4849      	ldr	r0, [pc, #292]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001258:	f001 fcf6 	bl	8002c48 <HAL_GPIO_ReadPin>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <HAL_GPIO_EXTI_Callback+0xa4>
			keyPressed = 7;
 8001262:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001264:	2207      	movs	r2, #7
 8001266:	701a      	strb	r2, [r3, #0]

		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2120      	movs	r1, #32
 800126c:	4843      	ldr	r0, [pc, #268]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800126e:	f001 fd03 	bl	8002c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	4841      	ldr	r0, [pc, #260]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001278:	f001 fcfe 	bl	8002c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	483e      	ldr	r0, [pc, #248]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001282:	f001 fcf9 	bl	8002c78 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8001286:	2110      	movs	r1, #16
 8001288:	483c      	ldr	r0, [pc, #240]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800128a:	f001 fcdd 	bl	8002c48 <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_EXTI_Callback+0xd8>
			keyPressed = 2;
 8001294:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001296:	2202      	movs	r2, #2
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e014      	b.n	80012c6 <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 800129c:	2108      	movs	r1, #8
 800129e:	4837      	ldr	r0, [pc, #220]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80012a0:	f001 fcd2 	bl	8002c48 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_EXTI_Callback+0xee>
			keyPressed = 5;
 80012aa:	4b35      	ldr	r3, [pc, #212]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80012ac:	2205      	movs	r2, #5
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e009      	b.n	80012c6 <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 80012b2:	2104      	movs	r1, #4
 80012b4:	4831      	ldr	r0, [pc, #196]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80012b6:	f001 fcc7 	bl	8002c48 <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <HAL_GPIO_EXTI_Callback+0x102>
			keyPressed = 8;
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80012c2:	2208      	movs	r2, #8
 80012c4:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2120      	movs	r1, #32
 80012ca:	482c      	ldr	r0, [pc, #176]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80012cc:	f001 fcd4 	bl	8002c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2140      	movs	r1, #64	; 0x40
 80012d4:	4829      	ldr	r0, [pc, #164]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80012d6:	f001 fccf 	bl	8002c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	4827      	ldr	r0, [pc, #156]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80012e0:	f001 fcca 	bl	8002c78 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 80012e4:	2110      	movs	r1, #16
 80012e6:	4825      	ldr	r0, [pc, #148]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80012e8:	f001 fcae 	bl	8002c48 <HAL_GPIO_ReadPin>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_EXTI_Callback+0x136>
			keyPressed = 3;
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80012f4:	2203      	movs	r2, #3
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	e014      	b.n	8001324 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 80012fa:	2108      	movs	r1, #8
 80012fc:	481f      	ldr	r0, [pc, #124]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80012fe:	f001 fca3 	bl	8002c48 <HAL_GPIO_ReadPin>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_EXTI_Callback+0x14c>
			keyPressed = 6;
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800130a:	2206      	movs	r2, #6
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e009      	b.n	8001324 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8001310:	2104      	movs	r1, #4
 8001312:	481a      	ldr	r0, [pc, #104]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001314:	f001 fc98 	bl	8002c48 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <HAL_GPIO_EXTI_Callback+0x160>
			keyPressed = 9;
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001320:	2209      	movs	r2, #9
 8001322:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2120      	movs	r1, #32
 8001328:	4814      	ldr	r0, [pc, #80]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800132a:	f001 fca5 	bl	8002c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2140      	movs	r1, #64	; 0x40
 8001332:	4812      	ldr	r0, [pc, #72]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001334:	f001 fca0 	bl	8002c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800133e:	f001 fc9b 	bl	8002c78 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001344:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001346:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800134a:	2202      	movs	r2, #2
 800134c:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 800134e:	490a      	ldr	r1, [pc, #40]	; (8001378 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001350:	480a      	ldr	r0, [pc, #40]	; (800137c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001352:	f001 faf7 	bl	8002944 <HAL_GPIO_Init>


		keyFlag = 1;
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
		previousMillis = HAL_GetTick();
 800135c:	f001 f9b2 	bl	80026c4 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001364:	601a      	str	r2, [r3, #0]
	}

}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200003ec 	.word	0x200003ec
 8001374:	200003e8 	.word	0x200003e8
 8001378:	200003d0 	.word	0x200003d0
 800137c:	40020000 	.word	0x40020000
 8001380:	200003e4 	.word	0x200003e4
 8001384:	10110000 	.word	0x10110000
 8001388:	200003e5 	.word	0x200003e5

0800138c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_SPI3_Init+0x64>)
 80013a2:	4a18      	ldr	r2, [pc, #96]	; (8001404 <MX_SPI3_Init+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_SPI3_Init+0x64>)
 80013a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_SPI3_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_SPI3_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_SPI3_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_SPI3_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_SPI3_Init+0x64>)
 80013c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013cc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_SPI3_Init+0x64>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <MX_SPI3_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_SPI3_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <MX_SPI3_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_SPI3_Init+0x64>)
 80013e8:	220a      	movs	r2, #10
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_SPI3_Init+0x64>)
 80013ee:	f003 ff8d 	bl	800530c <HAL_SPI_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80013f8:	f7ff ffc8 	bl	800138c <Error_Handler>
  }

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000978 	.word	0x20000978
 8001404:	40003c00 	.word	0x40003c00

08001408 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_SPI_MspInit+0x84>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12b      	bne.n	8001482 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_SPI_MspInit+0x88>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <HAL_SPI_MspInit+0x88>)
 8001434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_SPI_MspInit+0x88>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_SPI_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_SPI_MspInit+0x88>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_SPI_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001462:	2338      	movs	r3, #56	; 0x38
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001472:	2306      	movs	r3, #6
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_SPI_MspInit+0x8c>)
 800147e:	f001 fa61 	bl	8002944 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40003c00 	.word	0x40003c00
 8001490:	40023800 	.word	0x40023800
 8001494:	40020400 	.word	0x40020400

08001498 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800149e:	f000 fb85 	bl	8001bac <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014a2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014a6:	2201      	movs	r2, #1
 80014a8:	2178      	movs	r1, #120	; 0x78
 80014aa:	485b      	ldr	r0, [pc, #364]	; (8001618 <SSD1306_Init+0x180>)
 80014ac:	f001 fe4c 	bl	8003148 <HAL_I2C_IsDeviceReady>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e0a9      	b.n	800160e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80014ba:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014c0:	e002      	b.n	80014c8 <SSD1306_Init+0x30>
		p--;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f9      	bne.n	80014c2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80014ce:	22ae      	movs	r2, #174	; 0xae
 80014d0:	2100      	movs	r1, #0
 80014d2:	2078      	movs	r0, #120	; 0x78
 80014d4:	f000 fbc6 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80014d8:	2220      	movs	r2, #32
 80014da:	2100      	movs	r1, #0
 80014dc:	2078      	movs	r0, #120	; 0x78
 80014de:	f000 fbc1 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014e2:	2210      	movs	r2, #16
 80014e4:	2100      	movs	r1, #0
 80014e6:	2078      	movs	r0, #120	; 0x78
 80014e8:	f000 fbbc 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014ec:	22b0      	movs	r2, #176	; 0xb0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2078      	movs	r0, #120	; 0x78
 80014f2:	f000 fbb7 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80014f6:	22c8      	movs	r2, #200	; 0xc8
 80014f8:	2100      	movs	r1, #0
 80014fa:	2078      	movs	r0, #120	; 0x78
 80014fc:	f000 fbb2 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2078      	movs	r0, #120	; 0x78
 8001506:	f000 fbad 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800150a:	2210      	movs	r2, #16
 800150c:	2100      	movs	r1, #0
 800150e:	2078      	movs	r0, #120	; 0x78
 8001510:	f000 fba8 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001514:	2240      	movs	r2, #64	; 0x40
 8001516:	2100      	movs	r1, #0
 8001518:	2078      	movs	r0, #120	; 0x78
 800151a:	f000 fba3 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800151e:	2281      	movs	r2, #129	; 0x81
 8001520:	2100      	movs	r1, #0
 8001522:	2078      	movs	r0, #120	; 0x78
 8001524:	f000 fb9e 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001528:	22ff      	movs	r2, #255	; 0xff
 800152a:	2100      	movs	r1, #0
 800152c:	2078      	movs	r0, #120	; 0x78
 800152e:	f000 fb99 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001532:	22a1      	movs	r2, #161	; 0xa1
 8001534:	2100      	movs	r1, #0
 8001536:	2078      	movs	r0, #120	; 0x78
 8001538:	f000 fb94 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800153c:	22a6      	movs	r2, #166	; 0xa6
 800153e:	2100      	movs	r1, #0
 8001540:	2078      	movs	r0, #120	; 0x78
 8001542:	f000 fb8f 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001546:	22a8      	movs	r2, #168	; 0xa8
 8001548:	2100      	movs	r1, #0
 800154a:	2078      	movs	r0, #120	; 0x78
 800154c:	f000 fb8a 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001550:	223f      	movs	r2, #63	; 0x3f
 8001552:	2100      	movs	r1, #0
 8001554:	2078      	movs	r0, #120	; 0x78
 8001556:	f000 fb85 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800155a:	22a4      	movs	r2, #164	; 0xa4
 800155c:	2100      	movs	r1, #0
 800155e:	2078      	movs	r0, #120	; 0x78
 8001560:	f000 fb80 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001564:	22d3      	movs	r2, #211	; 0xd3
 8001566:	2100      	movs	r1, #0
 8001568:	2078      	movs	r0, #120	; 0x78
 800156a:	f000 fb7b 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2078      	movs	r0, #120	; 0x78
 8001574:	f000 fb76 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001578:	22d5      	movs	r2, #213	; 0xd5
 800157a:	2100      	movs	r1, #0
 800157c:	2078      	movs	r0, #120	; 0x78
 800157e:	f000 fb71 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001582:	22f0      	movs	r2, #240	; 0xf0
 8001584:	2100      	movs	r1, #0
 8001586:	2078      	movs	r0, #120	; 0x78
 8001588:	f000 fb6c 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800158c:	22d9      	movs	r2, #217	; 0xd9
 800158e:	2100      	movs	r1, #0
 8001590:	2078      	movs	r0, #120	; 0x78
 8001592:	f000 fb67 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001596:	2222      	movs	r2, #34	; 0x22
 8001598:	2100      	movs	r1, #0
 800159a:	2078      	movs	r0, #120	; 0x78
 800159c:	f000 fb62 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015a0:	22da      	movs	r2, #218	; 0xda
 80015a2:	2100      	movs	r1, #0
 80015a4:	2078      	movs	r0, #120	; 0x78
 80015a6:	f000 fb5d 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015aa:	2212      	movs	r2, #18
 80015ac:	2100      	movs	r1, #0
 80015ae:	2078      	movs	r0, #120	; 0x78
 80015b0:	f000 fb58 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015b4:	22db      	movs	r2, #219	; 0xdb
 80015b6:	2100      	movs	r1, #0
 80015b8:	2078      	movs	r0, #120	; 0x78
 80015ba:	f000 fb53 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015be:	2220      	movs	r2, #32
 80015c0:	2100      	movs	r1, #0
 80015c2:	2078      	movs	r0, #120	; 0x78
 80015c4:	f000 fb4e 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80015c8:	228d      	movs	r2, #141	; 0x8d
 80015ca:	2100      	movs	r1, #0
 80015cc:	2078      	movs	r0, #120	; 0x78
 80015ce:	f000 fb49 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80015d2:	2214      	movs	r2, #20
 80015d4:	2100      	movs	r1, #0
 80015d6:	2078      	movs	r0, #120	; 0x78
 80015d8:	f000 fb44 	bl	8001c64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80015dc:	22af      	movs	r2, #175	; 0xaf
 80015de:	2100      	movs	r1, #0
 80015e0:	2078      	movs	r0, #120	; 0x78
 80015e2:	f000 fb3f 	bl	8001c64 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015e6:	222e      	movs	r2, #46	; 0x2e
 80015e8:	2100      	movs	r1, #0
 80015ea:	2078      	movs	r0, #120	; 0x78
 80015ec:	f000 fb3a 	bl	8001c64 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f000 f843 	bl	800167c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80015f6:	f000 f813 	bl	8001620 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <SSD1306_Init+0x184>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <SSD1306_Init+0x184>)
 8001602:	2200      	movs	r2, #0
 8001604:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <SSD1306_Init+0x184>)
 8001608:	2201      	movs	r2, #1
 800160a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000830 	.word	0x20000830
 800161c:	20000818 	.word	0x20000818

08001620 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001626:	2300      	movs	r3, #0
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	e01d      	b.n	8001668 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	3b50      	subs	r3, #80	; 0x50
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	2100      	movs	r1, #0
 8001636:	2078      	movs	r0, #120	; 0x78
 8001638:	f000 fb14 	bl	8001c64 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2078      	movs	r0, #120	; 0x78
 8001642:	f000 fb0f 	bl	8001c64 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001646:	2210      	movs	r2, #16
 8001648:	2100      	movs	r1, #0
 800164a:	2078      	movs	r0, #120	; 0x78
 800164c:	f000 fb0a 	bl	8001c64 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	01db      	lsls	r3, r3, #7
 8001654:	4a08      	ldr	r2, [pc, #32]	; (8001678 <SSD1306_UpdateScreen+0x58>)
 8001656:	441a      	add	r2, r3
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	2140      	movs	r1, #64	; 0x40
 800165c:	2078      	movs	r0, #120	; 0x78
 800165e:	f000 fab9 	bl	8001bd4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	3301      	adds	r3, #1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b07      	cmp	r3, #7
 800166c:	d9de      	bls.n	800162c <SSD1306_UpdateScreen+0xc>
	}
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000418 	.word	0x20000418

0800167c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <SSD1306_Fill+0x14>
 800168c:	2300      	movs	r3, #0
 800168e:	e000      	b.n	8001692 <SSD1306_Fill+0x16>
 8001690:	23ff      	movs	r3, #255	; 0xff
 8001692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001696:	4619      	mov	r1, r3
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <SSD1306_Fill+0x2c>)
 800169a:	f008 fd56 	bl	800a14a <memset>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000418 	.word	0x20000418

080016ac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
 80016b6:	460b      	mov	r3, r1
 80016b8:	80bb      	strh	r3, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	70fb      	strb	r3, [r7, #3]
	if (
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	2b7f      	cmp	r3, #127	; 0x7f
 80016c2:	d848      	bhi.n	8001756 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	2b3f      	cmp	r3, #63	; 0x3f
 80016c8:	d845      	bhi.n	8001756 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <SSD1306_DrawPixel+0xb8>)
 80016cc:	791b      	ldrb	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d11a      	bne.n	800171c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016e6:	88fa      	ldrh	r2, [r7, #6]
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	b298      	uxth	r0, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	01db      	lsls	r3, r3, #7
 80016f2:	4413      	add	r3, r2
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <SSD1306_DrawPixel+0xbc>)
 80016f6:	5cd3      	ldrb	r3, [r2, r3]
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	b25b      	sxtb	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b259      	sxtb	r1, r3
 800170c:	88fa      	ldrh	r2, [r7, #6]
 800170e:	4603      	mov	r3, r0
 8001710:	01db      	lsls	r3, r3, #7
 8001712:	4413      	add	r3, r2
 8001714:	b2c9      	uxtb	r1, r1
 8001716:	4a14      	ldr	r2, [pc, #80]	; (8001768 <SSD1306_DrawPixel+0xbc>)
 8001718:	54d1      	strb	r1, [r2, r3]
 800171a:	e01d      	b.n	8001758 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800171c:	88fa      	ldrh	r2, [r7, #6]
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	b298      	uxth	r0, r3
 8001724:	4603      	mov	r3, r0
 8001726:	01db      	lsls	r3, r3, #7
 8001728:	4413      	add	r3, r2
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <SSD1306_DrawPixel+0xbc>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	b25a      	sxtb	r2, r3
 8001730:	88bb      	ldrh	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	b25b      	sxtb	r3, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	b25b      	sxtb	r3, r3
 8001742:	4013      	ands	r3, r2
 8001744:	b259      	sxtb	r1, r3
 8001746:	88fa      	ldrh	r2, [r7, #6]
 8001748:	4603      	mov	r3, r0
 800174a:	01db      	lsls	r3, r3, #7
 800174c:	4413      	add	r3, r2
 800174e:	b2c9      	uxtb	r1, r1
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <SSD1306_DrawPixel+0xbc>)
 8001752:	54d1      	strb	r1, [r2, r3]
 8001754:	e000      	b.n	8001758 <SSD1306_DrawPixel+0xac>
		return;
 8001756:	bf00      	nop
	}
}
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000818 	.word	0x20000818
 8001768:	20000418 	.word	0x20000418

0800176c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	80fb      	strh	r3, [r7, #6]
 8001778:	4613      	mov	r3, r2
 800177a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800177c:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SSD1306_GotoXY+0x28>)
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <SSD1306_GotoXY+0x28>)
 8001784:	88bb      	ldrh	r3, [r7, #4]
 8001786:	8053      	strh	r3, [r2, #2]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	20000818 	.word	0x20000818

08001798 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017a8:	4b3a      	ldr	r3, [pc, #232]	; (8001894 <SSD1306_Putc+0xfc>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
	if (
 80017b4:	2b7f      	cmp	r3, #127	; 0x7f
 80017b6:	dc07      	bgt.n	80017c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <SSD1306_Putc+0xfc>)
 80017ba:	885b      	ldrh	r3, [r3, #2]
 80017bc:	461a      	mov	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017c4:	2b3f      	cmp	r3, #63	; 0x3f
 80017c6:	dd01      	ble.n	80017cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e05e      	b.n	800188a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e04b      	b.n	800186a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	3b20      	subs	r3, #32
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	7849      	ldrb	r1, [r1, #1]
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4619      	mov	r1, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	440b      	add	r3, r1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e030      	b.n	8001858 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d010      	beq.n	8001828 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <SSD1306_Putc+0xfc>)
 8001808:	881a      	ldrh	r2, [r3, #0]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4413      	add	r3, r2
 8001810:	b298      	uxth	r0, r3
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <SSD1306_Putc+0xfc>)
 8001814:	885a      	ldrh	r2, [r3, #2]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	b29b      	uxth	r3, r3
 800181a:	4413      	add	r3, r2
 800181c:	b29b      	uxth	r3, r3
 800181e:	79ba      	ldrb	r2, [r7, #6]
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff ff43 	bl	80016ac <SSD1306_DrawPixel>
 8001826:	e014      	b.n	8001852 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <SSD1306_Putc+0xfc>)
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	b29b      	uxth	r3, r3
 8001830:	4413      	add	r3, r2
 8001832:	b298      	uxth	r0, r3
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <SSD1306_Putc+0xfc>)
 8001836:	885a      	ldrh	r2, [r3, #2]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	b29b      	uxth	r3, r3
 800183c:	4413      	add	r3, r2
 800183e:	b299      	uxth	r1, r3
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf0c      	ite	eq
 8001846:	2301      	moveq	r3, #1
 8001848:	2300      	movne	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	f7ff ff2d 	bl	80016ac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	3301      	adds	r3, #1
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4293      	cmp	r3, r2
 8001862:	d3c8      	bcc.n	80017f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	461a      	mov	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	4293      	cmp	r3, r2
 8001874:	d3ad      	bcc.n	80017d2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <SSD1306_Putc+0xfc>)
 8001878:	881a      	ldrh	r2, [r3, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4413      	add	r3, r2
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <SSD1306_Putc+0xfc>)
 8001886:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001888:	79fb      	ldrb	r3, [r7, #7]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000818 	.word	0x20000818

08001898 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018a6:	e012      	b.n	80018ce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff71 	bl	8001798 <SSD1306_Putc>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d002      	beq.n	80018c8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	e008      	b.n	80018da <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3301      	adds	r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1e8      	bne.n	80018a8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	781b      	ldrb	r3, [r3, #0]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80018e2:	b590      	push	{r4, r7, lr}
 80018e4:	b087      	sub	sp, #28
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4604      	mov	r4, r0
 80018ea:	4608      	mov	r0, r1
 80018ec:	4611      	mov	r1, r2
 80018ee:	461a      	mov	r2, r3
 80018f0:	4623      	mov	r3, r4
 80018f2:	80fb      	strh	r3, [r7, #6]
 80018f4:	4603      	mov	r3, r0
 80018f6:	80bb      	strh	r3, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	d901      	bls.n	800190a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001906:	237f      	movs	r3, #127	; 0x7f
 8001908:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	2b7f      	cmp	r3, #127	; 0x7f
 800190e:	d901      	bls.n	8001914 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001910:	237f      	movs	r3, #127	; 0x7f
 8001912:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	2b3f      	cmp	r3, #63	; 0x3f
 8001918:	d901      	bls.n	800191e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 800191a:	233f      	movs	r3, #63	; 0x3f
 800191c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800191e:	883b      	ldrh	r3, [r7, #0]
 8001920:	2b3f      	cmp	r3, #63	; 0x3f
 8001922:	d901      	bls.n	8001928 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001924:	233f      	movs	r3, #63	; 0x3f
 8001926:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001928:	88fa      	ldrh	r2, [r7, #6]
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	429a      	cmp	r2, r3
 800192e:	d205      	bcs.n	800193c <SSD1306_DrawLine+0x5a>
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	b29b      	uxth	r3, r3
 8001938:	b21b      	sxth	r3, r3
 800193a:	e004      	b.n	8001946 <SSD1306_DrawLine+0x64>
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	b29b      	uxth	r3, r3
 8001944:	b21b      	sxth	r3, r3
 8001946:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001948:	88ba      	ldrh	r2, [r7, #4]
 800194a:	883b      	ldrh	r3, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d205      	bcs.n	800195c <SSD1306_DrawLine+0x7a>
 8001950:	883a      	ldrh	r2, [r7, #0]
 8001952:	88bb      	ldrh	r3, [r7, #4]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	b29b      	uxth	r3, r3
 8001958:	b21b      	sxth	r3, r3
 800195a:	e004      	b.n	8001966 <SSD1306_DrawLine+0x84>
 800195c:	88ba      	ldrh	r2, [r7, #4]
 800195e:	883b      	ldrh	r3, [r7, #0]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	b29b      	uxth	r3, r3
 8001964:	b21b      	sxth	r3, r3
 8001966:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001968:	88fa      	ldrh	r2, [r7, #6]
 800196a:	887b      	ldrh	r3, [r7, #2]
 800196c:	429a      	cmp	r2, r3
 800196e:	d201      	bcs.n	8001974 <SSD1306_DrawLine+0x92>
 8001970:	2301      	movs	r3, #1
 8001972:	e001      	b.n	8001978 <SSD1306_DrawLine+0x96>
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
 8001978:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800197a:	88ba      	ldrh	r2, [r7, #4]
 800197c:	883b      	ldrh	r3, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d201      	bcs.n	8001986 <SSD1306_DrawLine+0xa4>
 8001982:	2301      	movs	r3, #1
 8001984:	e001      	b.n	800198a <SSD1306_DrawLine+0xa8>
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800198c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001990:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001994:	429a      	cmp	r2, r3
 8001996:	dd06      	ble.n	80019a6 <SSD1306_DrawLine+0xc4>
 8001998:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800199c:	0fda      	lsrs	r2, r3, #31
 800199e:	4413      	add	r3, r2
 80019a0:	105b      	asrs	r3, r3, #1
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	e006      	b.n	80019b4 <SSD1306_DrawLine+0xd2>
 80019a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019aa:	425b      	negs	r3, r3
 80019ac:	0fda      	lsrs	r2, r3, #31
 80019ae:	4413      	add	r3, r2
 80019b0:	105b      	asrs	r3, r3, #1
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80019b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d129      	bne.n	8001a12 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80019be:	883a      	ldrh	r2, [r7, #0]
 80019c0:	88bb      	ldrh	r3, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d205      	bcs.n	80019d2 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80019c6:	883b      	ldrh	r3, [r7, #0]
 80019c8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80019ce:	893b      	ldrh	r3, [r7, #8]
 80019d0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d205      	bcs.n	80019e6 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80019e2:	893b      	ldrh	r3, [r7, #8]
 80019e4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80019e6:	88bb      	ldrh	r3, [r7, #4]
 80019e8:	82bb      	strh	r3, [r7, #20]
 80019ea:	e00c      	b.n	8001a06 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80019ec:	8ab9      	ldrh	r1, [r7, #20]
 80019ee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fe59 	bl	80016ac <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80019fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3301      	adds	r3, #1
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	82bb      	strh	r3, [r7, #20]
 8001a06:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a0a:	883b      	ldrh	r3, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dded      	ble.n	80019ec <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001a10:	e05f      	b.n	8001ad2 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001a12:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d129      	bne.n	8001a6e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001a1a:	883a      	ldrh	r2, [r7, #0]
 8001a1c:	88bb      	ldrh	r3, [r7, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d205      	bcs.n	8001a2e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001a22:	883b      	ldrh	r3, [r7, #0]
 8001a24:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a2a:	893b      	ldrh	r3, [r7, #8]
 8001a2c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d205      	bcs.n	8001a42 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a3e:	893b      	ldrh	r3, [r7, #8]
 8001a40:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	82bb      	strh	r3, [r7, #20]
 8001a46:	e00c      	b.n	8001a62 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001a48:	8abb      	ldrh	r3, [r7, #20]
 8001a4a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a4e:	88b9      	ldrh	r1, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fe2b 	bl	80016ac <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001a56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	82bb      	strh	r3, [r7, #20]
 8001a62:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a66:	887b      	ldrh	r3, [r7, #2]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dded      	ble.n	8001a48 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001a6c:	e031      	b.n	8001ad2 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001a6e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a72:	88b9      	ldrh	r1, [r7, #4]
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fe18 	bl	80016ac <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d103      	bne.n	8001a8c <SSD1306_DrawLine+0x1aa>
 8001a84:	88ba      	ldrh	r2, [r7, #4]
 8001a86:	883b      	ldrh	r3, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d021      	beq.n	8001ad0 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001a8c:	8afb      	ldrh	r3, [r7, #22]
 8001a8e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001a90:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a98:	425b      	negs	r3, r3
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dd08      	ble.n	8001ab0 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001a9e:	8afa      	ldrh	r2, [r7, #22]
 8001aa0:	8a3b      	ldrh	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001aa8:	89fa      	ldrh	r2, [r7, #14]
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4413      	add	r3, r2
 8001aae:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001ab0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ab4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dad8      	bge.n	8001a6e <SSD1306_DrawLine+0x18c>
			err += dx;
 8001abc:	8afa      	ldrh	r2, [r7, #22]
 8001abe:	8a7b      	ldrh	r3, [r7, #18]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001ac6:	89ba      	ldrh	r2, [r7, #12]
 8001ac8:	88bb      	ldrh	r3, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001ace:	e7ce      	b.n	8001a6e <SSD1306_DrawLine+0x18c>
			break;
 8001ad0:	bf00      	nop
		} 
	}
}
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}

08001ad8 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	4604      	mov	r4, r0
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4623      	mov	r3, r4
 8001ae8:	80fb      	strh	r3, [r7, #6]
 8001aea:	4603      	mov	r3, r0
 8001aec:	80bb      	strh	r3, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	807b      	strh	r3, [r7, #2]
 8001af2:	4613      	mov	r3, r2
 8001af4:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	2b7f      	cmp	r3, #127	; 0x7f
 8001afa:	d853      	bhi.n	8001ba4 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001afc:	88bb      	ldrh	r3, [r7, #4]
 8001afe:	2b3f      	cmp	r3, #63	; 0x3f
 8001b00:	d850      	bhi.n	8001ba4 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001b02:	88fa      	ldrh	r2, [r7, #6]
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	4413      	add	r3, r2
 8001b08:	2b7f      	cmp	r3, #127	; 0x7f
 8001b0a:	dd03      	ble.n	8001b14 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b12:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001b14:	88ba      	ldrh	r2, [r7, #4]
 8001b16:	883b      	ldrh	r3, [r7, #0]
 8001b18:	4413      	add	r3, r2
 8001b1a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b1c:	dd03      	ble.n	8001b26 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b24:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001b26:	88fa      	ldrh	r2, [r7, #6]
 8001b28:	887b      	ldrh	r3, [r7, #2]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	88bc      	ldrh	r4, [r7, #4]
 8001b30:	88b9      	ldrh	r1, [r7, #4]
 8001b32:	88f8      	ldrh	r0, [r7, #6]
 8001b34:	7e3b      	ldrb	r3, [r7, #24]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	4623      	mov	r3, r4
 8001b3a:	f7ff fed2 	bl	80018e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001b3e:	88ba      	ldrh	r2, [r7, #4]
 8001b40:	883b      	ldrh	r3, [r7, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	b299      	uxth	r1, r3
 8001b46:	88fa      	ldrh	r2, [r7, #6]
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b29c      	uxth	r4, r3
 8001b4e:	88ba      	ldrh	r2, [r7, #4]
 8001b50:	883b      	ldrh	r3, [r7, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	88f8      	ldrh	r0, [r7, #6]
 8001b58:	7e3b      	ldrb	r3, [r7, #24]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	4622      	mov	r2, r4
 8001b60:	f7ff febf 	bl	80018e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001b64:	88ba      	ldrh	r2, [r7, #4]
 8001b66:	883b      	ldrh	r3, [r7, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29c      	uxth	r4, r3
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	88b9      	ldrh	r1, [r7, #4]
 8001b70:	88f8      	ldrh	r0, [r7, #6]
 8001b72:	7e3b      	ldrb	r3, [r7, #24]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	4623      	mov	r3, r4
 8001b78:	f7ff feb3 	bl	80018e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	4413      	add	r3, r2
 8001b82:	b298      	uxth	r0, r3
 8001b84:	88fa      	ldrh	r2, [r7, #6]
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	4413      	add	r3, r2
 8001b8a:	b29c      	uxth	r4, r3
 8001b8c:	88ba      	ldrh	r2, [r7, #4]
 8001b8e:	883b      	ldrh	r3, [r7, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	88b9      	ldrh	r1, [r7, #4]
 8001b96:	7e3b      	ldrb	r3, [r7, #24]
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	f7ff fea0 	bl	80018e2 <SSD1306_DrawLine>
 8001ba2:	e000      	b.n	8001ba6 <SSD1306_DrawRectangle+0xce>
		return;
 8001ba4:	bf00      	nop
}
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}

08001bac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <ssd1306_I2C_Init+0x24>)
 8001bb4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bb6:	e002      	b.n	8001bbe <ssd1306_I2C_Init+0x12>
		p--;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f9      	bne.n	8001bb8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	0003d090 	.word	0x0003d090

08001bd4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b0c7      	sub	sp, #284	; 0x11c
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	4604      	mov	r4, r0
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4639      	mov	r1, r7
 8001be0:	600a      	str	r2, [r1, #0]
 8001be2:	4619      	mov	r1, r3
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	4622      	mov	r2, r4
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	1dbb      	adds	r3, r7, #6
 8001bec:	4602      	mov	r2, r0
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	460a      	mov	r2, r1
 8001bf4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	1dba      	adds	r2, r7, #6
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c06:	e010      	b.n	8001c2a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001c08:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c0c:	463a      	mov	r2, r7
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	441a      	add	r2, r3
 8001c12:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c16:	3301      	adds	r3, #1
 8001c18:	7811      	ldrb	r1, [r2, #0]
 8001c1a:	f107 020c 	add.w	r2, r7, #12
 8001c1e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c20:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c24:	3301      	adds	r3, #1
 8001c26:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c2a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	1d3a      	adds	r2, r7, #4
 8001c32:	8812      	ldrh	r2, [r2, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8e7      	bhi.n	8001c08 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c38:	1dfb      	adds	r3, r7, #7
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b299      	uxth	r1, r3
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	b298      	uxth	r0, r3
 8001c46:	f107 020c 	add.w	r2, r7, #12
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <ssd1306_I2C_WriteMulti+0x8c>)
 8001c52:	f001 f97b 	bl	8002f4c <HAL_I2C_Master_Transmit>
}
 8001c56:	bf00      	nop
 8001c58:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}
 8001c60:	20000830 	.word	0x20000830

08001c64 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	71bb      	strb	r3, [r7, #6]
 8001c72:	4613      	mov	r3, r2
 8001c74:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c7a:	797b      	ldrb	r3, [r7, #5]
 8001c7c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	b299      	uxth	r1, r3
 8001c82:	f107 020c 	add.w	r2, r7, #12
 8001c86:	230a      	movs	r3, #10
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <ssd1306_I2C_Write+0x38>)
 8001c8e:	f001 f95d 	bl	8002f4c <HAL_I2C_Master_Transmit>
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000830 	.word	0x20000830

08001ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_MspInit+0x4c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <HAL_MspInit+0x4c>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_MspInit+0x4c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_MspInit+0x4c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_MspInit+0x4c>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_MspInit+0x4c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler+0x4>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <MemManage_Handler+0x4>

08001d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d44:	f000 fcaa 	bl	800269c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d50:	2004      	movs	r0, #4
 8001d52:	f000 ffab 	bl	8002cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d5e:	2008      	movs	r0, #8
 8001d60:	f000 ffa4 	bl	8002cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d6c:	2010      	movs	r0, #16
 8001d6e:	f000 ff9d 	bl	8002cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM2_IRQHandler+0x10>)
 8001d7e:	f004 f902 	bl	8005f86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200009d0 	.word	0x200009d0

08001d8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <OTG_FS_IRQHandler+0x10>)
 8001d92:	f001 fe60 	bl	8003a56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000f74 	.word	0x20000f74

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f008 f976 	bl	800a0c0 <__errno>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20020000 	.word	0x20020000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	20000820 	.word	0x20000820
 8001e08:	20001380 	.word	0x20001380

08001e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <SystemInit+0x28>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <SystemInit+0x28>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SystemInit+0x28>)
 8001e22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e26:	609a      	str	r2, [r3, #8]
#endif
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08c      	sub	sp, #48	; 0x30
 8001e3c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	2224      	movs	r2, #36	; 0x24
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f008 f97f 	bl	800a14a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <MX_TIM2_Init+0xa4>)
 8001e56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <MX_TIM2_Init+0xa4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <MX_TIM2_Init+0xa4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <MX_TIM2_Init+0xa4>)
 8001e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <MX_TIM2_Init+0xa4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <MX_TIM2_Init+0xa4>)
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e80:	2302      	movs	r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e84:	2301      	movs	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001e8c:	230a      	movs	r3, #10
 8001e8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001e90:	2302      	movs	r3, #2
 8001e92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e94:	2301      	movs	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001e9c:	230a      	movs	r3, #10
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480d      	ldr	r0, [pc, #52]	; (8001edc <MX_TIM2_Init+0xa4>)
 8001ea8:	f003 ff84 	bl	8005db4 <HAL_TIM_Encoder_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001eb2:	f7ff fa6b 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4806      	ldr	r0, [pc, #24]	; (8001edc <MX_TIM2_Init+0xa4>)
 8001ec4:	f004 fa36 	bl	8006334 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ece:	f7ff fa5d 	bl	800138c <Error_Handler>
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3730      	adds	r7, #48	; 0x30
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200009d0 	.word	0x200009d0

08001ee0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f00:	d133      	bne.n	8001f6a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x94>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a1a      	ldr	r2, [pc, #104]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x94>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x94>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x94>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x94>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x94>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f42:	2301      	movs	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	4808      	ldr	r0, [pc, #32]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x98>)
 8001f56:	f000 fcf5 	bl	8002944 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	201c      	movs	r0, #28
 8001f60:	f000 fcb9 	bl	80028d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f64:	201c      	movs	r0, #28
 8001f66:	f000 fcd2 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020000 	.word	0x40020000

08001f7c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001f86:	f107 020f 	add.w	r2, r7, #15
 8001f8a:	1df9      	adds	r1, r7, #7
 8001f8c:	2364      	movs	r3, #100	; 0x64
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <W25qxx_Spi+0x28>)
 8001f94:	f003 fc5b 	bl	800584e <HAL_SPI_TransmitReceive>
	return ret;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000978 	.word	0x20000978

08001fa8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc4:	4813      	ldr	r0, [pc, #76]	; (8002014 <W25qxx_ReadID+0x6c>)
 8001fc6:	f000 fe57 	bl	8002c78 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001fca:	209f      	movs	r0, #159	; 0x9f
 8001fcc:	f7ff ffd6 	bl	8001f7c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fd0:	20a5      	movs	r0, #165	; 0xa5
 8001fd2:	f7ff ffd3 	bl	8001f7c <W25qxx_Spi>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fda:	20a5      	movs	r0, #165	; 0xa5
 8001fdc:	f7ff ffce 	bl	8001f7c <W25qxx_Spi>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fe4:	20a5      	movs	r0, #165	; 0xa5
 8001fe6:	f7ff ffc9 	bl	8001f7c <W25qxx_Spi>
 8001fea:	4603      	mov	r3, r0
 8001fec:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <W25qxx_ReadID+0x6c>)
 8001ff6:	f000 fe3f 	bl	8002c78 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	4313      	orrs	r3, r2
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
	return Temp;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40020000 	.word	0x40020000

08002018 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002024:	4816      	ldr	r0, [pc, #88]	; (8002080 <W25qxx_ReadUniqID+0x68>)
 8002026:	f000 fe27 	bl	8002c78 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800202a:	204b      	movs	r0, #75	; 0x4b
 800202c:	f7ff ffa6 	bl	8001f7c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002030:	2300      	movs	r3, #0
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	e005      	b.n	8002042 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002036:	20a5      	movs	r0, #165	; 0xa5
 8002038:	f7ff ffa0 	bl	8001f7c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	3301      	adds	r3, #1
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d9f6      	bls.n	8002036 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8002048:	2300      	movs	r3, #0
 800204a:	71bb      	strb	r3, [r7, #6]
 800204c:	e00b      	b.n	8002066 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800204e:	79bc      	ldrb	r4, [r7, #6]
 8002050:	20a5      	movs	r0, #165	; 0xa5
 8002052:	f7ff ff93 	bl	8001f7c <W25qxx_Spi>
 8002056:	4603      	mov	r3, r0
 8002058:	461a      	mov	r2, r3
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <W25qxx_ReadUniqID+0x6c>)
 800205c:	4423      	add	r3, r4
 800205e:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8002060:	79bb      	ldrb	r3, [r7, #6]
 8002062:	3301      	adds	r3, #1
 8002064:	71bb      	strb	r3, [r7, #6]
 8002066:	79bb      	ldrb	r3, [r7, #6]
 8002068:	2b07      	cmp	r3, #7
 800206a:	d9f0      	bls.n	800204e <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002072:	4803      	ldr	r0, [pc, #12]	; (8002080 <W25qxx_ReadUniqID+0x68>)
 8002074:	f000 fe00 	bl	8002c78 <HAL_GPIO_WritePin>
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bd90      	pop	{r4, r7, pc}
 8002080:	40020000 	.word	0x40020000
 8002084:	20000a10 	.word	0x20000a10

08002088 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002092:	4808      	ldr	r0, [pc, #32]	; (80020b4 <W25qxx_WriteEnable+0x2c>)
 8002094:	f000 fdf0 	bl	8002c78 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8002098:	2006      	movs	r0, #6
 800209a:	f7ff ff6f 	bl	8001f7c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <W25qxx_WriteEnable+0x2c>)
 80020a6:	f000 fde7 	bl	8002c78 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f000 fb16 	bl	80026dc <HAL_Delay>
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40020000 	.word	0x40020000

080020b8 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020cc:	481c      	ldr	r0, [pc, #112]	; (8002140 <W25qxx_ReadStatusRegister+0x88>)
 80020ce:	f000 fdd3 	bl	8002c78 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d10c      	bne.n	80020f2 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 80020d8:	2005      	movs	r0, #5
 80020da:	f7ff ff4f 	bl	8001f7c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020de:	20a5      	movs	r0, #165	; 0xa5
 80020e0:	f7ff ff4c 	bl	8001f7c <W25qxx_Spi>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80020e8:	4a16      	ldr	r2, [pc, #88]	; (8002144 <W25qxx_ReadStatusRegister+0x8c>)
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80020f0:	e01b      	b.n	800212a <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d10c      	bne.n	8002112 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 80020f8:	2035      	movs	r0, #53	; 0x35
 80020fa:	f7ff ff3f 	bl	8001f7c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020fe:	20a5      	movs	r0, #165	; 0xa5
 8002100:	f7ff ff3c 	bl	8001f7c <W25qxx_Spi>
 8002104:	4603      	mov	r3, r0
 8002106:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <W25qxx_ReadStatusRegister+0x8c>)
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8002110:	e00b      	b.n	800212a <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002112:	2015      	movs	r0, #21
 8002114:	f7ff ff32 	bl	8001f7c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002118:	20a5      	movs	r0, #165	; 0xa5
 800211a:	f7ff ff2f 	bl	8001f7c <W25qxx_Spi>
 800211e:	4603      	mov	r3, r0
 8002120:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <W25qxx_ReadStatusRegister+0x8c>)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800212a:	2201      	movs	r2, #1
 800212c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002130:	4803      	ldr	r0, [pc, #12]	; (8002140 <W25qxx_ReadStatusRegister+0x88>)
 8002132:	f000 fda1 	bl	8002c78 <HAL_GPIO_WritePin>
	return status;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40020000 	.word	0x40020000
 8002144:	20000a10 	.word	0x20000a10

08002148 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800214c:	2001      	movs	r0, #1
 800214e:	f000 fac5 	bl	80026dc <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002152:	2200      	movs	r2, #0
 8002154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002158:	480f      	ldr	r0, [pc, #60]	; (8002198 <W25qxx_WaitForWriteEnd+0x50>)
 800215a:	f000 fd8d 	bl	8002c78 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800215e:	2005      	movs	r0, #5
 8002160:	f7ff ff0c 	bl	8001f7c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002164:	20a5      	movs	r0, #165	; 0xa5
 8002166:	f7ff ff09 	bl	8001f7c <W25qxx_Spi>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <W25qxx_WaitForWriteEnd+0x54>)
 8002170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8002174:	2001      	movs	r0, #1
 8002176:	f000 fab1 	bl	80026dc <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <W25qxx_WaitForWriteEnd+0x54>)
 800217c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ed      	bne.n	8002164 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002188:	2201      	movs	r2, #1
 800218a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800218e:	4802      	ldr	r0, [pc, #8]	; (8002198 <W25qxx_WaitForWriteEnd+0x50>)
 8002190:	f000 fd72 	bl	8002c78 <HAL_GPIO_WritePin>
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40020000 	.word	0x40020000
 800219c:	20000a10 	.word	0x20000a10

080021a0 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80021a6:	4b62      	ldr	r3, [pc, #392]	; (8002330 <W25qxx_Init+0x190>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//while (HAL_GetTick() < 100)
	//	W25qxx_Delay(1);
	W25qxx_Delay(100);
 80021ae:	2064      	movs	r0, #100	; 0x64
 80021b0:	f000 fa94 	bl	80026dc <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ba:	485e      	ldr	r0, [pc, #376]	; (8002334 <W25qxx_Init+0x194>)
 80021bc:	f000 fd5c 	bl	8002c78 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80021c0:	2064      	movs	r0, #100	; 0x64
 80021c2:	f000 fa8b 	bl	80026dc <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80021c6:	f7ff feef 	bl	8001fa8 <W25qxx_ReadID>
 80021ca:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3b11      	subs	r3, #17
 80021d2:	2b0f      	cmp	r3, #15
 80021d4:	d86b      	bhi.n	80022ae <W25qxx_Init+0x10e>
 80021d6:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <W25qxx_Init+0x3c>)
 80021d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021dc:	080022a1 	.word	0x080022a1
 80021e0:	08002293 	.word	0x08002293
 80021e4:	08002285 	.word	0x08002285
 80021e8:	08002277 	.word	0x08002277
 80021ec:	08002269 	.word	0x08002269
 80021f0:	0800225b 	.word	0x0800225b
 80021f4:	0800224d 	.word	0x0800224d
 80021f8:	0800223d 	.word	0x0800223d
 80021fc:	0800222d 	.word	0x0800222d
 8002200:	080022af 	.word	0x080022af
 8002204:	080022af 	.word	0x080022af
 8002208:	080022af 	.word	0x080022af
 800220c:	080022af 	.word	0x080022af
 8002210:	080022af 	.word	0x080022af
 8002214:	080022af 	.word	0x080022af
 8002218:	0800221d 	.word	0x0800221d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800221c:	4b44      	ldr	r3, [pc, #272]	; (8002330 <W25qxx_Init+0x190>)
 800221e:	220a      	movs	r2, #10
 8002220:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8002222:	4b43      	ldr	r3, [pc, #268]	; (8002330 <W25qxx_Init+0x190>)
 8002224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002228:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800222a:	e046      	b.n	80022ba <W25qxx_Init+0x11a>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <W25qxx_Init+0x190>)
 800222e:	2209      	movs	r2, #9
 8002230:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <W25qxx_Init+0x190>)
 8002234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002238:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800223a:	e03e      	b.n	80022ba <W25qxx_Init+0x11a>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800223c:	4b3c      	ldr	r3, [pc, #240]	; (8002330 <W25qxx_Init+0x190>)
 800223e:	2208      	movs	r2, #8
 8002240:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <W25qxx_Init+0x190>)
 8002244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002248:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800224a:	e036      	b.n	80022ba <W25qxx_Init+0x11a>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800224c:	4b38      	ldr	r3, [pc, #224]	; (8002330 <W25qxx_Init+0x190>)
 800224e:	2207      	movs	r2, #7
 8002250:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8002252:	4b37      	ldr	r3, [pc, #220]	; (8002330 <W25qxx_Init+0x190>)
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8002258:	e02f      	b.n	80022ba <W25qxx_Init+0x11a>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800225a:	4b35      	ldr	r3, [pc, #212]	; (8002330 <W25qxx_Init+0x190>)
 800225c:	2206      	movs	r2, #6
 800225e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <W25qxx_Init+0x190>)
 8002262:	2240      	movs	r2, #64	; 0x40
 8002264:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8002266:	e028      	b.n	80022ba <W25qxx_Init+0x11a>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <W25qxx_Init+0x190>)
 800226a:	2205      	movs	r2, #5
 800226c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800226e:	4b30      	ldr	r3, [pc, #192]	; (8002330 <W25qxx_Init+0x190>)
 8002270:	2220      	movs	r2, #32
 8002272:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8002274:	e021      	b.n	80022ba <W25qxx_Init+0x11a>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002276:	4b2e      	ldr	r3, [pc, #184]	; (8002330 <W25qxx_Init+0x190>)
 8002278:	2204      	movs	r2, #4
 800227a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800227c:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <W25qxx_Init+0x190>)
 800227e:	2210      	movs	r2, #16
 8002280:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8002282:	e01a      	b.n	80022ba <W25qxx_Init+0x11a>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <W25qxx_Init+0x190>)
 8002286:	2203      	movs	r2, #3
 8002288:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <W25qxx_Init+0x190>)
 800228c:	2208      	movs	r2, #8
 800228e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8002290:	e013      	b.n	80022ba <W25qxx_Init+0x11a>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8002292:	4b27      	ldr	r3, [pc, #156]	; (8002330 <W25qxx_Init+0x190>)
 8002294:	2202      	movs	r2, #2
 8002296:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <W25qxx_Init+0x190>)
 800229a:	2204      	movs	r2, #4
 800229c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800229e:	e00c      	b.n	80022ba <W25qxx_Init+0x11a>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <W25qxx_Init+0x190>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80022a6:	4b22      	ldr	r3, [pc, #136]	; (8002330 <W25qxx_Init+0x190>)
 80022a8:	2202      	movs	r2, #2
 80022aa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80022ac:	e005      	b.n	80022ba <W25qxx_Init+0x11a>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <W25qxx_Init+0x190>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e036      	b.n	8002328 <W25qxx_Init+0x188>
	}
	w25qxx.PageSize = 256;
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <W25qxx_Init+0x190>)
 80022bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c0:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <W25qxx_Init+0x190>)
 80022c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022c8:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <W25qxx_Init+0x190>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	4a17      	ldr	r2, [pc, #92]	; (8002330 <W25qxx_Init+0x190>)
 80022d2:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <W25qxx_Init+0x190>)
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	4a15      	ldr	r2, [pc, #84]	; (8002330 <W25qxx_Init+0x190>)
 80022da:	6912      	ldr	r2, [r2, #16]
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <W25qxx_Init+0x190>)
 80022e2:	8952      	ldrh	r2, [r2, #10]
 80022e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <W25qxx_Init+0x190>)
 80022ea:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <W25qxx_Init+0x190>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <W25qxx_Init+0x190>)
 80022f4:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <W25qxx_Init+0x190>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <W25qxx_Init+0x190>)
 80022fc:	6912      	ldr	r2, [r2, #16]
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	0a9b      	lsrs	r3, r3, #10
 8002304:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <W25qxx_Init+0x190>)
 8002306:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002308:	f7ff fe86 	bl	8002018 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800230c:	2001      	movs	r0, #1
 800230e:	f7ff fed3 	bl	80020b8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002312:	2002      	movs	r0, #2
 8002314:	f7ff fed0 	bl	80020b8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002318:	2003      	movs	r0, #3
 800231a:	f7ff fecd 	bl	80020b8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <W25qxx_Init+0x190>)
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000a10 	.word	0x20000a10
 8002334:	40020000 	.word	0x40020000

08002338 <W25qxx_EraseChip>:
//###################################################################################################################
void W25qxx_EraseChip(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	while (w25qxx.Lock == 1)
 800233c:	e002      	b.n	8002344 <W25qxx_EraseChip+0xc>
		W25qxx_Delay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f000 f9cc 	bl	80026dc <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <W25qxx_EraseChip+0x58>)
 8002346:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800234a:	2b01      	cmp	r3, #1
 800234c:	d0f7      	beq.n	800233e <W25qxx_EraseChip+0x6>
	w25qxx.Lock = 1;
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <W25qxx_EraseChip+0x58>)
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseChip Begin...\r\n");
#endif
	W25qxx_WriteEnable();
 8002356:	f7ff fe97 	bl	8002088 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <W25qxx_EraseChip+0x5c>)
 8002362:	f000 fc89 	bl	8002c78 <HAL_GPIO_WritePin>
	W25qxx_Spi(0xC7);
 8002366:	20c7      	movs	r0, #199	; 0xc7
 8002368:	f7ff fe08 	bl	8001f7c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800236c:	2201      	movs	r2, #1
 800236e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002372:	4808      	ldr	r0, [pc, #32]	; (8002394 <W25qxx_EraseChip+0x5c>)
 8002374:	f000 fc80 	bl	8002c78 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002378:	f7ff fee6 	bl	8002148 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms!\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(10);
 800237c:	200a      	movs	r0, #10
 800237e:	f000 f9ad 	bl	80026dc <HAL_Delay>
	w25qxx.Lock = 0;
 8002382:	4b03      	ldr	r3, [pc, #12]	; (8002390 <W25qxx_EraseChip+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000a10 	.word	0x20000a10
 8002394:	40020000 	.word	0x40020000

08002398 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80023a6:	e002      	b.n	80023ae <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f000 f997 	bl	80026dc <HAL_Delay>
	while (w25qxx.Lock == 1)
 80023ae:	4b3a      	ldr	r3, [pc, #232]	; (8002498 <W25qxx_WritePage+0x100>)
 80023b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d0f7      	beq.n	80023a8 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80023b8:	4b37      	ldr	r3, [pc, #220]	; (8002498 <W25qxx_WritePage+0x100>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a34      	ldr	r2, [pc, #208]	; (8002498 <W25qxx_WritePage+0x100>)
 80023c8:	8952      	ldrh	r2, [r2, #10]
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d802      	bhi.n	80023d4 <W25qxx_WritePage+0x3c>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80023d4:	4b30      	ldr	r3, [pc, #192]	; (8002498 <W25qxx_WritePage+0x100>)
 80023d6:	895b      	ldrh	r3, [r3, #10]
 80023d8:	461a      	mov	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	4a2c      	ldr	r2, [pc, #176]	; (8002498 <W25qxx_WritePage+0x100>)
 80023e8:	8952      	ldrh	r2, [r2, #10]
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d905      	bls.n	80023fa <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80023ee:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <W25qxx_WritePage+0x100>)
 80023f0:	895b      	ldrh	r3, [r3, #10]
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80023fa:	f7ff fea5 	bl	8002148 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80023fe:	f7ff fe43 	bl	8002088 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002408:	4824      	ldr	r0, [pc, #144]	; (800249c <W25qxx_WritePage+0x104>)
 800240a:	f000 fc35 	bl	8002c78 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <W25qxx_WritePage+0x100>)
 8002410:	895b      	ldrh	r3, [r3, #10]
 8002412:	461a      	mov	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	fb03 f302 	mul.w	r3, r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <W25qxx_WritePage+0x100>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d909      	bls.n	800243c <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 8002428:	2012      	movs	r0, #18
 800242a:	f7ff fda7 	bl	8001f7c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	0e1b      	lsrs	r3, r3, #24
 8002432:	b2db      	uxtb	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fda1 	bl	8001f7c <W25qxx_Spi>
 800243a:	e002      	b.n	8002442 <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 800243c:	2002      	movs	r0, #2
 800243e:	f7ff fd9d 	bl	8001f7c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fd97 	bl	8001f7c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	b2db      	uxtb	r3, r3
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fd91 	bl	8001f7c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fd8c 	bl	8001f7c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b29a      	uxth	r2, r3
 8002468:	2364      	movs	r3, #100	; 0x64
 800246a:	68f9      	ldr	r1, [r7, #12]
 800246c:	480c      	ldr	r0, [pc, #48]	; (80024a0 <W25qxx_WritePage+0x108>)
 800246e:	f002 ffb1 	bl	80053d4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002478:	4808      	ldr	r0, [pc, #32]	; (800249c <W25qxx_WritePage+0x104>)
 800247a:	f000 fbfd 	bl	8002c78 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800247e:	f7ff fe63 	bl	8002148 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002482:	2001      	movs	r0, #1
 8002484:	f000 f92a 	bl	80026dc <HAL_Delay>
	w25qxx.Lock = 0;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <W25qxx_WritePage+0x100>)
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000a10 	.word	0x20000a10
 800249c:	40020000 	.word	0x40020000
 80024a0:	20000978 	.word	0x20000978

080024a4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80024b2:	e002      	b.n	80024ba <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f000 f911 	bl	80026dc <HAL_Delay>
	while (w25qxx.Lock == 1)
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <W25qxx_ReadPage+0xf4>)
 80024bc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d0f7      	beq.n	80024b4 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <W25qxx_ReadPage+0xf4>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80024cc:	4b32      	ldr	r3, [pc, #200]	; (8002598 <W25qxx_ReadPage+0xf4>)
 80024ce:	895b      	ldrh	r3, [r3, #10]
 80024d0:	461a      	mov	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d802      	bhi.n	80024de <W25qxx_ReadPage+0x3a>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80024de:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <W25qxx_ReadPage+0xf4>)
 80024e0:	895b      	ldrh	r3, [r3, #10]
 80024e2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	4413      	add	r3, r2
 80024ea:	4a2b      	ldr	r2, [pc, #172]	; (8002598 <W25qxx_ReadPage+0xf4>)
 80024ec:	8952      	ldrh	r2, [r2, #10]
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d905      	bls.n	80024fe <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <W25qxx_ReadPage+0xf4>)
 80024f4:	895b      	ldrh	r3, [r3, #10]
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <W25qxx_ReadPage+0xf4>)
 8002500:	895b      	ldrh	r3, [r3, #10]
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	fb03 f302 	mul.w	r3, r3, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002516:	4821      	ldr	r0, [pc, #132]	; (800259c <W25qxx_ReadPage+0xf8>)
 8002518:	f000 fbae 	bl	8002c78 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <W25qxx_ReadPage+0xf4>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d909      	bls.n	8002538 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 8002524:	200c      	movs	r0, #12
 8002526:	f7ff fd29 	bl	8001f7c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0e1b      	lsrs	r3, r3, #24
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fd23 	bl	8001f7c <W25qxx_Spi>
 8002536:	e002      	b.n	800253e <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8002538:	200b      	movs	r0, #11
 800253a:	f7ff fd1f 	bl	8001f7c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	b2db      	uxtb	r3, r3
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fd19 	bl	8001f7c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	b2db      	uxtb	r3, r3
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fd13 	bl	8001f7c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fd0e 	bl	8001f7c <W25qxx_Spi>
	W25qxx_Spi(0);
 8002560:	2000      	movs	r0, #0
 8002562:	f7ff fd0b 	bl	8001f7c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	b29a      	uxth	r2, r3
 800256a:	2364      	movs	r3, #100	; 0x64
 800256c:	68f9      	ldr	r1, [r7, #12]
 800256e:	480c      	ldr	r0, [pc, #48]	; (80025a0 <W25qxx_ReadPage+0xfc>)
 8002570:	f003 f864 	bl	800563c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002574:	2201      	movs	r2, #1
 8002576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800257a:	4808      	ldr	r0, [pc, #32]	; (800259c <W25qxx_ReadPage+0xf8>)
 800257c:	f000 fb7c 	bl	8002c78 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002580:	2001      	movs	r0, #1
 8002582:	f000 f8ab 	bl	80026dc <HAL_Delay>
	w25qxx.Lock = 0;
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <W25qxx_ReadPage+0xf4>)
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000a10 	.word	0x20000a10
 800259c:	40020000 	.word	0x40020000
 80025a0:	20000978 	.word	0x20000978

080025a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025aa:	e003      	b.n	80025b4 <LoopCopyDataInit>

080025ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025b2:	3104      	adds	r1, #4

080025b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025b4:	480b      	ldr	r0, [pc, #44]	; (80025e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025bc:	d3f6      	bcc.n	80025ac <CopyDataInit>
  ldr  r2, =_sbss
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025c0:	e002      	b.n	80025c8 <LoopFillZerobss>

080025c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025c4:	f842 3b04 	str.w	r3, [r2], #4

080025c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025cc:	d3f9      	bcc.n	80025c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025ce:	f7ff fc1d 	bl	8001e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d2:	f007 fd7b 	bl	800a0cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7fe facb 	bl	8000b70 <main>
  bx  lr    
 80025da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80025e0:	0800b1b4 	.word	0x0800b1b4
  ldr  r0, =_sdata
 80025e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025e8:	200003b0 	.word	0x200003b0
  ldr  r2, =_sbss
 80025ec:	200003b0 	.word	0x200003b0
  ldr  r3, = _ebss
 80025f0:	20001380 	.word	0x20001380

080025f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025fc:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <HAL_Init+0x40>)
 8002602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_Init+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_Init+0x40>)
 800260e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a07      	ldr	r2, [pc, #28]	; (8002638 <HAL_Init+0x40>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002620:	2003      	movs	r0, #3
 8002622:	f000 f94d 	bl	80028c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002626:	2000      	movs	r0, #0
 8002628:	f000 f808 	bl	800263c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800262c:	f7ff fb38 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023c00 	.word	0x40023c00

0800263c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_InitTick+0x54>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_InitTick+0x58>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002652:	fbb3 f3f1 	udiv	r3, r3, r1
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f965 	bl	800292a <HAL_SYSTICK_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e00e      	b.n	8002688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b0f      	cmp	r3, #15
 800266e:	d80a      	bhi.n	8002686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002670:	2200      	movs	r2, #0
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f000 f92d 	bl	80028d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <HAL_InitTick+0x5c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200000a0 	.word	0x200000a0
 8002694:	200000a8 	.word	0x200000a8
 8002698:	200000a4 	.word	0x200000a4

0800269c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_IncTick+0x20>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_IncTick+0x24>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <HAL_IncTick+0x24>)
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	200000a8 	.word	0x200000a8
 80026c0:	20000a38 	.word	0x20000a38

080026c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return uwTick;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_GetTick+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000a38 	.word	0x20000a38

080026dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff ffee 	bl	80026c4 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d005      	beq.n	8002702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_Delay+0x40>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002702:	bf00      	nop
 8002704:	f7ff ffde 	bl	80026c4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d8f7      	bhi.n	8002704 <HAL_Delay+0x28>
  {
  }
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200000a8 	.word	0x200000a8

08002720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800274c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	; (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <__NVIC_GetPriorityGrouping+0x18>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 0307 	and.w	r3, r3, #7
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db0b      	blt.n	80027ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	4907      	ldr	r1, [pc, #28]	; (80027bc <__NVIC_EnableIRQ+0x38>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2001      	movs	r0, #1
 80027a6:	fa00 f202 	lsl.w	r2, r0, r2
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000e100 	.word	0xe000e100

080027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	db0a      	blt.n	80027ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	490c      	ldr	r1, [pc, #48]	; (800280c <__NVIC_SetPriority+0x4c>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	440b      	add	r3, r1
 80027e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e8:	e00a      	b.n	8002800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4908      	ldr	r1, [pc, #32]	; (8002810 <__NVIC_SetPriority+0x50>)
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	3b04      	subs	r3, #4
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	440b      	add	r3, r1
 80027fe:	761a      	strb	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000e100 	.word	0xe000e100
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f1c3 0307 	rsb	r3, r3, #7
 800282e:	2b04      	cmp	r3, #4
 8002830:	bf28      	it	cs
 8002832:	2304      	movcs	r3, #4
 8002834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3304      	adds	r3, #4
 800283a:	2b06      	cmp	r3, #6
 800283c:	d902      	bls.n	8002844 <NVIC_EncodePriority+0x30>
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3b03      	subs	r3, #3
 8002842:	e000      	b.n	8002846 <NVIC_EncodePriority+0x32>
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	f04f 32ff 	mov.w	r2, #4294967295
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43d9      	mvns	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	4313      	orrs	r3, r2
         );
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800288c:	d301      	bcc.n	8002892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288e:	2301      	movs	r3, #1
 8002890:	e00f      	b.n	80028b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002892:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <SysTick_Config+0x40>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289a:	210f      	movs	r1, #15
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f7ff ff8e 	bl	80027c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <SysTick_Config+0x40>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028aa:	4b04      	ldr	r3, [pc, #16]	; (80028bc <SysTick_Config+0x40>)
 80028ac:	2207      	movs	r2, #7
 80028ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	e000e010 	.word	0xe000e010

080028c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff29 	bl	8002720 <__NVIC_SetPriorityGrouping>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e8:	f7ff ff3e 	bl	8002768 <__NVIC_GetPriorityGrouping>
 80028ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7ff ff8e 	bl	8002814 <NVIC_EncodePriority>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff5d 	bl	80027c0 <__NVIC_SetPriority>
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff31 	bl	8002784 <__NVIC_EnableIRQ>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffa2 	bl	800287c <SysTick_Config>
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e159      	b.n	8002c14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	f040 8148 	bne.w	8002c0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d00b      	beq.n	800299e <HAL_GPIO_Init+0x5a>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d007      	beq.n	800299e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002992:	2b11      	cmp	r3, #17
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b12      	cmp	r3, #18
 800299c:	d130      	bne.n	8002a00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	2203      	movs	r2, #3
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 0201 	and.w	r2, r3, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0xfc>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b12      	cmp	r3, #18
 8002a3e:	d123      	bne.n	8002a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a2 	beq.w	8002c0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b56      	ldr	r3, [pc, #344]	; (8002c28 <HAL_GPIO_Init+0x2e4>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a55      	ldr	r2, [pc, #340]	; (8002c28 <HAL_GPIO_Init+0x2e4>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <HAL_GPIO_Init+0x2e4>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae6:	4a51      	ldr	r2, [pc, #324]	; (8002c2c <HAL_GPIO_Init+0x2e8>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a48      	ldr	r2, [pc, #288]	; (8002c30 <HAL_GPIO_Init+0x2ec>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d019      	beq.n	8002b46 <HAL_GPIO_Init+0x202>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a47      	ldr	r2, [pc, #284]	; (8002c34 <HAL_GPIO_Init+0x2f0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_GPIO_Init+0x1fe>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a46      	ldr	r2, [pc, #280]	; (8002c38 <HAL_GPIO_Init+0x2f4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00d      	beq.n	8002b3e <HAL_GPIO_Init+0x1fa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a45      	ldr	r2, [pc, #276]	; (8002c3c <HAL_GPIO_Init+0x2f8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <HAL_GPIO_Init+0x1f6>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a44      	ldr	r2, [pc, #272]	; (8002c40 <HAL_GPIO_Init+0x2fc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_GPIO_Init+0x1f2>
 8002b32:	2304      	movs	r3, #4
 8002b34:	e008      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b36:	2307      	movs	r3, #7
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e004      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e002      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b46:	2300      	movs	r3, #0
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	f002 0203 	and.w	r2, r2, #3
 8002b4e:	0092      	lsls	r2, r2, #2
 8002b50:	4093      	lsls	r3, r2
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b58:	4934      	ldr	r1, [pc, #208]	; (8002c2c <HAL_GPIO_Init+0x2e8>)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	3302      	adds	r3, #2
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b8a:	4a2e      	ldr	r2, [pc, #184]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b90:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb4:	4a23      	ldr	r2, [pc, #140]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bba:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bde:	4a19      	ldr	r2, [pc, #100]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be4:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c08:	4a0e      	ldr	r2, [pc, #56]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3301      	adds	r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	f67f aea2 	bls.w	8002960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3724      	adds	r7, #36	; 0x24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40013800 	.word	0x40013800
 8002c30:	40020000 	.word	0x40020000
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40020800 	.word	0x40020800
 8002c3c:	40020c00 	.word	0x40020c00
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40013c00 	.word	0x40013c00

08002c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e001      	b.n	8002c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c88:	787b      	ldrb	r3, [r7, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c94:	e003      	b.n	8002c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	041a      	lsls	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	619a      	str	r2, [r3, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fa7a 	bl	80011c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40013c00 	.word	0x40013c00

08002cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e11f      	b.n	8002f2e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fcc8 	bl	8000698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d40:	f002 fad0 	bl	80052e4 <HAL_RCC_GetPCLK1Freq>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a7b      	ldr	r2, [pc, #492]	; (8002f38 <HAL_I2C_Init+0x25c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d807      	bhi.n	8002d60 <HAL_I2C_Init+0x84>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a7a      	ldr	r2, [pc, #488]	; (8002f3c <HAL_I2C_Init+0x260>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e006      	b.n	8002d6e <HAL_I2C_Init+0x92>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a77      	ldr	r2, [pc, #476]	; (8002f40 <HAL_I2C_Init+0x264>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf94      	ite	ls
 8002d68:	2301      	movls	r3, #1
 8002d6a:	2300      	movhi	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0db      	b.n	8002f2e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a72      	ldr	r2, [pc, #456]	; (8002f44 <HAL_I2C_Init+0x268>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0c9b      	lsrs	r3, r3, #18
 8002d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a64      	ldr	r2, [pc, #400]	; (8002f38 <HAL_I2C_Init+0x25c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d802      	bhi.n	8002db0 <HAL_I2C_Init+0xd4>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	e009      	b.n	8002dc4 <HAL_I2C_Init+0xe8>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a63      	ldr	r2, [pc, #396]	; (8002f48 <HAL_I2C_Init+0x26c>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4956      	ldr	r1, [pc, #344]	; (8002f38 <HAL_I2C_Init+0x25c>)
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d80d      	bhi.n	8002e00 <HAL_I2C_Init+0x124>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e59      	subs	r1, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	bf38      	it	cc
 8002dfc:	2304      	movcc	r3, #4
 8002dfe:	e04f      	b.n	8002ea0 <HAL_I2C_Init+0x1c4>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <HAL_I2C_Init+0x150>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e012      	b.n	8002e52 <HAL_I2C_Init+0x176>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e58      	subs	r0, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	0099      	lsls	r1, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Init+0x17e>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e022      	b.n	8002ea0 <HAL_I2C_Init+0x1c4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10e      	bne.n	8002e80 <HAL_I2C_Init+0x1a4>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e58      	subs	r0, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	440b      	add	r3, r1
 8002e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7e:	e00f      	b.n	8002ea0 <HAL_I2C_Init+0x1c4>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e58      	subs	r0, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	0099      	lsls	r1, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	6809      	ldr	r1, [r1, #0]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6911      	ldr	r1, [r2, #16]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68d2      	ldr	r2, [r2, #12]
 8002eda:	4311      	orrs	r1, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	000186a0 	.word	0x000186a0
 8002f3c:	001e847f 	.word	0x001e847f
 8002f40:	003d08ff 	.word	0x003d08ff
 8002f44:	431bde83 	.word	0x431bde83
 8002f48:	10624dd3 	.word	0x10624dd3

08002f4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	461a      	mov	r2, r3
 8002f58:	460b      	mov	r3, r1
 8002f5a:	817b      	strh	r3, [r7, #10]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7ff fbb0 	bl	80026c4 <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	f040 80e0 	bne.w	8003134 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2319      	movs	r3, #25
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4970      	ldr	r1, [pc, #448]	; (8003140 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fa92 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e0d3      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_I2C_Master_Transmit+0x50>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e0cc      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d007      	beq.n	8002fc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2221      	movs	r2, #33	; 0x21
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2210      	movs	r2, #16
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	893a      	ldrh	r2, [r7, #8]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a50      	ldr	r2, [pc, #320]	; (8003144 <HAL_I2C_Master_Transmit+0x1f8>)
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003004:	8979      	ldrh	r1, [r7, #10]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f9ca 	bl	80033a4 <I2C_MasterRequestWrite>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e08d      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003030:	e066      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	6a39      	ldr	r1, [r7, #32]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fb0c 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b04      	cmp	r3, #4
 8003048:	d107      	bne.n	800305a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003058:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06b      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b04      	cmp	r3, #4
 800309a:	d11b      	bne.n	80030d4 <HAL_I2C_Master_Transmit+0x188>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d017      	beq.n	80030d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	6a39      	ldr	r1, [r7, #32]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fafc 	bl	80036d6 <I2C_WaitOnBTFFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00d      	beq.n	8003100 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d107      	bne.n	80030fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e01a      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d194      	bne.n	8003032 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	00100002 	.word	0x00100002
 8003144:	ffff0000 	.word	0xffff0000

08003148 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	460b      	mov	r3, r1
 8003156:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff fab4 	bl	80026c4 <HAL_GetTick>
 800315c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800315e:	2301      	movs	r3, #1
 8003160:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b20      	cmp	r3, #32
 800316c:	f040 8111 	bne.w	8003392 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	2319      	movs	r3, #25
 8003176:	2201      	movs	r2, #1
 8003178:	4988      	ldr	r1, [pc, #544]	; (800339c <HAL_I2C_IsDeviceReady+0x254>)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f994 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
 8003188:	e104      	b.n	8003394 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_I2C_IsDeviceReady+0x50>
 8003194:	2302      	movs	r3, #2
 8003196:	e0fd      	b.n	8003394 <HAL_I2C_IsDeviceReady+0x24c>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d007      	beq.n	80031be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2224      	movs	r2, #36	; 0x24
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4a70      	ldr	r2, [pc, #448]	; (80033a0 <HAL_I2C_IsDeviceReady+0x258>)
 80031e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f952 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003218:	d103      	bne.n	8003222 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0b6      	b.n	8003394 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003226:	897b      	ldrh	r3, [r7, #10]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003234:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003236:	f7ff fa45 	bl	80026c4 <HAL_GetTick>
 800323a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b02      	cmp	r3, #2
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003260:	bf0c      	ite	eq
 8003262:	2301      	moveq	r3, #1
 8003264:	2300      	movne	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800326a:	e025      	b.n	80032b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800326c:	f7ff fa2a 	bl	80026c4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d302      	bcc.n	8003282 <HAL_I2C_IsDeviceReady+0x13a>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	22a0      	movs	r2, #160	; 0xa0
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b02      	cmp	r3, #2
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2ba0      	cmp	r3, #160	; 0xa0
 80032c2:	d005      	beq.n	80032d0 <HAL_I2C_IsDeviceReady+0x188>
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d102      	bne.n	80032d0 <HAL_I2C_IsDeviceReady+0x188>
 80032ca:	7dbb      	ldrb	r3, [r7, #22]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0cd      	beq.n	800326c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d129      	bne.n	800333a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2319      	movs	r3, #25
 8003312:	2201      	movs	r2, #1
 8003314:	4921      	ldr	r1, [pc, #132]	; (800339c <HAL_I2C_IsDeviceReady+0x254>)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f8c6 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e036      	b.n	8003394 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e02c      	b.n	8003394 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003348:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003352:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2319      	movs	r3, #25
 800335a:	2201      	movs	r2, #1
 800335c:	490f      	ldr	r1, [pc, #60]	; (800339c <HAL_I2C_IsDeviceReady+0x254>)
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f8a2 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e012      	b.n	8003394 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	3301      	adds	r3, #1
 8003372:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	f4ff af32 	bcc.w	80031e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
  }
}
 8003394:	4618      	mov	r0, r3
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	00100002 	.word	0x00100002
 80033a0:	ffff0000 	.word	0xffff0000

080033a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	460b      	mov	r3, r1
 80033b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d006      	beq.n	80033ce <I2C_MasterRequestWrite+0x2a>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d003      	beq.n	80033ce <I2C_MasterRequestWrite+0x2a>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033cc:	d108      	bne.n	80033e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e00b      	b.n	80033f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	d107      	bne.n	80033f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f84f 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00d      	beq.n	800342c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341e:	d103      	bne.n	8003428 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e035      	b.n	8003498 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003434:	d108      	bne.n	8003448 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003436:	897b      	ldrh	r3, [r7, #10]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003444:	611a      	str	r2, [r3, #16]
 8003446:	e01b      	b.n	8003480 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003448:	897b      	ldrh	r3, [r7, #10]
 800344a:	11db      	asrs	r3, r3, #7
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f003 0306 	and.w	r3, r3, #6
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f063 030f 	orn	r3, r3, #15
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	490e      	ldr	r1, [pc, #56]	; (80034a0 <I2C_MasterRequestWrite+0xfc>)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f875 	bl	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e010      	b.n	8003498 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4907      	ldr	r1, [pc, #28]	; (80034a4 <I2C_MasterRequestWrite+0x100>)
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f865 	bl	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	00010008 	.word	0x00010008
 80034a4:	00010002 	.word	0x00010002

080034a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b8:	e025      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d021      	beq.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c2:	f7ff f8ff 	bl	80026c4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d116      	bne.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f043 0220 	orr.w	r2, r3, #32
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e023      	b.n	800354e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d10d      	bne.n	800352c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	43da      	mvns	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	e00c      	b.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	43da      	mvns	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	429a      	cmp	r2, r3
 800354a:	d0b6      	beq.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003564:	e051      	b.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003574:	d123      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003584:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800358e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f043 0204 	orr.w	r2, r3, #4
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e046      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d021      	beq.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7ff f87d 	bl	80026c4 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d116      	bne.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f043 0220 	orr.w	r2, r3, #32
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e020      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10c      	bne.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	bf14      	ite	ne
 8003626:	2301      	movne	r3, #1
 8003628:	2300      	moveq	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e00b      	b.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	43da      	mvns	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d18d      	bne.n	8003566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003660:	e02d      	b.n	80036be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f878 	bl	8003758 <I2C_IsAcknowledgeFailed>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e02d      	b.n	80036ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d021      	beq.n	80036be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7ff f823 	bl	80026c4 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d116      	bne.n	80036be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f043 0220 	orr.w	r2, r3, #32
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e007      	b.n	80036ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c8:	2b80      	cmp	r3, #128	; 0x80
 80036ca:	d1ca      	bne.n	8003662 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e2:	e02d      	b.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f837 	bl	8003758 <I2C_IsAcknowledgeFailed>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e02d      	b.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fa:	d021      	beq.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fc:	f7fe ffe2 	bl	80026c4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	d302      	bcc.n	8003712 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d116      	bne.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e007      	b.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d1ca      	bne.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376e:	d11b      	bne.n	80037a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003778:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f043 0204 	orr.w	r2, r3, #4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b8:	b08f      	sub	sp, #60	; 0x3c
 80037ba:	af0a      	add	r7, sp, #40	; 0x28
 80037bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e10f      	b.n	80039e8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f006 f97a 	bl	8009adc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2203      	movs	r2, #3
 80037ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f002 ff2b 	bl	8006662 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	687e      	ldr	r6, [r7, #4]
 8003814:	466d      	mov	r5, sp
 8003816:	f106 0410 	add.w	r4, r6, #16
 800381a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003822:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003826:	e885 0003 	stmia.w	r5, {r0, r1}
 800382a:	1d33      	adds	r3, r6, #4
 800382c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800382e:	6838      	ldr	r0, [r7, #0]
 8003830:	f002 fe02 	bl	8006438 <USB_CoreInit>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0d0      	b.n	80039e8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f002 ff19 	bl	8006684 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e04a      	b.n	80038ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	333d      	adds	r3, #61	; 0x3d
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	333c      	adds	r3, #60	; 0x3c
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	b298      	uxth	r0, r3
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3342      	adds	r3, #66	; 0x42
 8003894:	4602      	mov	r2, r0
 8003896:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	333f      	adds	r3, #63	; 0x3f
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3344      	adds	r3, #68	; 0x44
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3348      	adds	r3, #72	; 0x48
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3350      	adds	r3, #80	; 0x50
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	3301      	adds	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d3af      	bcc.n	8003858 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e044      	b.n	8003988 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003914:	7bfa      	ldrb	r2, [r7, #15]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	3301      	adds	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	429a      	cmp	r2, r3
 8003990:	d3b5      	bcc.n	80038fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	687e      	ldr	r6, [r7, #4]
 800399a:	466d      	mov	r5, sp
 800399c:	f106 0410 	add.w	r4, r6, #16
 80039a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80039b0:	1d33      	adds	r3, r6, #4
 80039b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039b4:	6838      	ldr	r0, [r7, #0]
 80039b6:	f002 fe8f 	bl	80066d8 <USB_DevInit>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e00d      	b.n	80039e8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f003 fed7 	bl	8007794 <USB_DevDisconnect>

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_PCD_Start+0x1c>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e020      	b.n	8003a4e <HAL_PCD_Start+0x5e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d109      	bne.n	8003a30 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d005      	beq.n	8003a30 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f002 fe03 	bl	8006640 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f003 fe87 	bl	8007752 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a56:	b590      	push	{r4, r7, lr}
 8003a58:	b08d      	sub	sp, #52	; 0x34
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 ff45 	bl	80078fc <USB_GetMode>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 839d 	bne.w	80041b4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 fea9 	bl	80077d6 <USB_ReadInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8393 	beq.w	80041b2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f003 fea0 	bl	80077d6 <USB_ReadInterrupts>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d107      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f002 0202 	and.w	r2, r2, #2
 8003aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f003 fe8e 	bl	80077d6 <USB_ReadInterrupts>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b10      	cmp	r3, #16
 8003ac2:	d161      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0210 	bic.w	r2, r2, #16
 8003ad2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f003 020f 	and.w	r2, r3, #15
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	3304      	adds	r3, #4
 8003af2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	0c5b      	lsrs	r3, r3, #17
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d124      	bne.n	8003b4a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d035      	beq.n	8003b78 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	6a38      	ldr	r0, [r7, #32]
 8003b20:	f003 fcf4 	bl	800750c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	091b      	lsrs	r3, r3, #4
 8003b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b30:	441a      	add	r2, r3
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b42:	441a      	add	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	619a      	str	r2, [r3, #24]
 8003b48:	e016      	b.n	8003b78 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	0c5b      	lsrs	r3, r3, #17
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d110      	bne.n	8003b78 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6a38      	ldr	r0, [r7, #32]
 8003b62:	f003 fcd3 	bl	800750c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b72:	441a      	add	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0210 	orr.w	r2, r2, #16
 8003b86:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f003 fe22 	bl	80077d6 <USB_ReadInterrupts>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b9c:	d16e      	bne.n	8003c7c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 fe28 	bl	80077fc <USB_ReadDevAllOutEpInterrupt>
 8003bac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003bae:	e062      	b.n	8003c76 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d057      	beq.n	8003c6a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f003 fe4d 	bl	8007864 <USB_ReadDevOutEPInterrupt>
 8003bca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	461a      	mov	r2, r3
 8003be4:	2301      	movs	r3, #1
 8003be6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fdb0 	bl	8004750 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c06:	461a      	mov	r2, r3
 8003c08:	2308      	movs	r3, #8
 8003c0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 feaa 	bl	8004968 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	461a      	mov	r2, r3
 8003c48:	2320      	movs	r3, #32
 8003c4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	461a      	mov	r2, r3
 8003c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c68:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d199      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f003 fda8 	bl	80077d6 <USB_ReadInterrupts>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c90:	f040 80c0 	bne.w	8003e14 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f003 fdc9 	bl	8007830 <USB_ReadDevAllInEpInterrupt>
 8003c9e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003ca4:	e0b2      	b.n	8003e0c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a7 	beq.w	8003e00 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f003 fdef 	bl	80078a0 <USB_ReadDevInEPInterrupt>
 8003cc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d057      	beq.n	8003d7e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69f9      	ldr	r1, [r7, #28]
 8003cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cee:	4013      	ands	r3, r2
 8003cf0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2301      	movs	r3, #1
 8003d02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d132      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	3348      	adds	r3, #72	; 0x48
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4403      	add	r3, r0
 8003d2c:	3344      	adds	r3, #68	; 0x44
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4419      	add	r1, r3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4403      	add	r3, r0
 8003d40:	3348      	adds	r3, #72	; 0x48
 8003d42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d113      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x31c>
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3350      	adds	r3, #80	; 0x50
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d108      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	f003 fdf7 	bl	8007960 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f005 ff30 	bl	8009bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d94:	461a      	mov	r2, r3
 8003d96:	2308      	movs	r3, #8
 8003d98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db0:	461a      	mov	r2, r3
 8003db2:	2310      	movs	r3, #16
 8003db4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2340      	movs	r3, #64	; 0x40
 8003dd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	461a      	mov	r2, r3
 8003dea:	2302      	movs	r3, #2
 8003dec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fc1b 	bl	8004636 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	3301      	adds	r3, #1
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f47f af49 	bne.w	8003ca6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f003 fcdc 	bl	80077d6 <USB_ReadInterrupts>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e28:	d122      	bne.n	8003e70 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d108      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e50:	2100      	movs	r1, #0
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fe26 	bl	8004aa4 <HAL_PCDEx_LPM_Callback>
 8003e58:	e002      	b.n	8003e60 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f005 ff2c 	bl	8009cb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f003 fcae 	bl	80077d6 <USB_ReadInterrupts>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e84:	d112      	bne.n	8003eac <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d102      	bne.n	8003e9c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f005 fee8 	bl	8009c6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003eaa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f003 fc90 	bl	80077d6 <USB_ReadInterrupts>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec0:	f040 80c7 	bne.w	8004052 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2110      	movs	r1, #16
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f002 fd5e 	bl	80069a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee8:	e056      	b.n	8003f98 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003efc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f1c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	3301      	adds	r3, #1
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3a3      	bcc.n	8003eea <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003fb4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d016      	beq.n	8003fec <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fce:	f043 030b 	orr.w	r3, r3, #11
 8003fd2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe4:	f043 030b 	orr.w	r3, r3, #11
 8003fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fea:	e015      	b.n	8004018 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ffe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004002:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004012:	f043 030b 	orr.w	r3, r3, #11
 8004016:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004026:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800402a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800403c:	461a      	mov	r2, r3
 800403e:	f003 fc8f 	bl	8007960 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004050:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f003 fbbd 	bl	80077d6 <USB_ReadInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004066:	d124      	bne.n	80040b2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f003 fc53 	bl	8007918 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f002 fcf3 	bl	8006a62 <USB_GetDevSpeed>
 800407c:	4603      	mov	r3, r0
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681c      	ldr	r4, [r3, #0]
 8004088:	f001 f920 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 800408c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	4620      	mov	r0, r4
 8004098:	f002 fa30 	bl	80064fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f005 fdc6 	bl	8009c2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80040b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f003 fb8d 	bl	80077d6 <USB_ReadInterrupts>
 80040bc:	4603      	mov	r3, r0
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d10a      	bne.n	80040dc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f005 fda3 	bl	8009c12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f002 0208 	and.w	r2, r2, #8
 80040da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 fb78 	bl	80077d6 <USB_ReadInterrupts>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f0:	d10f      	bne.n	8004112 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f005 fdfb 	bl	8009cf8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f003 fb5d 	bl	80077d6 <USB_ReadInterrupts>
 800411c:	4603      	mov	r3, r0
 800411e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004126:	d10f      	bne.n	8004148 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	b2db      	uxtb	r3, r3
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f005 fdce 	bl	8009cd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004146:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f003 fb42 	bl	80077d6 <USB_ReadInterrupts>
 8004152:	4603      	mov	r3, r0
 8004154:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d10a      	bne.n	8004174 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f005 fddc 	bl	8009d1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f003 fb2c 	bl	80077d6 <USB_ReadInterrupts>
 800417e:	4603      	mov	r3, r0
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d115      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f005 fdcc 	bl	8009d38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6859      	ldr	r1, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	e000      	b.n	80041b4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80041b2:	bf00      	nop
    }
  }
}
 80041b4:	3734      	adds	r7, #52	; 0x34
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd90      	pop	{r4, r7, pc}

080041ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_PCD_SetAddress+0x1a>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e013      	b.n	80041fc <HAL_PCD_SetAddress+0x42>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f003 fa8a 	bl	8007706 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	4608      	mov	r0, r1
 800420e:	4611      	mov	r1, r2
 8004210:	461a      	mov	r2, r3
 8004212:	4603      	mov	r3, r0
 8004214:	70fb      	strb	r3, [r7, #3]
 8004216:	460b      	mov	r3, r1
 8004218:	803b      	strh	r3, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004226:	2b00      	cmp	r3, #0
 8004228:	da0f      	bge.n	800424a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	f003 020f 	and.w	r2, r3, #15
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	3338      	adds	r3, #56	; 0x38
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	3304      	adds	r3, #4
 8004240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	705a      	strb	r2, [r3, #1]
 8004248:	e00f      	b.n	800426a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	f003 020f 	and.w	r2, r3, #15
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	4413      	add	r3, r2
 8004260:	3304      	adds	r3, #4
 8004262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004276:	883a      	ldrh	r2, [r7, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	78ba      	ldrb	r2, [r7, #2]
 8004280:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	785b      	ldrb	r3, [r3, #1]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004294:	78bb      	ldrb	r3, [r7, #2]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d102      	bne.n	80042a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_PCD_EP_Open+0xaa>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e00e      	b.n	80042cc <HAL_PCD_EP_Open+0xc8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	4618      	mov	r0, r3
 80042be:	f002 fbf5 	bl	8006aac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80042ca:	7afb      	ldrb	r3, [r7, #11]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	da0f      	bge.n	8004308 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	3338      	adds	r3, #56	; 0x38
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	3304      	adds	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	705a      	strb	r2, [r3, #1]
 8004306:	e00f      	b.n	8004328 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 020f 	and.w	r2, r3, #15
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	3304      	adds	r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	b2da      	uxtb	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_PCD_EP_Close+0x6e>
 800433e:	2302      	movs	r3, #2
 8004340:	e00e      	b.n	8004360 <HAL_PCD_EP_Close+0x8c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	4618      	mov	r0, r3
 8004352:	f002 fc33 	bl	8006bbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	460b      	mov	r3, r1
 8004376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	3304      	adds	r3, #4
 8004390:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2200      	movs	r2, #0
 80043a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2200      	movs	r2, #0
 80043a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043aa:	7afb      	ldrb	r3, [r7, #11]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d102      	bne.n	80043c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043c4:	7afb      	ldrb	r3, [r7, #11]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	6979      	ldr	r1, [r7, #20]
 80043dc:	f002 ff0e 	bl	80071fc <USB_EP0StartXfer>
 80043e0:	e008      	b.n	80043f4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	6979      	ldr	r1, [r7, #20]
 80043f0:	f002 fcc0 	bl	8006d74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	f003 020f 	and.w	r2, r3, #15
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004420:	681b      	ldr	r3, [r3, #0]
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	460b      	mov	r3, r1
 800443c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800443e:	7afb      	ldrb	r3, [r7, #11]
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	3338      	adds	r3, #56	; 0x38
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4413      	add	r3, r2
 8004452:	3304      	adds	r3, #4
 8004454:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2201      	movs	r2, #1
 800446c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800446e:	7afb      	ldrb	r3, [r7, #11]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	b2da      	uxtb	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d102      	bne.n	8004488 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004488:	7afb      	ldrb	r3, [r7, #11]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	6979      	ldr	r1, [r7, #20]
 80044a0:	f002 feac 	bl	80071fc <USB_EP0StartXfer>
 80044a4:	e008      	b.n	80044b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	6979      	ldr	r1, [r7, #20]
 80044b4:	f002 fc5e 	bl	8006d74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	f003 020f 	and.w	r2, r3, #15
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d901      	bls.n	80044e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e050      	b.n	8004582 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	da0f      	bge.n	8004508 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	f003 020f 	and.w	r2, r3, #15
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	3338      	adds	r3, #56	; 0x38
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4413      	add	r3, r2
 80044fc:	3304      	adds	r3, #4
 80044fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	705a      	strb	r2, [r3, #1]
 8004506:	e00d      	b.n	8004524 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	3304      	adds	r3, #4
 800451c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_PCD_EP_SetStall+0x82>
 8004540:	2302      	movs	r3, #2
 8004542:	e01e      	b.n	8004582 <HAL_PCD_EP_SetStall+0xc0>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68f9      	ldr	r1, [r7, #12]
 8004552:	4618      	mov	r0, r3
 8004554:	f003 f803 	bl	800755e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	b2d9      	uxtb	r1, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004572:	461a      	mov	r2, r3
 8004574:	f003 f9f4 	bl	8007960 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	f003 020f 	and.w	r2, r3, #15
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d901      	bls.n	80045a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e042      	b.n	800462e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	da0f      	bge.n	80045d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	f003 020f 	and.w	r2, r3, #15
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	3338      	adds	r3, #56	; 0x38
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4413      	add	r3, r2
 80045c4:	3304      	adds	r3, #4
 80045c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	705a      	strb	r2, [r3, #1]
 80045ce:	e00f      	b.n	80045f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	3304      	adds	r3, #4
 80045e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_PCD_EP_ClrStall+0x86>
 800460c:	2302      	movs	r3, #2
 800460e:	e00e      	b.n	800462e <HAL_PCD_EP_ClrStall+0xa4>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68f9      	ldr	r1, [r7, #12]
 800461e:	4618      	mov	r0, r3
 8004620:	f003 f80b 	bl	800763a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b08a      	sub	sp, #40	; 0x28
 800463a:	af02      	add	r7, sp, #8
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	3338      	adds	r3, #56	; 0x38
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	3304      	adds	r3, #4
 800465c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	429a      	cmp	r2, r3
 8004668:	d901      	bls.n	800466e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e06c      	b.n	8004748 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	429a      	cmp	r2, r3
 8004682:	d902      	bls.n	800468a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3303      	adds	r3, #3
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004692:	e02b      	b.n	80046ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d902      	bls.n	80046b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	3303      	adds	r3, #3
 80046b4:	089b      	lsrs	r3, r3, #2
 80046b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68d9      	ldr	r1, [r3, #12]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	4603      	mov	r3, r0
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f002 fee7 	bl	80074a2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	441a      	add	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	699a      	ldr	r2, [r3, #24]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	441a      	add	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d809      	bhi.n	8004716 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800470a:	429a      	cmp	r2, r3
 800470c:	d203      	bcs.n	8004716 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1be      	bne.n	8004694 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	429a      	cmp	r2, r3
 8004720:	d811      	bhi.n	8004746 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	2201      	movs	r2, #1
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	43db      	mvns	r3, r3
 800473c:	6939      	ldr	r1, [r7, #16]
 800473e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004742:	4013      	ands	r3, r2
 8004744:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	333c      	adds	r3, #60	; 0x3c
 8004768:	3304      	adds	r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b01      	cmp	r3, #1
 8004784:	f040 80a0 	bne.w	80048c8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d015      	beq.n	80047be <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a72      	ldr	r2, [pc, #456]	; (8004960 <PCD_EP_OutXfrComplete_int+0x210>)
 8004796:	4293      	cmp	r3, r2
 8004798:	f240 80dd 	bls.w	8004956 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80d7 	beq.w	8004956 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	461a      	mov	r2, r3
 80047b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ba:	6093      	str	r3, [r2, #8]
 80047bc:	e0cb      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	461a      	mov	r2, r3
 80047d6:	2320      	movs	r3, #32
 80047d8:	6093      	str	r3, [r2, #8]
 80047da:	e0bc      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 80b7 	bne.w	8004956 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a5d      	ldr	r2, [pc, #372]	; (8004960 <PCD_EP_OutXfrComplete_int+0x210>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d90f      	bls.n	8004810 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004806:	461a      	mov	r2, r3
 8004808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480c:	6093      	str	r3, [r2, #8]
 800480e:	e0a2      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004822:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	0159      	lsls	r1, r3, #5
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	440b      	add	r3, r1
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004836:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4403      	add	r3, r0
 8004846:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800484a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4403      	add	r3, r0
 800486e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4419      	add	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	4613      	mov	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4403      	add	r3, r0
 8004884:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004888:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d114      	bne.n	80048ba <PCD_EP_OutXfrComplete_int+0x16a>
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d108      	bne.n	80048ba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048b2:	461a      	mov	r2, r3
 80048b4:	2101      	movs	r1, #1
 80048b6:	f003 f853 	bl	8007960 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	4619      	mov	r1, r3
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f005 f971 	bl	8009ba8 <HAL_PCD_DataOutStageCallback>
 80048c6:	e046      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a26      	ldr	r2, [pc, #152]	; (8004964 <PCD_EP_OutXfrComplete_int+0x214>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d124      	bne.n	800491a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	461a      	mov	r2, r3
 80048e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ec:	6093      	str	r3, [r2, #8]
 80048ee:	e032      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	2320      	movs	r3, #32
 800490a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f005 f948 	bl	8009ba8 <HAL_PCD_DataOutStageCallback>
 8004918:	e01d      	b.n	8004956 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d114      	bne.n	800494a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d108      	bne.n	800494a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004942:	461a      	mov	r2, r3
 8004944:	2100      	movs	r1, #0
 8004946:	f003 f80b 	bl	8007960 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f005 f929 	bl	8009ba8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	4f54300a 	.word	0x4f54300a
 8004964:	4f54310a 	.word	0x4f54310a

08004968 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	333c      	adds	r3, #60	; 0x3c
 8004980:	3304      	adds	r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a15      	ldr	r2, [pc, #84]	; (80049f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d90e      	bls.n	80049bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	461a      	mov	r2, r3
 80049b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f005 f8e1 	bl	8009b84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d90c      	bls.n	80049e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d108      	bne.n	80049e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049dc:	461a      	mov	r2, r3
 80049de:	2101      	movs	r1, #1
 80049e0:	f002 ffbe 	bl	8007960 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	4f54300a 	.word	0x4f54300a

080049f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
 8004a00:	4613      	mov	r3, r2
 8004a02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d107      	bne.n	8004a22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a12:	883b      	ldrh	r3, [r7, #0]
 8004a14:	0419      	lsls	r1, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a20:	e028      	b.n	8004a74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	73fb      	strb	r3, [r7, #15]
 8004a34:	e00d      	b.n	8004a52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	3340      	adds	r3, #64	; 0x40
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	4413      	add	r3, r2
 8004a4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
 8004a52:	7bfa      	ldrb	r2, [r7, #15]
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d3ec      	bcc.n	8004a36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a5c:	883b      	ldrh	r3, [r7, #0]
 8004a5e:	0418      	lsls	r0, r3, #16
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6819      	ldr	r1, [r3, #0]
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	4302      	orrs	r2, r0
 8004a6c:	3340      	adds	r3, #64	; 0x40
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	887a      	ldrh	r2, [r7, #2]
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e25b      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d075      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ada:	4ba3      	ldr	r3, [pc, #652]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d00c      	beq.n	8004b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae6:	4ba0      	ldr	r3, [pc, #640]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d112      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af2:	4b9d      	ldr	r3, [pc, #628]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004afe:	d10b      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	4b99      	ldr	r3, [pc, #612]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d05b      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x108>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d157      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e236      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d106      	bne.n	8004b30 <HAL_RCC_OscConfig+0x74>
 8004b22:	4b91      	ldr	r3, [pc, #580]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a90      	ldr	r2, [pc, #576]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e01d      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x98>
 8004b3a:	4b8b      	ldr	r3, [pc, #556]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a8a      	ldr	r2, [pc, #552]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	4b88      	ldr	r3, [pc, #544]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a87      	ldr	r2, [pc, #540]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e00b      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b54:	4b84      	ldr	r3, [pc, #528]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a83      	ldr	r2, [pc, #524]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	4b81      	ldr	r3, [pc, #516]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a80      	ldr	r2, [pc, #512]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fd fda6 	bl	80026c4 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7fd fda2 	bl	80026c4 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	; 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e1fb      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8e:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0xc0>
 8004b9a:	e014      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fd92 	bl	80026c4 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fd fd8e 	bl	80026c4 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	; 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e1e7      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb6:	4b6c      	ldr	r3, [pc, #432]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0xe8>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d063      	beq.n	8004c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bd2:	4b65      	ldr	r3, [pc, #404]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bde:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d11c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b5f      	ldr	r3, [pc, #380]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d116      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf6:	4b5c      	ldr	r3, [pc, #368]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e1bb      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0e:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4952      	ldr	r1, [pc, #328]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c22:	e03a      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d020      	beq.n	8004c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c2c:	4b4f      	ldr	r3, [pc, #316]	; (8004d6c <HAL_RCC_OscConfig+0x2b0>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c32:	f7fd fd47 	bl	80026c4 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fd fd43 	bl	80026c4 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e19c      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4c:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b43      	ldr	r3, [pc, #268]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4940      	ldr	r1, [pc, #256]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]
 8004c6c:	e015      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <HAL_RCC_OscConfig+0x2b0>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd fd26 	bl	80026c4 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fd fd22 	bl	80026c4 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e17b      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d030      	beq.n	8004d08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cae:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <HAL_RCC_OscConfig+0x2b4>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fd fd06 	bl	80026c4 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fd fd02 	bl	80026c4 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e15b      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cce:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x200>
 8004cda:	e015      	b.n	8004d08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cdc:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <HAL_RCC_OscConfig+0x2b4>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd fcef 	bl	80026c4 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cea:	f7fd fceb 	bl	80026c4 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e144      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f0      	bne.n	8004cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80a0 	beq.w	8004e56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a0e      	ldr	r2, [pc, #56]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d121      	bne.n	8004d96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5e:	f7fd fcb1 	bl	80026c4 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	e011      	b.n	8004d8a <HAL_RCC_OscConfig+0x2ce>
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	42470000 	.word	0x42470000
 8004d70:	42470e80 	.word	0x42470e80
 8004d74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d78:	f7fd fca4 	bl	80026c4 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e0fd      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8a:	4b81      	ldr	r3, [pc, #516]	; (8004f90 <HAL_RCC_OscConfig+0x4d4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d106      	bne.n	8004dac <HAL_RCC_OscConfig+0x2f0>
 8004d9e:	4b7d      	ldr	r3, [pc, #500]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4a7c      	ldr	r2, [pc, #496]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6713      	str	r3, [r2, #112]	; 0x70
 8004daa:	e01c      	b.n	8004de6 <HAL_RCC_OscConfig+0x32a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	d10c      	bne.n	8004dce <HAL_RCC_OscConfig+0x312>
 8004db4:	4b77      	ldr	r3, [pc, #476]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db8:	4a76      	ldr	r2, [pc, #472]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004dba:	f043 0304 	orr.w	r3, r3, #4
 8004dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc0:	4b74      	ldr	r3, [pc, #464]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a73      	ldr	r2, [pc, #460]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	e00b      	b.n	8004de6 <HAL_RCC_OscConfig+0x32a>
 8004dce:	4b71      	ldr	r3, [pc, #452]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a70      	ldr	r2, [pc, #448]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	4b6e      	ldr	r3, [pc, #440]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a6d      	ldr	r2, [pc, #436]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d015      	beq.n	8004e1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dee:	f7fd fc69 	bl	80026c4 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df4:	e00a      	b.n	8004e0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7fd fc65 	bl	80026c4 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e0bc      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	4b61      	ldr	r3, [pc, #388]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ee      	beq.n	8004df6 <HAL_RCC_OscConfig+0x33a>
 8004e18:	e014      	b.n	8004e44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1a:	f7fd fc53 	bl	80026c4 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd fc4f 	bl	80026c4 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0a6      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e38:	4b56      	ldr	r3, [pc, #344]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1ee      	bne.n	8004e22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d105      	bne.n	8004e56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4a:	4b52      	ldr	r3, [pc, #328]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	4a51      	ldr	r2, [pc, #324]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8092 	beq.w	8004f84 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e60:	4b4c      	ldr	r3, [pc, #304]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d05c      	beq.n	8004f26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d141      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e74:	4b48      	ldr	r3, [pc, #288]	; (8004f98 <HAL_RCC_OscConfig+0x4dc>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7a:	f7fd fc23 	bl	80026c4 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e82:	f7fd fc1f 	bl	80026c4 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e078      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e94:	4b3f      	ldr	r3, [pc, #252]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	019b      	lsls	r3, r3, #6
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	4933      	ldr	r1, [pc, #204]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eca:	4b33      	ldr	r3, [pc, #204]	; (8004f98 <HAL_RCC_OscConfig+0x4dc>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fd fbf8 	bl	80026c4 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fd fbf4 	bl	80026c4 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e04d      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eea:	4b2a      	ldr	r3, [pc, #168]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x41c>
 8004ef6:	e045      	b.n	8004f84 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef8:	4b27      	ldr	r3, [pc, #156]	; (8004f98 <HAL_RCC_OscConfig+0x4dc>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efe:	f7fd fbe1 	bl	80026c4 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f06:	f7fd fbdd 	bl	80026c4 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e036      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f18:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f0      	bne.n	8004f06 <HAL_RCC_OscConfig+0x44a>
 8004f24:	e02e      	b.n	8004f84 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e029      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f32:	4b18      	ldr	r3, [pc, #96]	; (8004f94 <HAL_RCC_OscConfig+0x4d8>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d11c      	bne.n	8004f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d115      	bne.n	8004f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d10d      	bne.n	8004f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d106      	bne.n	8004f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40007000 	.word	0x40007000
 8004f94:	40023800 	.word	0x40023800
 8004f98:	42470060 	.word	0x42470060

08004f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0cc      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb0:	4b68      	ldr	r3, [pc, #416]	; (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d90c      	bls.n	8004fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fbe:	4b65      	ldr	r3, [pc, #404]	; (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc6:	4b63      	ldr	r3, [pc, #396]	; (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0b8      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d020      	beq.n	8005026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff0:	4b59      	ldr	r3, [pc, #356]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	4a58      	ldr	r2, [pc, #352]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ffa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005008:	4b53      	ldr	r3, [pc, #332]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	4a52      	ldr	r2, [pc, #328]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005014:	4b50      	ldr	r3, [pc, #320]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	494d      	ldr	r1, [pc, #308]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d044      	beq.n	80050bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d107      	bne.n	800504a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	4b47      	ldr	r3, [pc, #284]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d119      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e07f      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d003      	beq.n	800505a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005056:	2b03      	cmp	r3, #3
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505a:	4b3f      	ldr	r3, [pc, #252]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e06f      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506a:	4b3b      	ldr	r3, [pc, #236]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e067      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507a:	4b37      	ldr	r3, [pc, #220]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f023 0203 	bic.w	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4934      	ldr	r1, [pc, #208]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	4313      	orrs	r3, r2
 800508a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800508c:	f7fd fb1a 	bl	80026c4 <HAL_GetTick>
 8005090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005092:	e00a      	b.n	80050aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005094:	f7fd fb16 	bl	80026c4 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e04f      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	4b2b      	ldr	r3, [pc, #172]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 020c 	and.w	r2, r3, #12
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d1eb      	bne.n	8005094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050bc:	4b25      	ldr	r3, [pc, #148]	; (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d20c      	bcs.n	80050e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ca:	4b22      	ldr	r3, [pc, #136]	; (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d2:	4b20      	ldr	r3, [pc, #128]	; (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e032      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4916      	ldr	r1, [pc, #88]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	490e      	ldr	r1, [pc, #56]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005122:	f000 f821 	bl	8005168 <HAL_RCC_GetSysClockFreq>
 8005126:	4601      	mov	r1, r0
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <HAL_RCC_ClockConfig+0x1c0>)
 8005134:	5cd3      	ldrb	r3, [r2, r3]
 8005136:	fa21 f303 	lsr.w	r3, r1, r3
 800513a:	4a09      	ldr	r2, [pc, #36]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800513c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fd fa7a 	bl	800263c <HAL_InitTick>

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40023c00 	.word	0x40023c00
 8005158:	40023800 	.word	0x40023800
 800515c:	0800b18c 	.word	0x0800b18c
 8005160:	200000a0 	.word	0x200000a0
 8005164:	200000a4 	.word	0x200000a4

08005168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	2300      	movs	r3, #0
 8005178:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800517e:	4b50      	ldr	r3, [pc, #320]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b04      	cmp	r3, #4
 8005188:	d007      	beq.n	800519a <HAL_RCC_GetSysClockFreq+0x32>
 800518a:	2b08      	cmp	r3, #8
 800518c:	d008      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0x38>
 800518e:	2b00      	cmp	r3, #0
 8005190:	f040 808d 	bne.w	80052ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005194:	4b4b      	ldr	r3, [pc, #300]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005196:	60bb      	str	r3, [r7, #8]
       break;
 8005198:	e08c      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800519a:	4b4b      	ldr	r3, [pc, #300]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800519c:	60bb      	str	r3, [r7, #8]
      break;
 800519e:	e089      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051a0:	4b47      	ldr	r3, [pc, #284]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051aa:	4b45      	ldr	r3, [pc, #276]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d023      	beq.n	80051fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051b6:	4b42      	ldr	r3, [pc, #264]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	099b      	lsrs	r3, r3, #6
 80051bc:	f04f 0400 	mov.w	r4, #0
 80051c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	ea03 0501 	and.w	r5, r3, r1
 80051cc:	ea04 0602 	and.w	r6, r4, r2
 80051d0:	4a3d      	ldr	r2, [pc, #244]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051d2:	fb02 f106 	mul.w	r1, r2, r6
 80051d6:	2200      	movs	r2, #0
 80051d8:	fb02 f205 	mul.w	r2, r2, r5
 80051dc:	440a      	add	r2, r1
 80051de:	493a      	ldr	r1, [pc, #232]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051e0:	fba5 0101 	umull	r0, r1, r5, r1
 80051e4:	1853      	adds	r3, r2, r1
 80051e6:	4619      	mov	r1, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f04f 0400 	mov.w	r4, #0
 80051ee:	461a      	mov	r2, r3
 80051f0:	4623      	mov	r3, r4
 80051f2:	f7fa fff9 	bl	80001e8 <__aeabi_uldivmod>
 80051f6:	4603      	mov	r3, r0
 80051f8:	460c      	mov	r4, r1
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	e049      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051fe:	4b30      	ldr	r3, [pc, #192]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	099b      	lsrs	r3, r3, #6
 8005204:	f04f 0400 	mov.w	r4, #0
 8005208:	f240 11ff 	movw	r1, #511	; 0x1ff
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	ea03 0501 	and.w	r5, r3, r1
 8005214:	ea04 0602 	and.w	r6, r4, r2
 8005218:	4629      	mov	r1, r5
 800521a:	4632      	mov	r2, r6
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	0154      	lsls	r4, r2, #5
 8005226:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800522a:	014b      	lsls	r3, r1, #5
 800522c:	4619      	mov	r1, r3
 800522e:	4622      	mov	r2, r4
 8005230:	1b49      	subs	r1, r1, r5
 8005232:	eb62 0206 	sbc.w	r2, r2, r6
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	f04f 0400 	mov.w	r4, #0
 800523e:	0194      	lsls	r4, r2, #6
 8005240:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005244:	018b      	lsls	r3, r1, #6
 8005246:	1a5b      	subs	r3, r3, r1
 8005248:	eb64 0402 	sbc.w	r4, r4, r2
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	00e2      	lsls	r2, r4, #3
 8005256:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800525a:	00d9      	lsls	r1, r3, #3
 800525c:	460b      	mov	r3, r1
 800525e:	4614      	mov	r4, r2
 8005260:	195b      	adds	r3, r3, r5
 8005262:	eb44 0406 	adc.w	r4, r4, r6
 8005266:	f04f 0100 	mov.w	r1, #0
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	02a2      	lsls	r2, r4, #10
 8005270:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005274:	0299      	lsls	r1, r3, #10
 8005276:	460b      	mov	r3, r1
 8005278:	4614      	mov	r4, r2
 800527a:	4618      	mov	r0, r3
 800527c:	4621      	mov	r1, r4
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f04f 0400 	mov.w	r4, #0
 8005284:	461a      	mov	r2, r3
 8005286:	4623      	mov	r3, r4
 8005288:	f7fa ffae 	bl	80001e8 <__aeabi_uldivmod>
 800528c:	4603      	mov	r3, r0
 800528e:	460c      	mov	r4, r1
 8005290:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005292:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	3301      	adds	r3, #1
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052aa:	60bb      	str	r3, [r7, #8]
      break;
 80052ac:	e002      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80052b0:	60bb      	str	r3, [r7, #8]
      break;
 80052b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052b4:	68bb      	ldr	r3, [r7, #8]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800
 80052c4:	00f42400 	.word	0x00f42400
 80052c8:	017d7840 	.word	0x017d7840

080052cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d0:	4b03      	ldr	r3, [pc, #12]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052d2:	681b      	ldr	r3, [r3, #0]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	200000a0 	.word	0x200000a0

080052e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052e8:	f7ff fff0 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 80052ec:	4601      	mov	r1, r0
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	0a9b      	lsrs	r3, r3, #10
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	4a03      	ldr	r2, [pc, #12]	; (8005308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052fa:	5cd3      	ldrb	r3, [r2, r3]
 80052fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40023800 	.word	0x40023800
 8005308:	0800b19c 	.word	0x0800b19c

0800530c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e056      	b.n	80053cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fc f865 	bl	8001408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005354:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	ea42 0103 	orr.w	r1, r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	0c1b      	lsrs	r3, r3, #16
 800539c:	f003 0104 	and.w	r1, r3, #4
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69da      	ldr	r2, [r3, #28]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_SPI_Transmit+0x22>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e11e      	b.n	8005634 <HAL_SPI_Transmit+0x260>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053fe:	f7fd f961 	bl	80026c4 <HAL_GetTick>
 8005402:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005404:	88fb      	ldrh	r3, [r7, #6]
 8005406:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b01      	cmp	r3, #1
 8005412:	d002      	beq.n	800541a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005414:	2302      	movs	r3, #2
 8005416:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005418:	e103      	b.n	8005622 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_SPI_Transmit+0x52>
 8005420:	88fb      	ldrh	r3, [r7, #6]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800542a:	e0fa      	b.n	8005622 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2203      	movs	r2, #3
 8005430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	88fa      	ldrh	r2, [r7, #6]
 8005444:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	88fa      	ldrh	r2, [r7, #6]
 800544a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005472:	d107      	bne.n	8005484 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005482:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b40      	cmp	r3, #64	; 0x40
 8005490:	d007      	beq.n	80054a2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054aa:	d14b      	bne.n	8005544 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_SPI_Transmit+0xe6>
 80054b4:	8afb      	ldrh	r3, [r7, #22]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d13e      	bne.n	8005538 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	881a      	ldrh	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	1c9a      	adds	r2, r3, #2
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054de:	e02b      	b.n	8005538 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d112      	bne.n	8005514 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	881a      	ldrh	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	1c9a      	adds	r2, r3, #2
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	86da      	strh	r2, [r3, #54]	; 0x36
 8005512:	e011      	b.n	8005538 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005514:	f7fd f8d6 	bl	80026c4 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d803      	bhi.n	800552c <HAL_SPI_Transmit+0x158>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552a:	d102      	bne.n	8005532 <HAL_SPI_Transmit+0x15e>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005536:	e074      	b.n	8005622 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1ce      	bne.n	80054e0 <HAL_SPI_Transmit+0x10c>
 8005542:	e04c      	b.n	80055de <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <HAL_SPI_Transmit+0x17e>
 800554c:	8afb      	ldrh	r3, [r7, #22]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d140      	bne.n	80055d4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005578:	e02c      	b.n	80055d4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b02      	cmp	r3, #2
 8005586:	d113      	bne.n	80055b0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	7812      	ldrb	r2, [r2, #0]
 8005594:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80055ae:	e011      	b.n	80055d4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055b0:	f7fd f888 	bl	80026c4 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d803      	bhi.n	80055c8 <HAL_SPI_Transmit+0x1f4>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d102      	bne.n	80055ce <HAL_SPI_Transmit+0x1fa>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055d2:	e026      	b.n	8005622 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1cd      	bne.n	800557a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fba4 	bl	8005d30 <SPI_EndRxTxTransaction>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	77fb      	strb	r3, [r7, #31]
 800561e:	e000      	b.n	8005622 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005620:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005632:	7ffb      	ldrb	r3, [r7, #31]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005658:	d112      	bne.n	8005680 <HAL_SPI_Receive+0x44>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10e      	bne.n	8005680 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2204      	movs	r2, #4
 8005666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f8e9 	bl	800584e <HAL_SPI_TransmitReceive>
 800567c:	4603      	mov	r3, r0
 800567e:	e0e2      	b.n	8005846 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_SPI_Receive+0x52>
 800568a:	2302      	movs	r3, #2
 800568c:	e0db      	b.n	8005846 <HAL_SPI_Receive+0x20a>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005696:	f7fd f815 	bl	80026c4 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d002      	beq.n	80056ae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056a8:	2302      	movs	r3, #2
 80056aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056ac:	e0c2      	b.n	8005834 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_SPI_Receive+0x7e>
 80056b4:	88fb      	ldrh	r3, [r7, #6]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d102      	bne.n	80056c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056be:	e0b9      	b.n	8005834 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2204      	movs	r2, #4
 80056c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	88fa      	ldrh	r2, [r7, #6]
 80056de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005706:	d107      	bne.n	8005718 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005716:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d007      	beq.n	8005736 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005734:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d162      	bne.n	8005804 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800573e:	e02e      	b.n	800579e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b01      	cmp	r3, #1
 800574c:	d115      	bne.n	800577a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f103 020c 	add.w	r2, r3, #12
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	7812      	ldrb	r2, [r2, #0]
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005778:	e011      	b.n	800579e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800577a:	f7fc ffa3 	bl	80026c4 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d803      	bhi.n	8005792 <HAL_SPI_Receive+0x156>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d102      	bne.n	8005798 <HAL_SPI_Receive+0x15c>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800579c:	e04a      	b.n	8005834 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1cb      	bne.n	8005740 <HAL_SPI_Receive+0x104>
 80057a8:	e031      	b.n	800580e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d113      	bne.n	80057e0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	b292      	uxth	r2, r2
 80057c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057de:	e011      	b.n	8005804 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e0:	f7fc ff70 	bl	80026c4 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d803      	bhi.n	80057f8 <HAL_SPI_Receive+0x1bc>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d102      	bne.n	80057fe <HAL_SPI_Receive+0x1c2>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005802:	e017      	b.n	8005834 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1cd      	bne.n	80057aa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fa27 	bl	8005c66 <SPI_EndRxTransaction>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	75fb      	strb	r3, [r7, #23]
 8005830:	e000      	b.n	8005834 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005832:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005844:	7dfb      	ldrb	r3, [r7, #23]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b08c      	sub	sp, #48	; 0x30
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800585c:	2301      	movs	r3, #1
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_SPI_TransmitReceive+0x26>
 8005870:	2302      	movs	r3, #2
 8005872:	e18a      	b.n	8005b8a <HAL_SPI_TransmitReceive+0x33c>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800587c:	f7fc ff22 	bl	80026c4 <HAL_GetTick>
 8005880:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005892:	887b      	ldrh	r3, [r7, #2]
 8005894:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800589a:	2b01      	cmp	r3, #1
 800589c:	d00f      	beq.n	80058be <HAL_SPI_TransmitReceive+0x70>
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a4:	d107      	bne.n	80058b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <HAL_SPI_TransmitReceive+0x68>
 80058ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d003      	beq.n	80058be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058b6:	2302      	movs	r3, #2
 80058b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058bc:	e15b      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_SPI_TransmitReceive+0x82>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_SPI_TransmitReceive+0x82>
 80058ca:	887b      	ldrh	r3, [r7, #2]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058d6:	e14e      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d003      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2205      	movs	r2, #5
 80058e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	887a      	ldrh	r2, [r7, #2]
 80058fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	887a      	ldrh	r2, [r7, #2]
 8005902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	887a      	ldrh	r2, [r7, #2]
 800590e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	887a      	ldrh	r2, [r7, #2]
 8005914:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d007      	beq.n	8005940 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800593e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005948:	d178      	bne.n	8005a3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x10a>
 8005952:	8b7b      	ldrh	r3, [r7, #26]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d166      	bne.n	8005a26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	881a      	ldrh	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	1c9a      	adds	r2, r3, #2
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800597c:	e053      	b.n	8005a26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b02      	cmp	r3, #2
 800598a:	d11b      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x176>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0x176>
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d113      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	881a      	ldrh	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	1c9a      	adds	r2, r3, #2
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d119      	bne.n	8005a06 <HAL_SPI_TransmitReceive+0x1b8>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d014      	beq.n	8005a06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	b292      	uxth	r2, r2
 80059e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a02:	2301      	movs	r3, #1
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a06:	f7fc fe5d 	bl	80026c4 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d807      	bhi.n	8005a26 <HAL_SPI_TransmitReceive+0x1d8>
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d003      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a24:	e0a7      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1a6      	bne.n	800597e <HAL_SPI_TransmitReceive+0x130>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1a1      	bne.n	800597e <HAL_SPI_TransmitReceive+0x130>
 8005a3a:	e07c      	b.n	8005b36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_SPI_TransmitReceive+0x1fc>
 8005a44:	8b7b      	ldrh	r3, [r7, #26]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d16b      	bne.n	8005b22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	7812      	ldrb	r2, [r2, #0]
 8005a56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a70:	e057      	b.n	8005b22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d11c      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x26c>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d017      	beq.n	8005aba <HAL_SPI_TransmitReceive+0x26c>
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d114      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d119      	bne.n	8005afc <HAL_SPI_TransmitReceive+0x2ae>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d014      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005af8:	2301      	movs	r3, #1
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005afc:	f7fc fde2 	bl	80026c4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d803      	bhi.n	8005b14 <HAL_SPI_TransmitReceive+0x2c6>
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d102      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x2cc>
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d103      	bne.n	8005b22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b20:	e029      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1a2      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x224>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d19d      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f8f8 	bl	8005d30 <SPI_EndRxTxTransaction>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d006      	beq.n	8005b54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b52:	e010      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10b      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	e000      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3730      	adds	r7, #48	; 0x30
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ba2:	e04c      	b.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d048      	beq.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005bac:	f7fc fd8a 	bl	80026c4 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d902      	bls.n	8005bc2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d13d      	bne.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bda:	d111      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be4:	d004      	beq.n	8005bf0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bee:	d107      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c08:	d10f      	bne.n	8005c2a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e00f      	b.n	8005c5e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4013      	ands	r3, r2
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	bf0c      	ite	eq
 8005c4e:	2301      	moveq	r3, #1
 8005c50:	2300      	movne	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d1a3      	bne.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af02      	add	r7, sp, #8
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c7a:	d111      	bne.n	8005ca0 <SPI_EndRxTransaction+0x3a>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c84:	d004      	beq.n	8005c90 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8e:	d107      	bne.n	8005ca0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ca8:	d12a      	bne.n	8005d00 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb2:	d012      	beq.n	8005cda <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2180      	movs	r1, #128	; 0x80
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff ff67 	bl	8005b92 <SPI_WaitFlagStateUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d02d      	beq.n	8005d26 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e026      	b.n	8005d28 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff ff54 	bl	8005b92 <SPI_WaitFlagStateUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01a      	beq.n	8005d26 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf4:	f043 0220 	orr.w	r2, r3, #32
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e013      	b.n	8005d28 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2200      	movs	r2, #0
 8005d08:	2101      	movs	r1, #1
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff ff41 	bl	8005b92 <SPI_WaitFlagStateUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1a:	f043 0220 	orr.w	r2, r3, #32
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e000      	b.n	8005d28 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	; (8005dac <SPI_EndRxTxTransaction+0x7c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1b      	ldr	r2, [pc, #108]	; (8005db0 <SPI_EndRxTxTransaction+0x80>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	0d5b      	lsrs	r3, r3, #21
 8005d48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d4c:	fb02 f303 	mul.w	r3, r2, r3
 8005d50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d5a:	d112      	bne.n	8005d82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2200      	movs	r2, #0
 8005d64:	2180      	movs	r1, #128	; 0x80
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f7ff ff13 	bl	8005b92 <SPI_WaitFlagStateUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d016      	beq.n	8005da0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d76:	f043 0220 	orr.w	r2, r3, #32
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e00f      	b.n	8005da2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d98:	2b80      	cmp	r3, #128	; 0x80
 8005d9a:	d0f2      	beq.n	8005d82 <SPI_EndRxTxTransaction+0x52>
 8005d9c:	e000      	b.n	8005da0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005d9e:	bf00      	nop
  }

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200000a0 	.word	0x200000a0
 8005db0:	165e9f81 	.word	0x165e9f81

08005db4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e083      	b.n	8005ed0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d106      	bne.n	8005de2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fc f87f 	bl	8001ee0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2202      	movs	r2, #2
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005df8:	f023 0307 	bic.w	r3, r3, #7
 8005dfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3304      	adds	r3, #4
 8005e06:	4619      	mov	r1, r3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	f000 f9ed 	bl	80061e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e36:	f023 0303 	bic.w	r3, r3, #3
 8005e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	4313      	orrs	r3, r2
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e54:	f023 030c 	bic.w	r3, r3, #12
 8005e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	4313      	orrs	r3, r2
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	011a      	lsls	r2, r3, #4
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	031b      	lsls	r3, r3, #12
 8005e84:	4313      	orrs	r3, r2
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005e92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005e9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_TIM_Encoder_Start_IT+0x16>
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d010      	beq.n	8005f0e <HAL_TIM_Encoder_Start_IT+0x36>
 8005eec:	e01f      	b.n	8005f2e <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 f9f6 	bl	80062e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0202 	orr.w	r2, r2, #2
 8005f0a:	60da      	str	r2, [r3, #12]
      break;
 8005f0c:	e02e      	b.n	8005f6c <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2201      	movs	r2, #1
 8005f14:	2104      	movs	r1, #4
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 f9e6 	bl	80062e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0204 	orr.w	r2, r2, #4
 8005f2a:	60da      	str	r2, [r3, #12]
      break;
 8005f2c:	e01e      	b.n	8005f6c <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2201      	movs	r2, #1
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 f9d6 	bl	80062e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	2104      	movs	r1, #4
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 f9cf 	bl	80062e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0202 	orr.w	r2, r2, #2
 8005f58:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0204 	orr.w	r2, r2, #4
 8005f68:	60da      	str	r2, [r3, #12]
      break;
 8005f6a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d122      	bne.n	8005fe2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d11b      	bne.n	8005fe2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f06f 0202 	mvn.w	r2, #2
 8005fb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f003 0303 	and.w	r3, r3, #3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fb f8ad 	bl	8001128 <HAL_TIM_IC_CaptureCallback>
 8005fce:	e005      	b.n	8005fdc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f8ea 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f8f1 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d122      	bne.n	8006036 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d11b      	bne.n	8006036 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f06f 0204 	mvn.w	r2, #4
 8006006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fb f883 	bl	8001128 <HAL_TIM_IC_CaptureCallback>
 8006022:	e005      	b.n	8006030 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f8c0 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f8c7 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f003 0308 	and.w	r3, r3, #8
 8006040:	2b08      	cmp	r3, #8
 8006042:	d122      	bne.n	800608a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b08      	cmp	r3, #8
 8006050:	d11b      	bne.n	800608a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f06f 0208 	mvn.w	r2, #8
 800605a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2204      	movs	r2, #4
 8006060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7fb f859 	bl	8001128 <HAL_TIM_IC_CaptureCallback>
 8006076:	e005      	b.n	8006084 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f896 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f89d 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b10      	cmp	r3, #16
 8006096:	d122      	bne.n	80060de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b10      	cmp	r3, #16
 80060a4:	d11b      	bne.n	80060de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f06f 0210 	mvn.w	r2, #16
 80060ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2208      	movs	r2, #8
 80060b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7fb f82f 	bl	8001128 <HAL_TIM_IC_CaptureCallback>
 80060ca:	e005      	b.n	80060d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f86c 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f873 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d10e      	bne.n	800610a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d107      	bne.n	800610a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f06f 0201 	mvn.w	r2, #1
 8006102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f846 	bl	8006196 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006114:	2b80      	cmp	r3, #128	; 0x80
 8006116:	d10e      	bne.n	8006136 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d107      	bne.n	8006136 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800612e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f977 	bl	8006424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d10e      	bne.n	8006162 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d107      	bne.n	8006162 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800615a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f838 	bl	80061d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b20      	cmp	r3, #32
 800616e:	d10e      	bne.n	800618e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b20      	cmp	r3, #32
 800617c:	d107      	bne.n	800618e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f06f 0220 	mvn.w	r2, #32
 8006186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f941 	bl	8006410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a34      	ldr	r2, [pc, #208]	; (80062cc <TIM_Base_SetConfig+0xe4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00f      	beq.n	8006220 <TIM_Base_SetConfig+0x38>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006206:	d00b      	beq.n	8006220 <TIM_Base_SetConfig+0x38>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a31      	ldr	r2, [pc, #196]	; (80062d0 <TIM_Base_SetConfig+0xe8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d007      	beq.n	8006220 <TIM_Base_SetConfig+0x38>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a30      	ldr	r2, [pc, #192]	; (80062d4 <TIM_Base_SetConfig+0xec>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d003      	beq.n	8006220 <TIM_Base_SetConfig+0x38>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a2f      	ldr	r2, [pc, #188]	; (80062d8 <TIM_Base_SetConfig+0xf0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d108      	bne.n	8006232 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a25      	ldr	r2, [pc, #148]	; (80062cc <TIM_Base_SetConfig+0xe4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01b      	beq.n	8006272 <TIM_Base_SetConfig+0x8a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006240:	d017      	beq.n	8006272 <TIM_Base_SetConfig+0x8a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a22      	ldr	r2, [pc, #136]	; (80062d0 <TIM_Base_SetConfig+0xe8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d013      	beq.n	8006272 <TIM_Base_SetConfig+0x8a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a21      	ldr	r2, [pc, #132]	; (80062d4 <TIM_Base_SetConfig+0xec>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00f      	beq.n	8006272 <TIM_Base_SetConfig+0x8a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a20      	ldr	r2, [pc, #128]	; (80062d8 <TIM_Base_SetConfig+0xf0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00b      	beq.n	8006272 <TIM_Base_SetConfig+0x8a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a1f      	ldr	r2, [pc, #124]	; (80062dc <TIM_Base_SetConfig+0xf4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d007      	beq.n	8006272 <TIM_Base_SetConfig+0x8a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a1e      	ldr	r2, [pc, #120]	; (80062e0 <TIM_Base_SetConfig+0xf8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d003      	beq.n	8006272 <TIM_Base_SetConfig+0x8a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a1d      	ldr	r2, [pc, #116]	; (80062e4 <TIM_Base_SetConfig+0xfc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d108      	bne.n	8006284 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a08      	ldr	r2, [pc, #32]	; (80062cc <TIM_Base_SetConfig+0xe4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d103      	bne.n	80062b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	615a      	str	r2, [r3, #20]
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800
 80062d8:	40000c00 	.word	0x40000c00
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800

080062e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f003 031f 	and.w	r3, r3, #31
 80062fa:	2201      	movs	r2, #1
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	43db      	mvns	r3, r3
 800630a:	401a      	ands	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1a      	ldr	r2, [r3, #32]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	fa01 f303 	lsl.w	r3, r1, r3
 8006320:	431a      	orrs	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006348:	2302      	movs	r3, #2
 800634a:	e050      	b.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1c      	ldr	r2, [pc, #112]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d018      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006398:	d013      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a18      	ldr	r2, [pc, #96]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00e      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a16      	ldr	r2, [pc, #88]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d009      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a15      	ldr	r2, [pc, #84]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d004      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a13      	ldr	r2, [pc, #76]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d10c      	bne.n	80063dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40014000 	.word	0x40014000

08006410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006438:	b084      	sub	sp, #16
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	f107 001c 	add.w	r0, r7, #28
 8006446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	2b01      	cmp	r3, #1
 800644e:	d122      	bne.n	8006496 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647a:	2b01      	cmp	r3, #1
 800647c:	d105      	bne.n	800648a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fac6 	bl	8007a1c <USB_CoreReset>
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]
 8006494:	e01a      	b.n	80064cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 faba 	bl	8007a1c <USB_CoreReset>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38
 80064be:	e005      	b.n	80064cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d10b      	bne.n	80064ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f043 0206 	orr.w	r2, r3, #6
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f043 0220 	orr.w	r2, r3, #32
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064f6:	b004      	add	sp, #16
 80064f8:	4770      	bx	lr
	...

080064fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4613      	mov	r3, r2
 8006508:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d165      	bne.n	80065dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4a41      	ldr	r2, [pc, #260]	; (8006618 <USB_SetTurnaroundTime+0x11c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d906      	bls.n	8006526 <USB_SetTurnaroundTime+0x2a>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4a40      	ldr	r2, [pc, #256]	; (800661c <USB_SetTurnaroundTime+0x120>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d802      	bhi.n	8006526 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006520:	230f      	movs	r3, #15
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	e062      	b.n	80065ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4a3c      	ldr	r2, [pc, #240]	; (800661c <USB_SetTurnaroundTime+0x120>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d906      	bls.n	800653c <USB_SetTurnaroundTime+0x40>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4a3b      	ldr	r2, [pc, #236]	; (8006620 <USB_SetTurnaroundTime+0x124>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d802      	bhi.n	800653c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006536:	230e      	movs	r3, #14
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	e057      	b.n	80065ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4a38      	ldr	r2, [pc, #224]	; (8006620 <USB_SetTurnaroundTime+0x124>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d906      	bls.n	8006552 <USB_SetTurnaroundTime+0x56>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4a37      	ldr	r2, [pc, #220]	; (8006624 <USB_SetTurnaroundTime+0x128>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d802      	bhi.n	8006552 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800654c:	230d      	movs	r3, #13
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	e04c      	b.n	80065ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	4a33      	ldr	r2, [pc, #204]	; (8006624 <USB_SetTurnaroundTime+0x128>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d906      	bls.n	8006568 <USB_SetTurnaroundTime+0x6c>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4a32      	ldr	r2, [pc, #200]	; (8006628 <USB_SetTurnaroundTime+0x12c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d802      	bhi.n	8006568 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006562:	230c      	movs	r3, #12
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	e041      	b.n	80065ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4a2f      	ldr	r2, [pc, #188]	; (8006628 <USB_SetTurnaroundTime+0x12c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d906      	bls.n	800657e <USB_SetTurnaroundTime+0x82>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4a2e      	ldr	r2, [pc, #184]	; (800662c <USB_SetTurnaroundTime+0x130>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d802      	bhi.n	800657e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006578:	230b      	movs	r3, #11
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	e036      	b.n	80065ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	4a2a      	ldr	r2, [pc, #168]	; (800662c <USB_SetTurnaroundTime+0x130>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d906      	bls.n	8006594 <USB_SetTurnaroundTime+0x98>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	4a29      	ldr	r2, [pc, #164]	; (8006630 <USB_SetTurnaroundTime+0x134>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d802      	bhi.n	8006594 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800658e:	230a      	movs	r3, #10
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	e02b      	b.n	80065ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4a26      	ldr	r2, [pc, #152]	; (8006630 <USB_SetTurnaroundTime+0x134>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d906      	bls.n	80065aa <USB_SetTurnaroundTime+0xae>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4a25      	ldr	r2, [pc, #148]	; (8006634 <USB_SetTurnaroundTime+0x138>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d802      	bhi.n	80065aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065a4:	2309      	movs	r3, #9
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e020      	b.n	80065ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	4a21      	ldr	r2, [pc, #132]	; (8006634 <USB_SetTurnaroundTime+0x138>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d906      	bls.n	80065c0 <USB_SetTurnaroundTime+0xc4>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4a20      	ldr	r2, [pc, #128]	; (8006638 <USB_SetTurnaroundTime+0x13c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d802      	bhi.n	80065c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065ba:	2308      	movs	r3, #8
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	e015      	b.n	80065ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <USB_SetTurnaroundTime+0x13c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d906      	bls.n	80065d6 <USB_SetTurnaroundTime+0xda>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4a1c      	ldr	r2, [pc, #112]	; (800663c <USB_SetTurnaroundTime+0x140>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d802      	bhi.n	80065d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065d0:	2307      	movs	r3, #7
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e00a      	b.n	80065ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065d6:	2306      	movs	r3, #6
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	e007      	b.n	80065ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065e2:	2309      	movs	r3, #9
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	e001      	b.n	80065ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065e8:	2309      	movs	r3, #9
 80065ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	029b      	lsls	r3, r3, #10
 8006600:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006604:	431a      	orrs	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	00d8acbf 	.word	0x00d8acbf
 800661c:	00e4e1bf 	.word	0x00e4e1bf
 8006620:	00f423ff 	.word	0x00f423ff
 8006624:	0106737f 	.word	0x0106737f
 8006628:	011a499f 	.word	0x011a499f
 800662c:	01312cff 	.word	0x01312cff
 8006630:	014ca43f 	.word	0x014ca43f
 8006634:	016e35ff 	.word	0x016e35ff
 8006638:	01a6ab1f 	.word	0x01a6ab1f
 800663c:	01e847ff 	.word	0x01e847ff

08006640 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f043 0201 	orr.w	r2, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f023 0201 	bic.w	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d106      	bne.n	80066b0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60da      	str	r2, [r3, #12]
 80066ae:	e00b      	b.n	80066c8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60da      	str	r2, [r3, #12]
 80066c2:	e001      	b.n	80066c8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e003      	b.n	80066d0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80066c8:	2032      	movs	r0, #50	; 0x32
 80066ca:	f7fc f807 	bl	80026dc <HAL_Delay>

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066d8:	b084      	sub	sp, #16
 80066da:	b580      	push	{r7, lr}
 80066dc:	b086      	sub	sp, #24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
 80066f6:	e009      	b.n	800670c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	3340      	adds	r3, #64	; 0x40
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	2200      	movs	r2, #0
 8006704:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	3301      	adds	r3, #1
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b0e      	cmp	r3, #14
 8006710:	d9f2      	bls.n	80066f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11c      	bne.n	8006752 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006726:	f043 0302 	orr.w	r3, r3, #2
 800672a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
 8006750:	e00b      	b.n	800676a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006770:	461a      	mov	r2, r3
 8006772:	2300      	movs	r3, #0
 8006774:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677c:	4619      	mov	r1, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	461a      	mov	r2, r3
 8006786:	680b      	ldr	r3, [r1, #0]
 8006788:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	2b01      	cmp	r3, #1
 800678e:	d10c      	bne.n	80067aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006796:	2100      	movs	r1, #0
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f949 	bl	8006a30 <USB_SetDevSpeed>
 800679e:	e008      	b.n	80067b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067a0:	2101      	movs	r1, #1
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f944 	bl	8006a30 <USB_SetDevSpeed>
 80067a8:	e003      	b.n	80067b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067aa:	2103      	movs	r1, #3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f93f 	bl	8006a30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067b2:	2110      	movs	r1, #16
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f8f3 	bl	80069a0 <USB_FlushTxFifo>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f911 	bl	80069ec <USB_FlushRxFifo>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067da:	461a      	mov	r2, r3
 80067dc:	2300      	movs	r3, #0
 80067de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e6:	461a      	mov	r2, r3
 80067e8:	2300      	movs	r3, #0
 80067ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	461a      	mov	r2, r3
 80067f4:	2300      	movs	r3, #0
 80067f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f8:	2300      	movs	r3, #0
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	e043      	b.n	8006886 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006814:	d118      	bne.n	8006848 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006828:	461a      	mov	r2, r3
 800682a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	e013      	b.n	800685a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	461a      	mov	r2, r3
 8006840:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	e008      	b.n	800685a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	461a      	mov	r2, r3
 8006856:	2300      	movs	r3, #0
 8006858:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006866:	461a      	mov	r2, r3
 8006868:	2300      	movs	r3, #0
 800686a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	461a      	mov	r2, r3
 800687a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800687e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3301      	adds	r3, #1
 8006884:	613b      	str	r3, [r7, #16]
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	429a      	cmp	r2, r3
 800688c:	d3b7      	bcc.n	80067fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800688e:	2300      	movs	r3, #0
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	e043      	b.n	800691c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068aa:	d118      	bne.n	80068de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068be:	461a      	mov	r2, r3
 80068c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e013      	b.n	80068f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	461a      	mov	r2, r3
 80068d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	e008      	b.n	80068f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ea:	461a      	mov	r2, r3
 80068ec:	2300      	movs	r3, #0
 80068ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fc:	461a      	mov	r2, r3
 80068fe:	2300      	movs	r3, #0
 8006900:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690e:	461a      	mov	r2, r3
 8006910:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006914:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3301      	adds	r3, #1
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	429a      	cmp	r2, r3
 8006922:	d3b7      	bcc.n	8006894 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006936:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006944:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	2b00      	cmp	r3, #0
 800694a:	d105      	bne.n	8006958 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	f043 0210 	orr.w	r2, r3, #16
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	4b0f      	ldr	r3, [pc, #60]	; (800699c <USB_DevInit+0x2c4>)
 800695e:	4313      	orrs	r3, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f043 0208 	orr.w	r2, r3, #8
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d107      	bne.n	800698c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006984:	f043 0304 	orr.w	r3, r3, #4
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800698c:	7dfb      	ldrb	r3, [r7, #23]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006998:	b004      	add	sp, #16
 800699a:	4770      	bx	lr
 800699c:	803c3800 	.word	0x803c3800

080069a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	019b      	lsls	r3, r3, #6
 80069b2:	f043 0220 	orr.w	r2, r3, #32
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4a09      	ldr	r2, [pc, #36]	; (80069e8 <USB_FlushTxFifo+0x48>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d901      	bls.n	80069cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e006      	b.n	80069da <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0320 	and.w	r3, r3, #32
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	d0f0      	beq.n	80069ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	00030d40 	.word	0x00030d40

080069ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2210      	movs	r2, #16
 80069fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3301      	adds	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4a09      	ldr	r2, [pc, #36]	; (8006a2c <USB_FlushRxFifo+0x40>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d901      	bls.n	8006a10 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e006      	b.n	8006a1e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b10      	cmp	r3, #16
 8006a1a:	d0f0      	beq.n	80069fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	00030d40 	.word	0x00030d40

08006a30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	68f9      	ldr	r1, [r7, #12]
 8006a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a50:	4313      	orrs	r3, r2
 8006a52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b087      	sub	sp, #28
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 0306 	and.w	r3, r3, #6
 8006a7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75fb      	strb	r3, [r7, #23]
 8006a86:	e00a      	b.n	8006a9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d002      	beq.n	8006a94 <USB_GetDevSpeed+0x32>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b06      	cmp	r3, #6
 8006a92:	d102      	bne.n	8006a9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a94:	2302      	movs	r3, #2
 8006a96:	75fb      	strb	r3, [r7, #23]
 8006a98:	e001      	b.n	8006a9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a9a:	230f      	movs	r3, #15
 8006a9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	785b      	ldrb	r3, [r3, #1]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d13a      	bne.n	8006b3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 030f 	and.w	r3, r3, #15
 8006ad8:	2101      	movs	r1, #1
 8006ada:	fa01 f303 	lsl.w	r3, r1, r3
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	68f9      	ldr	r1, [r7, #12]
 8006ae2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d155      	bne.n	8006bac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	78db      	ldrb	r3, [r3, #3]
 8006b1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	059b      	lsls	r3, r3, #22
 8006b22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b24:	4313      	orrs	r3, r2
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	e036      	b.n	8006bac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b44:	69da      	ldr	r2, [r3, #28]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	2101      	movs	r1, #1
 8006b50:	fa01 f303 	lsl.w	r3, r1, r3
 8006b54:	041b      	lsls	r3, r3, #16
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d11a      	bne.n	8006bac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	78db      	ldrb	r3, [r3, #3]
 8006b90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b92:	430b      	orrs	r3, r1
 8006b94:	4313      	orrs	r3, r2
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006baa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
	...

08006bbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d161      	bne.n	8006c9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bee:	d11f      	bne.n	8006c30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f003 030f 	and.w	r3, r3, #15
 8006c40:	2101      	movs	r1, #1
 8006c42:	fa01 f303 	lsl.w	r3, r1, r3
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	43db      	mvns	r3, r3
 8006c4a:	68f9      	ldr	r1, [r7, #12]
 8006c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c50:	4013      	ands	r3, r2
 8006c52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	2101      	movs	r1, #1
 8006c66:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	68f9      	ldr	r1, [r7, #12]
 8006c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c74:	4013      	ands	r3, r2
 8006c76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	0159      	lsls	r1, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	440b      	add	r3, r1
 8006c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c92:	4619      	mov	r1, r3
 8006c94:	4b35      	ldr	r3, [pc, #212]	; (8006d6c <USB_DeactivateEndpoint+0x1b0>)
 8006c96:	4013      	ands	r3, r2
 8006c98:	600b      	str	r3, [r1, #0]
 8006c9a:	e060      	b.n	8006d5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb2:	d11f      	bne.n	8006cf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	2101      	movs	r1, #1
 8006d06:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0a:	041b      	lsls	r3, r3, #16
 8006d0c:	43db      	mvns	r3, r3
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d14:	4013      	ands	r3, r2
 8006d16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	2101      	movs	r1, #1
 8006d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2e:	041b      	lsls	r3, r3, #16
 8006d30:	43db      	mvns	r3, r3
 8006d32:	68f9      	ldr	r1, [r7, #12]
 8006d34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d38:	4013      	ands	r3, r2
 8006d3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	0159      	lsls	r1, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	440b      	add	r3, r1
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	4619      	mov	r1, r3
 8006d58:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <USB_DeactivateEndpoint+0x1b4>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	ec337800 	.word	0xec337800
 8006d70:	eff37800 	.word	0xeff37800

08006d74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08a      	sub	sp, #40	; 0x28
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	f040 815c 	bne.w	800704e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d132      	bne.n	8006e04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	0151      	lsls	r1, r2, #5
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	440a      	add	r2, r1
 8006db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	0151      	lsls	r1, r2, #5
 8006dd4:	69fa      	ldr	r2, [r7, #28]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dfc:	0cdb      	lsrs	r3, r3, #19
 8006dfe:	04db      	lsls	r3, r3, #19
 8006e00:	6113      	str	r3, [r2, #16]
 8006e02:	e074      	b.n	8006eee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	0151      	lsls	r1, r2, #5
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	440a      	add	r2, r1
 8006e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e1e:	0cdb      	lsrs	r3, r3, #19
 8006e20:	04db      	lsls	r3, r3, #19
 8006e22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	0151      	lsls	r1, r2, #5
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	440a      	add	r2, r1
 8006e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6959      	ldr	r1, [r3, #20]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	440b      	add	r3, r1
 8006e60:	1e59      	subs	r1, r3, #1
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e6a:	04d9      	lsls	r1, r3, #19
 8006e6c:	4b9d      	ldr	r3, [pc, #628]	; (80070e4 <USB_EPStartXfer+0x370>)
 8006e6e:	400b      	ands	r3, r1
 8006e70:	69b9      	ldr	r1, [r7, #24]
 8006e72:	0148      	lsls	r0, r1, #5
 8006e74:	69f9      	ldr	r1, [r7, #28]
 8006e76:	4401      	add	r1, r0
 8006e78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e96:	69b9      	ldr	r1, [r7, #24]
 8006e98:	0148      	lsls	r0, r1, #5
 8006e9a:	69f9      	ldr	r1, [r7, #28]
 8006e9c:	4401      	add	r1, r0
 8006e9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	78db      	ldrb	r3, [r3, #3]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d11f      	bne.n	8006eee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ecc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006eec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d14b      	bne.n	8006f8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d009      	beq.n	8006f10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	78db      	ldrb	r3, [r3, #3]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d128      	bne.n	8006f6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d110      	bne.n	8006f4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	e00f      	b.n	8006f6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	0151      	lsls	r1, r2, #5
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	440a      	add	r2, r1
 8006f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	0151      	lsls	r1, r2, #5
 8006f7c:	69fa      	ldr	r2, [r7, #28]
 8006f7e:	440a      	add	r2, r1
 8006f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	e12f      	b.n	80071ec <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006faa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	78db      	ldrb	r3, [r3, #3]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d015      	beq.n	8006fe0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 8117 	beq.w	80071ec <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	2101      	movs	r1, #1
 8006fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd4:	69f9      	ldr	r1, [r7, #28]
 8006fd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	634b      	str	r3, [r1, #52]	; 0x34
 8006fde:	e105      	b.n	80071ec <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d110      	bne.n	8007012 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	0151      	lsls	r1, r2, #5
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	440a      	add	r2, r1
 8007006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	e00f      	b.n	8007032 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	0151      	lsls	r1, r2, #5
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	440a      	add	r2, r1
 8007028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007030:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	68d9      	ldr	r1, [r3, #12]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	781a      	ldrb	r2, [r3, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	b298      	uxth	r0, r3
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4603      	mov	r3, r0
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 fa2b 	bl	80074a2 <USB_WritePacket>
 800704c:	e0ce      	b.n	80071ec <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	0151      	lsls	r1, r2, #5
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	440a      	add	r2, r1
 8007064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007068:	0cdb      	lsrs	r3, r3, #19
 800706a:	04db      	lsls	r3, r3, #19
 800706c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	0151      	lsls	r1, r2, #5
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	440a      	add	r2, r1
 8007084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007088:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800708c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007090:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d126      	bne.n	80070e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a6:	691a      	ldr	r2, [r3, #16]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070b0:	69b9      	ldr	r1, [r7, #24]
 80070b2:	0148      	lsls	r0, r1, #5
 80070b4:	69f9      	ldr	r1, [r7, #28]
 80070b6:	4401      	add	r1, r0
 80070b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070bc:	4313      	orrs	r3, r2
 80070be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070de:	6113      	str	r3, [r2, #16]
 80070e0:	e036      	b.n	8007150 <USB_EPStartXfer+0x3dc>
 80070e2:	bf00      	nop
 80070e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	695a      	ldr	r2, [r3, #20]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	4413      	add	r3, r2
 80070f2:	1e5a      	subs	r2, r3, #1
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	8afb      	ldrh	r3, [r7, #22]
 800710e:	04d9      	lsls	r1, r3, #19
 8007110:	4b39      	ldr	r3, [pc, #228]	; (80071f8 <USB_EPStartXfer+0x484>)
 8007112:	400b      	ands	r3, r1
 8007114:	69b9      	ldr	r1, [r7, #24]
 8007116:	0148      	lsls	r0, r1, #5
 8007118:	69f9      	ldr	r1, [r7, #28]
 800711a:	4401      	add	r1, r0
 800711c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007120:	4313      	orrs	r3, r2
 8007122:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	691a      	ldr	r2, [r3, #16]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	8af9      	ldrh	r1, [r7, #22]
 8007138:	fb01 f303 	mul.w	r3, r1, r3
 800713c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007140:	69b9      	ldr	r1, [r7, #24]
 8007142:	0148      	lsls	r0, r1, #5
 8007144:	69f9      	ldr	r1, [r7, #28]
 8007146:	4401      	add	r1, r0
 8007148:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800714c:	4313      	orrs	r3, r2
 800714e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d10d      	bne.n	8007172 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	68d9      	ldr	r1, [r3, #12]
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716e:	460a      	mov	r2, r1
 8007170:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	78db      	ldrb	r3, [r3, #3]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d128      	bne.n	80071cc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007186:	2b00      	cmp	r3, #0
 8007188:	d110      	bne.n	80071ac <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	0151      	lsls	r1, r2, #5
 800719c:	69fa      	ldr	r2, [r7, #28]
 800719e:	440a      	add	r2, r1
 80071a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	e00f      	b.n	80071cc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	0151      	lsls	r1, r2, #5
 80071de:	69fa      	ldr	r2, [r7, #28]
 80071e0:	440a      	add	r2, r1
 80071e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	1ff80000 	.word	0x1ff80000

080071fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	4613      	mov	r3, r2
 8007208:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b01      	cmp	r3, #1
 800721a:	f040 80cd 	bne.w	80073b8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d132      	bne.n	800728c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007240:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007244:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	0151      	lsls	r1, r2, #5
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	440a      	add	r2, r1
 8007260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	0151      	lsls	r1, r2, #5
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	440a      	add	r2, r1
 8007280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007284:	0cdb      	lsrs	r3, r3, #19
 8007286:	04db      	lsls	r3, r3, #19
 8007288:	6113      	str	r3, [r2, #16]
 800728a:	e04e      	b.n	800732a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a6:	0cdb      	lsrs	r3, r3, #19
 80072a8:	04db      	lsls	r3, r3, #19
 80072aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	0151      	lsls	r1, r2, #5
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	440a      	add	r2, r1
 80072c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	695a      	ldr	r2, [r3, #20]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d903      	bls.n	80072e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007302:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	691a      	ldr	r2, [r3, #16]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800731a:	6939      	ldr	r1, [r7, #16]
 800731c:	0148      	lsls	r0, r1, #5
 800731e:	6979      	ldr	r1, [r7, #20]
 8007320:	4401      	add	r1, r0
 8007322:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007326:	4313      	orrs	r3, r2
 8007328:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d11e      	bne.n	800736e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d009      	beq.n	800734c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007344:	461a      	mov	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	440a      	add	r2, r1
 8007362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007366:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	e092      	b.n	8007494 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	0151      	lsls	r1, r2, #5
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	440a      	add	r2, r1
 8007384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007388:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800738c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d07e      	beq.n	8007494 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	2101      	movs	r1, #1
 80073a8:	fa01 f303 	lsl.w	r3, r1, r3
 80073ac:	6979      	ldr	r1, [r7, #20]
 80073ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073b2:	4313      	orrs	r3, r2
 80073b4:	634b      	str	r3, [r1, #52]	; 0x34
 80073b6:	e06d      	b.n	8007494 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d2:	0cdb      	lsrs	r3, r3, #19
 80073d4:	04db      	lsls	r3, r3, #19
 80073d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	0151      	lsls	r1, r2, #5
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	440a      	add	r2, r1
 80073ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073fa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	0151      	lsls	r1, r2, #5
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	440a      	add	r2, r1
 8007422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800742a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007438:	691a      	ldr	r2, [r3, #16]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007442:	6939      	ldr	r1, [r7, #16]
 8007444:	0148      	lsls	r0, r1, #5
 8007446:	6979      	ldr	r1, [r7, #20]
 8007448:	4401      	add	r1, r0
 800744a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800744e:	4313      	orrs	r3, r2
 8007450:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007452:	79fb      	ldrb	r3, [r7, #7]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d10d      	bne.n	8007474 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d009      	beq.n	8007474 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	68d9      	ldr	r1, [r3, #12]
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007470:	460a      	mov	r2, r1
 8007472:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	440a      	add	r2, r1
 800748a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800748e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007492:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b089      	sub	sp, #36	; 0x24
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	4611      	mov	r1, r2
 80074ae:	461a      	mov	r2, r3
 80074b0:	460b      	mov	r3, r1
 80074b2:	71fb      	strb	r3, [r7, #7]
 80074b4:	4613      	mov	r3, r2
 80074b6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80074c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d11a      	bne.n	80074fe <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074c8:	88bb      	ldrh	r3, [r7, #4]
 80074ca:	3303      	adds	r3, #3
 80074cc:	089b      	lsrs	r3, r3, #2
 80074ce:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074d0:	2300      	movs	r3, #0
 80074d2:	61bb      	str	r3, [r7, #24]
 80074d4:	e00f      	b.n	80074f6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	031a      	lsls	r2, r3, #12
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e2:	461a      	mov	r2, r3
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	3304      	adds	r3, #4
 80074ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	3301      	adds	r3, #1
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d3eb      	bcc.n	80074d6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3724      	adds	r7, #36	; 0x24
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800750c:	b480      	push	{r7}
 800750e:	b089      	sub	sp, #36	; 0x24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	4613      	mov	r3, r2
 8007518:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	3303      	adds	r3, #3
 8007526:	089b      	lsrs	r3, r3, #2
 8007528:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800752a:	2300      	movs	r3, #0
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	e00b      	b.n	8007548 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	601a      	str	r2, [r3, #0]
    pDest++;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	3304      	adds	r3, #4
 8007540:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	3301      	adds	r3, #1
 8007546:	61bb      	str	r3, [r7, #24]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	429a      	cmp	r2, r3
 800754e:	d3ef      	bcc.n	8007530 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007550:	69fb      	ldr	r3, [r7, #28]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3724      	adds	r7, #36	; 0x24
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800755e:	b480      	push	{r7}
 8007560:	b085      	sub	sp, #20
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d12c      	bne.n	80075d4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	db12      	blt.n	80075b2 <USB_EPSetStall+0x54>
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00f      	beq.n	80075b2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	0151      	lsls	r1, r2, #5
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	440a      	add	r2, r1
 80075a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075b0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	0151      	lsls	r1, r2, #5
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	440a      	add	r2, r1
 80075c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	e02b      	b.n	800762c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	db12      	blt.n	800760c <USB_EPSetStall+0xae>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00f      	beq.n	800760c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	440a      	add	r2, r1
 8007602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800760a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	0151      	lsls	r1, r2, #5
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	440a      	add	r2, r1
 8007622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800762a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800763a:	b480      	push	{r7}
 800763c:	b085      	sub	sp, #20
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d128      	bne.n	80076a8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	440a      	add	r2, r1
 800766c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007670:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007674:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	78db      	ldrb	r3, [r3, #3]
 800767a:	2b03      	cmp	r3, #3
 800767c:	d003      	beq.n	8007686 <USB_EPClearStall+0x4c>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	78db      	ldrb	r3, [r3, #3]
 8007682:	2b02      	cmp	r3, #2
 8007684:	d138      	bne.n	80076f8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	0151      	lsls	r1, r2, #5
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	440a      	add	r2, r1
 800769c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	e027      	b.n	80076f8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	78db      	ldrb	r3, [r3, #3]
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d003      	beq.n	80076d8 <USB_EPClearStall+0x9e>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	78db      	ldrb	r3, [r3, #3]
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d10f      	bne.n	80076f8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007706:	b480      	push	{r7}
 8007708:	b085      	sub	sp, #20
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007724:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007728:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	011b      	lsls	r3, r3, #4
 8007736:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800773a:	68f9      	ldr	r1, [r7, #12]
 800773c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007740:	4313      	orrs	r3, r2
 8007742:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800776c:	f023 0303 	bic.w	r3, r3, #3
 8007770:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007780:	f023 0302 	bic.w	r3, r3, #2
 8007784:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077ae:	f023 0303 	bic.w	r3, r3, #3
 80077b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077c2:	f043 0302 	orr.w	r3, r3, #2
 80077c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4013      	ands	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077ee:	68fb      	ldr	r3, [r7, #12]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	4013      	ands	r3, r2
 800781e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	0c1b      	lsrs	r3, r3, #16
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	4013      	ands	r3, r2
 8007852:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	b29b      	uxth	r3, r3
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	4013      	ands	r3, r2
 8007890:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007892:	68bb      	ldr	r3, [r7, #8]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	fa22 f303 	lsr.w	r3, r2, r3
 80078d0:	01db      	lsls	r3, r3, #7
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4013      	ands	r3, r2
 80078ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078ee:	68bb      	ldr	r3, [r7, #8]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	f003 0301 	and.w	r3, r3, #1
}
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007932:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007936:	f023 0307 	bic.w	r3, r3, #7
 800793a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800794a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
	...

08007960 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	460b      	mov	r3, r1
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	333c      	adds	r3, #60	; 0x3c
 8007976:	3304      	adds	r3, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	4a26      	ldr	r2, [pc, #152]	; (8007a18 <USB_EP0_OutStart+0xb8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d90a      	bls.n	800799a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007994:	d101      	bne.n	800799a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e037      	b.n	8007a0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a0:	461a      	mov	r2, r3
 80079a2:	2300      	movs	r3, #0
 80079a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c8:	f043 0318 	orr.w	r3, r3, #24
 80079cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80079e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d10f      	bne.n	8007a08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ee:	461a      	mov	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	4f54300a 	.word	0x4f54300a

08007a1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4a13      	ldr	r2, [pc, #76]	; (8007a80 <USB_CoreReset+0x64>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d901      	bls.n	8007a3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e01b      	b.n	8007a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	daf2      	bge.n	8007a28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	f043 0201 	orr.w	r2, r3, #1
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <USB_CoreReset+0x64>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d901      	bls.n	8007a64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e006      	b.n	8007a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d0f0      	beq.n	8007a52 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	00030d40 	.word	0x00030d40

08007a84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a94:	f002 fb3e 	bl	800a114 <malloc>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d105      	bne.n	8007aae <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e066      	b.n	8007b7c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7c1b      	ldrb	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d119      	bne.n	8007af2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	2181      	movs	r1, #129	; 0x81
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f002 f9ab 	bl	8009e22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	2101      	movs	r1, #1
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f002 f9a1 	bl	8009e22 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2210      	movs	r2, #16
 8007aec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007af0:	e016      	b.n	8007b20 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007af2:	2340      	movs	r3, #64	; 0x40
 8007af4:	2202      	movs	r2, #2
 8007af6:	2181      	movs	r1, #129	; 0x81
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f002 f992 	bl	8009e22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b04:	2340      	movs	r3, #64	; 0x40
 8007b06:	2202      	movs	r2, #2
 8007b08:	2101      	movs	r1, #1
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f002 f989 	bl	8009e22 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2210      	movs	r2, #16
 8007b1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b20:	2308      	movs	r3, #8
 8007b22:	2203      	movs	r2, #3
 8007b24:	2182      	movs	r1, #130	; 0x82
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f002 f97b 	bl	8009e22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	7c1b      	ldrb	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d109      	bne.n	8007b6a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b60:	2101      	movs	r1, #1
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f002 fa4c 	bl	800a000 <USBD_LL_PrepareReceive>
 8007b68:	e007      	b.n	8007b7a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b70:	2340      	movs	r3, #64	; 0x40
 8007b72:	2101      	movs	r1, #1
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f002 fa43 	bl	800a000 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007b94:	2181      	movs	r1, #129	; 0x81
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f002 f969 	bl	8009e6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f002 f962 	bl	8009e6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007bb2:	2182      	movs	r1, #130	; 0x82
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f002 f95a 	bl	8009e6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00e      	beq.n	8007bf2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be4:	4618      	mov	r0, r3
 8007be6:	f002 fa9d 	bl	800a124 <free>
    pdev->pClassData = NULL;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c0c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d03a      	beq.n	8007c9c <USBD_CDC_Setup+0xa0>
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	f040 8097 	bne.w	8007d5a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	88db      	ldrh	r3, [r3, #6]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d029      	beq.n	8007c88 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	b25b      	sxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	da11      	bge.n	8007c62 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007c4a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	88d2      	ldrh	r2, [r2, #6]
 8007c50:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007c52:	6939      	ldr	r1, [r7, #16]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	88db      	ldrh	r3, [r3, #6]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 fc63 	bl	8009526 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007c60:	e082      	b.n	8007d68 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	785a      	ldrb	r2, [r3, #1]
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	88db      	ldrh	r3, [r3, #6]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007c78:	6939      	ldr	r1, [r7, #16]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	88db      	ldrh	r3, [r3, #6]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fc7c 	bl	800957e <USBD_CtlPrepareRx>
    break;
 8007c86:	e06f      	b.n	8007d68 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	7850      	ldrb	r0, [r2, #1]
 8007c94:	2200      	movs	r2, #0
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	4798      	blx	r3
    break;
 8007c9a:	e065      	b.n	8007d68 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	785b      	ldrb	r3, [r3, #1]
 8007ca0:	2b0b      	cmp	r3, #11
 8007ca2:	d84f      	bhi.n	8007d44 <USBD_CDC_Setup+0x148>
 8007ca4:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <USBD_CDC_Setup+0xb0>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cdd 	.word	0x08007cdd
 8007cb0:	08007d53 	.word	0x08007d53
 8007cb4:	08007d45 	.word	0x08007d45
 8007cb8:	08007d45 	.word	0x08007d45
 8007cbc:	08007d45 	.word	0x08007d45
 8007cc0:	08007d45 	.word	0x08007d45
 8007cc4:	08007d45 	.word	0x08007d45
 8007cc8:	08007d45 	.word	0x08007d45
 8007ccc:	08007d45 	.word	0x08007d45
 8007cd0:	08007d45 	.word	0x08007d45
 8007cd4:	08007d05 	.word	0x08007d05
 8007cd8:	08007d2d 	.word	0x08007d2d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d107      	bne.n	8007cf6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ce6:	f107 030c 	add.w	r3, r7, #12
 8007cea:	2202      	movs	r2, #2
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 fc19 	bl	8009526 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007cf4:	e030      	b.n	8007d58 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 fba3 	bl	8009444 <USBD_CtlError>
        ret = USBD_FAIL;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	75fb      	strb	r3, [r7, #23]
      break;
 8007d02:	e029      	b.n	8007d58 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d107      	bne.n	8007d1e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d0e:	f107 030f 	add.w	r3, r7, #15
 8007d12:	2201      	movs	r2, #1
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 fc05 	bl	8009526 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007d1c:	e01c      	b.n	8007d58 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 fb8f 	bl	8009444 <USBD_CtlError>
        ret = USBD_FAIL;
 8007d26:	2303      	movs	r3, #3
 8007d28:	75fb      	strb	r3, [r7, #23]
      break;
 8007d2a:	e015      	b.n	8007d58 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d00f      	beq.n	8007d56 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 fb83 	bl	8009444 <USBD_CtlError>
        ret = USBD_FAIL;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007d42:	e008      	b.n	8007d56 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 fb7c 	bl	8009444 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d50:	e002      	b.n	8007d58 <USBD_CDC_Setup+0x15c>
      break;
 8007d52:	bf00      	nop
 8007d54:	e008      	b.n	8007d68 <USBD_CDC_Setup+0x16c>
      break;
 8007d56:	bf00      	nop
    }
    break;
 8007d58:	e006      	b.n	8007d68 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 fb71 	bl	8009444 <USBD_CtlError>
    ret = USBD_FAIL;
 8007d62:	2303      	movs	r3, #3
 8007d64:	75fb      	strb	r3, [r7, #23]
    break;
 8007d66:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop

08007d74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e049      	b.n	8007e2a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	3318      	adds	r3, #24
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d029      	beq.n	8007e08 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007db4:	78fa      	ldrb	r2, [r7, #3]
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	4613      	mov	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	440b      	add	r3, r1
 8007dc2:	3318      	adds	r3, #24
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	78f9      	ldrb	r1, [r7, #3]
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	1a5b      	subs	r3, r3, r1
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4403      	add	r3, r0
 8007dd4:	3344      	adds	r3, #68	; 0x44
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ddc:	fb03 f301 	mul.w	r3, r3, r1
 8007de0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d110      	bne.n	8007e08 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007de6:	78fa      	ldrb	r2, [r7, #3]
 8007de8:	6879      	ldr	r1, [r7, #4]
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	440b      	add	r3, r1
 8007df4:	3318      	adds	r3, #24
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007dfa:	78f9      	ldrb	r1, [r7, #3]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2200      	movs	r2, #0
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f002 f8dc 	bl	8009fbe <USBD_LL_Transmit>
 8007e06:	e00f      	b.n	8007e28 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007e24:	78fa      	ldrb	r2, [r7, #3]
 8007e26:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e015      	b.n	8007e80 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f002 f8f2 	bl	800a042 <USBD_LL_GetRxDataSize>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e96:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d015      	beq.n	8007ece <USBD_CDC_EP0_RxReady+0x46>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ea8:	2bff      	cmp	r3, #255	; 0xff
 8007eaa:	d010      	beq.n	8007ece <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007eba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ec2:	b292      	uxth	r2, r2
 8007ec4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	22ff      	movs	r2, #255	; 0xff
 8007eca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2243      	movs	r2, #67	; 0x43
 8007ee4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007ee6:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	20000134 	.word	0x20000134

08007ef8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2243      	movs	r2, #67	; 0x43
 8007f04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007f06:	4b03      	ldr	r3, [pc, #12]	; (8007f14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	200000f0 	.word	0x200000f0

08007f18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2243      	movs	r2, #67	; 0x43
 8007f24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007f26:	4b03      	ldr	r3, [pc, #12]	; (8007f34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	20000178 	.word	0x20000178

08007f38 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	220a      	movs	r2, #10
 8007f44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f46:	4b03      	ldr	r3, [pc, #12]	; (8007f54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	200000ac 	.word	0x200000ac

08007f58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e004      	b.n	8007f76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b087      	sub	sp, #28
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	60b9      	str	r1, [r7, #8]
 8007f8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f94:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fc4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007fec:	2301      	movs	r3, #1
 8007fee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e01a      	b.n	8008034 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008004:	2b00      	cmp	r3, #0
 8008006:	d114      	bne.n	8008032 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2201      	movs	r2, #1
 800800c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008026:	2181      	movs	r1, #129	; 0x81
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 ffc8 	bl	8009fbe <USBD_LL_Transmit>

    ret = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800804a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008056:	2303      	movs	r3, #3
 8008058:	e016      	b.n	8008088 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7c1b      	ldrb	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d109      	bne.n	8008076 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800806c:	2101      	movs	r1, #1
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 ffc6 	bl	800a000 <USBD_LL_PrepareReceive>
 8008074:	e007      	b.n	8008086 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800807c:	2340      	movs	r3, #64	; 0x40
 800807e:	2101      	movs	r1, #1
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 ffbd 	bl	800a000 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	USBD_HID_HandleTypeDef *hhid;

	hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800809c:	2010      	movs	r0, #16
 800809e:	f002 f839 	bl	800a114 <malloc>
 80080a2:	4603      	mov	r3, r0
 80080a4:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d105      	bne.n	80080b8 <USBD_HID_Init+0x28>
	{
		pdev->pClassData = NULL;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		return (uint8_t)USBD_EMEM;
 80080b4:	2302      	movs	r3, #2
 80080b6:	e01b      	b.n	80080f0 <USBD_HID_Init+0x60>
	}

	pdev->pClassData = (void *)hhid;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	7c1b      	ldrb	r3, [r3, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d103      	bne.n	80080d0 <USBD_HID_Init+0x40>
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2207      	movs	r2, #7
 80080cc:	875a      	strh	r2, [r3, #58]	; 0x3a
 80080ce:	e002      	b.n	80080d6 <USBD_HID_Init+0x46>
	}
	else   /* LOW and FULL-speed endpoints */
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	220a      	movs	r2, #10
 80080d4:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	/* Open EP IN */
	(void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80080d6:	2304      	movs	r3, #4
 80080d8:	2203      	movs	r2, #3
 80080da:	2181      	movs	r1, #129	; 0x81
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 fea0 	bl	8009e22 <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	871a      	strh	r2, [r3, #56]	; 0x38

	hhid->state = HID_IDLE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBD_HID_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	/* Close HID EPs */
	(void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008104:	2181      	movs	r1, #129	; 0x81
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 feb1 	bl	8009e6e <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	871a      	strh	r2, [r3, #56]	; 0x38
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	875a      	strh	r2, [r3, #58]	; 0x3a

	/* FRee allocated memory */
	if (pdev->pClassData != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800811e:	2b00      	cmp	r3, #0
 8008120:	d009      	beq.n	8008136 <USBD_HID_DeInit+0x3e>
	{
		(void)USBD_free(pdev->pClassData);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008128:	4618      	mov	r0, r3
 800812a:	f001 fffb 	bl	800a124 <free>
		pdev->pClassData = NULL;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t)USBD_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008150:	60fb      	str	r3, [r7, #12]
	USBD_StatusTypeDef ret = USBD_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	817b      	strh	r3, [r7, #10]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008162:	2b00      	cmp	r3, #0
 8008164:	d045      	beq.n	80081f2 <USBD_HID_Setup+0xb2>
 8008166:	2b20      	cmp	r3, #32
 8008168:	f040 80d4 	bne.w	8008314 <USBD_HID_Setup+0x1d4>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	785b      	ldrb	r3, [r3, #1]
 8008170:	3b02      	subs	r3, #2
 8008172:	2b09      	cmp	r3, #9
 8008174:	d835      	bhi.n	80081e2 <USBD_HID_Setup+0xa2>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <USBD_HID_Setup+0x3c>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	080081d3 	.word	0x080081d3
 8008180:	080081b3 	.word	0x080081b3
 8008184:	080081e3 	.word	0x080081e3
 8008188:	080081e3 	.word	0x080081e3
 800818c:	080081e3 	.word	0x080081e3
 8008190:	080081e3 	.word	0x080081e3
 8008194:	080081e3 	.word	0x080081e3
 8008198:	080081e3 	.word	0x080081e3
 800819c:	080081c1 	.word	0x080081c1
 80081a0:	080081a5 	.word	0x080081a5
		{
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	885b      	ldrh	r3, [r3, #2]
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	461a      	mov	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	601a      	str	r2, [r3, #0]
			break;
 80081b0:	e01e      	b.n	80081f0 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2201      	movs	r2, #1
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 f9b4 	bl	8009526 <USBD_CtlSendData>
			break;
 80081be:	e017      	b.n	80081f0 <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	885b      	ldrh	r3, [r3, #2]
 80081c4:	0a1b      	lsrs	r3, r3, #8
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	605a      	str	r2, [r3, #4]
			break;
 80081d0:	e00e      	b.n	80081f0 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3304      	adds	r3, #4
 80081d6:	2201      	movs	r2, #1
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 f9a3 	bl	8009526 <USBD_CtlSendData>
			break;
 80081e0:	e006      	b.n	80081f0 <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 f92d 	bl	8009444 <USBD_CtlError>
			ret = USBD_FAIL;
 80081ea:	2303      	movs	r3, #3
 80081ec:	75fb      	strb	r3, [r7, #23]
			break;
 80081ee:	bf00      	nop
		}
		break;
 80081f0:	e097      	b.n	8008322 <USBD_HID_Setup+0x1e2>
		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	2b0b      	cmp	r3, #11
 80081f8:	f200 8083 	bhi.w	8008302 <USBD_HID_Setup+0x1c2>
 80081fc:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <USBD_HID_Setup+0xc4>)
 80081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008202:	bf00      	nop
 8008204:	08008235 	.word	0x08008235
 8008208:	08008311 	.word	0x08008311
 800820c:	08008303 	.word	0x08008303
 8008210:	08008303 	.word	0x08008303
 8008214:	08008303 	.word	0x08008303
 8008218:	08008303 	.word	0x08008303
 800821c:	0800825d 	.word	0x0800825d
 8008220:	08008303 	.word	0x08008303
 8008224:	08008303 	.word	0x08008303
 8008228:	08008303 	.word	0x08008303
 800822c:	080082b5 	.word	0x080082b5
 8008230:	080082dd 	.word	0x080082dd
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823a:	2b03      	cmp	r3, #3
 800823c:	d107      	bne.n	800824e <USBD_HID_Setup+0x10e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800823e:	f107 030a 	add.w	r3, r7, #10
 8008242:	2202      	movs	r2, #2
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 f96d 	bl	8009526 <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 800824c:	e061      	b.n	8008312 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 f8f7 	bl	8009444 <USBD_CtlError>
					ret = USBD_FAIL;
 8008256:	2303      	movs	r3, #3
 8008258:	75fb      	strb	r3, [r7, #23]
				break;
 800825a:	e05a      	b.n	8008312 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_DESCRIPTOR:
				if ((req->wValue >> 8) == HID_REPORT_DESC)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	885b      	ldrh	r3, [r3, #2]
 8008260:	0a1b      	lsrs	r3, r3, #8
 8008262:	b29b      	uxth	r3, r3
 8008264:	2b22      	cmp	r3, #34	; 0x22
 8008266:	d108      	bne.n	800827a <USBD_HID_Setup+0x13a>
				{
					len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	88db      	ldrh	r3, [r3, #6]
 800826c:	2b3f      	cmp	r3, #63	; 0x3f
 800826e:	bf28      	it	cs
 8008270:	233f      	movcs	r3, #63	; 0x3f
 8008272:	82bb      	strh	r3, [r7, #20]
					pbuf = HID_MOUSE_ReportDesc;
 8008274:	4b2d      	ldr	r3, [pc, #180]	; (800832c <USBD_HID_Setup+0x1ec>)
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	e015      	b.n	80082a6 <USBD_HID_Setup+0x166>
				}
				else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	885b      	ldrh	r3, [r3, #2]
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b21      	cmp	r3, #33	; 0x21
 8008284:	d108      	bne.n	8008298 <USBD_HID_Setup+0x158>
				{
					pbuf = USBD_HID_Desc;
 8008286:	4b2a      	ldr	r3, [pc, #168]	; (8008330 <USBD_HID_Setup+0x1f0>)
 8008288:	613b      	str	r3, [r7, #16]
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	88db      	ldrh	r3, [r3, #6]
 800828e:	2b09      	cmp	r3, #9
 8008290:	bf28      	it	cs
 8008292:	2309      	movcs	r3, #9
 8008294:	82bb      	strh	r3, [r7, #20]
 8008296:	e006      	b.n	80082a6 <USBD_HID_Setup+0x166>
				}
				else
				{
					USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 f8d2 	bl	8009444 <USBD_CtlError>
					ret = USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	75fb      	strb	r3, [r7, #23]
					break;
 80082a4:	e035      	b.n	8008312 <USBD_HID_Setup+0x1d2>
				}
				(void)USBD_CtlSendData(pdev, pbuf, len);
 80082a6:	8abb      	ldrh	r3, [r7, #20]
 80082a8:	461a      	mov	r2, r3
 80082aa:	6939      	ldr	r1, [r7, #16]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 f93a 	bl	8009526 <USBD_CtlSendData>
				break;
 80082b2:	e02e      	b.n	8008312 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d107      	bne.n	80082ce <USBD_HID_Setup+0x18e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3308      	adds	r3, #8
 80082c2:	2201      	movs	r2, #1
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 f92d 	bl	8009526 <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 80082cc:	e021      	b.n	8008312 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 f8b7 	bl	8009444 <USBD_CtlError>
					ret = USBD_FAIL;
 80082d6:	2303      	movs	r3, #3
 80082d8:	75fb      	strb	r3, [r7, #23]
				break;
 80082da:	e01a      	b.n	8008312 <USBD_HID_Setup+0x1d2>

			case USB_REQ_SET_INTERFACE:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d106      	bne.n	80082f4 <USBD_HID_Setup+0x1b4>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	885b      	ldrh	r3, [r3, #2]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	461a      	mov	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	609a      	str	r2, [r3, #8]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 80082f2:	e00e      	b.n	8008312 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 f8a4 	bl	8009444 <USBD_CtlError>
					ret = USBD_FAIL;
 80082fc:	2303      	movs	r3, #3
 80082fe:	75fb      	strb	r3, [r7, #23]
				break;
 8008300:	e007      	b.n	8008312 <USBD_HID_Setup+0x1d2>

			case USB_REQ_CLEAR_FEATURE:
				break;

			default:
				USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 f89d 	bl	8009444 <USBD_CtlError>
				ret = USBD_FAIL;
 800830a:	2303      	movs	r3, #3
 800830c:	75fb      	strb	r3, [r7, #23]
				break;
 800830e:	e000      	b.n	8008312 <USBD_HID_Setup+0x1d2>
				break;
 8008310:	bf00      	nop
			}
			break;
 8008312:	e006      	b.n	8008322 <USBD_HID_Setup+0x1e2>

			default:
				USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 f894 	bl	8009444 <USBD_CtlError>
				ret = USBD_FAIL;
 800831c:	2303      	movs	r3, #3
 800831e:	75fb      	strb	r3, [r7, #23]
				break;
 8008320:	bf00      	nop
	}

	return (uint8_t)ret;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20000278 	.word	0x20000278
 8008330:	20000260 	.word	0x20000260

08008334 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	4613      	mov	r3, r2
 8008340:	80fb      	strh	r3, [r7, #6]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008348:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008350:	2b03      	cmp	r3, #3
 8008352:	d10c      	bne.n	800836e <USBD_HID_SendReport+0x3a>
	{
		if (hhid->state == HID_IDLE)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	7b1b      	ldrb	r3, [r3, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d108      	bne.n	800836e <USBD_HID_SendReport+0x3a>
		{
			hhid->state = HID_BUSY;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2201      	movs	r2, #1
 8008360:	731a      	strb	r2, [r3, #12]
			(void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008362:	88fb      	ldrh	r3, [r7, #6]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	2181      	movs	r1, #129	; 0x81
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f001 fe28 	bl	8009fbe <USBD_LL_Transmit>
		}
	}

	return (uint8_t)USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2222      	movs	r2, #34	; 0x22
 8008384:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgFSDesc;
 8008386:	4b03      	ldr	r3, [pc, #12]	; (8008394 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	200001f4 	.word	0x200001f4

08008398 <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2222      	movs	r2, #34	; 0x22
 80083a4:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgHSDesc;
 80083a6:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	20000218 	.word	0x20000218

080083b8 <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2222      	movs	r2, #34	; 0x22
 80083c4:	801a      	strh	r2, [r3, #0]

	return USBD_HID_OtherSpeedCfgDesc;
 80083c6:	4b03      	ldr	r3, [pc, #12]	; (80083d4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	2000023c 	.word	0x2000023c

080083d8 <USBD_HID_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
	UNUSED(epnum);
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ea:	2200      	movs	r2, #0
 80083ec:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	220a      	movs	r2, #10
 8008408:	801a      	strh	r2, [r3, #0]

	return USBD_HID_DeviceQualifierDesc;
 800840a:	4b03      	ldr	r3, [pc, #12]	; (8008418 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	2000026c 	.word	0x2000026c

0800841c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008430:	2303      	movs	r3, #3
 8008432:	e025      	b.n	8008480 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	79fa      	ldrb	r2, [r7, #7]
 8008472:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f001 fc6d 	bl	8009d54 <USBD_LL_Init>
 800847a:	4603      	mov	r3, r0
 800847c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800849c:	2303      	movs	r3, #3
 800849e:	e010      	b.n	80084c2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	f107 020e 	add.w	r2, r7, #14
 80084b4:	4610      	mov	r0, r2
 80084b6:	4798      	blx	r3
 80084b8:	4602      	mov	r2, r0
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 fc8a 	bl	8009dec <USBD_LL_Start>
 80084d8:	4603      	mov	r3, r0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008504:	2303      	movs	r3, #3
 8008506:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	78fa      	ldrb	r2, [r7, #3]
 800851c:	4611      	mov	r1, r2
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	4611      	mov	r1, r2
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
  }

  return USBD_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 ff2c 	bl	80093d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008594:	f003 031f 	and.w	r3, r3, #31
 8008598:	2b01      	cmp	r3, #1
 800859a:	d00e      	beq.n	80085ba <USBD_LL_SetupStage+0x5a>
 800859c:	2b01      	cmp	r3, #1
 800859e:	d302      	bcc.n	80085a6 <USBD_LL_SetupStage+0x46>
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d014      	beq.n	80085ce <USBD_LL_SetupStage+0x6e>
 80085a4:	e01d      	b.n	80085e2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa18 	bl	80089e4 <USBD_StdDevReq>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]
      break;
 80085b8:	e020      	b.n	80085fc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa7c 	bl	8008ac0 <USBD_StdItfReq>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73fb      	strb	r3, [r7, #15]
      break;
 80085cc:	e016      	b.n	80085fc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fab8 	bl	8008b4c <USBD_StdEPReq>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]
      break;
 80085e0:	e00c      	b.n	80085fc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 fc5b 	bl	8009eac <USBD_LL_StallEP>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73fb      	strb	r3, [r7, #15]
      break;
 80085fa:	bf00      	nop
  }

  return ret;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	460b      	mov	r3, r1
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d137      	bne.n	800868a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008620:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008628:	2b03      	cmp	r3, #3
 800862a:	d14a      	bne.n	80086c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	429a      	cmp	r2, r3
 8008636:	d913      	bls.n	8008660 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	1ad2      	subs	r2, r2, r3
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	4293      	cmp	r3, r2
 8008650:	bf28      	it	cs
 8008652:	4613      	movcs	r3, r2
 8008654:	461a      	mov	r2, r3
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 ffad 	bl	80095b8 <USBD_CtlContinueRx>
 800865e:	e030      	b.n	80086c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00a      	beq.n	8008682 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008672:	2b03      	cmp	r3, #3
 8008674:	d105      	bne.n	8008682 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 ffa9 	bl	80095da <USBD_CtlSendStatus>
 8008688:	e01b      	b.n	80086c2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d013      	beq.n	80086be <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800869c:	2b03      	cmp	r3, #3
 800869e:	d10e      	bne.n	80086be <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	7afa      	ldrb	r2, [r7, #11]
 80086aa:	4611      	mov	r1, r2
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	4798      	blx	r3
 80086b0:	4603      	mov	r3, r0
 80086b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	e002      	b.n	80086c4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086be:	2303      	movs	r3, #3
 80086c0:	e000      	b.n	80086c4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	460b      	mov	r3, r1
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80086da:	7afb      	ldrb	r3, [r7, #11]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d16a      	bne.n	80087b6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3314      	adds	r3, #20
 80086e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d155      	bne.n	800879c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d914      	bls.n	8008726 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	1ad2      	subs	r2, r2, r3
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	461a      	mov	r2, r3
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f000 ff22 	bl	800955c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008718:	2300      	movs	r3, #0
 800871a:	2200      	movs	r2, #0
 800871c:	2100      	movs	r1, #0
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f001 fc6e 	bl	800a000 <USBD_LL_PrepareReceive>
 8008724:	e03a      	b.n	800879c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	429a      	cmp	r2, r3
 8008730:	d11c      	bne.n	800876c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800873a:	429a      	cmp	r2, r3
 800873c:	d316      	bcc.n	800876c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008748:	429a      	cmp	r2, r3
 800874a:	d20f      	bcs.n	800876c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800874c:	2200      	movs	r2, #0
 800874e:	2100      	movs	r1, #0
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 ff03 	bl	800955c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800875e:	2300      	movs	r3, #0
 8008760:	2200      	movs	r2, #0
 8008762:	2100      	movs	r1, #0
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f001 fc4b 	bl	800a000 <USBD_LL_PrepareReceive>
 800876a:	e017      	b.n	800879c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800877e:	2b03      	cmp	r3, #3
 8008780:	d105      	bne.n	800878e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800878e:	2180      	movs	r1, #128	; 0x80
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f001 fb8b 	bl	8009eac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 ff32 	bl	8009600 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d123      	bne.n	80087ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7ff fe9b 	bl	80084e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80087b4:	e01b      	b.n	80087ee <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d013      	beq.n	80087ea <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d10e      	bne.n	80087ea <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d2:	695b      	ldr	r3, [r3, #20]
 80087d4:	7afa      	ldrb	r2, [r7, #11]
 80087d6:	4611      	mov	r1, r2
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	4798      	blx	r3
 80087dc:	4603      	mov	r3, r0
 80087de:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	e002      	b.n	80087f0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e000      	b.n	80087f0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008824:	2b00      	cmp	r3, #0
 8008826:	d009      	beq.n	800883c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	6852      	ldr	r2, [r2, #4]
 8008834:	b2d2      	uxtb	r2, r2
 8008836:	4611      	mov	r1, r2
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800883c:	2340      	movs	r3, #64	; 0x40
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 faed 	bl	8009e22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2240      	movs	r2, #64	; 0x40
 8008854:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008858:	2340      	movs	r3, #64	; 0x40
 800885a:	2200      	movs	r2, #0
 800885c:	2180      	movs	r1, #128	; 0x80
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f001 fadf 	bl	8009e22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2240      	movs	r2, #64	; 0x40
 800886e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800887a:	b480      	push	{r7}
 800887c:	b083      	sub	sp, #12
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	78fa      	ldrb	r2, [r7, #3]
 800888a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2204      	movs	r2, #4
 80088b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d105      	bne.n	80088e2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d10b      	bne.n	800891a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d005      	beq.n	800891a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008984:	2b00      	cmp	r3, #0
 8008986:	d009      	beq.n	800899c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	6852      	ldr	r2, [r2, #4]
 8008994:	b2d2      	uxtb	r2, r2
 8008996:	4611      	mov	r1, r2
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	4798      	blx	r3
  }

  return USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b087      	sub	sp, #28
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	3301      	adds	r3, #1
 80089bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089c4:	8a3b      	ldrh	r3, [r7, #16]
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	b21a      	sxth	r2, r3
 80089ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	b21b      	sxth	r3, r3
 80089d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089d4:	89fb      	ldrh	r3, [r7, #14]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
	...

080089e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089fa:	2b20      	cmp	r3, #32
 80089fc:	d004      	beq.n	8008a08 <USBD_StdDevReq+0x24>
 80089fe:	2b40      	cmp	r3, #64	; 0x40
 8008a00:	d002      	beq.n	8008a08 <USBD_StdDevReq+0x24>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <USBD_StdDevReq+0x38>
 8008a06:	e050      	b.n	8008aaa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	73fb      	strb	r3, [r7, #15]
    break;
 8008a1a:	e04b      	b.n	8008ab4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	2b09      	cmp	r3, #9
 8008a22:	d83c      	bhi.n	8008a9e <USBD_StdDevReq+0xba>
 8008a24:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <USBD_StdDevReq+0x48>)
 8008a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2a:	bf00      	nop
 8008a2c:	08008a81 	.word	0x08008a81
 8008a30:	08008a95 	.word	0x08008a95
 8008a34:	08008a9f 	.word	0x08008a9f
 8008a38:	08008a8b 	.word	0x08008a8b
 8008a3c:	08008a9f 	.word	0x08008a9f
 8008a40:	08008a5f 	.word	0x08008a5f
 8008a44:	08008a55 	.word	0x08008a55
 8008a48:	08008a9f 	.word	0x08008a9f
 8008a4c:	08008a77 	.word	0x08008a77
 8008a50:	08008a69 	.word	0x08008a69
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f9ce 	bl	8008df8 <USBD_GetDescriptor>
      break;
 8008a5c:	e024      	b.n	8008aa8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fb33 	bl	80090cc <USBD_SetAddress>
      break;
 8008a66:	e01f      	b.n	8008aa8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fb70 	bl	8009150 <USBD_SetConfig>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
      break;
 8008a74:	e018      	b.n	8008aa8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fc0d 	bl	8009298 <USBD_GetConfig>
      break;
 8008a7e:	e013      	b.n	8008aa8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fc3c 	bl	8009300 <USBD_GetStatus>
      break;
 8008a88:	e00e      	b.n	8008aa8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fc6a 	bl	8009366 <USBD_SetFeature>
      break;
 8008a92:	e009      	b.n	8008aa8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fc79 	bl	800938e <USBD_ClrFeature>
      break;
 8008a9c:	e004      	b.n	8008aa8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fccf 	bl	8009444 <USBD_CtlError>
      break;
 8008aa6:	bf00      	nop
    }
    break;
 8008aa8:	e004      	b.n	8008ab4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fcc9 	bl	8009444 <USBD_CtlError>
    break;
 8008ab2:	bf00      	nop
  }

  return ret;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop

08008ac0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ad6:	2b20      	cmp	r3, #32
 8008ad8:	d003      	beq.n	8008ae2 <USBD_StdItfReq+0x22>
 8008ada:	2b40      	cmp	r3, #64	; 0x40
 8008adc:	d001      	beq.n	8008ae2 <USBD_StdItfReq+0x22>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d12a      	bne.n	8008b38 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d81d      	bhi.n	8008b2a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	889b      	ldrh	r3, [r3, #4]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d813      	bhi.n	8008b20 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	4798      	blx	r3
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	88db      	ldrh	r3, [r3, #6]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d110      	bne.n	8008b34 <USBD_StdItfReq+0x74>
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10d      	bne.n	8008b34 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fd5e 	bl	80095da <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008b1e:	e009      	b.n	8008b34 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fc8e 	bl	8009444 <USBD_CtlError>
      break;
 8008b28:	e004      	b.n	8008b34 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fc89 	bl	8009444 <USBD_CtlError>
      break;
 8008b32:	e000      	b.n	8008b36 <USBD_StdItfReq+0x76>
      break;
 8008b34:	bf00      	nop
    }
    break;
 8008b36:	e004      	b.n	8008b42 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fc82 	bl	8009444 <USBD_CtlError>
    break;
 8008b40:	bf00      	nop
  }

  return ret;
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	889b      	ldrh	r3, [r3, #4]
 8008b5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d004      	beq.n	8008b76 <USBD_StdEPReq+0x2a>
 8008b6c:	2b40      	cmp	r3, #64	; 0x40
 8008b6e:	d002      	beq.n	8008b76 <USBD_StdEPReq+0x2a>
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00a      	beq.n	8008b8a <USBD_StdEPReq+0x3e>
 8008b74:	e135      	b.n	8008de2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	4798      	blx	r3
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]
    break;
 8008b88:	e130      	b.n	8008dec <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	785b      	ldrb	r3, [r3, #1]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d03e      	beq.n	8008c10 <USBD_StdEPReq+0xc4>
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d002      	beq.n	8008b9c <USBD_StdEPReq+0x50>
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d077      	beq.n	8008c8a <USBD_StdEPReq+0x13e>
 8008b9a:	e11c      	b.n	8008dd6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d002      	beq.n	8008bac <USBD_StdEPReq+0x60>
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d015      	beq.n	8008bd6 <USBD_StdEPReq+0x8a>
 8008baa:	e02b      	b.n	8008c04 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00c      	beq.n	8008bcc <USBD_StdEPReq+0x80>
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b80      	cmp	r3, #128	; 0x80
 8008bb6:	d009      	beq.n	8008bcc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f001 f975 	bl	8009eac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bc2:	2180      	movs	r1, #128	; 0x80
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 f971 	bl	8009eac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008bca:	e020      	b.n	8008c0e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fc38 	bl	8009444 <USBD_CtlError>
        break;
 8008bd4:	e01b      	b.n	8008c0e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	885b      	ldrh	r3, [r3, #2]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10e      	bne.n	8008bfc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <USBD_StdEPReq+0xb0>
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	2b80      	cmp	r3, #128	; 0x80
 8008be8:	d008      	beq.n	8008bfc <USBD_StdEPReq+0xb0>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	88db      	ldrh	r3, [r3, #6]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d104      	bne.n	8008bfc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 f958 	bl	8009eac <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fcec 	bl	80095da <USBD_CtlSendStatus>

        break;
 8008c02:	e004      	b.n	8008c0e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fc1c 	bl	8009444 <USBD_CtlError>
        break;
 8008c0c:	bf00      	nop
      }
      break;
 8008c0e:	e0e7      	b.n	8008de0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d002      	beq.n	8008c20 <USBD_StdEPReq+0xd4>
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d015      	beq.n	8008c4a <USBD_StdEPReq+0xfe>
 8008c1e:	e02d      	b.n	8008c7c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00c      	beq.n	8008c40 <USBD_StdEPReq+0xf4>
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	2b80      	cmp	r3, #128	; 0x80
 8008c2a:	d009      	beq.n	8008c40 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f001 f93b 	bl	8009eac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c36:	2180      	movs	r1, #128	; 0x80
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 f937 	bl	8009eac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008c3e:	e023      	b.n	8008c88 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fbfe 	bl	8009444 <USBD_CtlError>
        break;
 8008c48:	e01e      	b.n	8008c88 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	885b      	ldrh	r3, [r3, #2]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d119      	bne.n	8008c86 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 f942 	bl	8009eea <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fcb7 	bl	80095da <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	4798      	blx	r3
        }
        break;
 8008c7a:	e004      	b.n	8008c86 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fbe0 	bl	8009444 <USBD_CtlError>
        break;
 8008c84:	e000      	b.n	8008c88 <USBD_StdEPReq+0x13c>
        break;
 8008c86:	bf00      	nop
      }
      break;
 8008c88:	e0aa      	b.n	8008de0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d002      	beq.n	8008c9a <USBD_StdEPReq+0x14e>
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d032      	beq.n	8008cfe <USBD_StdEPReq+0x1b2>
 8008c98:	e097      	b.n	8008dca <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d007      	beq.n	8008cb0 <USBD_StdEPReq+0x164>
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	2b80      	cmp	r3, #128	; 0x80
 8008ca4:	d004      	beq.n	8008cb0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fbcb 	bl	8009444 <USBD_CtlError>
          break;
 8008cae:	e091      	b.n	8008dd4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	da0b      	bge.n	8008cd0 <USBD_StdEPReq+0x184>
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	3310      	adds	r3, #16
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	4413      	add	r3, r2
 8008ccc:	3304      	adds	r3, #4
 8008cce:	e00b      	b.n	8008ce8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fc15 	bl	8009526 <USBD_CtlSendData>
        break;
 8008cfc:	e06a      	b.n	8008dd4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	da11      	bge.n	8008d2a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	f003 020f 	and.w	r2, r3, #15
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	440b      	add	r3, r1
 8008d18:	3324      	adds	r3, #36	; 0x24
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d117      	bne.n	8008d50 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fb8e 	bl	8009444 <USBD_CtlError>
            break;
 8008d28:	e054      	b.n	8008dd4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	f003 020f 	and.w	r2, r3, #15
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d104      	bne.n	8008d50 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fb7b 	bl	8009444 <USBD_CtlError>
            break;
 8008d4e:	e041      	b.n	8008dd4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	da0b      	bge.n	8008d70 <USBD_StdEPReq+0x224>
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	3310      	adds	r3, #16
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	e00b      	b.n	8008d88 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d76:	4613      	mov	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	4413      	add	r3, r2
 8008d86:	3304      	adds	r3, #4
 8008d88:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <USBD_StdEPReq+0x24a>
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
 8008d92:	2b80      	cmp	r3, #128	; 0x80
 8008d94:	d103      	bne.n	8008d9e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	e00e      	b.n	8008dbc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f001 f8c0 	bl	8009f28 <USBD_LL_IsStallEP>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2201      	movs	r2, #1
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	e002      	b.n	8008dbc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fbaf 	bl	8009526 <USBD_CtlSendData>
          break;
 8008dc8:	e004      	b.n	8008dd4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fb39 	bl	8009444 <USBD_CtlError>
        break;
 8008dd2:	bf00      	nop
      }
      break;
 8008dd4:	e004      	b.n	8008de0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fb33 	bl	8009444 <USBD_CtlError>
      break;
 8008dde:	bf00      	nop
    }
    break;
 8008de0:	e004      	b.n	8008dec <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fb2d 	bl	8009444 <USBD_CtlError>
    break;
 8008dea:	bf00      	nop
  }

  return ret;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	885b      	ldrh	r3, [r3, #2]
 8008e12:	0a1b      	lsrs	r3, r3, #8
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	3b01      	subs	r3, #1
 8008e18:	2b06      	cmp	r3, #6
 8008e1a:	f200 8128 	bhi.w	800906e <USBD_GetDescriptor+0x276>
 8008e1e:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <USBD_GetDescriptor+0x2c>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008e41 	.word	0x08008e41
 8008e28:	08008e59 	.word	0x08008e59
 8008e2c:	08008e99 	.word	0x08008e99
 8008e30:	0800906f 	.word	0x0800906f
 8008e34:	0800906f 	.word	0x0800906f
 8008e38:	0800900f 	.word	0x0800900f
 8008e3c:	0800903b 	.word	0x0800903b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	7c12      	ldrb	r2, [r2, #16]
 8008e4c:	f107 0108 	add.w	r1, r7, #8
 8008e50:	4610      	mov	r0, r2
 8008e52:	4798      	blx	r3
 8008e54:	60f8      	str	r0, [r7, #12]
    break;
 8008e56:	e112      	b.n	800907e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	7c1b      	ldrb	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10d      	bne.n	8008e7c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e68:	f107 0208 	add.w	r2, r7, #8
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	2202      	movs	r2, #2
 8008e78:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008e7a:	e100      	b.n	800907e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	f107 0208 	add.w	r2, r7, #8
 8008e88:	4610      	mov	r0, r2
 8008e8a:	4798      	blx	r3
 8008e8c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3301      	adds	r3, #1
 8008e92:	2202      	movs	r2, #2
 8008e94:	701a      	strb	r2, [r3, #0]
    break;
 8008e96:	e0f2      	b.n	800907e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	885b      	ldrh	r3, [r3, #2]
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b05      	cmp	r3, #5
 8008ea0:	f200 80ac 	bhi.w	8008ffc <USBD_GetDescriptor+0x204>
 8008ea4:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <USBD_GetDescriptor+0xb4>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008ec5 	.word	0x08008ec5
 8008eb0:	08008ef9 	.word	0x08008ef9
 8008eb4:	08008f2d 	.word	0x08008f2d
 8008eb8:	08008f61 	.word	0x08008f61
 8008ebc:	08008f95 	.word	0x08008f95
 8008ec0:	08008fc9 	.word	0x08008fc9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	7c12      	ldrb	r2, [r2, #16]
 8008edc:	f107 0108 	add.w	r1, r7, #8
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4798      	blx	r3
 8008ee4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ee6:	e091      	b.n	800900c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 faaa 	bl	8009444 <USBD_CtlError>
        err++;
 8008ef0:	7afb      	ldrb	r3, [r7, #11]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ef6:	e089      	b.n	800900c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00b      	beq.n	8008f1c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	7c12      	ldrb	r2, [r2, #16]
 8008f10:	f107 0108 	add.w	r1, r7, #8
 8008f14:	4610      	mov	r0, r2
 8008f16:	4798      	blx	r3
 8008f18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f1a:	e077      	b.n	800900c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa90 	bl	8009444 <USBD_CtlError>
        err++;
 8008f24:	7afb      	ldrb	r3, [r7, #11]
 8008f26:	3301      	adds	r3, #1
 8008f28:	72fb      	strb	r3, [r7, #11]
      break;
 8008f2a:	e06f      	b.n	800900c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	7c12      	ldrb	r2, [r2, #16]
 8008f44:	f107 0108 	add.w	r1, r7, #8
 8008f48:	4610      	mov	r0, r2
 8008f4a:	4798      	blx	r3
 8008f4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f4e:	e05d      	b.n	800900c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fa76 	bl	8009444 <USBD_CtlError>
        err++;
 8008f58:	7afb      	ldrb	r3, [r7, #11]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	72fb      	strb	r3, [r7, #11]
      break;
 8008f5e:	e055      	b.n	800900c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00b      	beq.n	8008f84 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	7c12      	ldrb	r2, [r2, #16]
 8008f78:	f107 0108 	add.w	r1, r7, #8
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4798      	blx	r3
 8008f80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f82:	e043      	b.n	800900c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fa5c 	bl	8009444 <USBD_CtlError>
        err++;
 8008f8c:	7afb      	ldrb	r3, [r7, #11]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	72fb      	strb	r3, [r7, #11]
      break;
 8008f92:	e03b      	b.n	800900c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	7c12      	ldrb	r2, [r2, #16]
 8008fac:	f107 0108 	add.w	r1, r7, #8
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4798      	blx	r3
 8008fb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fb6:	e029      	b.n	800900c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa42 	bl	8009444 <USBD_CtlError>
        err++;
 8008fc0:	7afb      	ldrb	r3, [r7, #11]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	72fb      	strb	r3, [r7, #11]
      break;
 8008fc6:	e021      	b.n	800900c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00b      	beq.n	8008fec <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	7c12      	ldrb	r2, [r2, #16]
 8008fe0:	f107 0108 	add.w	r1, r7, #8
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
 8008fe8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fea:	e00f      	b.n	800900c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fa28 	bl	8009444 <USBD_CtlError>
        err++;
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	72fb      	strb	r3, [r7, #11]
      break;
 8008ffa:	e007      	b.n	800900c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fa20 	bl	8009444 <USBD_CtlError>
      err++;
 8009004:	7afb      	ldrb	r3, [r7, #11]
 8009006:	3301      	adds	r3, #1
 8009008:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800900a:	bf00      	nop
    }
    break;
 800900c:	e037      	b.n	800907e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	7c1b      	ldrb	r3, [r3, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d109      	bne.n	800902a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800901c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901e:	f107 0208 	add.w	r2, r7, #8
 8009022:	4610      	mov	r0, r2
 8009024:	4798      	blx	r3
 8009026:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009028:	e029      	b.n	800907e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fa09 	bl	8009444 <USBD_CtlError>
      err++;
 8009032:	7afb      	ldrb	r3, [r7, #11]
 8009034:	3301      	adds	r3, #1
 8009036:	72fb      	strb	r3, [r7, #11]
    break;
 8009038:	e021      	b.n	800907e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	7c1b      	ldrb	r3, [r3, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10d      	bne.n	800905e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904a:	f107 0208 	add.w	r2, r7, #8
 800904e:	4610      	mov	r0, r2
 8009050:	4798      	blx	r3
 8009052:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3301      	adds	r3, #1
 8009058:	2207      	movs	r2, #7
 800905a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800905c:	e00f      	b.n	800907e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f9ef 	bl	8009444 <USBD_CtlError>
      err++;
 8009066:	7afb      	ldrb	r3, [r7, #11]
 8009068:	3301      	adds	r3, #1
 800906a:	72fb      	strb	r3, [r7, #11]
    break;
 800906c:	e007      	b.n	800907e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f9e7 	bl	8009444 <USBD_CtlError>
    err++;
 8009076:	7afb      	ldrb	r3, [r7, #11]
 8009078:	3301      	adds	r3, #1
 800907a:	72fb      	strb	r3, [r7, #11]
    break;
 800907c:	bf00      	nop
  }

  if (err != 0U)
 800907e:	7afb      	ldrb	r3, [r7, #11]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d11e      	bne.n	80090c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	88db      	ldrh	r3, [r3, #6]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d016      	beq.n	80090ba <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800908c:	893b      	ldrh	r3, [r7, #8]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00e      	beq.n	80090b0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	88da      	ldrh	r2, [r3, #6]
 8009096:	893b      	ldrh	r3, [r7, #8]
 8009098:	4293      	cmp	r3, r2
 800909a:	bf28      	it	cs
 800909c:	4613      	movcs	r3, r2
 800909e:	b29b      	uxth	r3, r3
 80090a0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80090a2:	893b      	ldrh	r3, [r7, #8]
 80090a4:	461a      	mov	r2, r3
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fa3c 	bl	8009526 <USBD_CtlSendData>
 80090ae:	e009      	b.n	80090c4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9c6 	bl	8009444 <USBD_CtlError>
 80090b8:	e004      	b.n	80090c4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa8d 	bl	80095da <USBD_CtlSendStatus>
 80090c0:	e000      	b.n	80090c4 <USBD_GetDescriptor+0x2cc>
    return;
 80090c2:	bf00      	nop
    }
  }
}
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop

080090cc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	889b      	ldrh	r3, [r3, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d130      	bne.n	8009140 <USBD_SetAddress+0x74>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	88db      	ldrh	r3, [r3, #6]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d12c      	bne.n	8009140 <USBD_SetAddress+0x74>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	885b      	ldrh	r3, [r3, #2]
 80090ea:	2b7f      	cmp	r3, #127	; 0x7f
 80090ec:	d828      	bhi.n	8009140 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	885b      	ldrh	r3, [r3, #2]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009100:	2b03      	cmp	r3, #3
 8009102:	d104      	bne.n	800910e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f99c 	bl	8009444 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910c:	e01c      	b.n	8009148 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	7bfa      	ldrb	r2, [r7, #15]
 8009112:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 ff30 	bl	8009f80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fa5a 	bl	80095da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009134:	e008      	b.n	8009148 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800913e:	e003      	b.n	8009148 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f97e 	bl	8009444 <USBD_CtlError>
  }
}
 8009148:	bf00      	nop
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	885b      	ldrh	r3, [r3, #2]
 8009162:	b2da      	uxtb	r2, r3
 8009164:	4b4b      	ldr	r3, [pc, #300]	; (8009294 <USBD_SetConfig+0x144>)
 8009166:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009168:	4b4a      	ldr	r3, [pc, #296]	; (8009294 <USBD_SetConfig+0x144>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d905      	bls.n	800917c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f966 	bl	8009444 <USBD_CtlError>
    return USBD_FAIL;
 8009178:	2303      	movs	r3, #3
 800917a:	e087      	b.n	800928c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009182:	2b02      	cmp	r3, #2
 8009184:	d002      	beq.n	800918c <USBD_SetConfig+0x3c>
 8009186:	2b03      	cmp	r3, #3
 8009188:	d025      	beq.n	80091d6 <USBD_SetConfig+0x86>
 800918a:	e071      	b.n	8009270 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800918c:	4b41      	ldr	r3, [pc, #260]	; (8009294 <USBD_SetConfig+0x144>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d01c      	beq.n	80091ce <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009194:	4b3f      	ldr	r3, [pc, #252]	; (8009294 <USBD_SetConfig+0x144>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	461a      	mov	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800919e:	4b3d      	ldr	r3, [pc, #244]	; (8009294 <USBD_SetConfig+0x144>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff f9a7 	bl	80084f8 <USBD_SetClassConfig>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f944 	bl	8009444 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80091bc:	e065      	b.n	800928a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fa0b 	bl	80095da <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2203      	movs	r2, #3
 80091c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80091cc:	e05d      	b.n	800928a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fa03 	bl	80095da <USBD_CtlSendStatus>
    break;
 80091d4:	e059      	b.n	800928a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80091d6:	4b2f      	ldr	r3, [pc, #188]	; (8009294 <USBD_SetConfig+0x144>)
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d112      	bne.n	8009204 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2202      	movs	r2, #2
 80091e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80091e6:	4b2b      	ldr	r3, [pc, #172]	; (8009294 <USBD_SetConfig+0x144>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	461a      	mov	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091f0:	4b28      	ldr	r3, [pc, #160]	; (8009294 <USBD_SetConfig+0x144>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff f99a 	bl	8008530 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f9ec 	bl	80095da <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009202:	e042      	b.n	800928a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009204:	4b23      	ldr	r3, [pc, #140]	; (8009294 <USBD_SetConfig+0x144>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	429a      	cmp	r2, r3
 8009210:	d02a      	beq.n	8009268 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff f988 	bl	8008530 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009220:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <USBD_SetConfig+0x144>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800922a:	4b1a      	ldr	r3, [pc, #104]	; (8009294 <USBD_SetConfig+0x144>)
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff f961 	bl	80084f8 <USBD_SetClassConfig>
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00f      	beq.n	8009260 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f8fe 	bl	8009444 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff f96d 	bl	8008530 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2202      	movs	r2, #2
 800925a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800925e:	e014      	b.n	800928a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f9ba 	bl	80095da <USBD_CtlSendStatus>
    break;
 8009266:	e010      	b.n	800928a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f9b6 	bl	80095da <USBD_CtlSendStatus>
    break;
 800926e:	e00c      	b.n	800928a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f8e6 	bl	8009444 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009278:	4b06      	ldr	r3, [pc, #24]	; (8009294 <USBD_SetConfig+0x144>)
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff f956 	bl	8008530 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009284:	2303      	movs	r3, #3
 8009286:	73fb      	strb	r3, [r7, #15]
    break;
 8009288:	bf00      	nop
  }

  return ret;
 800928a:	7bfb      	ldrb	r3, [r7, #15]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	20000824 	.word	0x20000824

08009298 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	88db      	ldrh	r3, [r3, #6]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d004      	beq.n	80092b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f8c9 	bl	8009444 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80092b2:	e021      	b.n	80092f8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	db17      	blt.n	80092ee <USBD_GetConfig+0x56>
 80092be:	2b02      	cmp	r3, #2
 80092c0:	dd02      	ble.n	80092c8 <USBD_GetConfig+0x30>
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d00b      	beq.n	80092de <USBD_GetConfig+0x46>
 80092c6:	e012      	b.n	80092ee <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3308      	adds	r3, #8
 80092d2:	2201      	movs	r2, #1
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f925 	bl	8009526 <USBD_CtlSendData>
      break;
 80092dc:	e00c      	b.n	80092f8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	3304      	adds	r3, #4
 80092e2:	2201      	movs	r2, #1
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f91d 	bl	8009526 <USBD_CtlSendData>
      break;
 80092ec:	e004      	b.n	80092f8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f8a7 	bl	8009444 <USBD_CtlError>
      break;
 80092f6:	bf00      	nop
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009310:	3b01      	subs	r3, #1
 8009312:	2b02      	cmp	r3, #2
 8009314:	d81e      	bhi.n	8009354 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	88db      	ldrh	r3, [r3, #6]
 800931a:	2b02      	cmp	r3, #2
 800931c:	d004      	beq.n	8009328 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f88f 	bl	8009444 <USBD_CtlError>
      break;
 8009326:	e01a      	b.n	800935e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f043 0202 	orr.w	r2, r3, #2
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	330c      	adds	r3, #12
 8009348:	2202      	movs	r2, #2
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f8ea 	bl	8009526 <USBD_CtlSendData>
    break;
 8009352:	e004      	b.n	800935e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f874 	bl	8009444 <USBD_CtlError>
    break;
 800935c:	bf00      	nop
  }
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	885b      	ldrh	r3, [r3, #2]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d106      	bne.n	8009386 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f92a 	bl	80095da <USBD_CtlSendStatus>
  }
}
 8009386:	bf00      	nop
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b082      	sub	sp, #8
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800939e:	3b01      	subs	r3, #1
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d80b      	bhi.n	80093bc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	885b      	ldrh	r3, [r3, #2]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d10c      	bne.n	80093c6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f910 	bl	80095da <USBD_CtlSendStatus>
      }
      break;
 80093ba:	e004      	b.n	80093c6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f840 	bl	8009444 <USBD_CtlError>
      break;
 80093c4:	e000      	b.n	80093c8 <USBD_ClrFeature+0x3a>
      break;
 80093c6:	bf00      	nop
  }
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	781a      	ldrb	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	781a      	ldrb	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3301      	adds	r3, #1
 80093f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7ff fad3 	bl	80089a6 <SWAPBYTE>
 8009400:	4603      	mov	r3, r0
 8009402:	461a      	mov	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3301      	adds	r3, #1
 800940c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3301      	adds	r3, #1
 8009412:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff fac6 	bl	80089a6 <SWAPBYTE>
 800941a:	4603      	mov	r3, r0
 800941c:	461a      	mov	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3301      	adds	r3, #1
 8009426:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3301      	adds	r3, #1
 800942c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7ff fab9 	bl	80089a6 <SWAPBYTE>
 8009434:	4603      	mov	r3, r0
 8009436:	461a      	mov	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	80da      	strh	r2, [r3, #6]
}
 800943c:	bf00      	nop
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800944e:	2180      	movs	r1, #128	; 0x80
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fd2b 	bl	8009eac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009456:	2100      	movs	r1, #0
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fd27 	bl	8009eac <USBD_LL_StallEP>
}
 800945e:	bf00      	nop
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b086      	sub	sp, #24
 800946a:	af00      	add	r7, sp, #0
 800946c:	60f8      	str	r0, [r7, #12]
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d036      	beq.n	80094ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009480:	6938      	ldr	r0, [r7, #16]
 8009482:	f000 f836 	bl	80094f2 <USBD_GetLen>
 8009486:	4603      	mov	r3, r0
 8009488:	3301      	adds	r3, #1
 800948a:	b29b      	uxth	r3, r3
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009494:	7dfb      	ldrb	r3, [r7, #23]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	4413      	add	r3, r2
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	7812      	ldrb	r2, [r2, #0]
 800949e:	701a      	strb	r2, [r3, #0]
  idx++;
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	3301      	adds	r3, #1
 80094a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	4413      	add	r3, r2
 80094ac:	2203      	movs	r2, #3
 80094ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	3301      	adds	r3, #1
 80094b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80094b6:	e013      	b.n	80094e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	4413      	add	r3, r2
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	7812      	ldrb	r2, [r2, #0]
 80094c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	3301      	adds	r3, #1
 80094c8:	613b      	str	r3, [r7, #16]
    idx++;
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	3301      	adds	r3, #1
 80094ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	4413      	add	r3, r2
 80094d6:	2200      	movs	r2, #0
 80094d8:	701a      	strb	r2, [r3, #0]
    idx++;
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	3301      	adds	r3, #1
 80094de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e7      	bne.n	80094b8 <USBD_GetString+0x52>
 80094e8:	e000      	b.n	80094ec <USBD_GetString+0x86>
    return;
 80094ea:	bf00      	nop
  }
}
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b085      	sub	sp, #20
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009502:	e005      	b.n	8009510 <USBD_GetLen+0x1e>
  {
    len++;
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	3301      	adds	r3, #1
 8009508:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	3301      	adds	r3, #1
 800950e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1f5      	bne.n	8009504 <USBD_GetLen+0x12>
  }

  return len;
 8009518:	7bfb      	ldrb	r3, [r7, #15]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2202      	movs	r2, #2
 8009536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	2100      	movs	r1, #0
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 fd36 	bl	8009fbe <USBD_LL_Transmit>

  return USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	2100      	movs	r1, #0
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 fd25 	bl	8009fbe <USBD_LL_Transmit>

  return USBD_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2203      	movs	r2, #3
 800958e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	2100      	movs	r1, #0
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fd29 	bl	800a000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	2100      	movs	r1, #0
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fd18 	bl	800a000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b082      	sub	sp, #8
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2204      	movs	r2, #4
 80095e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095ea:	2300      	movs	r3, #0
 80095ec:	2200      	movs	r2, #0
 80095ee:	2100      	movs	r1, #0
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fce4 	bl	8009fbe <USBD_LL_Transmit>

  return USBD_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2205      	movs	r2, #5
 800960c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009610:	2300      	movs	r3, #0
 8009612:	2200      	movs	r2, #0
 8009614:	2100      	movs	r1, #0
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fcf2 	bl	800a000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
	...

08009628 <MX_USB_DEVICE_Init>:
/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(uint8_t flag)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	4603      	mov	r3, r0
 8009630:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if(flag){
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d024      	beq.n	8009682 <MX_USB_DEVICE_Init+0x5a>
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc_SETUP, DEVICE_FS) != USBD_OK)
 8009638:	2200      	movs	r2, #0
 800963a:	4922      	ldr	r1, [pc, #136]	; (80096c4 <MX_USB_DEVICE_Init+0x9c>)
 800963c:	4822      	ldr	r0, [pc, #136]	; (80096c8 <MX_USB_DEVICE_Init+0xa0>)
 800963e:	f7fe feed 	bl	800841c <USBD_Init>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <MX_USB_DEVICE_Init+0x24>
		{
			Error_Handler();
 8009648:	f7f7 fea0 	bl	800138c <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800964c:	491f      	ldr	r1, [pc, #124]	; (80096cc <MX_USB_DEVICE_Init+0xa4>)
 800964e:	481e      	ldr	r0, [pc, #120]	; (80096c8 <MX_USB_DEVICE_Init+0xa0>)
 8009650:	f7fe ff1a 	bl	8008488 <USBD_RegisterClass>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <MX_USB_DEVICE_Init+0x36>
		{
			Error_Handler();
 800965a:	f7f7 fe97 	bl	800138c <Error_Handler>
		}
		if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800965e:	491c      	ldr	r1, [pc, #112]	; (80096d0 <MX_USB_DEVICE_Init+0xa8>)
 8009660:	4819      	ldr	r0, [pc, #100]	; (80096c8 <MX_USB_DEVICE_Init+0xa0>)
 8009662:	f7fe fc79 	bl	8007f58 <USBD_CDC_RegisterInterface>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <MX_USB_DEVICE_Init+0x48>
		{
			Error_Handler();
 800966c:	f7f7 fe8e 	bl	800138c <Error_Handler>
		}
		if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009670:	4815      	ldr	r0, [pc, #84]	; (80096c8 <MX_USB_DEVICE_Init+0xa0>)
 8009672:	f7fe ff2a 	bl	80084ca <USBD_Start>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d01e      	beq.n	80096ba <MX_USB_DEVICE_Init+0x92>
		{
			Error_Handler();
 800967c:	f7f7 fe86 	bl	800138c <Error_Handler>
		}
		return;
 8009680:	e01b      	b.n	80096ba <MX_USB_DEVICE_Init+0x92>
	}

	/* USER CODE END USB_DEVICE_Init_PreTreatment */

	/* Init Device Library, add supported class and start the library. */
	if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009682:	2200      	movs	r2, #0
 8009684:	4913      	ldr	r1, [pc, #76]	; (80096d4 <MX_USB_DEVICE_Init+0xac>)
 8009686:	4810      	ldr	r0, [pc, #64]	; (80096c8 <MX_USB_DEVICE_Init+0xa0>)
 8009688:	f7fe fec8 	bl	800841c <USBD_Init>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <MX_USB_DEVICE_Init+0x6e>
	{
		Error_Handler();
 8009692:	f7f7 fe7b 	bl	800138c <Error_Handler>
	}
	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009696:	4910      	ldr	r1, [pc, #64]	; (80096d8 <MX_USB_DEVICE_Init+0xb0>)
 8009698:	480b      	ldr	r0, [pc, #44]	; (80096c8 <MX_USB_DEVICE_Init+0xa0>)
 800969a:	f7fe fef5 	bl	8008488 <USBD_RegisterClass>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <MX_USB_DEVICE_Init+0x80>
	{
		Error_Handler();
 80096a4:	f7f7 fe72 	bl	800138c <Error_Handler>
	}
	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096a8:	4807      	ldr	r0, [pc, #28]	; (80096c8 <MX_USB_DEVICE_Init+0xa0>)
 80096aa:	f7fe ff0e 	bl	80084ca <USBD_Start>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <MX_USB_DEVICE_Init+0x94>
	{
		Error_Handler();
 80096b4:	f7f7 fe6a 	bl	800138c <Error_Handler>
 80096b8:	e000      	b.n	80096bc <MX_USB_DEVICE_Init+0x94>
		return;
 80096ba:	bf00      	nop
	}

	/* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

	/* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	200002e8 	.word	0x200002e8
 80096c8:	20000a3c 	.word	0x20000a3c
 80096cc:	200000b8 	.word	0x200000b8
 80096d0:	200002b8 	.word	0x200002b8
 80096d4:	200002cc 	.word	0x200002cc
 80096d8:	200001bc 	.word	0x200001bc

080096dc <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096e0:	2200      	movs	r2, #0
 80096e2:	4905      	ldr	r1, [pc, #20]	; (80096f8 <CDC_Init_FS+0x1c>)
 80096e4:	4805      	ldr	r0, [pc, #20]	; (80096fc <CDC_Init_FS+0x20>)
 80096e6:	f7fe fc4c 	bl	8007f82 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096ea:	4905      	ldr	r1, [pc, #20]	; (8009700 <CDC_Init_FS+0x24>)
 80096ec:	4803      	ldr	r0, [pc, #12]	; (80096fc <CDC_Init_FS+0x20>)
 80096ee:	f7fe fc61 	bl	8007fb4 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80096f2:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20000d4c 	.word	0x20000d4c
 80096fc:	20000a3c 	.word	0x20000a3c
 8009700:	20000d0c 	.word	0x20000d0c

08009704 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009708:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800970a:	4618      	mov	r0, r3
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	6039      	str	r1, [r7, #0]
 800971e:	71fb      	strb	r3, [r7, #7]
 8009720:	4613      	mov	r3, r2
 8009722:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8009724:	79fb      	ldrb	r3, [r7, #7]
 8009726:	2b23      	cmp	r3, #35	; 0x23
 8009728:	d84a      	bhi.n	80097c0 <CDC_Control_FS+0xac>
 800972a:	a201      	add	r2, pc, #4	; (adr r2, 8009730 <CDC_Control_FS+0x1c>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	080097c1 	.word	0x080097c1
 8009734:	080097c1 	.word	0x080097c1
 8009738:	080097c1 	.word	0x080097c1
 800973c:	080097c1 	.word	0x080097c1
 8009740:	080097c1 	.word	0x080097c1
 8009744:	080097c1 	.word	0x080097c1
 8009748:	080097c1 	.word	0x080097c1
 800974c:	080097c1 	.word	0x080097c1
 8009750:	080097c1 	.word	0x080097c1
 8009754:	080097c1 	.word	0x080097c1
 8009758:	080097c1 	.word	0x080097c1
 800975c:	080097c1 	.word	0x080097c1
 8009760:	080097c1 	.word	0x080097c1
 8009764:	080097c1 	.word	0x080097c1
 8009768:	080097c1 	.word	0x080097c1
 800976c:	080097c1 	.word	0x080097c1
 8009770:	080097c1 	.word	0x080097c1
 8009774:	080097c1 	.word	0x080097c1
 8009778:	080097c1 	.word	0x080097c1
 800977c:	080097c1 	.word	0x080097c1
 8009780:	080097c1 	.word	0x080097c1
 8009784:	080097c1 	.word	0x080097c1
 8009788:	080097c1 	.word	0x080097c1
 800978c:	080097c1 	.word	0x080097c1
 8009790:	080097c1 	.word	0x080097c1
 8009794:	080097c1 	.word	0x080097c1
 8009798:	080097c1 	.word	0x080097c1
 800979c:	080097c1 	.word	0x080097c1
 80097a0:	080097c1 	.word	0x080097c1
 80097a4:	080097c1 	.word	0x080097c1
 80097a8:	080097c1 	.word	0x080097c1
 80097ac:	080097c1 	.word	0x080097c1
 80097b0:	080097c1 	.word	0x080097c1
 80097b4:	080097c1 	.word	0x080097c1
 80097b8:	080097c1 	.word	0x080097c1
 80097bc:	080097c1 	.word	0x080097c1
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80097c0:	bf00      	nop
	}

	return (USBD_OK);
 80097c2:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	4810      	ldr	r0, [pc, #64]	; (8009820 <CDC_Receive_FS+0x50>)
 80097de:	f7fe fbe9 	bl	8007fb4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097e2:	480f      	ldr	r0, [pc, #60]	; (8009820 <CDC_Receive_FS+0x50>)
 80097e4:	f7fe fc2a 	bl	800803c <USBD_CDC_ReceivePacket>
	memset (ReceivedData, '\0', 64);
 80097e8:	2240      	movs	r2, #64	; 0x40
 80097ea:	2100      	movs	r1, #0
 80097ec:	480d      	ldr	r0, [pc, #52]	; (8009824 <CDC_Receive_FS+0x54>)
 80097ee:	f000 fcac 	bl	800a14a <memset>
	uint8_t len = (uint8_t)*Len;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	73fb      	strb	r3, [r7, #15]
	memcpy(ReceivedData, Buf, len);
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	461a      	mov	r2, r3
 80097fc:	6879      	ldr	r1, [r7, #4]
 80097fe:	4809      	ldr	r0, [pc, #36]	; (8009824 <CDC_Receive_FS+0x54>)
 8009800:	f000 fc98 	bl	800a134 <memcpy>
	memset(Buf, '\0', len);
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	461a      	mov	r2, r3
 8009808:	2100      	movs	r1, #0
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fc9d 	bl	800a14a <memset>
	ReceivedDataFlag = 1;
 8009810:	4b05      	ldr	r3, [pc, #20]	; (8009828 <CDC_Receive_FS+0x58>)
 8009812:	2201      	movs	r2, #1
 8009814:	701a      	strb	r2, [r3, #0]
			ReceivedDataFlag = 1;
			ReceivedIter = 0;
		}
	}*/

	return (USBD_OK);
 8009816:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	20000a3c 	.word	0x20000a3c
 8009824:	20000934 	.word	0x20000934
 8009828:	20000400 	.word	0x20000400

0800982c <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800983c:	4b0d      	ldr	r3, [pc, #52]	; (8009874 <CDC_Transmit_FS+0x48>)
 800983e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009842:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800984e:	2301      	movs	r3, #1
 8009850:	e00b      	b.n	800986a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009852:	887b      	ldrh	r3, [r7, #2]
 8009854:	461a      	mov	r2, r3
 8009856:	6879      	ldr	r1, [r7, #4]
 8009858:	4806      	ldr	r0, [pc, #24]	; (8009874 <CDC_Transmit_FS+0x48>)
 800985a:	f7fe fb92 	bl	8007f82 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800985e:	4805      	ldr	r0, [pc, #20]	; (8009874 <CDC_Transmit_FS+0x48>)
 8009860:	f7fe fbbc 	bl	8007fdc <USBD_CDC_TransmitPacket>
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8009868:	7bfb      	ldrb	r3, [r7, #15]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20000a3c 	.word	0x20000a3c

08009878 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	4613      	mov	r3, r2
 8009884:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 800988a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800988e:	4618      	mov	r0, r3
 8009890:	371c      	adds	r7, #28
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
	...

0800989c <USBD_FS_DeviceDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	4603      	mov	r3, r0
 80098a4:	6039      	str	r1, [r7, #0]
 80098a6:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_FS_DeviceDesc);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2212      	movs	r2, #18
 80098ac:	801a      	strh	r2, [r3, #0]
	return USBD_FS_DeviceDesc;
 80098ae:	4b03      	ldr	r3, [pc, #12]	; (80098bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	20000304 	.word	0x20000304

080098c0 <USBD_FS_DeviceDescriptor_SETUP>:
// wpisywanie hasel descriptor
uint8_t * USBD_FS_DeviceDescriptor_SETUP(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	6039      	str	r1, [r7, #0]
 80098ca:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_FS_DeviceDesc_SETUP);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2212      	movs	r2, #18
 80098d0:	801a      	strh	r2, [r3, #0]
	return USBD_FS_DeviceDesc_SETUP;
 80098d2:	4b03      	ldr	r3, [pc, #12]	; (80098e0 <USBD_FS_DeviceDescriptor_SETUP+0x20>)
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	20000318 	.word	0x20000318

080098e4 <USBD_FS_LangIDStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	6039      	str	r1, [r7, #0]
 80098ee:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_LangIDDesc);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2204      	movs	r2, #4
 80098f4:	801a      	strh	r2, [r3, #0]
	return USBD_LangIDDesc;
 80098f6:	4b03      	ldr	r3, [pc, #12]	; (8009904 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	2000032c 	.word	0x2000032c

08009908 <USBD_FS_ProductStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	6039      	str	r1, [r7, #0]
 8009912:	71fb      	strb	r3, [r7, #7]
	if(speed == 0)
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d105      	bne.n	8009926 <USBD_FS_ProductStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	4907      	ldr	r1, [pc, #28]	; (800993c <USBD_FS_ProductStrDescriptor+0x34>)
 800991e:	4808      	ldr	r0, [pc, #32]	; (8009940 <USBD_FS_ProductStrDescriptor+0x38>)
 8009920:	f7ff fda1 	bl	8009466 <USBD_GetString>
 8009924:	e004      	b.n	8009930 <USBD_FS_ProductStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	4904      	ldr	r1, [pc, #16]	; (800993c <USBD_FS_ProductStrDescriptor+0x34>)
 800992a:	4805      	ldr	r0, [pc, #20]	; (8009940 <USBD_FS_ProductStrDescriptor+0x38>)
 800992c:	f7ff fd9b 	bl	8009466 <USBD_GetString>
	}
	return USBD_StrDesc;
 8009930:	4b02      	ldr	r3, [pc, #8]	; (800993c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20000d74 	.word	0x20000d74
 8009940:	0800a3e8 	.word	0x0800a3e8

08009944 <USBD_FS_ManufacturerStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	6039      	str	r1, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	4904      	ldr	r1, [pc, #16]	; (8009964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009954:	4804      	ldr	r0, [pc, #16]	; (8009968 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009956:	f7ff fd86 	bl	8009466 <USBD_GetString>
	return USBD_StrDesc;
 800995a:	4b02      	ldr	r3, [pc, #8]	; (8009964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20000d74 	.word	0x20000d74
 8009968:	0800a400 	.word	0x0800a400

0800996c <USBD_FS_SerialStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	4603      	mov	r3, r0
 8009974:	6039      	str	r1, [r7, #0]
 8009976:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = USB_SIZ_STRING_SERIAL;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	221a      	movs	r2, #26
 800997c:	801a      	strh	r2, [r3, #0]

	/* Update the serial number string descriptor with the data from the unique
	 * ID */
	Get_SerialNum();
 800997e:	f000 f843 	bl	8009a08 <Get_SerialNum>
	/* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

	/* USER CODE END USBD_FS_SerialStrDescriptor */
	return (uint8_t *) USBD_StringSerial;
 8009982:	4b02      	ldr	r3, [pc, #8]	; (800998c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009984:	4618      	mov	r0, r3
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20000330 	.word	0x20000330

08009990 <USBD_FS_ConfigStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	6039      	str	r1, [r7, #0]
 800999a:	71fb      	strb	r3, [r7, #7]
	if(speed == USBD_SPEED_HIGH)
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d105      	bne.n	80099ae <USBD_FS_ConfigStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	4907      	ldr	r1, [pc, #28]	; (80099c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099a6:	4808      	ldr	r0, [pc, #32]	; (80099c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099a8:	f7ff fd5d 	bl	8009466 <USBD_GetString>
 80099ac:	e004      	b.n	80099b8 <USBD_FS_ConfigStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	4904      	ldr	r1, [pc, #16]	; (80099c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099b2:	4805      	ldr	r0, [pc, #20]	; (80099c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099b4:	f7ff fd57 	bl	8009466 <USBD_GetString>
	}
	return USBD_StrDesc;
 80099b8:	4b02      	ldr	r3, [pc, #8]	; (80099c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20000d74 	.word	0x20000d74
 80099c8:	0800a414 	.word	0x0800a414

080099cc <USBD_FS_InterfaceStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	6039      	str	r1, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
	if(speed == 0)
 80099d8:	79fb      	ldrb	r3, [r7, #7]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d105      	bne.n	80099ea <USBD_FS_InterfaceStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	4907      	ldr	r1, [pc, #28]	; (8009a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099e2:	4808      	ldr	r0, [pc, #32]	; (8009a04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099e4:	f7ff fd3f 	bl	8009466 <USBD_GetString>
 80099e8:	e004      	b.n	80099f4 <USBD_FS_InterfaceStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	4904      	ldr	r1, [pc, #16]	; (8009a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099ee:	4805      	ldr	r0, [pc, #20]	; (8009a04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099f0:	f7ff fd39 	bl	8009466 <USBD_GetString>
	}
	return USBD_StrDesc;
 80099f4:	4b02      	ldr	r3, [pc, #8]	; (8009a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20000d74 	.word	0x20000d74
 8009a04:	0800a420 	.word	0x0800a420

08009a08 <Get_SerialNum>:
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
	uint32_t deviceserial0, deviceserial1, deviceserial2;

	deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a0e:	4b0f      	ldr	r3, [pc, #60]	; (8009a4c <Get_SerialNum+0x44>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
	deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a14:	4b0e      	ldr	r3, [pc, #56]	; (8009a50 <Get_SerialNum+0x48>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60bb      	str	r3, [r7, #8]
	deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a1a:	4b0e      	ldr	r3, [pc, #56]	; (8009a54 <Get_SerialNum+0x4c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	607b      	str	r3, [r7, #4]

	deviceserial0 += deviceserial2;
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4413      	add	r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]

	if (deviceserial0 != 0)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d009      	beq.n	8009a42 <Get_SerialNum+0x3a>
	{
		IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a2e:	2208      	movs	r2, #8
 8009a30:	4909      	ldr	r1, [pc, #36]	; (8009a58 <Get_SerialNum+0x50>)
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 f814 	bl	8009a60 <IntToUnicode>
		IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a38:	2204      	movs	r2, #4
 8009a3a:	4908      	ldr	r1, [pc, #32]	; (8009a5c <Get_SerialNum+0x54>)
 8009a3c:	68b8      	ldr	r0, [r7, #8]
 8009a3e:	f000 f80f 	bl	8009a60 <IntToUnicode>
	}
}
 8009a42:	bf00      	nop
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	1fff7a10 	.word	0x1fff7a10
 8009a50:	1fff7a14 	.word	0x1fff7a14
 8009a54:	1fff7a18 	.word	0x1fff7a18
 8009a58:	20000332 	.word	0x20000332
 8009a5c:	20000342 	.word	0x20000342

08009a60 <IntToUnicode>:
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	71fb      	strb	r3, [r7, #7]
	uint8_t idx = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	75fb      	strb	r3, [r7, #23]

	for (idx = 0; idx < len; idx++)
 8009a72:	2300      	movs	r3, #0
 8009a74:	75fb      	strb	r3, [r7, #23]
 8009a76:	e027      	b.n	8009ac8 <IntToUnicode+0x68>
	{
		if (((value >> 28)) < 0xA)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	0f1b      	lsrs	r3, r3, #28
 8009a7c:	2b09      	cmp	r3, #9
 8009a7e:	d80b      	bhi.n	8009a98 <IntToUnicode+0x38>
		{
			pbuf[2 * idx] = (value >> 28) + '0';
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	0f1b      	lsrs	r3, r3, #28
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	440b      	add	r3, r1
 8009a90:	3230      	adds	r2, #48	; 0x30
 8009a92:	b2d2      	uxtb	r2, r2
 8009a94:	701a      	strb	r2, [r3, #0]
 8009a96:	e00a      	b.n	8009aae <IntToUnicode+0x4e>
		}
		else
		{
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	0f1b      	lsrs	r3, r3, #28
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	7dfb      	ldrb	r3, [r7, #23]
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	440b      	add	r3, r1
 8009aa8:	3237      	adds	r2, #55	; 0x37
 8009aaa:	b2d2      	uxtb	r2, r2
 8009aac:	701a      	strb	r2, [r3, #0]
		}

		value = value << 4;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	011b      	lsls	r3, r3, #4
 8009ab2:	60fb      	str	r3, [r7, #12]

		pbuf[2 * idx + 1] = 0;
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	3301      	adds	r3, #1
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	4413      	add	r3, r2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	701a      	strb	r2, [r3, #0]
	for (idx = 0; idx < len; idx++)
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	75fb      	strb	r3, [r7, #23]
 8009ac8:	7dfa      	ldrb	r2, [r7, #23]
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d3d3      	bcc.n	8009a78 <IntToUnicode+0x18>
	}
}
 8009ad0:	bf00      	nop
 8009ad2:	371c      	adds	r7, #28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08a      	sub	sp, #40	; 0x28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ae4:	f107 0314 	add.w	r3, r7, #20
 8009ae8:	2200      	movs	r2, #0
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	605a      	str	r2, [r3, #4]
 8009aee:	609a      	str	r2, [r3, #8]
 8009af0:	60da      	str	r2, [r3, #12]
 8009af2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009afc:	d13a      	bne.n	8009b74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009afe:	2300      	movs	r3, #0
 8009b00:	613b      	str	r3, [r7, #16]
 8009b02:	4b1e      	ldr	r3, [pc, #120]	; (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	4a1d      	ldr	r2, [pc, #116]	; (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b08:	f043 0301 	orr.w	r3, r3, #1
 8009b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b0e:	4b1b      	ldr	r3, [pc, #108]	; (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	613b      	str	r3, [r7, #16]
 8009b18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b20:	2302      	movs	r3, #2
 8009b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b24:	2300      	movs	r3, #0
 8009b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b2c:	230a      	movs	r3, #10
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b30:	f107 0314 	add.w	r3, r7, #20
 8009b34:	4619      	mov	r1, r3
 8009b36:	4812      	ldr	r0, [pc, #72]	; (8009b80 <HAL_PCD_MspInit+0xa4>)
 8009b38:	f7f8 ff04 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b3c:	4b0f      	ldr	r3, [pc, #60]	; (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b40:	4a0e      	ldr	r2, [pc, #56]	; (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b46:	6353      	str	r3, [r2, #52]	; 0x34
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	4b0b      	ldr	r3, [pc, #44]	; (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b50:	4a0a      	ldr	r2, [pc, #40]	; (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b56:	6453      	str	r3, [r2, #68]	; 0x44
 8009b58:	4b08      	ldr	r3, [pc, #32]	; (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b64:	2200      	movs	r2, #0
 8009b66:	2100      	movs	r1, #0
 8009b68:	2043      	movs	r0, #67	; 0x43
 8009b6a:	f7f8 feb4 	bl	80028d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b6e:	2043      	movs	r0, #67	; 0x43
 8009b70:	f7f8 fecd 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b74:	bf00      	nop
 8009b76:	3728      	adds	r7, #40	; 0x28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	40023800 	.word	0x40023800
 8009b80:	40020000 	.word	0x40020000

08009b84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	f7fe fce0 	bl	8008560 <USBD_LL_SetupStage>
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009bba:	78fa      	ldrb	r2, [r7, #3]
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	1a9b      	subs	r3, r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	440b      	add	r3, r1
 8009bc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	78fb      	ldrb	r3, [r7, #3]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	f7fe fd18 	bl	8008606 <USBD_LL_DataOutStage>
}
 8009bd6:	bf00      	nop
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b082      	sub	sp, #8
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009bf0:	78fa      	ldrb	r2, [r7, #3]
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	1a9b      	subs	r3, r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	440b      	add	r3, r1
 8009bfe:	3348      	adds	r3, #72	; 0x48
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	78fb      	ldrb	r3, [r7, #3]
 8009c04:	4619      	mov	r1, r3
 8009c06:	f7fe fd61 	bl	80086cc <USBD_LL_DataInStage>
}
 8009c0a:	bf00      	nop
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b082      	sub	sp, #8
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe fe65 	bl	80088f0 <USBD_LL_SOF>
}
 8009c26:	bf00      	nop
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c36:	2301      	movs	r3, #1
 8009c38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d001      	beq.n	8009c46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c42:	f7f7 fba3 	bl	800138c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c4c:	7bfa      	ldrb	r2, [r7, #15]
 8009c4e:	4611      	mov	r1, r2
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fe12 	bl	800887a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe fdcb 	bl	80087f8 <USBD_LL_Reset>
}
 8009c62:	bf00      	nop
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe fe0d 	bl	800889a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	6812      	ldr	r2, [r2, #0]
 8009c8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c92:	f043 0301 	orr.w	r3, r3, #1
 8009c96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d005      	beq.n	8009cac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ca0:	4b04      	ldr	r3, [pc, #16]	; (8009cb4 <HAL_PCD_SuspendCallback+0x48>)
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	4a03      	ldr	r2, [pc, #12]	; (8009cb4 <HAL_PCD_SuspendCallback+0x48>)
 8009ca6:	f043 0306 	orr.w	r3, r3, #6
 8009caa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009cac:	bf00      	nop
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	e000ed00 	.word	0xe000ed00

08009cb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fdfc 	bl	80088c4 <USBD_LL_Resume>
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ce6:	78fa      	ldrb	r2, [r7, #3]
 8009ce8:	4611      	mov	r1, r2
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fe27 	bl	800893e <USBD_LL_IsoOUTIncomplete>
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe fe08 	bl	8008924 <USBD_LL_IsoINIncomplete>
}
 8009d14:	bf00      	nop
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fe14 	bl	8008958 <USBD_LL_DevConnected>
}
 8009d30:	bf00      	nop
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe fe11 	bl	800896e <USBD_LL_DevDisconnected>
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d13c      	bne.n	8009dde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d64:	4a20      	ldr	r2, [pc, #128]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a1e      	ldr	r2, [pc, #120]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d74:	4b1c      	ldr	r3, [pc, #112]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009d7c:	4b1a      	ldr	r3, [pc, #104]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d7e:	2204      	movs	r2, #4
 8009d80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d82:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d84:	2202      	movs	r2, #2
 8009d86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d88:	4b17      	ldr	r3, [pc, #92]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d8e:	4b16      	ldr	r3, [pc, #88]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d90:	2202      	movs	r2, #2
 8009d92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d94:	4b14      	ldr	r3, [pc, #80]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d9a:	4b13      	ldr	r3, [pc, #76]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009da0:	4b11      	ldr	r3, [pc, #68]	; (8009de8 <USBD_LL_Init+0x94>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009da6:	4b10      	ldr	r3, [pc, #64]	; (8009de8 <USBD_LL_Init+0x94>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009dac:	4b0e      	ldr	r3, [pc, #56]	; (8009de8 <USBD_LL_Init+0x94>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009db2:	480d      	ldr	r0, [pc, #52]	; (8009de8 <USBD_LL_Init+0x94>)
 8009db4:	f7f9 fcff 	bl	80037b6 <HAL_PCD_Init>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009dbe:	f7f7 fae5 	bl	800138c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009dc2:	2180      	movs	r1, #128	; 0x80
 8009dc4:	4808      	ldr	r0, [pc, #32]	; (8009de8 <USBD_LL_Init+0x94>)
 8009dc6:	f7fa fe5c 	bl	8004a82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009dca:	2240      	movs	r2, #64	; 0x40
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4806      	ldr	r0, [pc, #24]	; (8009de8 <USBD_LL_Init+0x94>)
 8009dd0:	f7fa fe10 	bl	80049f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009dd4:	2280      	movs	r2, #128	; 0x80
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	4803      	ldr	r0, [pc, #12]	; (8009de8 <USBD_LL_Init+0x94>)
 8009dda:	f7fa fe0b 	bl	80049f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000f74 	.word	0x20000f74

08009dec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7f9 fdf4 	bl	80039f0 <HAL_PCD_Start>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 f92a 	bl	800a068 <USBD_Get_USB_Status>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	4608      	mov	r0, r1
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	461a      	mov	r2, r3
 8009e30:	4603      	mov	r3, r0
 8009e32:	70fb      	strb	r3, [r7, #3]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70bb      	strb	r3, [r7, #2]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e4a:	78bb      	ldrb	r3, [r7, #2]
 8009e4c:	883a      	ldrh	r2, [r7, #0]
 8009e4e:	78f9      	ldrb	r1, [r7, #3]
 8009e50:	f7fa f9d8 	bl	8004204 <HAL_PCD_EP_Open>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 f904 	bl	800a068 <USBD_Get_USB_Status>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e88:	78fa      	ldrb	r2, [r7, #3]
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fa fa21 	bl	80042d4 <HAL_PCD_EP_Close>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 f8e5 	bl	800a068 <USBD_Get_USB_Status>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ea2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ec6:	78fa      	ldrb	r2, [r7, #3]
 8009ec8:	4611      	mov	r1, r2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fa faf9 	bl	80044c2 <HAL_PCD_EP_SetStall>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 f8c6 	bl	800a068 <USBD_Get_USB_Status>
 8009edc:	4603      	mov	r3, r0
 8009ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f04:	78fa      	ldrb	r2, [r7, #3]
 8009f06:	4611      	mov	r1, r2
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fa fb3e 	bl	800458a <HAL_PCD_EP_ClrStall>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 f8a7 	bl	800a068 <USBD_Get_USB_Status>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	da0b      	bge.n	8009f5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	1a9b      	subs	r3, r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	333e      	adds	r3, #62	; 0x3e
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	e00b      	b.n	8009f74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f5c:	78fb      	ldrb	r3, [r7, #3]
 8009f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f62:	68f9      	ldr	r1, [r7, #12]
 8009f64:	4613      	mov	r3, r2
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	1a9b      	subs	r3, r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	440b      	add	r3, r1
 8009f6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f9a:	78fa      	ldrb	r2, [r7, #3]
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fa f90b 	bl	80041ba <HAL_PCD_SetAddress>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 f85c 	bl	800a068 <USBD_Get_USB_Status>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b086      	sub	sp, #24
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009fdc:	7af9      	ldrb	r1, [r7, #11]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	f7fa fa24 	bl	800442e <HAL_PCD_EP_Transmit>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 f83b 	bl	800a068 <USBD_Get_USB_Status>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ff6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3718      	adds	r7, #24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	460b      	mov	r3, r1
 800a00e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a01e:	7af9      	ldrb	r1, [r7, #11]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	f7fa f9a0 	bl	8004368 <HAL_PCD_EP_Receive>
 800a028:	4603      	mov	r3, r0
 800a02a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 f81a 	bl	800a068 <USBD_Get_USB_Status>
 800a034:	4603      	mov	r3, r0
 800a036:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a038:	7dbb      	ldrb	r3, [r7, #22]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	4611      	mov	r1, r2
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fa f9d0 	bl	80043fe <HAL_PCD_EP_GetRxCount>
 800a05e:	4603      	mov	r3, r0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a076:	79fb      	ldrb	r3, [r7, #7]
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d817      	bhi.n	800a0ac <USBD_Get_USB_Status+0x44>
 800a07c:	a201      	add	r2, pc, #4	; (adr r2, 800a084 <USBD_Get_USB_Status+0x1c>)
 800a07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a082:	bf00      	nop
 800a084:	0800a095 	.word	0x0800a095
 800a088:	0800a09b 	.word	0x0800a09b
 800a08c:	0800a0a1 	.word	0x0800a0a1
 800a090:	0800a0a7 	.word	0x0800a0a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]
    break;
 800a098:	e00b      	b.n	800a0b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a09a:	2303      	movs	r3, #3
 800a09c:	73fb      	strb	r3, [r7, #15]
    break;
 800a09e:	e008      	b.n	800a0b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a4:	e005      	b.n	800a0b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0aa:	e002      	b.n	800a0b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a0b0:	bf00      	nop
  }
  return usb_status;
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <__errno>:
 800a0c0:	4b01      	ldr	r3, [pc, #4]	; (800a0c8 <__errno+0x8>)
 800a0c2:	6818      	ldr	r0, [r3, #0]
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	2000034c 	.word	0x2000034c

0800a0cc <__libc_init_array>:
 800a0cc:	b570      	push	{r4, r5, r6, lr}
 800a0ce:	4e0d      	ldr	r6, [pc, #52]	; (800a104 <__libc_init_array+0x38>)
 800a0d0:	4c0d      	ldr	r4, [pc, #52]	; (800a108 <__libc_init_array+0x3c>)
 800a0d2:	1ba4      	subs	r4, r4, r6
 800a0d4:	10a4      	asrs	r4, r4, #2
 800a0d6:	2500      	movs	r5, #0
 800a0d8:	42a5      	cmp	r5, r4
 800a0da:	d109      	bne.n	800a0f0 <__libc_init_array+0x24>
 800a0dc:	4e0b      	ldr	r6, [pc, #44]	; (800a10c <__libc_init_array+0x40>)
 800a0de:	4c0c      	ldr	r4, [pc, #48]	; (800a110 <__libc_init_array+0x44>)
 800a0e0:	f000 f8f6 	bl	800a2d0 <_init>
 800a0e4:	1ba4      	subs	r4, r4, r6
 800a0e6:	10a4      	asrs	r4, r4, #2
 800a0e8:	2500      	movs	r5, #0
 800a0ea:	42a5      	cmp	r5, r4
 800a0ec:	d105      	bne.n	800a0fa <__libc_init_array+0x2e>
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
 800a0f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0f4:	4798      	blx	r3
 800a0f6:	3501      	adds	r5, #1
 800a0f8:	e7ee      	b.n	800a0d8 <__libc_init_array+0xc>
 800a0fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0fe:	4798      	blx	r3
 800a100:	3501      	adds	r5, #1
 800a102:	e7f2      	b.n	800a0ea <__libc_init_array+0x1e>
 800a104:	0800b1ac 	.word	0x0800b1ac
 800a108:	0800b1ac 	.word	0x0800b1ac
 800a10c:	0800b1ac 	.word	0x0800b1ac
 800a110:	0800b1b0 	.word	0x0800b1b0

0800a114 <malloc>:
 800a114:	4b02      	ldr	r3, [pc, #8]	; (800a120 <malloc+0xc>)
 800a116:	4601      	mov	r1, r0
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	f000 b86d 	b.w	800a1f8 <_malloc_r>
 800a11e:	bf00      	nop
 800a120:	2000034c 	.word	0x2000034c

0800a124 <free>:
 800a124:	4b02      	ldr	r3, [pc, #8]	; (800a130 <free+0xc>)
 800a126:	4601      	mov	r1, r0
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	f000 b817 	b.w	800a15c <_free_r>
 800a12e:	bf00      	nop
 800a130:	2000034c 	.word	0x2000034c

0800a134 <memcpy>:
 800a134:	b510      	push	{r4, lr}
 800a136:	1e43      	subs	r3, r0, #1
 800a138:	440a      	add	r2, r1
 800a13a:	4291      	cmp	r1, r2
 800a13c:	d100      	bne.n	800a140 <memcpy+0xc>
 800a13e:	bd10      	pop	{r4, pc}
 800a140:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a144:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a148:	e7f7      	b.n	800a13a <memcpy+0x6>

0800a14a <memset>:
 800a14a:	4402      	add	r2, r0
 800a14c:	4603      	mov	r3, r0
 800a14e:	4293      	cmp	r3, r2
 800a150:	d100      	bne.n	800a154 <memset+0xa>
 800a152:	4770      	bx	lr
 800a154:	f803 1b01 	strb.w	r1, [r3], #1
 800a158:	e7f9      	b.n	800a14e <memset+0x4>
	...

0800a15c <_free_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4605      	mov	r5, r0
 800a160:	2900      	cmp	r1, #0
 800a162:	d045      	beq.n	800a1f0 <_free_r+0x94>
 800a164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a168:	1f0c      	subs	r4, r1, #4
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	bfb8      	it	lt
 800a16e:	18e4      	addlt	r4, r4, r3
 800a170:	f000 f8ac 	bl	800a2cc <__malloc_lock>
 800a174:	4a1f      	ldr	r2, [pc, #124]	; (800a1f4 <_free_r+0x98>)
 800a176:	6813      	ldr	r3, [r2, #0]
 800a178:	4610      	mov	r0, r2
 800a17a:	b933      	cbnz	r3, 800a18a <_free_r+0x2e>
 800a17c:	6063      	str	r3, [r4, #4]
 800a17e:	6014      	str	r4, [r2, #0]
 800a180:	4628      	mov	r0, r5
 800a182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a186:	f000 b8a2 	b.w	800a2ce <__malloc_unlock>
 800a18a:	42a3      	cmp	r3, r4
 800a18c:	d90c      	bls.n	800a1a8 <_free_r+0x4c>
 800a18e:	6821      	ldr	r1, [r4, #0]
 800a190:	1862      	adds	r2, r4, r1
 800a192:	4293      	cmp	r3, r2
 800a194:	bf04      	itt	eq
 800a196:	681a      	ldreq	r2, [r3, #0]
 800a198:	685b      	ldreq	r3, [r3, #4]
 800a19a:	6063      	str	r3, [r4, #4]
 800a19c:	bf04      	itt	eq
 800a19e:	1852      	addeq	r2, r2, r1
 800a1a0:	6022      	streq	r2, [r4, #0]
 800a1a2:	6004      	str	r4, [r0, #0]
 800a1a4:	e7ec      	b.n	800a180 <_free_r+0x24>
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	b10a      	cbz	r2, 800a1b0 <_free_r+0x54>
 800a1ac:	42a2      	cmp	r2, r4
 800a1ae:	d9fa      	bls.n	800a1a6 <_free_r+0x4a>
 800a1b0:	6819      	ldr	r1, [r3, #0]
 800a1b2:	1858      	adds	r0, r3, r1
 800a1b4:	42a0      	cmp	r0, r4
 800a1b6:	d10b      	bne.n	800a1d0 <_free_r+0x74>
 800a1b8:	6820      	ldr	r0, [r4, #0]
 800a1ba:	4401      	add	r1, r0
 800a1bc:	1858      	adds	r0, r3, r1
 800a1be:	4282      	cmp	r2, r0
 800a1c0:	6019      	str	r1, [r3, #0]
 800a1c2:	d1dd      	bne.n	800a180 <_free_r+0x24>
 800a1c4:	6810      	ldr	r0, [r2, #0]
 800a1c6:	6852      	ldr	r2, [r2, #4]
 800a1c8:	605a      	str	r2, [r3, #4]
 800a1ca:	4401      	add	r1, r0
 800a1cc:	6019      	str	r1, [r3, #0]
 800a1ce:	e7d7      	b.n	800a180 <_free_r+0x24>
 800a1d0:	d902      	bls.n	800a1d8 <_free_r+0x7c>
 800a1d2:	230c      	movs	r3, #12
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	e7d3      	b.n	800a180 <_free_r+0x24>
 800a1d8:	6820      	ldr	r0, [r4, #0]
 800a1da:	1821      	adds	r1, r4, r0
 800a1dc:	428a      	cmp	r2, r1
 800a1de:	bf04      	itt	eq
 800a1e0:	6811      	ldreq	r1, [r2, #0]
 800a1e2:	6852      	ldreq	r2, [r2, #4]
 800a1e4:	6062      	str	r2, [r4, #4]
 800a1e6:	bf04      	itt	eq
 800a1e8:	1809      	addeq	r1, r1, r0
 800a1ea:	6021      	streq	r1, [r4, #0]
 800a1ec:	605c      	str	r4, [r3, #4]
 800a1ee:	e7c7      	b.n	800a180 <_free_r+0x24>
 800a1f0:	bd38      	pop	{r3, r4, r5, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20000828 	.word	0x20000828

0800a1f8 <_malloc_r>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	1ccd      	adds	r5, r1, #3
 800a1fc:	f025 0503 	bic.w	r5, r5, #3
 800a200:	3508      	adds	r5, #8
 800a202:	2d0c      	cmp	r5, #12
 800a204:	bf38      	it	cc
 800a206:	250c      	movcc	r5, #12
 800a208:	2d00      	cmp	r5, #0
 800a20a:	4606      	mov	r6, r0
 800a20c:	db01      	blt.n	800a212 <_malloc_r+0x1a>
 800a20e:	42a9      	cmp	r1, r5
 800a210:	d903      	bls.n	800a21a <_malloc_r+0x22>
 800a212:	230c      	movs	r3, #12
 800a214:	6033      	str	r3, [r6, #0]
 800a216:	2000      	movs	r0, #0
 800a218:	bd70      	pop	{r4, r5, r6, pc}
 800a21a:	f000 f857 	bl	800a2cc <__malloc_lock>
 800a21e:	4a21      	ldr	r2, [pc, #132]	; (800a2a4 <_malloc_r+0xac>)
 800a220:	6814      	ldr	r4, [r2, #0]
 800a222:	4621      	mov	r1, r4
 800a224:	b991      	cbnz	r1, 800a24c <_malloc_r+0x54>
 800a226:	4c20      	ldr	r4, [pc, #128]	; (800a2a8 <_malloc_r+0xb0>)
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	b91b      	cbnz	r3, 800a234 <_malloc_r+0x3c>
 800a22c:	4630      	mov	r0, r6
 800a22e:	f000 f83d 	bl	800a2ac <_sbrk_r>
 800a232:	6020      	str	r0, [r4, #0]
 800a234:	4629      	mov	r1, r5
 800a236:	4630      	mov	r0, r6
 800a238:	f000 f838 	bl	800a2ac <_sbrk_r>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	d124      	bne.n	800a28a <_malloc_r+0x92>
 800a240:	230c      	movs	r3, #12
 800a242:	6033      	str	r3, [r6, #0]
 800a244:	4630      	mov	r0, r6
 800a246:	f000 f842 	bl	800a2ce <__malloc_unlock>
 800a24a:	e7e4      	b.n	800a216 <_malloc_r+0x1e>
 800a24c:	680b      	ldr	r3, [r1, #0]
 800a24e:	1b5b      	subs	r3, r3, r5
 800a250:	d418      	bmi.n	800a284 <_malloc_r+0x8c>
 800a252:	2b0b      	cmp	r3, #11
 800a254:	d90f      	bls.n	800a276 <_malloc_r+0x7e>
 800a256:	600b      	str	r3, [r1, #0]
 800a258:	50cd      	str	r5, [r1, r3]
 800a25a:	18cc      	adds	r4, r1, r3
 800a25c:	4630      	mov	r0, r6
 800a25e:	f000 f836 	bl	800a2ce <__malloc_unlock>
 800a262:	f104 000b 	add.w	r0, r4, #11
 800a266:	1d23      	adds	r3, r4, #4
 800a268:	f020 0007 	bic.w	r0, r0, #7
 800a26c:	1ac3      	subs	r3, r0, r3
 800a26e:	d0d3      	beq.n	800a218 <_malloc_r+0x20>
 800a270:	425a      	negs	r2, r3
 800a272:	50e2      	str	r2, [r4, r3]
 800a274:	e7d0      	b.n	800a218 <_malloc_r+0x20>
 800a276:	428c      	cmp	r4, r1
 800a278:	684b      	ldr	r3, [r1, #4]
 800a27a:	bf16      	itet	ne
 800a27c:	6063      	strne	r3, [r4, #4]
 800a27e:	6013      	streq	r3, [r2, #0]
 800a280:	460c      	movne	r4, r1
 800a282:	e7eb      	b.n	800a25c <_malloc_r+0x64>
 800a284:	460c      	mov	r4, r1
 800a286:	6849      	ldr	r1, [r1, #4]
 800a288:	e7cc      	b.n	800a224 <_malloc_r+0x2c>
 800a28a:	1cc4      	adds	r4, r0, #3
 800a28c:	f024 0403 	bic.w	r4, r4, #3
 800a290:	42a0      	cmp	r0, r4
 800a292:	d005      	beq.n	800a2a0 <_malloc_r+0xa8>
 800a294:	1a21      	subs	r1, r4, r0
 800a296:	4630      	mov	r0, r6
 800a298:	f000 f808 	bl	800a2ac <_sbrk_r>
 800a29c:	3001      	adds	r0, #1
 800a29e:	d0cf      	beq.n	800a240 <_malloc_r+0x48>
 800a2a0:	6025      	str	r5, [r4, #0]
 800a2a2:	e7db      	b.n	800a25c <_malloc_r+0x64>
 800a2a4:	20000828 	.word	0x20000828
 800a2a8:	2000082c 	.word	0x2000082c

0800a2ac <_sbrk_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4c06      	ldr	r4, [pc, #24]	; (800a2c8 <_sbrk_r+0x1c>)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	6023      	str	r3, [r4, #0]
 800a2b8:	f7f7 fd72 	bl	8001da0 <_sbrk>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_sbrk_r+0x1a>
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_sbrk_r+0x1a>
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	2000137c 	.word	0x2000137c

0800a2cc <__malloc_lock>:
 800a2cc:	4770      	bx	lr

0800a2ce <__malloc_unlock>:
 800a2ce:	4770      	bx	lr

0800a2d0 <_init>:
 800a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d2:	bf00      	nop
 800a2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d6:	bc08      	pop	{r3}
 800a2d8:	469e      	mov	lr, r3
 800a2da:	4770      	bx	lr

0800a2dc <_fini>:
 800a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2de:	bf00      	nop
 800a2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2e2:	bc08      	pop	{r3}
 800a2e4:	469e      	mov	lr, r3
 800a2e6:	4770      	bx	lr
