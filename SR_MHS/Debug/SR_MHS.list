
SR_MHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009618  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  080097b0  080097b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a638  0800a638  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a638  0800a638  0001a638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a640  0800a640  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a644  0800a644  0001a644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800a648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001078  2000025c  0800a8a4  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012d4  0800a8a4  000212d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e512  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f7a  00000000  00000000  0003e79e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001730  00000000  00000000  00042718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b8  00000000  00000000  00043e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000671a  00000000  00000000  00045400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015406  00000000  00000000  0004bb1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093883  00000000  00000000  00060f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f47a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061fc  00000000  00000000  000f4820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000025c 	.word	0x2000025c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009798 	.word	0x08009798

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000260 	.word	0x20000260
 80001d4:	08009798 	.word	0x08009798

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	; 0x28
 80004ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	4b4a      	ldr	r3, [pc, #296]	; (800062c <MX_GPIO_Init+0x144>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a49      	ldr	r2, [pc, #292]	; (800062c <MX_GPIO_Init+0x144>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b47      	ldr	r3, [pc, #284]	; (800062c <MX_GPIO_Init+0x144>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	4b43      	ldr	r3, [pc, #268]	; (800062c <MX_GPIO_Init+0x144>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a42      	ldr	r2, [pc, #264]	; (800062c <MX_GPIO_Init+0x144>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b40      	ldr	r3, [pc, #256]	; (800062c <MX_GPIO_Init+0x144>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	4b3c      	ldr	r3, [pc, #240]	; (800062c <MX_GPIO_Init+0x144>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a3b      	ldr	r2, [pc, #236]	; (800062c <MX_GPIO_Init+0x144>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b39      	ldr	r3, [pc, #228]	; (800062c <MX_GPIO_Init+0x144>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	4b35      	ldr	r3, [pc, #212]	; (800062c <MX_GPIO_Init+0x144>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a34      	ldr	r2, [pc, #208]	; (800062c <MX_GPIO_Init+0x144>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b32      	ldr	r3, [pc, #200]	; (800062c <MX_GPIO_Init+0x144>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000574:	482e      	ldr	r0, [pc, #184]	; (8000630 <MX_GPIO_Init+0x148>)
 8000576:	f002 fa57 	bl	8002a28 <HAL_GPIO_WritePin>
                          |CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000580:	482c      	ldr	r0, [pc, #176]	; (8000634 <MX_GPIO_Init+0x14c>)
 8000582:	f002 fa51 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin;
 8000586:	231c      	movs	r3, #28
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_GPIO_Init+0x150>)
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4825      	ldr	r0, [pc, #148]	; (8000630 <MX_GPIO_Init+0x148>)
 800059a:	f002 f8ab 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800059e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80005a2:	617b      	str	r3, [r7, #20]
                          |CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	481e      	ldr	r0, [pc, #120]	; (8000630 <MX_GPIO_Init+0x148>)
 80005b8:	f002 f89c 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_BUT_Pin;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	4819      	ldr	r0, [pc, #100]	; (8000634 <MX_GPIO_Init+0x14c>)
 80005d0:	f002 f890 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 80005d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4811      	ldr	r0, [pc, #68]	; (8000634 <MX_GPIO_Init+0x14c>)
 80005ee:	f002 f881 	bl	80026f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2008      	movs	r0, #8
 80005f8:	f002 f845 	bl	8002686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005fc:	2008      	movs	r0, #8
 80005fe:	f002 f85e 	bl	80026be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2009      	movs	r0, #9
 8000608:	f002 f83d 	bl	8002686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800060c:	2009      	movs	r0, #9
 800060e:	f002 f856 	bl	80026be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	200a      	movs	r0, #10
 8000618:	f002 f835 	bl	8002686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800061c:	200a      	movs	r0, #10
 800061e:	f002 f84e 	bl	80026be <HAL_NVIC_EnableIRQ>

}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000
 8000634:	40020400 	.word	0x40020400
 8000638:	10110000 	.word	0x10110000

0800063c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_I2C1_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_I2C1_Init+0x50>)
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_I2C1_Init+0x58>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_I2C1_Init+0x50>)
 800065a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_I2C1_Init+0x50>)
 800067a:	f002 fa07 	bl	8002a8c <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 fd5a 	bl	800113c <Error_Handler>
  }

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200006d4 	.word	0x200006d4
 8000690:	40005400 	.word	0x40005400
 8000694:	00061a80 	.word	0x00061a80

08000698 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <HAL_I2C_MspInit+0x84>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d12b      	bne.n	8000712 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006da:	2312      	movs	r3, #18
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006de:	2301      	movs	r3, #1
 80006e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e6:	2304      	movs	r3, #4
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <HAL_I2C_MspInit+0x8c>)
 80006f2:	f001 ffff 	bl	80026f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_I2C_MspInit+0x88>)
 8000700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000704:	6413      	str	r3, [r2, #64]	; 0x40
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_I2C_MspInit+0x88>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40005400 	.word	0x40005400
 8000720:	40023800 	.word	0x40023800
 8000724:	40020400 	.word	0x40020400

08000728 <XORCipher>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void XORCipher(char* string, char* key)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < strlen(string); i++)
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	e018      	b.n	800076a <XORCipher+0x42>
	{
		string[i] = string[i] ^ key[i % 8];
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	7819      	ldrb	r1, [r3, #0]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	425a      	negs	r2, r3
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	f002 0207 	and.w	r2, r2, #7
 800074c:	bf58      	it	pl
 800074e:	4253      	negpl	r3, r2
 8000750:	461a      	mov	r2, r3
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4413      	add	r3, r2
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	4403      	add	r3, r0
 800075e:	404a      	eors	r2, r1
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < strlen(string); i++)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fd34 	bl	80001d8 <strlen>
 8000770:	4602      	mov	r2, r0
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	429a      	cmp	r2, r3
 8000776:	d8df      	bhi.n	8000738 <XORCipher+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <OLED_page_sc>:

void OLED_page_sc(){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000786:	f001 fe75 	bl	8002474 <HAL_GetTick>
 800078a:	4602      	mov	r2, r0
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <OLED_page_sc+0xcc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000796:	d955      	bls.n	8000844 <OLED_page_sc+0xc4>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fe47 	bl	800142c <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 800079e:	2106      	movs	r1, #6
 80007a0:	2004      	movs	r0, #4
 80007a2:	f000 febb 	bl	800151c <SSD1306_GotoXY>
		SSD1306_Puts ("--MHS--", &Font_11x18, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	4929      	ldr	r1, [pc, #164]	; (8000850 <OLED_page_sc+0xd0>)
 80007aa:	482a      	ldr	r0, [pc, #168]	; (8000854 <OLED_page_sc+0xd4>)
 80007ac:	f000 ff4c 	bl	8001648 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 80007b0:	2119      	movs	r1, #25
 80007b2:	2004      	movs	r0, #4
 80007b4:	f000 feb2 	bl	800151c <SSD1306_GotoXY>
		SSD1306_Puts ("PAGE", &Font_11x18, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	4925      	ldr	r1, [pc, #148]	; (8000850 <OLED_page_sc+0xd0>)
 80007bc:	4826      	ldr	r0, [pc, #152]	; (8000858 <OLED_page_sc+0xd8>)
 80007be:	f000 ff43 	bl	8001648 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 80007c2:	212c      	movs	r1, #44	; 0x2c
 80007c4:	2004      	movs	r0, #4
 80007c6:	f000 fea9 	bl	800151c <SSD1306_GotoXY>
		SSD1306_Puts ("NUMBER:", &Font_11x18, 1);
 80007ca:	2201      	movs	r2, #1
 80007cc:	4920      	ldr	r1, [pc, #128]	; (8000850 <OLED_page_sc+0xd0>)
 80007ce:	4823      	ldr	r0, [pc, #140]	; (800085c <OLED_page_sc+0xdc>)
 80007d0:	f000 ff3a 	bl	8001648 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 80007d4:	2301      	movs	r3, #1
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	2101      	movs	r1, #1
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 ff57 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 80007e4:	2301      	movs	r3, #1
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 ff4f 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 80007f4:	2301      	movs	r3, #1
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2340      	movs	r3, #64	; 0x40
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	2100      	movs	r1, #0
 80007fe:	2080      	movs	r0, #128	; 0x80
 8000800:	f000 ff47 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000804:	2301      	movs	r3, #1
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2340      	movs	r3, #64	; 0x40
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	2140      	movs	r1, #64	; 0x40
 800080e:	2000      	movs	r0, #0
 8000810:	f000 ff3f 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 8000814:	2301      	movs	r3, #1
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	233e      	movs	r3, #62	; 0x3e
 800081a:	221b      	movs	r2, #27
 800081c:	2102      	movs	r1, #2
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f001 f832 	bl	8001888 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 8000824:	2119      	movs	r1, #25
 8000826:	206e      	movs	r0, #110	; 0x6e
 8000828:	f000 fe78 	bl	800151c <SSD1306_GotoXY>
		SSD1306_Putc ((char)(pageNumber+'0'), &Font_11x18, 1);
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <OLED_page_sc+0xe0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3330      	adds	r3, #48	; 0x30
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2201      	movs	r2, #1
 8000838:	4905      	ldr	r1, [pc, #20]	; (8000850 <OLED_page_sc+0xd0>)
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fe84 	bl	8001548 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 8000840:	f000 fdc6 	bl	80013d0 <SSD1306_UpdateScreen>
	}
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002b0 	.word	0x200002b0
 8000850:	20000000 	.word	0x20000000
 8000854:	080097b0 	.word	0x080097b0
 8000858:	080097b8 	.word	0x080097b8
 800085c:	080097c0 	.word	0x080097c0
 8000860:	200002ac 	.word	0x200002ac

08000864 <OLED_login_sc>:

void OLED_login_sc(){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 800086a:	f001 fe03 	bl	8002474 <HAL_GetTick>
 800086e:	4602      	mov	r2, r0
 8000870:	4b2e      	ldr	r3, [pc, #184]	; (800092c <OLED_login_sc+0xc8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800087a:	d954      	bls.n	8000926 <OLED_login_sc+0xc2>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 800087c:	2000      	movs	r0, #0
 800087e:	f000 fdd5 	bl	800142c <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 8000882:	2106      	movs	r1, #6
 8000884:	2004      	movs	r0, #4
 8000886:	f000 fe49 	bl	800151c <SSD1306_GotoXY>
		SSD1306_Puts ("-ENTER-", &Font_11x18, 1);
 800088a:	2201      	movs	r2, #1
 800088c:	4928      	ldr	r1, [pc, #160]	; (8000930 <OLED_login_sc+0xcc>)
 800088e:	4829      	ldr	r0, [pc, #164]	; (8000934 <OLED_login_sc+0xd0>)
 8000890:	f000 feda 	bl	8001648 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000894:	2119      	movs	r1, #25
 8000896:	2004      	movs	r0, #4
 8000898:	f000 fe40 	bl	800151c <SSD1306_GotoXY>
		SSD1306_Puts ("PASSWORD", &Font_11x18, 1);
 800089c:	2201      	movs	r2, #1
 800089e:	4924      	ldr	r1, [pc, #144]	; (8000930 <OLED_login_sc+0xcc>)
 80008a0:	4825      	ldr	r0, [pc, #148]	; (8000938 <OLED_login_sc+0xd4>)
 80008a2:	f000 fed1 	bl	8001648 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 80008a6:	212c      	movs	r1, #44	; 0x2c
 80008a8:	2004      	movs	r0, #4
 80008aa:	f000 fe37 	bl	800151c <SSD1306_GotoXY>
		SSD1306_Puts ("TRIES:", &Font_11x18, 1);
 80008ae:	2201      	movs	r2, #1
 80008b0:	491f      	ldr	r1, [pc, #124]	; (8000930 <OLED_login_sc+0xcc>)
 80008b2:	4822      	ldr	r0, [pc, #136]	; (800093c <OLED_login_sc+0xd8>)
 80008b4:	f000 fec8 	bl	8001648 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 80008b8:	2301      	movs	r3, #1
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	2101      	movs	r1, #1
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 fee5 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 80008c8:	2301      	movs	r3, #1
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 fedd 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 80008d8:	2301      	movs	r3, #1
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	2100      	movs	r1, #0
 80008e2:	2080      	movs	r0, #128	; 0x80
 80008e4:	f000 fed5 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 80008e8:	2301      	movs	r3, #1
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 fecd 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 80008f8:	2301      	movs	r3, #1
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	233e      	movs	r3, #62	; 0x3e
 80008fe:	221b      	movs	r2, #27
 8000900:	2102      	movs	r1, #2
 8000902:	2064      	movs	r0, #100	; 0x64
 8000904:	f000 ffc0 	bl	8001888 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 8000908:	2119      	movs	r1, #25
 800090a:	206e      	movs	r0, #110	; 0x6e
 800090c:	f000 fe06 	bl	800151c <SSD1306_GotoXY>
		SSD1306_Putc ((char)(loginTries+'0'), &Font_11x18, 1);
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <OLED_login_sc+0xdc>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	3330      	adds	r3, #48	; 0x30
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2201      	movs	r2, #1
 800091a:	4905      	ldr	r1, [pc, #20]	; (8000930 <OLED_login_sc+0xcc>)
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fe13 	bl	8001548 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 8000922:	f000 fd55 	bl	80013d0 <SSD1306_UpdateScreen>
	}
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200002b4 	.word	0x200002b4
 8000930:	20000000 	.word	0x20000000
 8000934:	080097c8 	.word	0x080097c8
 8000938:	080097d0 	.word	0x080097d0
 800093c:	080097dc 	.word	0x080097dc
 8000940:	20000092 	.word	0x20000092

08000944 <OLED_block_sc>:

void OLED_block_sc(){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 800094a:	f001 fd93 	bl	8002474 <HAL_GetTick>
 800094e:	4602      	mov	r2, r0
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <OLED_block_sc+0x8c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800095a:	d936      	bls.n	80009ca <OLED_block_sc+0x86>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 fd65 	bl	800142c <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 8000962:	2106      	movs	r1, #6
 8000964:	2004      	movs	r0, #4
 8000966:	f000 fdd9 	bl	800151c <SSD1306_GotoXY>
		SSD1306_Puts ("- DEVICE  -", &Font_11x18, 1);
 800096a:	2201      	movs	r2, #1
 800096c:	4919      	ldr	r1, [pc, #100]	; (80009d4 <OLED_block_sc+0x90>)
 800096e:	481a      	ldr	r0, [pc, #104]	; (80009d8 <OLED_block_sc+0x94>)
 8000970:	f000 fe6a 	bl	8001648 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000974:	2119      	movs	r1, #25
 8000976:	2004      	movs	r0, #4
 8000978:	f000 fdd0 	bl	800151c <SSD1306_GotoXY>
		SSD1306_Puts ("- BLOCKED -", &Font_11x18, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	4915      	ldr	r1, [pc, #84]	; (80009d4 <OLED_block_sc+0x90>)
 8000980:	4816      	ldr	r0, [pc, #88]	; (80009dc <OLED_block_sc+0x98>)
 8000982:	f000 fe61 	bl	8001648 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000986:	2301      	movs	r3, #1
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2301      	movs	r3, #1
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	2101      	movs	r1, #1
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fe7e 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000996:	2301      	movs	r3, #1
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fe76 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 80009a6:	2301      	movs	r3, #1
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2340      	movs	r3, #64	; 0x40
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	2100      	movs	r1, #0
 80009b0:	2080      	movs	r0, #128	; 0x80
 80009b2:	f000 fe6e 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 80009b6:	2301      	movs	r3, #1
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2340      	movs	r3, #64	; 0x40
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 fe66 	bl	8001692 <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 80009c6:	f000 fd03 	bl	80013d0 <SSD1306_UpdateScreen>
	}
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200002b8 	.word	0x200002b8
 80009d4:	20000000 	.word	0x20000000
 80009d8:	080097e4 	.word	0x080097e4
 80009dc:	080097f0 	.word	0x080097f0

080009e0 <sendUSB>:
		keyPressed = 9;
	}
	HAL_Delay(200);
}

void sendUSB(uint8_t *pass){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	while(*pass != '\0'){
 80009e8:	e066      	b.n	8000ab8 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	e060      	b.n	8000ab2 <sendUSB+0xd2>
			if(*pass == keys[i].value){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7819      	ldrb	r1, [r3, #0]
 80009f4:	4834      	ldr	r0, [pc, #208]	; (8000ac8 <sendUSB+0xe8>)
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	4403      	add	r3, r0
 8000a00:	3301      	adds	r3, #1
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4299      	cmp	r1, r3
 8000a06:	d11f      	bne.n	8000a48 <sendUSB+0x68>
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000a08:	492f      	ldr	r1, [pc, #188]	; (8000ac8 <sendUSB+0xe8>)
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <sendUSB+0xec>)
 8000a18:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	492b      	ldr	r1, [pc, #172]	; (8000acc <sendUSB+0xec>)
 8000a1e:	482c      	ldr	r0, [pc, #176]	; (8000ad0 <sendUSB+0xf0>)
 8000a20:	f007 f842 	bl	8007aa8 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000a24:	2032      	movs	r0, #50	; 0x32
 8000a26:	f001 fd31 	bl	800248c <HAL_Delay>
				keyboardhid.KEYCODE1 = 0x00;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <sendUSB+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000a30:	2208      	movs	r2, #8
 8000a32:	4926      	ldr	r1, [pc, #152]	; (8000acc <sendUSB+0xec>)
 8000a34:	4826      	ldr	r0, [pc, #152]	; (8000ad0 <sendUSB+0xf0>)
 8000a36:	f007 f837 	bl	8007aa8 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000a3a:	2032      	movs	r0, #50	; 0x32
 8000a3c:	f001 fd26 	bl	800248c <HAL_Delay>
				pass++;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3301      	adds	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
				break;
 8000a46:	e037      	b.n	8000ab8 <sendUSB+0xd8>
			}
			else if(*pass == keys[i].shiftValue){
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7819      	ldrb	r1, [r3, #0]
 8000a4c:	481e      	ldr	r0, [pc, #120]	; (8000ac8 <sendUSB+0xe8>)
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	4403      	add	r3, r0
 8000a58:	3302      	adds	r3, #2
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	d125      	bne.n	8000aac <sendUSB+0xcc>
				keyboardhid.MODIFIER = 0x02; // lewy Shift naciśniety
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <sendUSB+0xec>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000a66:	4918      	ldr	r1, [pc, #96]	; (8000ac8 <sendUSB+0xe8>)
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <sendUSB+0xec>)
 8000a76:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000a78:	2208      	movs	r2, #8
 8000a7a:	4914      	ldr	r1, [pc, #80]	; (8000acc <sendUSB+0xec>)
 8000a7c:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <sendUSB+0xf0>)
 8000a7e:	f007 f813 	bl	8007aa8 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000a82:	2032      	movs	r0, #50	; 0x32
 8000a84:	f001 fd02 	bl	800248c <HAL_Delay>
				keyboardhid.MODIFIER = 0x00; // lewy Shift puszczony
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <sendUSB+0xec>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = 0x00;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <sendUSB+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000a94:	2208      	movs	r2, #8
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <sendUSB+0xec>)
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <sendUSB+0xf0>)
 8000a9a:	f007 f805 	bl	8007aa8 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000a9e:	2032      	movs	r0, #50	; 0x32
 8000aa0:	f001 fcf4 	bl	800248c <HAL_Delay>
				pass++;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
				break;
 8000aaa:	e005      	b.n	8000ab8 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ab6:	dd9b      	ble.n	80009f0 <sendUSB+0x10>
	while(*pass != '\0'){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d194      	bne.n	80009ea <sendUSB+0xa>
			}
		}
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	200002a4 	.word	0x200002a4
 8000ad0:	200009f8 	.word	0x200009f8

08000ad4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ad8:	f001 fc66 	bl	80023a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000adc:	f000 f994 	bl	8000e08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ae0:	f7ff fd02 	bl	80004e8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ae4:	f7ff fdaa 	bl	800063c <MX_I2C1_Init>
	MX_SPI3_Init();
 8000ae8:	f000 fb30 	bl	800114c <MX_SPI3_Init>
	MX_TIM2_Init();
 8000aec:	f001 f87c 	bl	8001be8 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000af0:	f008 f936 	bl	8008d60 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	//---- Inicjalizacja wyświetlacza OLED ----
	SSD1306_Init();
 8000af4:	f000 fba8 	bl	8001248 <SSD1306_Init>

	//---- Inicjalizacja obsługi enkodera ----
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000af8:	213c      	movs	r1, #60	; 0x3c
 8000afa:	48ab      	ldr	r0, [pc, #684]	; (8000da8 <main+0x2d4>)
 8000afc:	f005 f8ac 	bl	8005c58 <HAL_TIM_Encoder_Start_IT>

	//---- Inicjalizacja pamięci FLASH ----
	W25qxx_Init();
 8000b00:	f001 fa26 	bl	8001f50 <W25qxx_Init>
	W25qxx_EraseChip();
 8000b04:	f001 faf0 	bl	80020e8 <W25qxx_EraseChip>
	// W25qxx_WriteSector(writeBuffer, 1, 0, 8);
	// W25qxx_ReadSector(readBuffer, 1, 0, 8);

	memcpy(passwordWrite, "123456\0", sizeof(passwordWrite));
 8000b08:	4aa8      	ldr	r2, [pc, #672]	; (8000dac <main+0x2d8>)
 8000b0a:	4ba9      	ldr	r3, [pc, #676]	; (8000db0 <main+0x2dc>)
 8000b0c:	4610      	mov	r0, r2
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b14:	461a      	mov	r2, r3
 8000b16:	f008 fd71 	bl	80095fc <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000b1a:	49a6      	ldr	r1, [pc, #664]	; (8000db4 <main+0x2e0>)
 8000b1c:	48a3      	ldr	r0, [pc, #652]	; (8000dac <main+0x2d8>)
 8000b1e:	f7ff fe03 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 1, 0, 255);
 8000b22:	23ff      	movs	r3, #255	; 0xff
 8000b24:	2200      	movs	r2, #0
 8000b26:	2101      	movs	r1, #1
 8000b28:	48a0      	ldr	r0, [pc, #640]	; (8000dac <main+0x2d8>)
 8000b2a:	f001 fb0d 	bl	8002148 <W25qxx_WritePage>
	memcpy(passwordWrite, "654321\0", sizeof(passwordWrite));
 8000b2e:	4a9f      	ldr	r2, [pc, #636]	; (8000dac <main+0x2d8>)
 8000b30:	4ba1      	ldr	r3, [pc, #644]	; (8000db8 <main+0x2e4>)
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	f008 fd5e 	bl	80095fc <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000b40:	499c      	ldr	r1, [pc, #624]	; (8000db4 <main+0x2e0>)
 8000b42:	489a      	ldr	r0, [pc, #616]	; (8000dac <main+0x2d8>)
 8000b44:	f7ff fdf0 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 2, 0, 256);
 8000b48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4896      	ldr	r0, [pc, #600]	; (8000dac <main+0x2d8>)
 8000b52:	f001 faf9 	bl	8002148 <W25qxx_WritePage>
	memcpy(passwordWrite, "HaloHalo\0", sizeof(passwordWrite));
 8000b56:	4a95      	ldr	r2, [pc, #596]	; (8000dac <main+0x2d8>)
 8000b58:	4b98      	ldr	r3, [pc, #608]	; (8000dbc <main+0x2e8>)
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b62:	461a      	mov	r2, r3
 8000b64:	f008 fd4a 	bl	80095fc <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000b68:	4992      	ldr	r1, [pc, #584]	; (8000db4 <main+0x2e0>)
 8000b6a:	4890      	ldr	r0, [pc, #576]	; (8000dac <main+0x2d8>)
 8000b6c:	f7ff fddc 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 3, 0, 256);
 8000b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b74:	2200      	movs	r2, #0
 8000b76:	2103      	movs	r1, #3
 8000b78:	488c      	ldr	r0, [pc, #560]	; (8000dac <main+0x2d8>)
 8000b7a:	f001 fae5 	bl	8002148 <W25qxx_WritePage>
	memcpy(passwordWrite, "Cartoon-Duck-14-Coffee-Glvs\0", sizeof(passwordWrite));
 8000b7e:	4a8b      	ldr	r2, [pc, #556]	; (8000dac <main+0x2d8>)
 8000b80:	4b8f      	ldr	r3, [pc, #572]	; (8000dc0 <main+0x2ec>)
 8000b82:	4610      	mov	r0, r2
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	f008 fd36 	bl	80095fc <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000b90:	4988      	ldr	r1, [pc, #544]	; (8000db4 <main+0x2e0>)
 8000b92:	4886      	ldr	r0, [pc, #536]	; (8000dac <main+0x2d8>)
 8000b94:	f7ff fdc8 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 4, 0, 256);
 8000b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	4882      	ldr	r0, [pc, #520]	; (8000dac <main+0x2d8>)
 8000ba2:	f001 fad1 	bl	8002148 <W25qxx_WritePage>
	memcpy(passwordWrite, "doubleclick\0", sizeof(passwordWrite));
 8000ba6:	4a81      	ldr	r2, [pc, #516]	; (8000dac <main+0x2d8>)
 8000ba8:	4b86      	ldr	r3, [pc, #536]	; (8000dc4 <main+0x2f0>)
 8000baa:	4610      	mov	r0, r2
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	f008 fd22 	bl	80095fc <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000bb8:	497e      	ldr	r1, [pc, #504]	; (8000db4 <main+0x2e0>)
 8000bba:	487c      	ldr	r0, [pc, #496]	; (8000dac <main+0x2d8>)
 8000bbc:	f7ff fdb4 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 5, 0, 256);
 8000bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2105      	movs	r1, #5
 8000bc8:	4878      	ldr	r0, [pc, #480]	; (8000dac <main+0x2d8>)
 8000bca:	f001 fabd 	bl	8002148 <W25qxx_WritePage>
	memcpy(passwordWrite, "supersecure\0", sizeof(passwordWrite));
 8000bce:	4a77      	ldr	r2, [pc, #476]	; (8000dac <main+0x2d8>)
 8000bd0:	4b7d      	ldr	r3, [pc, #500]	; (8000dc8 <main+0x2f4>)
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f008 fd0e 	bl	80095fc <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000be0:	4974      	ldr	r1, [pc, #464]	; (8000db4 <main+0x2e0>)
 8000be2:	4872      	ldr	r0, [pc, #456]	; (8000dac <main+0x2d8>)
 8000be4:	f7ff fda0 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 6, 0, 256);
 8000be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bec:	2200      	movs	r2, #0
 8000bee:	2106      	movs	r1, #6
 8000bf0:	486e      	ldr	r0, [pc, #440]	; (8000dac <main+0x2d8>)
 8000bf2:	f001 faa9 	bl	8002148 <W25qxx_WritePage>
	memcpy(passwordWrite, "Qwerty\0", sizeof(passwordWrite));
 8000bf6:	4a6d      	ldr	r2, [pc, #436]	; (8000dac <main+0x2d8>)
 8000bf8:	4b74      	ldr	r3, [pc, #464]	; (8000dcc <main+0x2f8>)
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c02:	461a      	mov	r2, r3
 8000c04:	f008 fcfa 	bl	80095fc <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000c08:	496a      	ldr	r1, [pc, #424]	; (8000db4 <main+0x2e0>)
 8000c0a:	4868      	ldr	r0, [pc, #416]	; (8000dac <main+0x2d8>)
 8000c0c:	f7ff fd8c 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 7, 0, 256);
 8000c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c14:	2200      	movs	r2, #0
 8000c16:	2107      	movs	r1, #7
 8000c18:	4864      	ldr	r0, [pc, #400]	; (8000dac <main+0x2d8>)
 8000c1a:	f001 fa95 	bl	8002148 <W25qxx_WritePage>
	memcpy(passwordWrite, "DEFAULT\0", sizeof(passwordWrite));
 8000c1e:	4a63      	ldr	r2, [pc, #396]	; (8000dac <main+0x2d8>)
 8000c20:	4b6b      	ldr	r3, [pc, #428]	; (8000dd0 <main+0x2fc>)
 8000c22:	4610      	mov	r0, r2
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f008 fce6 	bl	80095fc <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000c30:	4960      	ldr	r1, [pc, #384]	; (8000db4 <main+0x2e0>)
 8000c32:	485e      	ldr	r0, [pc, #376]	; (8000dac <main+0x2d8>)
 8000c34:	f7ff fd78 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 8, 0, 256);
 8000c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2108      	movs	r1, #8
 8000c40:	485a      	ldr	r0, [pc, #360]	; (8000dac <main+0x2d8>)
 8000c42:	f001 fa81 	bl	8002148 <W25qxx_WritePage>
	memcpy(passwordWrite, "password\0", sizeof(passwordWrite));
 8000c46:	4a59      	ldr	r2, [pc, #356]	; (8000dac <main+0x2d8>)
 8000c48:	4b62      	ldr	r3, [pc, #392]	; (8000dd4 <main+0x300>)
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c52:	461a      	mov	r2, r3
 8000c54:	f008 fcd2 	bl	80095fc <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000c58:	4956      	ldr	r1, [pc, #344]	; (8000db4 <main+0x2e0>)
 8000c5a:	4854      	ldr	r0, [pc, #336]	; (8000dac <main+0x2d8>)
 8000c5c:	f7ff fd64 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 9, 0, 256);
 8000c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c64:	2200      	movs	r2, #0
 8000c66:	2109      	movs	r1, #9
 8000c68:	4850      	ldr	r0, [pc, #320]	; (8000dac <main+0x2d8>)
 8000c6a:	f001 fa6d 	bl	8002148 <W25qxx_WritePage>
	memcpy(passwordWrite, "0\0", sizeof(passwordWrite));
 8000c6e:	4a4f      	ldr	r2, [pc, #316]	; (8000dac <main+0x2d8>)
 8000c70:	4b59      	ldr	r3, [pc, #356]	; (8000dd8 <main+0x304>)
 8000c72:	4610      	mov	r0, r2
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f008 fcbe 	bl	80095fc <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000c80:	494c      	ldr	r1, [pc, #304]	; (8000db4 <main+0x2e0>)
 8000c82:	484a      	ldr	r0, [pc, #296]	; (8000dac <main+0x2d8>)
 8000c84:	f7ff fd50 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 10, 0, 256);
 8000c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	210a      	movs	r1, #10
 8000c90:	4846      	ldr	r0, [pc, #280]	; (8000dac <main+0x2d8>)
 8000c92:	f001 fa59 	bl	8002148 <W25qxx_WritePage>

	//---- Inicjalizacja obsługi macierzy przycisków
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2120      	movs	r1, #32
 8000c9a:	4850      	ldr	r0, [pc, #320]	; (8000ddc <main+0x308>)
 8000c9c:	f001 fec4 	bl	8002a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2140      	movs	r1, #64	; 0x40
 8000ca4:	484d      	ldr	r0, [pc, #308]	; (8000ddc <main+0x308>)
 8000ca6:	f001 febf 	bl	8002a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	484b      	ldr	r0, [pc, #300]	; (8000ddc <main+0x308>)
 8000cb0:	f001 feba 	bl	8002a28 <HAL_GPIO_WritePin>

	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cba:	4849      	ldr	r0, [pc, #292]	; (8000de0 <main+0x30c>)
 8000cbc:	f001 feb4 	bl	8002a28 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(deviceState == 0){
 8000cc0:	4b48      	ldr	r3, [pc, #288]	; (8000de4 <main+0x310>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d148      	bne.n	8000d5a <main+0x286>
			OLED_login_sc();
 8000cc8:	f7ff fdcc 	bl	8000864 <OLED_login_sc>
			if(keyFlag){
 8000ccc:	4b46      	ldr	r3, [pc, #280]	; (8000de8 <main+0x314>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d010      	beq.n	8000cf8 <main+0x224>
				loginBuff[loginCounter] = keyPressed;
 8000cd6:	4b45      	ldr	r3, [pc, #276]	; (8000dec <main+0x318>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <main+0x31c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2d9      	uxtb	r1, r3
 8000ce2:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <main+0x320>)
 8000ce4:	5499      	strb	r1, [r3, r2]
				loginCounter++;
 8000ce6:	4b41      	ldr	r3, [pc, #260]	; (8000dec <main+0x318>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <main+0x318>)
 8000cf0:	701a      	strb	r2, [r3, #0]
				keyFlag = 0;
 8000cf2:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <main+0x314>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
			}
			if(loginCounter == 4){
 8000cf8:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <main+0x318>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d124      	bne.n	8000d4a <main+0x276>
				if(login[0] == loginBuff[0] && login[1] == loginBuff[1] && login[2] == loginBuff[2] && login[3] == loginBuff[3]){
 8000d00:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <main+0x324>)
 8000d02:	781a      	ldrb	r2, [r3, #0]
 8000d04:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <main+0x320>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d115      	bne.n	8000d38 <main+0x264>
 8000d0c:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <main+0x324>)
 8000d0e:	785a      	ldrb	r2, [r3, #1]
 8000d10:	4b38      	ldr	r3, [pc, #224]	; (8000df4 <main+0x320>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d10f      	bne.n	8000d38 <main+0x264>
 8000d18:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <main+0x324>)
 8000d1a:	789a      	ldrb	r2, [r3, #2]
 8000d1c:	4b35      	ldr	r3, [pc, #212]	; (8000df4 <main+0x320>)
 8000d1e:	789b      	ldrb	r3, [r3, #2]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d109      	bne.n	8000d38 <main+0x264>
 8000d24:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <main+0x324>)
 8000d26:	78da      	ldrb	r2, [r3, #3]
 8000d28:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <main+0x320>)
 8000d2a:	78db      	ldrb	r3, [r3, #3]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d103      	bne.n	8000d38 <main+0x264>
					deviceState = 1;
 8000d30:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <main+0x310>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	e008      	b.n	8000d4a <main+0x276>
				}else{
					loginCounter = 0;
 8000d38:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <main+0x318>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
					loginTries--;
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <main+0x328>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <main+0x328>)
 8000d48:	701a      	strb	r2, [r3, #0]
				}
			}
			if(loginTries == 0){
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <main+0x328>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1b6      	bne.n	8000cc0 <main+0x1ec>
				deviceState = 99;
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <main+0x310>)
 8000d54:	2263      	movs	r2, #99	; 0x63
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	e7b2      	b.n	8000cc0 <main+0x1ec>
			}
		}
		else if(deviceState == 99){
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <main+0x310>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b63      	cmp	r3, #99	; 0x63
 8000d60:	d102      	bne.n	8000d68 <main+0x294>
			OLED_block_sc();
 8000d62:	f7ff fdef 	bl	8000944 <OLED_block_sc>
 8000d66:	e7ab      	b.n	8000cc0 <main+0x1ec>
		}
		else{
			OLED_page_sc();
 8000d68:	f7ff fd0a 	bl	8000780 <OLED_page_sc>
			if(keyFlag){
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <main+0x314>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0a4      	beq.n	8000cc0 <main+0x1ec>
				W25qxx_ReadPage(passwordRead, pageNumber*9+keyPressed, 0, 255);
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <main+0x32c>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <main+0x31c>)
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	1899      	adds	r1, r3, r2
 8000d88:	23ff      	movs	r3, #255	; 0xff
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	481d      	ldr	r0, [pc, #116]	; (8000e04 <main+0x330>)
 8000d8e:	f001 fa61 	bl	8002254 <W25qxx_ReadPage>
				XORCipher(passwordRead, cipherKey);
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <main+0x2e0>)
 8000d94:	481b      	ldr	r0, [pc, #108]	; (8000e04 <main+0x330>)
 8000d96:	f7ff fcc7 	bl	8000728 <XORCipher>
				sendUSB(passwordRead);
 8000d9a:	481a      	ldr	r0, [pc, #104]	; (8000e04 <main+0x330>)
 8000d9c:	f7ff fe20 	bl	80009e0 <sendUSB>
				keyFlag = 0;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <main+0x314>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
		if(deviceState == 0){
 8000da6:	e78b      	b.n	8000cc0 <main+0x1ec>
 8000da8:	2000098c 	.word	0x2000098c
 8000dac:	20000830 	.word	0x20000830
 8000db0:	080097fc 	.word	0x080097fc
 8000db4:	20000098 	.word	0x20000098
 8000db8:	08009804 	.word	0x08009804
 8000dbc:	0800980c 	.word	0x0800980c
 8000dc0:	08009818 	.word	0x08009818
 8000dc4:	08009838 	.word	0x08009838
 8000dc8:	08009848 	.word	0x08009848
 8000dcc:	08009858 	.word	0x08009858
 8000dd0:	08009860 	.word	0x08009860
 8000dd4:	0800986c 	.word	0x0800986c
 8000dd8:	08009878 	.word	0x08009878
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400
 8000de4:	20000278 	.word	0x20000278
 8000de8:	20000291 	.word	0x20000291
 8000dec:	20000279 	.word	0x20000279
 8000df0:	20000290 	.word	0x20000290
 8000df4:	20000930 	.word	0x20000930
 8000df8:	20000094 	.word	0x20000094
 8000dfc:	20000092 	.word	0x20000092
 8000e00:	200002ac 	.word	0x200002ac
 8000e04:	20000730 	.word	0x20000730

08000e08 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
 8000e0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	2230      	movs	r2, #48	; 0x30
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f008 fbfb 	bl	8009612 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <SystemClock_Config+0xc8>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	4a26      	ldr	r2, [pc, #152]	; (8000ed0 <SystemClock_Config+0xc8>)
 8000e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <SystemClock_Config+0xc8>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <SystemClock_Config+0xcc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a20      	ldr	r2, [pc, #128]	; (8000ed4 <SystemClock_Config+0xcc>)
 8000e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <SystemClock_Config+0xcc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e64:	2301      	movs	r3, #1
 8000e66:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000e78:	2319      	movs	r3, #25
 8000e7a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000e7c:	23c0      	movs	r3, #192	; 0xc0
 8000e7e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e84:	2304      	movs	r3, #4
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fcd5 	bl	800483c <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000e98:	f000 f950 	bl	800113c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 ff2f 	bl	8004d1c <HAL_RCC_ClockConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000ec4:	f000 f93a 	bl	800113c <Error_Handler>
	}
}
 8000ec8:	bf00      	nop
 8000eca:	3750      	adds	r7, #80	; 0x50
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ee8:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ef2:	801a      	strh	r2, [r3, #0]
	if(count - old_count > 5)
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b05      	cmp	r3, #5
 8000f06:	dd0e      	ble.n	8000f26 <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(pageNumber > 0)
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d004      	beq.n	8000f1a <HAL_TIM_IC_CaptureCallback+0x42>
			pageNumber--;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	4a16      	ldr	r2, [pc, #88]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f18:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f22:	801a      	strh	r2, [r3, #0]
		if(pageNumber < 9)
			pageNumber++;
		old_count = count;
	}

}
 8000f24:	e018      	b.n	8000f58 <HAL_TIM_IC_CaptureCallback+0x80>
	}else if(count - old_count < -5)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	f113 0f05 	cmn.w	r3, #5
 8000f3a:	da0d      	bge.n	8000f58 <HAL_TIM_IC_CaptureCallback+0x80>
		if(pageNumber < 9)
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d804      	bhi.n	8000f4e <HAL_TIM_IC_CaptureCallback+0x76>
			pageNumber++;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f4c:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f56:	801a      	strh	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	2000029c 	.word	0x2000029c
 8000f68:	200002a0 	.word	0x200002a0
 8000f6c:	200002a2 	.word	0x200002a2
 8000f70:	200002ac 	.word	0x200002ac

08000f74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000f7e:	f001 fa79 	bl	8002474 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	4b66      	ldr	r3, [pc, #408]	; (8001120 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000f86:	601a      	str	r2, [r3, #0]
	if(currentMillis - previousMillis > 300)
 8000f88:	4b65      	ldr	r3, [pc, #404]	; (8001120 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b65      	ldr	r3, [pc, #404]	; (8001124 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f96:	f240 80be 	bls.w	8001116 <HAL_GPIO_EXTI_Callback+0x1a2>
	{
		GPIO_InitStructPrivate.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000f9a:	4b63      	ldr	r3, [pc, #396]	; (8001128 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f9c:	221c      	movs	r2, #28
 8000f9e:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000fa0:	4b61      	ldr	r3, [pc, #388]	; (8001128 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000fa6:	4b60      	ldr	r3, [pc, #384]	; (8001128 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	4b5e      	ldr	r3, [pc, #376]	; (8001128 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000fb2:	495d      	ldr	r1, [pc, #372]	; (8001128 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000fb4:	485d      	ldr	r0, [pc, #372]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fb6:	f001 fb9d 	bl	80026f4 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	485b      	ldr	r0, [pc, #364]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fc0:	f001 fd32 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2140      	movs	r1, #64	; 0x40
 8000fc8:	4858      	ldr	r0, [pc, #352]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fca:	f001 fd2d 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	4856      	ldr	r0, [pc, #344]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fd4:	f001 fd28 	bl	8002a28 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8000fd8:	2110      	movs	r1, #16
 8000fda:	4854      	ldr	r0, [pc, #336]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fdc:	f001 fd0c 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_EXTI_Callback+0x7a>
			keyPressed = 1;
 8000fe6:	4b52      	ldr	r3, [pc, #328]	; (8001130 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e014      	b.n	8001018 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8000fee:	2108      	movs	r1, #8
 8000ff0:	484e      	ldr	r0, [pc, #312]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000ff2:	f001 fd01 	bl	80029f8 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_EXTI_Callback+0x90>
			keyPressed = 4;
 8000ffc:	4b4c      	ldr	r3, [pc, #304]	; (8001130 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e009      	b.n	8001018 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8001004:	2104      	movs	r1, #4
 8001006:	4849      	ldr	r0, [pc, #292]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001008:	f001 fcf6 	bl	80029f8 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <HAL_GPIO_EXTI_Callback+0xa4>
			keyPressed = 7;
 8001012:	4b47      	ldr	r3, [pc, #284]	; (8001130 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001014:	2207      	movs	r2, #7
 8001016:	701a      	strb	r2, [r3, #0]

		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2120      	movs	r1, #32
 800101c:	4843      	ldr	r0, [pc, #268]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800101e:	f001 fd03 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	4841      	ldr	r0, [pc, #260]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001028:	f001 fcfe 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	483e      	ldr	r0, [pc, #248]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001032:	f001 fcf9 	bl	8002a28 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8001036:	2110      	movs	r1, #16
 8001038:	483c      	ldr	r0, [pc, #240]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800103a:	f001 fcdd 	bl	80029f8 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_EXTI_Callback+0xd8>
			keyPressed = 2;
 8001044:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001046:	2202      	movs	r2, #2
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e014      	b.n	8001076 <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 800104c:	2108      	movs	r1, #8
 800104e:	4837      	ldr	r0, [pc, #220]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001050:	f001 fcd2 	bl	80029f8 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_EXTI_Callback+0xee>
			keyPressed = 5;
 800105a:	4b35      	ldr	r3, [pc, #212]	; (8001130 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800105c:	2205      	movs	r2, #5
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e009      	b.n	8001076 <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8001062:	2104      	movs	r1, #4
 8001064:	4831      	ldr	r0, [pc, #196]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001066:	f001 fcc7 	bl	80029f8 <HAL_GPIO_ReadPin>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_GPIO_EXTI_Callback+0x102>
			keyPressed = 8;
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001072:	2208      	movs	r2, #8
 8001074:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2120      	movs	r1, #32
 800107a:	482c      	ldr	r0, [pc, #176]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800107c:	f001 fcd4 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	4829      	ldr	r0, [pc, #164]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001086:	f001 fccf 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001090:	f001 fcca 	bl	8002a28 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8001094:	2110      	movs	r1, #16
 8001096:	4825      	ldr	r0, [pc, #148]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001098:	f001 fcae 	bl	80029f8 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_EXTI_Callback+0x136>
			keyPressed = 3;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010a4:	2203      	movs	r2, #3
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e014      	b.n	80010d4 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 80010aa:	2108      	movs	r1, #8
 80010ac:	481f      	ldr	r0, [pc, #124]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010ae:	f001 fca3 	bl	80029f8 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_EXTI_Callback+0x14c>
			keyPressed = 6;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010ba:	2206      	movs	r2, #6
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	e009      	b.n	80010d4 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 80010c0:	2104      	movs	r1, #4
 80010c2:	481a      	ldr	r0, [pc, #104]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010c4:	f001 fc98 	bl	80029f8 <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <HAL_GPIO_EXTI_Callback+0x160>
			keyPressed = 9;
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010d0:	2209      	movs	r2, #9
 80010d2:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2120      	movs	r1, #32
 80010d8:	4814      	ldr	r0, [pc, #80]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010da:	f001 fca5 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	2140      	movs	r1, #64	; 0x40
 80010e2:	4812      	ldr	r0, [pc, #72]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010e4:	f001 fca0 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010ee:	f001 fc9b 	bl	8002a28 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80010f4:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80010f6:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 80010fe:	490a      	ldr	r1, [pc, #40]	; (8001128 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001102:	f001 faf7 	bl	80026f4 <HAL_GPIO_Init>


		keyFlag = 1;
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
		previousMillis = HAL_GetTick();
 800110c:	f001 f9b2 	bl	8002474 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001114:	601a      	str	r2, [r3, #0]
	}

}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000298 	.word	0x20000298
 8001124:	20000294 	.word	0x20000294
 8001128:	2000027c 	.word	0x2000027c
 800112c:	40020000 	.word	0x40020000
 8001130:	20000290 	.word	0x20000290
 8001134:	10110000 	.word	0x10110000
 8001138:	20000291 	.word	0x20000291

0800113c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <MX_SPI3_Init+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001158:	f44f 7282 	mov.w	r2, #260	; 0x104
 800115c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_SPI3_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_SPI3_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001198:	220a      	movs	r2, #10
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_SPI3_Init+0x64>)
 800119e:	f003 ff75 	bl	800508c <HAL_SPI_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80011a8:	f7ff ffc8 	bl	800113c <Error_Handler>
  }

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000934 	.word	0x20000934
 80011b4:	40003c00 	.word	0x40003c00

080011b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <HAL_SPI_MspInit+0x84>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d12b      	bne.n	8001232 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_SPI_MspInit+0x88>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <HAL_SPI_MspInit+0x88>)
 80011e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_SPI_MspInit+0x88>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_SPI_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <HAL_SPI_MspInit+0x88>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_SPI_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001212:	2338      	movs	r3, #56	; 0x38
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001222:	2306      	movs	r3, #6
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_SPI_MspInit+0x8c>)
 800122e:	f001 fa61 	bl	80026f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40003c00 	.word	0x40003c00
 8001240:	40023800 	.word	0x40023800
 8001244:	40020400 	.word	0x40020400

08001248 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800124e:	f000 fb85 	bl	800195c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001252:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001256:	2201      	movs	r2, #1
 8001258:	2178      	movs	r1, #120	; 0x78
 800125a:	485b      	ldr	r0, [pc, #364]	; (80013c8 <SSD1306_Init+0x180>)
 800125c:	f001 fe4c 	bl	8002ef8 <HAL_I2C_IsDeviceReady>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001266:	2300      	movs	r3, #0
 8001268:	e0a9      	b.n	80013be <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800126a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800126e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001270:	e002      	b.n	8001278 <SSD1306_Init+0x30>
		p--;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3b01      	subs	r3, #1
 8001276:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f9      	bne.n	8001272 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800127e:	22ae      	movs	r2, #174	; 0xae
 8001280:	2100      	movs	r1, #0
 8001282:	2078      	movs	r0, #120	; 0x78
 8001284:	f000 fbc6 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001288:	2220      	movs	r2, #32
 800128a:	2100      	movs	r1, #0
 800128c:	2078      	movs	r0, #120	; 0x78
 800128e:	f000 fbc1 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001292:	2210      	movs	r2, #16
 8001294:	2100      	movs	r1, #0
 8001296:	2078      	movs	r0, #120	; 0x78
 8001298:	f000 fbbc 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800129c:	22b0      	movs	r2, #176	; 0xb0
 800129e:	2100      	movs	r1, #0
 80012a0:	2078      	movs	r0, #120	; 0x78
 80012a2:	f000 fbb7 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80012a6:	22c8      	movs	r2, #200	; 0xc8
 80012a8:	2100      	movs	r1, #0
 80012aa:	2078      	movs	r0, #120	; 0x78
 80012ac:	f000 fbb2 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	2078      	movs	r0, #120	; 0x78
 80012b6:	f000 fbad 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80012ba:	2210      	movs	r2, #16
 80012bc:	2100      	movs	r1, #0
 80012be:	2078      	movs	r0, #120	; 0x78
 80012c0:	f000 fba8 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	2100      	movs	r1, #0
 80012c8:	2078      	movs	r0, #120	; 0x78
 80012ca:	f000 fba3 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80012ce:	2281      	movs	r2, #129	; 0x81
 80012d0:	2100      	movs	r1, #0
 80012d2:	2078      	movs	r0, #120	; 0x78
 80012d4:	f000 fb9e 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80012d8:	22ff      	movs	r2, #255	; 0xff
 80012da:	2100      	movs	r1, #0
 80012dc:	2078      	movs	r0, #120	; 0x78
 80012de:	f000 fb99 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80012e2:	22a1      	movs	r2, #161	; 0xa1
 80012e4:	2100      	movs	r1, #0
 80012e6:	2078      	movs	r0, #120	; 0x78
 80012e8:	f000 fb94 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80012ec:	22a6      	movs	r2, #166	; 0xa6
 80012ee:	2100      	movs	r1, #0
 80012f0:	2078      	movs	r0, #120	; 0x78
 80012f2:	f000 fb8f 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80012f6:	22a8      	movs	r2, #168	; 0xa8
 80012f8:	2100      	movs	r1, #0
 80012fa:	2078      	movs	r0, #120	; 0x78
 80012fc:	f000 fb8a 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001300:	223f      	movs	r2, #63	; 0x3f
 8001302:	2100      	movs	r1, #0
 8001304:	2078      	movs	r0, #120	; 0x78
 8001306:	f000 fb85 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800130a:	22a4      	movs	r2, #164	; 0xa4
 800130c:	2100      	movs	r1, #0
 800130e:	2078      	movs	r0, #120	; 0x78
 8001310:	f000 fb80 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001314:	22d3      	movs	r2, #211	; 0xd3
 8001316:	2100      	movs	r1, #0
 8001318:	2078      	movs	r0, #120	; 0x78
 800131a:	f000 fb7b 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	2078      	movs	r0, #120	; 0x78
 8001324:	f000 fb76 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001328:	22d5      	movs	r2, #213	; 0xd5
 800132a:	2100      	movs	r1, #0
 800132c:	2078      	movs	r0, #120	; 0x78
 800132e:	f000 fb71 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001332:	22f0      	movs	r2, #240	; 0xf0
 8001334:	2100      	movs	r1, #0
 8001336:	2078      	movs	r0, #120	; 0x78
 8001338:	f000 fb6c 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800133c:	22d9      	movs	r2, #217	; 0xd9
 800133e:	2100      	movs	r1, #0
 8001340:	2078      	movs	r0, #120	; 0x78
 8001342:	f000 fb67 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001346:	2222      	movs	r2, #34	; 0x22
 8001348:	2100      	movs	r1, #0
 800134a:	2078      	movs	r0, #120	; 0x78
 800134c:	f000 fb62 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001350:	22da      	movs	r2, #218	; 0xda
 8001352:	2100      	movs	r1, #0
 8001354:	2078      	movs	r0, #120	; 0x78
 8001356:	f000 fb5d 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800135a:	2212      	movs	r2, #18
 800135c:	2100      	movs	r1, #0
 800135e:	2078      	movs	r0, #120	; 0x78
 8001360:	f000 fb58 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001364:	22db      	movs	r2, #219	; 0xdb
 8001366:	2100      	movs	r1, #0
 8001368:	2078      	movs	r0, #120	; 0x78
 800136a:	f000 fb53 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800136e:	2220      	movs	r2, #32
 8001370:	2100      	movs	r1, #0
 8001372:	2078      	movs	r0, #120	; 0x78
 8001374:	f000 fb4e 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001378:	228d      	movs	r2, #141	; 0x8d
 800137a:	2100      	movs	r1, #0
 800137c:	2078      	movs	r0, #120	; 0x78
 800137e:	f000 fb49 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001382:	2214      	movs	r2, #20
 8001384:	2100      	movs	r1, #0
 8001386:	2078      	movs	r0, #120	; 0x78
 8001388:	f000 fb44 	bl	8001a14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800138c:	22af      	movs	r2, #175	; 0xaf
 800138e:	2100      	movs	r1, #0
 8001390:	2078      	movs	r0, #120	; 0x78
 8001392:	f000 fb3f 	bl	8001a14 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001396:	222e      	movs	r2, #46	; 0x2e
 8001398:	2100      	movs	r1, #0
 800139a:	2078      	movs	r0, #120	; 0x78
 800139c:	f000 fb3a 	bl	8001a14 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f000 f843 	bl	800142c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80013a6:	f000 f813 	bl	80013d0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <SSD1306_Init+0x184>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <SSD1306_Init+0x184>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SSD1306_Init+0x184>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80013bc:	2301      	movs	r3, #1
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200006d4 	.word	0x200006d4
 80013cc:	200006bc 	.word	0x200006bc

080013d0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e01d      	b.n	8001418 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3b50      	subs	r3, #80	; 0x50
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	2100      	movs	r1, #0
 80013e6:	2078      	movs	r0, #120	; 0x78
 80013e8:	f000 fb14 	bl	8001a14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2078      	movs	r0, #120	; 0x78
 80013f2:	f000 fb0f 	bl	8001a14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80013f6:	2210      	movs	r2, #16
 80013f8:	2100      	movs	r1, #0
 80013fa:	2078      	movs	r0, #120	; 0x78
 80013fc:	f000 fb0a 	bl	8001a14 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	01db      	lsls	r3, r3, #7
 8001404:	4a08      	ldr	r2, [pc, #32]	; (8001428 <SSD1306_UpdateScreen+0x58>)
 8001406:	441a      	add	r2, r3
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	2140      	movs	r1, #64	; 0x40
 800140c:	2078      	movs	r0, #120	; 0x78
 800140e:	f000 fab9 	bl	8001984 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	3301      	adds	r3, #1
 8001416:	71fb      	strb	r3, [r7, #7]
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b07      	cmp	r3, #7
 800141c:	d9de      	bls.n	80013dc <SSD1306_UpdateScreen+0xc>
	}
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002bc 	.word	0x200002bc

0800142c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <SSD1306_Fill+0x14>
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <SSD1306_Fill+0x16>
 8001440:	23ff      	movs	r3, #255	; 0xff
 8001442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001446:	4619      	mov	r1, r3
 8001448:	4803      	ldr	r0, [pc, #12]	; (8001458 <SSD1306_Fill+0x2c>)
 800144a:	f008 f8e2 	bl	8009612 <memset>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200002bc 	.word	0x200002bc

0800145c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
 8001466:	460b      	mov	r3, r1
 8001468:	80bb      	strh	r3, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	70fb      	strb	r3, [r7, #3]
	if (
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	2b7f      	cmp	r3, #127	; 0x7f
 8001472:	d848      	bhi.n	8001506 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	2b3f      	cmp	r3, #63	; 0x3f
 8001478:	d845      	bhi.n	8001506 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <SSD1306_DrawPixel+0xb8>)
 800147c:	791b      	ldrb	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf0c      	ite	eq
 8001488:	2301      	moveq	r3, #1
 800148a:	2300      	movne	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d11a      	bne.n	80014cc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001496:	88fa      	ldrh	r2, [r7, #6]
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	b298      	uxth	r0, r3
 800149e:	4603      	mov	r3, r0
 80014a0:	01db      	lsls	r3, r3, #7
 80014a2:	4413      	add	r3, r2
 80014a4:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <SSD1306_DrawPixel+0xbc>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	b25a      	sxtb	r2, r3
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b259      	sxtb	r1, r3
 80014bc:	88fa      	ldrh	r2, [r7, #6]
 80014be:	4603      	mov	r3, r0
 80014c0:	01db      	lsls	r3, r3, #7
 80014c2:	4413      	add	r3, r2
 80014c4:	b2c9      	uxtb	r1, r1
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <SSD1306_DrawPixel+0xbc>)
 80014c8:	54d1      	strb	r1, [r2, r3]
 80014ca:	e01d      	b.n	8001508 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014cc:	88fa      	ldrh	r2, [r7, #6]
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	b298      	uxth	r0, r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	01db      	lsls	r3, r3, #7
 80014d8:	4413      	add	r3, r2
 80014da:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <SSD1306_DrawPixel+0xbc>)
 80014dc:	5cd3      	ldrb	r3, [r2, r3]
 80014de:	b25a      	sxtb	r2, r3
 80014e0:	88bb      	ldrh	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	4013      	ands	r3, r2
 80014f4:	b259      	sxtb	r1, r3
 80014f6:	88fa      	ldrh	r2, [r7, #6]
 80014f8:	4603      	mov	r3, r0
 80014fa:	01db      	lsls	r3, r3, #7
 80014fc:	4413      	add	r3, r2
 80014fe:	b2c9      	uxtb	r1, r1
 8001500:	4a05      	ldr	r2, [pc, #20]	; (8001518 <SSD1306_DrawPixel+0xbc>)
 8001502:	54d1      	strb	r1, [r2, r3]
 8001504:	e000      	b.n	8001508 <SSD1306_DrawPixel+0xac>
		return;
 8001506:	bf00      	nop
	}
}
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200006bc 	.word	0x200006bc
 8001518:	200002bc 	.word	0x200002bc

0800151c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	460a      	mov	r2, r1
 8001526:	80fb      	strh	r3, [r7, #6]
 8001528:	4613      	mov	r3, r2
 800152a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800152c:	4a05      	ldr	r2, [pc, #20]	; (8001544 <SSD1306_GotoXY+0x28>)
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <SSD1306_GotoXY+0x28>)
 8001534:	88bb      	ldrh	r3, [r7, #4]
 8001536:	8053      	strh	r3, [r2, #2]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	200006bc 	.word	0x200006bc

08001548 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001558:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <SSD1306_Putc+0xfc>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
	if (
 8001564:	2b7f      	cmp	r3, #127	; 0x7f
 8001566:	dc07      	bgt.n	8001578 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <SSD1306_Putc+0xfc>)
 800156a:	885b      	ldrh	r3, [r3, #2]
 800156c:	461a      	mov	r2, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001574:	2b3f      	cmp	r3, #63	; 0x3f
 8001576:	dd01      	ble.n	800157c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001578:	2300      	movs	r3, #0
 800157a:	e05e      	b.n	800163a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e04b      	b.n	800161a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	3b20      	subs	r3, #32
 800158a:	6839      	ldr	r1, [r7, #0]
 800158c:	7849      	ldrb	r1, [r1, #1]
 800158e:	fb01 f303 	mul.w	r3, r1, r3
 8001592:	4619      	mov	r1, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	440b      	add	r3, r1
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	e030      	b.n	8001608 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d010      	beq.n	80015d8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <SSD1306_Putc+0xfc>)
 80015b8:	881a      	ldrh	r2, [r3, #0]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4413      	add	r3, r2
 80015c0:	b298      	uxth	r0, r3
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <SSD1306_Putc+0xfc>)
 80015c4:	885a      	ldrh	r2, [r3, #2]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4413      	add	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	79ba      	ldrb	r2, [r7, #6]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff ff43 	bl	800145c <SSD1306_DrawPixel>
 80015d6:	e014      	b.n	8001602 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <SSD1306_Putc+0xfc>)
 80015da:	881a      	ldrh	r2, [r3, #0]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	b298      	uxth	r0, r3
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <SSD1306_Putc+0xfc>)
 80015e6:	885a      	ldrh	r2, [r3, #2]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	b299      	uxth	r1, r3
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	f7ff ff2d 	bl	800145c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	3301      	adds	r3, #1
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4293      	cmp	r3, r2
 8001612:	d3c8      	bcc.n	80015a6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	785b      	ldrb	r3, [r3, #1]
 800161e:	461a      	mov	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	4293      	cmp	r3, r2
 8001624:	d3ad      	bcc.n	8001582 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <SSD1306_Putc+0xfc>)
 8001628:	881a      	ldrh	r2, [r3, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4413      	add	r3, r2
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <SSD1306_Putc+0xfc>)
 8001636:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001638:	79fb      	ldrb	r3, [r7, #7]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200006bc 	.word	0x200006bc

08001648 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	4613      	mov	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001656:	e012      	b.n	800167e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	79fa      	ldrb	r2, [r7, #7]
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff71 	bl	8001548 <SSD1306_Putc>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d002      	beq.n	8001678 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	e008      	b.n	800168a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3301      	adds	r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1e8      	bne.n	8001658 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	781b      	ldrb	r3, [r3, #0]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001692:	b590      	push	{r4, r7, lr}
 8001694:	b087      	sub	sp, #28
 8001696:	af00      	add	r7, sp, #0
 8001698:	4604      	mov	r4, r0
 800169a:	4608      	mov	r0, r1
 800169c:	4611      	mov	r1, r2
 800169e:	461a      	mov	r2, r3
 80016a0:	4623      	mov	r3, r4
 80016a2:	80fb      	strh	r3, [r7, #6]
 80016a4:	4603      	mov	r3, r0
 80016a6:	80bb      	strh	r3, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
 80016ac:	4613      	mov	r3, r2
 80016ae:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	2b7f      	cmp	r3, #127	; 0x7f
 80016b4:	d901      	bls.n	80016ba <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80016b6:	237f      	movs	r3, #127	; 0x7f
 80016b8:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	2b7f      	cmp	r3, #127	; 0x7f
 80016be:	d901      	bls.n	80016c4 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80016c0:	237f      	movs	r3, #127	; 0x7f
 80016c2:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	2b3f      	cmp	r3, #63	; 0x3f
 80016c8:	d901      	bls.n	80016ce <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80016ca:	233f      	movs	r3, #63	; 0x3f
 80016cc:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80016ce:	883b      	ldrh	r3, [r7, #0]
 80016d0:	2b3f      	cmp	r3, #63	; 0x3f
 80016d2:	d901      	bls.n	80016d8 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80016d4:	233f      	movs	r3, #63	; 0x3f
 80016d6:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80016d8:	88fa      	ldrh	r2, [r7, #6]
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d205      	bcs.n	80016ec <SSD1306_DrawLine+0x5a>
 80016e0:	887a      	ldrh	r2, [r7, #2]
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	e004      	b.n	80016f6 <SSD1306_DrawLine+0x64>
 80016ec:	88fa      	ldrh	r2, [r7, #6]
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80016f8:	88ba      	ldrh	r2, [r7, #4]
 80016fa:	883b      	ldrh	r3, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d205      	bcs.n	800170c <SSD1306_DrawLine+0x7a>
 8001700:	883a      	ldrh	r2, [r7, #0]
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	b21b      	sxth	r3, r3
 800170a:	e004      	b.n	8001716 <SSD1306_DrawLine+0x84>
 800170c:	88ba      	ldrh	r2, [r7, #4]
 800170e:	883b      	ldrh	r3, [r7, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	b29b      	uxth	r3, r3
 8001714:	b21b      	sxth	r3, r3
 8001716:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001718:	88fa      	ldrh	r2, [r7, #6]
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	429a      	cmp	r2, r3
 800171e:	d201      	bcs.n	8001724 <SSD1306_DrawLine+0x92>
 8001720:	2301      	movs	r3, #1
 8001722:	e001      	b.n	8001728 <SSD1306_DrawLine+0x96>
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
 8001728:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800172a:	88ba      	ldrh	r2, [r7, #4]
 800172c:	883b      	ldrh	r3, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d201      	bcs.n	8001736 <SSD1306_DrawLine+0xa4>
 8001732:	2301      	movs	r3, #1
 8001734:	e001      	b.n	800173a <SSD1306_DrawLine+0xa8>
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800173c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001740:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	dd06      	ble.n	8001756 <SSD1306_DrawLine+0xc4>
 8001748:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800174c:	0fda      	lsrs	r2, r3, #31
 800174e:	4413      	add	r3, r2
 8001750:	105b      	asrs	r3, r3, #1
 8001752:	b21b      	sxth	r3, r3
 8001754:	e006      	b.n	8001764 <SSD1306_DrawLine+0xd2>
 8001756:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800175a:	425b      	negs	r3, r3
 800175c:	0fda      	lsrs	r2, r3, #31
 800175e:	4413      	add	r3, r2
 8001760:	105b      	asrs	r3, r3, #1
 8001762:	b21b      	sxth	r3, r3
 8001764:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001766:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d129      	bne.n	80017c2 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800176e:	883a      	ldrh	r2, [r7, #0]
 8001770:	88bb      	ldrh	r3, [r7, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	d205      	bcs.n	8001782 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001776:	883b      	ldrh	r3, [r7, #0]
 8001778:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800177a:	88bb      	ldrh	r3, [r7, #4]
 800177c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800177e:	893b      	ldrh	r3, [r7, #8]
 8001780:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	429a      	cmp	r2, r3
 8001788:	d205      	bcs.n	8001796 <SSD1306_DrawLine+0x104>
			tmp = x1;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001792:	893b      	ldrh	r3, [r7, #8]
 8001794:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001796:	88bb      	ldrh	r3, [r7, #4]
 8001798:	82bb      	strh	r3, [r7, #20]
 800179a:	e00c      	b.n	80017b6 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 800179c:	8ab9      	ldrh	r1, [r7, #20]
 800179e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fe59 	bl	800145c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80017aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82bb      	strh	r3, [r7, #20]
 80017b6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017ba:	883b      	ldrh	r3, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dded      	ble.n	800179c <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80017c0:	e05f      	b.n	8001882 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80017c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d129      	bne.n	800181e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80017ca:	883a      	ldrh	r2, [r7, #0]
 80017cc:	88bb      	ldrh	r3, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d205      	bcs.n	80017de <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80017d2:	883b      	ldrh	r3, [r7, #0]
 80017d4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80017d6:	88bb      	ldrh	r3, [r7, #4]
 80017d8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80017da:	893b      	ldrh	r3, [r7, #8]
 80017dc:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d205      	bcs.n	80017f2 <SSD1306_DrawLine+0x160>
			tmp = x1;
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80017ee:	893b      	ldrh	r3, [r7, #8]
 80017f0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	82bb      	strh	r3, [r7, #20]
 80017f6:	e00c      	b.n	8001812 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80017f8:	8abb      	ldrh	r3, [r7, #20]
 80017fa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80017fe:	88b9      	ldrh	r1, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fe2b 	bl	800145c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001806:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800180a:	b29b      	uxth	r3, r3
 800180c:	3301      	adds	r3, #1
 800180e:	b29b      	uxth	r3, r3
 8001810:	82bb      	strh	r3, [r7, #20]
 8001812:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	429a      	cmp	r2, r3
 800181a:	dded      	ble.n	80017f8 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 800181c:	e031      	b.n	8001882 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800181e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001822:	88b9      	ldrh	r1, [r7, #4]
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fe18 	bl	800145c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800182c:	88fa      	ldrh	r2, [r7, #6]
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	429a      	cmp	r2, r3
 8001832:	d103      	bne.n	800183c <SSD1306_DrawLine+0x1aa>
 8001834:	88ba      	ldrh	r2, [r7, #4]
 8001836:	883b      	ldrh	r3, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d021      	beq.n	8001880 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 800183c:	8afb      	ldrh	r3, [r7, #22]
 800183e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001840:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001844:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001848:	425b      	negs	r3, r3
 800184a:	429a      	cmp	r2, r3
 800184c:	dd08      	ble.n	8001860 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800184e:	8afa      	ldrh	r2, [r7, #22]
 8001850:	8a3b      	ldrh	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b29b      	uxth	r3, r3
 8001856:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001858:	89fa      	ldrh	r2, [r7, #14]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4413      	add	r3, r2
 800185e:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001860:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001864:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	dad8      	bge.n	800181e <SSD1306_DrawLine+0x18c>
			err += dx;
 800186c:	8afa      	ldrh	r2, [r7, #22]
 800186e:	8a7b      	ldrh	r3, [r7, #18]
 8001870:	4413      	add	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001876:	89ba      	ldrh	r2, [r7, #12]
 8001878:	88bb      	ldrh	r3, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800187e:	e7ce      	b.n	800181e <SSD1306_DrawLine+0x18c>
			break;
 8001880:	bf00      	nop
		} 
	}
}
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}

08001888 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b085      	sub	sp, #20
 800188c:	af02      	add	r7, sp, #8
 800188e:	4604      	mov	r4, r0
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4623      	mov	r3, r4
 8001898:	80fb      	strh	r3, [r7, #6]
 800189a:	4603      	mov	r3, r0
 800189c:	80bb      	strh	r3, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	807b      	strh	r3, [r7, #2]
 80018a2:	4613      	mov	r3, r2
 80018a4:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	2b7f      	cmp	r3, #127	; 0x7f
 80018aa:	d853      	bhi.n	8001954 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	2b3f      	cmp	r3, #63	; 0x3f
 80018b0:	d850      	bhi.n	8001954 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80018b2:	88fa      	ldrh	r2, [r7, #6]
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	4413      	add	r3, r2
 80018b8:	2b7f      	cmp	r3, #127	; 0x7f
 80018ba:	dd03      	ble.n	80018c4 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80018c2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80018c4:	88ba      	ldrh	r2, [r7, #4]
 80018c6:	883b      	ldrh	r3, [r7, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	2b3f      	cmp	r3, #63	; 0x3f
 80018cc:	dd03      	ble.n	80018d6 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80018ce:	88bb      	ldrh	r3, [r7, #4]
 80018d0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80018d4:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 80018d6:	88fa      	ldrh	r2, [r7, #6]
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	4413      	add	r3, r2
 80018dc:	b29a      	uxth	r2, r3
 80018de:	88bc      	ldrh	r4, [r7, #4]
 80018e0:	88b9      	ldrh	r1, [r7, #4]
 80018e2:	88f8      	ldrh	r0, [r7, #6]
 80018e4:	7e3b      	ldrb	r3, [r7, #24]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4623      	mov	r3, r4
 80018ea:	f7ff fed2 	bl	8001692 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 80018ee:	88ba      	ldrh	r2, [r7, #4]
 80018f0:	883b      	ldrh	r3, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	b299      	uxth	r1, r3
 80018f6:	88fa      	ldrh	r2, [r7, #6]
 80018f8:	887b      	ldrh	r3, [r7, #2]
 80018fa:	4413      	add	r3, r2
 80018fc:	b29c      	uxth	r4, r3
 80018fe:	88ba      	ldrh	r2, [r7, #4]
 8001900:	883b      	ldrh	r3, [r7, #0]
 8001902:	4413      	add	r3, r2
 8001904:	b29a      	uxth	r2, r3
 8001906:	88f8      	ldrh	r0, [r7, #6]
 8001908:	7e3b      	ldrb	r3, [r7, #24]
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	4622      	mov	r2, r4
 8001910:	f7ff febf 	bl	8001692 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001914:	88ba      	ldrh	r2, [r7, #4]
 8001916:	883b      	ldrh	r3, [r7, #0]
 8001918:	4413      	add	r3, r2
 800191a:	b29c      	uxth	r4, r3
 800191c:	88fa      	ldrh	r2, [r7, #6]
 800191e:	88b9      	ldrh	r1, [r7, #4]
 8001920:	88f8      	ldrh	r0, [r7, #6]
 8001922:	7e3b      	ldrb	r3, [r7, #24]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	4623      	mov	r3, r4
 8001928:	f7ff feb3 	bl	8001692 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 800192c:	88fa      	ldrh	r2, [r7, #6]
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	4413      	add	r3, r2
 8001932:	b298      	uxth	r0, r3
 8001934:	88fa      	ldrh	r2, [r7, #6]
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	4413      	add	r3, r2
 800193a:	b29c      	uxth	r4, r3
 800193c:	88ba      	ldrh	r2, [r7, #4]
 800193e:	883b      	ldrh	r3, [r7, #0]
 8001940:	4413      	add	r3, r2
 8001942:	b29a      	uxth	r2, r3
 8001944:	88b9      	ldrh	r1, [r7, #4]
 8001946:	7e3b      	ldrb	r3, [r7, #24]
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4613      	mov	r3, r2
 800194c:	4622      	mov	r2, r4
 800194e:	f7ff fea0 	bl	8001692 <SSD1306_DrawLine>
 8001952:	e000      	b.n	8001956 <SSD1306_DrawRectangle+0xce>
		return;
 8001954:	bf00      	nop
}
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}

0800195c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <ssd1306_I2C_Init+0x24>)
 8001964:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001966:	e002      	b.n	800196e <ssd1306_I2C_Init+0x12>
		p--;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f9      	bne.n	8001968 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	0003d090 	.word	0x0003d090

08001984 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b0c7      	sub	sp, #284	; 0x11c
 8001988:	af02      	add	r7, sp, #8
 800198a:	4604      	mov	r4, r0
 800198c:	4608      	mov	r0, r1
 800198e:	4639      	mov	r1, r7
 8001990:	600a      	str	r2, [r1, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	1dfb      	adds	r3, r7, #7
 8001996:	4622      	mov	r2, r4
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	1dbb      	adds	r3, r7, #6
 800199c:	4602      	mov	r2, r0
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	460a      	mov	r2, r1
 80019a4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	1dba      	adds	r2, r7, #6
 80019ac:	7812      	ldrb	r2, [r2, #0]
 80019ae:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019b6:	e010      	b.n	80019da <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80019b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019bc:	463a      	mov	r2, r7
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	441a      	add	r2, r3
 80019c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019c6:	3301      	adds	r3, #1
 80019c8:	7811      	ldrb	r1, [r2, #0]
 80019ca:	f107 020c 	add.w	r2, r7, #12
 80019ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019d0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019d4:	3301      	adds	r3, #1
 80019d6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019de:	b29b      	uxth	r3, r3
 80019e0:	1d3a      	adds	r2, r7, #4
 80019e2:	8812      	ldrh	r2, [r2, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d8e7      	bhi.n	80019b8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b299      	uxth	r1, r3
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	b298      	uxth	r0, r3
 80019f6:	f107 020c 	add.w	r2, r7, #12
 80019fa:	230a      	movs	r3, #10
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4603      	mov	r3, r0
 8001a00:	4803      	ldr	r0, [pc, #12]	; (8001a10 <ssd1306_I2C_WriteMulti+0x8c>)
 8001a02:	f001 f97b 	bl	8002cfc <HAL_I2C_Master_Transmit>
}
 8001a06:	bf00      	nop
 8001a08:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}
 8001a10:	200006d4 	.word	0x200006d4

08001a14 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	71bb      	strb	r3, [r7, #6]
 8001a22:	4613      	mov	r3, r2
 8001a24:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a2a:	797b      	ldrb	r3, [r7, #5]
 8001a2c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	b299      	uxth	r1, r3
 8001a32:	f107 020c 	add.w	r2, r7, #12
 8001a36:	230a      	movs	r3, #10
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <ssd1306_I2C_Write+0x38>)
 8001a3e:	f001 f95d 	bl	8002cfc <HAL_I2C_Master_Transmit>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200006d4 	.word	0x200006d4

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler+0x4>

08001aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af4:	f000 fcaa 	bl	800244c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b00:	2004      	movs	r0, #4
 8001b02:	f000 ffab 	bl	8002a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b0e:	2008      	movs	r0, #8
 8001b10:	f000 ffa4 	bl	8002a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b1c:	2010      	movs	r0, #16
 8001b1e:	f000 ff9d 	bl	8002a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <TIM2_IRQHandler+0x10>)
 8001b2e:	f004 f8ea 	bl	8005d06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000098c 	.word	0x2000098c

08001b3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <OTG_FS_IRQHandler+0x10>)
 8001b42:	f001 fe60 	bl	8003806 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000ec8 	.word	0x20000ec8

08001b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <_sbrk+0x5c>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <_sbrk+0x60>)
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <_sbrk+0x64>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <_sbrk+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d207      	bcs.n	8001b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b80:	f007 fd02 	bl	8009588 <__errno>
 8001b84:	4602      	mov	r2, r0
 8001b86:	230c      	movs	r3, #12
 8001b88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e009      	b.n	8001ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <_sbrk+0x64>)
 8001ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20020000 	.word	0x20020000
 8001bb0:	00000400 	.word	0x00000400
 8001bb4:	200006c4 	.word	0x200006c4
 8001bb8:	200012d8 	.word	0x200012d8

08001bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <SystemInit+0x28>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <SystemInit+0x28>)
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <SystemInit+0x28>)
 8001bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bd6:	609a      	str	r2, [r3, #8]
#endif
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	2224      	movs	r2, #36	; 0x24
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f007 fd0b 	bl	8009612 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c30:	2302      	movs	r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c34:	2301      	movs	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c3c:	230a      	movs	r3, #10
 8001c3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c40:	2302      	movs	r3, #2
 8001c42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c44:	2301      	movs	r3, #1
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	4619      	mov	r1, r3
 8001c56:	480d      	ldr	r0, [pc, #52]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c58:	f003 ff6c 	bl	8005b34 <HAL_TIM_Encoder_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c62:	f7ff fa6b 	bl	800113c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4806      	ldr	r0, [pc, #24]	; (8001c8c <MX_TIM2_Init+0xa4>)
 8001c74:	f004 fa1e 	bl	80060b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c7e:	f7ff fa5d 	bl	800113c <Error_Handler>
  }

}
 8001c82:	bf00      	nop
 8001c84:	3730      	adds	r7, #48	; 0x30
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000098c 	.word	0x2000098c

08001c90 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb0:	d133      	bne.n	8001d1a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_TIM_Encoder_MspInit+0x94>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cea:	2303      	movs	r3, #3
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4808      	ldr	r0, [pc, #32]	; (8001d28 <HAL_TIM_Encoder_MspInit+0x98>)
 8001d06:	f000 fcf5 	bl	80026f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	201c      	movs	r0, #28
 8001d10:	f000 fcb9 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d14:	201c      	movs	r0, #28
 8001d16:	f000 fcd2 	bl	80026be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000

08001d2c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001d36:	f107 020f 	add.w	r2, r7, #15
 8001d3a:	1df9      	adds	r1, r7, #7
 8001d3c:	2364      	movs	r3, #100	; 0x64
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2301      	movs	r3, #1
 8001d42:	4804      	ldr	r0, [pc, #16]	; (8001d54 <W25qxx_Spi+0x28>)
 8001d44:	f003 fc43 	bl	80055ce <HAL_SPI_TransmitReceive>
	return ret;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000934 	.word	0x20000934

08001d58 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d74:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <W25qxx_ReadID+0x6c>)
 8001d76:	f000 fe57 	bl	8002a28 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001d7a:	209f      	movs	r0, #159	; 0x9f
 8001d7c:	f7ff ffd6 	bl	8001d2c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d80:	20a5      	movs	r0, #165	; 0xa5
 8001d82:	f7ff ffd3 	bl	8001d2c <W25qxx_Spi>
 8001d86:	4603      	mov	r3, r0
 8001d88:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d8a:	20a5      	movs	r0, #165	; 0xa5
 8001d8c:	f7ff ffce 	bl	8001d2c <W25qxx_Spi>
 8001d90:	4603      	mov	r3, r0
 8001d92:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d94:	20a5      	movs	r0, #165	; 0xa5
 8001d96:	f7ff ffc9 	bl	8001d2c <W25qxx_Spi>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001da4:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <W25qxx_ReadID+0x6c>)
 8001da6:	f000 fe3f 	bl	8002a28 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	041a      	lsls	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	4313      	orrs	r3, r2
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd4:	4816      	ldr	r0, [pc, #88]	; (8001e30 <W25qxx_ReadUniqID+0x68>)
 8001dd6:	f000 fe27 	bl	8002a28 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8001dda:	204b      	movs	r0, #75	; 0x4b
 8001ddc:	f7ff ffa6 	bl	8001d2c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	e005      	b.n	8001df2 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001de6:	20a5      	movs	r0, #165	; 0xa5
 8001de8:	f7ff ffa0 	bl	8001d2c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	3301      	adds	r3, #1
 8001df0:	71fb      	strb	r3, [r7, #7]
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d9f6      	bls.n	8001de6 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	71bb      	strb	r3, [r7, #6]
 8001dfc:	e00b      	b.n	8001e16 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001dfe:	79bc      	ldrb	r4, [r7, #6]
 8001e00:	20a5      	movs	r0, #165	; 0xa5
 8001e02:	f7ff ff93 	bl	8001d2c <W25qxx_Spi>
 8001e06:	4603      	mov	r3, r0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <W25qxx_ReadUniqID+0x6c>)
 8001e0c:	4423      	add	r3, r4
 8001e0e:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8001e10:	79bb      	ldrb	r3, [r7, #6]
 8001e12:	3301      	adds	r3, #1
 8001e14:	71bb      	strb	r3, [r7, #6]
 8001e16:	79bb      	ldrb	r3, [r7, #6]
 8001e18:	2b07      	cmp	r3, #7
 8001e1a:	d9f0      	bls.n	8001dfe <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e22:	4803      	ldr	r0, [pc, #12]	; (8001e30 <W25qxx_ReadUniqID+0x68>)
 8001e24:	f000 fe00 	bl	8002a28 <HAL_GPIO_WritePin>
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	40020000 	.word	0x40020000
 8001e34:	200009cc 	.word	0x200009cc

08001e38 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e42:	4808      	ldr	r0, [pc, #32]	; (8001e64 <W25qxx_WriteEnable+0x2c>)
 8001e44:	f000 fdf0 	bl	8002a28 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8001e48:	2006      	movs	r0, #6
 8001e4a:	f7ff ff6f 	bl	8001d2c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e54:	4803      	ldr	r0, [pc, #12]	; (8001e64 <W25qxx_WriteEnable+0x2c>)
 8001e56:	f000 fde7 	bl	8002a28 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f000 fb16 	bl	800248c <HAL_Delay>
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40020000 	.word	0x40020000

08001e68 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e7c:	481c      	ldr	r0, [pc, #112]	; (8001ef0 <W25qxx_ReadStatusRegister+0x88>)
 8001e7e:	f000 fdd3 	bl	8002a28 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10c      	bne.n	8001ea2 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8001e88:	2005      	movs	r0, #5
 8001e8a:	f7ff ff4f 	bl	8001d2c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e8e:	20a5      	movs	r0, #165	; 0xa5
 8001e90:	f7ff ff4c 	bl	8001d2c <W25qxx_Spi>
 8001e94:	4603      	mov	r3, r0
 8001e96:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001e98:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <W25qxx_ReadStatusRegister+0x8c>)
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001ea0:	e01b      	b.n	8001eda <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d10c      	bne.n	8001ec2 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8001ea8:	2035      	movs	r0, #53	; 0x35
 8001eaa:	f7ff ff3f 	bl	8001d2c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001eae:	20a5      	movs	r0, #165	; 0xa5
 8001eb0:	f7ff ff3c 	bl	8001d2c <W25qxx_Spi>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <W25qxx_ReadStatusRegister+0x8c>)
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001ec0:	e00b      	b.n	8001eda <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001ec2:	2015      	movs	r0, #21
 8001ec4:	f7ff ff32 	bl	8001d2c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001ec8:	20a5      	movs	r0, #165	; 0xa5
 8001eca:	f7ff ff2f 	bl	8001d2c <W25qxx_Spi>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001ed2:	4a08      	ldr	r2, [pc, #32]	; (8001ef4 <W25qxx_ReadStatusRegister+0x8c>)
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <W25qxx_ReadStatusRegister+0x88>)
 8001ee2:	f000 fda1 	bl	8002a28 <HAL_GPIO_WritePin>
	return status;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	200009cc 	.word	0x200009cc

08001ef8 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f000 fac5 	bl	800248c <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f08:	480f      	ldr	r0, [pc, #60]	; (8001f48 <W25qxx_WaitForWriteEnd+0x50>)
 8001f0a:	f000 fd8d 	bl	8002a28 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8001f0e:	2005      	movs	r0, #5
 8001f10:	f7ff ff0c 	bl	8001d2c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f14:	20a5      	movs	r0, #165	; 0xa5
 8001f16:	f7ff ff09 	bl	8001d2c <W25qxx_Spi>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <W25qxx_WaitForWriteEnd+0x54>)
 8001f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f000 fab1 	bl	800248c <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <W25qxx_WaitForWriteEnd+0x54>)
 8001f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1ed      	bne.n	8001f14 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f3e:	4802      	ldr	r0, [pc, #8]	; (8001f48 <W25qxx_WaitForWriteEnd+0x50>)
 8001f40:	f000 fd72 	bl	8002a28 <HAL_GPIO_WritePin>
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	200009cc 	.word	0x200009cc

08001f50 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8001f56:	4b62      	ldr	r3, [pc, #392]	; (80020e0 <W25qxx_Init+0x190>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//while (HAL_GetTick() < 100)
	//	W25qxx_Delay(1);
	W25qxx_Delay(100);
 8001f5e:	2064      	movs	r0, #100	; 0x64
 8001f60:	f000 fa94 	bl	800248c <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f64:	2201      	movs	r2, #1
 8001f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f6a:	485e      	ldr	r0, [pc, #376]	; (80020e4 <W25qxx_Init+0x194>)
 8001f6c:	f000 fd5c 	bl	8002a28 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001f70:	2064      	movs	r0, #100	; 0x64
 8001f72:	f000 fa8b 	bl	800248c <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8001f76:	f7ff feef 	bl	8001d58 <W25qxx_ReadID>
 8001f7a:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	3b11      	subs	r3, #17
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	d86b      	bhi.n	800205e <W25qxx_Init+0x10e>
 8001f86:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <W25qxx_Init+0x3c>)
 8001f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8c:	08002051 	.word	0x08002051
 8001f90:	08002043 	.word	0x08002043
 8001f94:	08002035 	.word	0x08002035
 8001f98:	08002027 	.word	0x08002027
 8001f9c:	08002019 	.word	0x08002019
 8001fa0:	0800200b 	.word	0x0800200b
 8001fa4:	08001ffd 	.word	0x08001ffd
 8001fa8:	08001fed 	.word	0x08001fed
 8001fac:	08001fdd 	.word	0x08001fdd
 8001fb0:	0800205f 	.word	0x0800205f
 8001fb4:	0800205f 	.word	0x0800205f
 8001fb8:	0800205f 	.word	0x0800205f
 8001fbc:	0800205f 	.word	0x0800205f
 8001fc0:	0800205f 	.word	0x0800205f
 8001fc4:	0800205f 	.word	0x0800205f
 8001fc8:	08001fcd 	.word	0x08001fcd
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8001fcc:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <W25qxx_Init+0x190>)
 8001fce:	220a      	movs	r2, #10
 8001fd0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <W25qxx_Init+0x190>)
 8001fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8001fda:	e046      	b.n	800206a <W25qxx_Init+0x11a>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8001fdc:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <W25qxx_Init+0x190>)
 8001fde:	2209      	movs	r2, #9
 8001fe0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8001fe2:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <W25qxx_Init+0x190>)
 8001fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8001fea:	e03e      	b.n	800206a <W25qxx_Init+0x11a>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8001fec:	4b3c      	ldr	r3, [pc, #240]	; (80020e0 <W25qxx_Init+0x190>)
 8001fee:	2208      	movs	r2, #8
 8001ff0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <W25qxx_Init+0x190>)
 8001ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ff8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8001ffa:	e036      	b.n	800206a <W25qxx_Init+0x11a>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8001ffc:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <W25qxx_Init+0x190>)
 8001ffe:	2207      	movs	r2, #7
 8002000:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <W25qxx_Init+0x190>)
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8002008:	e02f      	b.n	800206a <W25qxx_Init+0x11a>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800200a:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <W25qxx_Init+0x190>)
 800200c:	2206      	movs	r2, #6
 800200e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8002010:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <W25qxx_Init+0x190>)
 8002012:	2240      	movs	r2, #64	; 0x40
 8002014:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8002016:	e028      	b.n	800206a <W25qxx_Init+0x11a>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002018:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <W25qxx_Init+0x190>)
 800201a:	2205      	movs	r2, #5
 800201c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <W25qxx_Init+0x190>)
 8002020:	2220      	movs	r2, #32
 8002022:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8002024:	e021      	b.n	800206a <W25qxx_Init+0x11a>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002026:	4b2e      	ldr	r3, [pc, #184]	; (80020e0 <W25qxx_Init+0x190>)
 8002028:	2204      	movs	r2, #4
 800202a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800202c:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <W25qxx_Init+0x190>)
 800202e:	2210      	movs	r2, #16
 8002030:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8002032:	e01a      	b.n	800206a <W25qxx_Init+0x11a>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <W25qxx_Init+0x190>)
 8002036:	2203      	movs	r2, #3
 8002038:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <W25qxx_Init+0x190>)
 800203c:	2208      	movs	r2, #8
 800203e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8002040:	e013      	b.n	800206a <W25qxx_Init+0x11a>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8002042:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <W25qxx_Init+0x190>)
 8002044:	2202      	movs	r2, #2
 8002046:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <W25qxx_Init+0x190>)
 800204a:	2204      	movs	r2, #4
 800204c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800204e:	e00c      	b.n	800206a <W25qxx_Init+0x11a>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <W25qxx_Init+0x190>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <W25qxx_Init+0x190>)
 8002058:	2202      	movs	r2, #2
 800205a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 800205c:	e005      	b.n	800206a <W25qxx_Init+0x11a>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <W25qxx_Init+0x190>)
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8002066:	2300      	movs	r3, #0
 8002068:	e036      	b.n	80020d8 <W25qxx_Init+0x188>
	}
	w25qxx.PageSize = 256;
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <W25qxx_Init+0x190>)
 800206c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002070:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <W25qxx_Init+0x190>)
 8002074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002078:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800207a:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <W25qxx_Init+0x190>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <W25qxx_Init+0x190>)
 8002082:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <W25qxx_Init+0x190>)
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <W25qxx_Init+0x190>)
 800208a:	6912      	ldr	r2, [r2, #16]
 800208c:	fb02 f303 	mul.w	r3, r2, r3
 8002090:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <W25qxx_Init+0x190>)
 8002092:	8952      	ldrh	r2, [r2, #10]
 8002094:	fbb3 f3f2 	udiv	r3, r3, r2
 8002098:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <W25qxx_Init+0x190>)
 800209a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <W25qxx_Init+0x190>)
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <W25qxx_Init+0x190>)
 80020a4:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <W25qxx_Init+0x190>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <W25qxx_Init+0x190>)
 80020ac:	6912      	ldr	r2, [r2, #16]
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	0a9b      	lsrs	r3, r3, #10
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <W25qxx_Init+0x190>)
 80020b6:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80020b8:	f7ff fe86 	bl	8001dc8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7ff fed3 	bl	8001e68 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80020c2:	2002      	movs	r0, #2
 80020c4:	f7ff fed0 	bl	8001e68 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f7ff fecd 	bl	8001e68 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <W25qxx_Init+0x190>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80020d6:	2301      	movs	r3, #1
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200009cc 	.word	0x200009cc
 80020e4:	40020000 	.word	0x40020000

080020e8 <W25qxx_EraseChip>:
//###################################################################################################################
void W25qxx_EraseChip(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	while (w25qxx.Lock == 1)
 80020ec:	e002      	b.n	80020f4 <W25qxx_EraseChip+0xc>
		W25qxx_Delay(1);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f000 f9cc 	bl	800248c <HAL_Delay>
	while (w25qxx.Lock == 1)
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <W25qxx_EraseChip+0x58>)
 80020f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d0f7      	beq.n	80020ee <W25qxx_EraseChip+0x6>
	w25qxx.Lock = 1;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <W25qxx_EraseChip+0x58>)
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseChip Begin...\r\n");
#endif
	W25qxx_WriteEnable();
 8002106:	f7ff fe97 	bl	8001e38 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002110:	480c      	ldr	r0, [pc, #48]	; (8002144 <W25qxx_EraseChip+0x5c>)
 8002112:	f000 fc89 	bl	8002a28 <HAL_GPIO_WritePin>
	W25qxx_Spi(0xC7);
 8002116:	20c7      	movs	r0, #199	; 0xc7
 8002118:	f7ff fe08 	bl	8001d2c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800211c:	2201      	movs	r2, #1
 800211e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002122:	4808      	ldr	r0, [pc, #32]	; (8002144 <W25qxx_EraseChip+0x5c>)
 8002124:	f000 fc80 	bl	8002a28 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002128:	f7ff fee6 	bl	8001ef8 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms!\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(10);
 800212c:	200a      	movs	r0, #10
 800212e:	f000 f9ad 	bl	800248c <HAL_Delay>
	w25qxx.Lock = 0;
 8002132:	4b03      	ldr	r3, [pc, #12]	; (8002140 <W25qxx_EraseChip+0x58>)
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200009cc 	.word	0x200009cc
 8002144:	40020000 	.word	0x40020000

08002148 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8002156:	e002      	b.n	800215e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002158:	2001      	movs	r0, #1
 800215a:	f000 f997 	bl	800248c <HAL_Delay>
	while (w25qxx.Lock == 1)
 800215e:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <W25qxx_WritePage+0x100>)
 8002160:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002164:	2b01      	cmp	r3, #1
 8002166:	d0f7      	beq.n	8002158 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8002168:	4b37      	ldr	r3, [pc, #220]	; (8002248 <W25qxx_WritePage+0x100>)
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	4a34      	ldr	r2, [pc, #208]	; (8002248 <W25qxx_WritePage+0x100>)
 8002178:	8952      	ldrh	r2, [r2, #10]
 800217a:	4293      	cmp	r3, r2
 800217c:	d802      	bhi.n	8002184 <W25qxx_WritePage+0x3c>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002184:	4b30      	ldr	r3, [pc, #192]	; (8002248 <W25qxx_WritePage+0x100>)
 8002186:	895b      	ldrh	r3, [r3, #10]
 8002188:	461a      	mov	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	4413      	add	r3, r2
 8002196:	4a2c      	ldr	r2, [pc, #176]	; (8002248 <W25qxx_WritePage+0x100>)
 8002198:	8952      	ldrh	r2, [r2, #10]
 800219a:	4293      	cmp	r3, r2
 800219c:	d905      	bls.n	80021aa <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <W25qxx_WritePage+0x100>)
 80021a0:	895b      	ldrh	r3, [r3, #10]
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80021aa:	f7ff fea5 	bl	8001ef8 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80021ae:	f7ff fe43 	bl	8001e38 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021b8:	4824      	ldr	r0, [pc, #144]	; (800224c <W25qxx_WritePage+0x104>)
 80021ba:	f000 fc35 	bl	8002a28 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <W25qxx_WritePage+0x100>)
 80021c0:	895b      	ldrh	r3, [r3, #10]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	fb03 f302 	mul.w	r3, r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <W25qxx_WritePage+0x100>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d909      	bls.n	80021ec <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 80021d8:	2012      	movs	r0, #18
 80021da:	f7ff fda7 	bl	8001d2c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	0e1b      	lsrs	r3, r3, #24
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fda1 	bl	8001d2c <W25qxx_Spi>
 80021ea:	e002      	b.n	80021f2 <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 80021ec:	2002      	movs	r0, #2
 80021ee:	f7ff fd9d 	bl	8001d2c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fd97 	bl	8001d2c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	b2db      	uxtb	r3, r3
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fd91 	bl	8001d2c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fd8c 	bl	8001d2c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b29a      	uxth	r2, r3
 8002218:	2364      	movs	r3, #100	; 0x64
 800221a:	68f9      	ldr	r1, [r7, #12]
 800221c:	480c      	ldr	r0, [pc, #48]	; (8002250 <W25qxx_WritePage+0x108>)
 800221e:	f002 ff99 	bl	8005154 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002228:	4808      	ldr	r0, [pc, #32]	; (800224c <W25qxx_WritePage+0x104>)
 800222a:	f000 fbfd 	bl	8002a28 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800222e:	f7ff fe63 	bl	8001ef8 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f000 f92a 	bl	800248c <HAL_Delay>
	w25qxx.Lock = 0;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <W25qxx_WritePage+0x100>)
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200009cc 	.word	0x200009cc
 800224c:	40020000 	.word	0x40020000
 8002250:	20000934 	.word	0x20000934

08002254 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8002262:	e002      	b.n	800226a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8002264:	2001      	movs	r0, #1
 8002266:	f000 f911 	bl	800248c <HAL_Delay>
	while (w25qxx.Lock == 1)
 800226a:	4b37      	ldr	r3, [pc, #220]	; (8002348 <W25qxx_ReadPage+0xf4>)
 800226c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002270:	2b01      	cmp	r3, #1
 8002272:	d0f7      	beq.n	8002264 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8002274:	4b34      	ldr	r3, [pc, #208]	; (8002348 <W25qxx_ReadPage+0xf4>)
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800227c:	4b32      	ldr	r3, [pc, #200]	; (8002348 <W25qxx_ReadPage+0xf4>)
 800227e:	895b      	ldrh	r3, [r3, #10]
 8002280:	461a      	mov	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	4293      	cmp	r3, r2
 8002286:	d802      	bhi.n	800228e <W25qxx_ReadPage+0x3a>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <W25qxx_ReadPage+0xf4>)
 8002290:	895b      	ldrh	r3, [r3, #10]
 8002292:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	4413      	add	r3, r2
 800229a:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <W25qxx_ReadPage+0xf4>)
 800229c:	8952      	ldrh	r2, [r2, #10]
 800229e:	4293      	cmp	r3, r2
 80022a0:	d905      	bls.n	80022ae <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <W25qxx_ReadPage+0xf4>)
 80022a4:	895b      	ldrh	r3, [r3, #10]
 80022a6:	461a      	mov	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80022ae:	4b26      	ldr	r3, [pc, #152]	; (8002348 <W25qxx_ReadPage+0xf4>)
 80022b0:	895b      	ldrh	r3, [r3, #10]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	fb03 f302 	mul.w	r3, r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022c6:	4821      	ldr	r0, [pc, #132]	; (800234c <W25qxx_ReadPage+0xf8>)
 80022c8:	f000 fbae 	bl	8002a28 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <W25qxx_ReadPage+0xf4>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d909      	bls.n	80022e8 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 80022d4:	200c      	movs	r0, #12
 80022d6:	f7ff fd29 	bl	8001d2c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	0e1b      	lsrs	r3, r3, #24
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fd23 	bl	8001d2c <W25qxx_Spi>
 80022e6:	e002      	b.n	80022ee <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80022e8:	200b      	movs	r0, #11
 80022ea:	f7ff fd1f 	bl	8001d2c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fd19 	bl	8001d2c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fd13 	bl	8001d2c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fd0e 	bl	8001d2c <W25qxx_Spi>
	W25qxx_Spi(0);
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff fd0b 	bl	8001d2c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b29a      	uxth	r2, r3
 800231a:	2364      	movs	r3, #100	; 0x64
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	480c      	ldr	r0, [pc, #48]	; (8002350 <W25qxx_ReadPage+0xfc>)
 8002320:	f003 f84c 	bl	80053bc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002324:	2201      	movs	r2, #1
 8002326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232a:	4808      	ldr	r0, [pc, #32]	; (800234c <W25qxx_ReadPage+0xf8>)
 800232c:	f000 fb7c 	bl	8002a28 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002330:	2001      	movs	r0, #1
 8002332:	f000 f8ab 	bl	800248c <HAL_Delay>
	w25qxx.Lock = 0;
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <W25qxx_ReadPage+0xf4>)
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200009cc 	.word	0x200009cc
 800234c:	40020000 	.word	0x40020000
 8002350:	20000934 	.word	0x20000934

08002354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800238c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002358:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800235a:	e003      	b.n	8002364 <LoopCopyDataInit>

0800235c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800235e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002360:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002362:	3104      	adds	r1, #4

08002364 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002364:	480b      	ldr	r0, [pc, #44]	; (8002394 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002368:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800236a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800236c:	d3f6      	bcc.n	800235c <CopyDataInit>
  ldr  r2, =_sbss
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002370:	e002      	b.n	8002378 <LoopFillZerobss>

08002372 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002372:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002374:	f842 3b04 	str.w	r3, [r2], #4

08002378 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800237a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800237c:	d3f9      	bcc.n	8002372 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800237e:	f7ff fc1d 	bl	8001bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002382:	f007 f907 	bl	8009594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002386:	f7fe fba5 	bl	8000ad4 <main>
  bx  lr    
 800238a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800238c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002390:	0800a648 	.word	0x0800a648
  ldr  r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002398:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 800239c:	2000025c 	.word	0x2000025c
  ldr  r3, = _ebss
 80023a0:	200012d4 	.word	0x200012d4

080023a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a4:	e7fe      	b.n	80023a4 <ADC_IRQHandler>
	...

080023a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <HAL_Init+0x40>)
 80023b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <HAL_Init+0x40>)
 80023be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_Init+0x40>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f94d 	bl	8002670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 f808 	bl	80023ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023dc:	f7ff fb38 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023c00 	.word	0x40023c00

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x54>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_InitTick+0x58>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	fbb3 f3f1 	udiv	r3, r3, r1
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f965 	bl	80026da <HAL_SYSTICK_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00e      	b.n	8002438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d80a      	bhi.n	8002436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f000 f92d 	bl	8002686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <HAL_InitTick+0x5c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200000a0 	.word	0x200000a0
 8002444:	200000a8 	.word	0x200000a8
 8002448:	200000a4 	.word	0x200000a4

0800244c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_IncTick+0x20>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_IncTick+0x24>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4413      	add	r3, r2
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <HAL_IncTick+0x24>)
 800245e:	6013      	str	r3, [r2, #0]
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	200000a8 	.word	0x200000a8
 8002470:	200009f4 	.word	0x200009f4

08002474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return uwTick;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_GetTick+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	200009f4 	.word	0x200009f4

0800248c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff ffee 	bl	8002474 <HAL_GetTick>
 8002498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d005      	beq.n	80024b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_Delay+0x40>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024b2:	bf00      	nop
 80024b4:	f7ff ffde 	bl	8002474 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d8f7      	bhi.n	80024b4 <HAL_Delay+0x28>
  {
  }
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200000a8 	.word	0x200000a8

080024d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ec:	4013      	ands	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002502:	4a04      	ldr	r2, [pc, #16]	; (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	60d3      	str	r3, [r2, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <__NVIC_GetPriorityGrouping+0x18>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 0307 	and.w	r3, r3, #7
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db0b      	blt.n	800255e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4907      	ldr	r1, [pc, #28]	; (800256c <__NVIC_EnableIRQ+0x38>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2001      	movs	r0, #1
 8002556:	fa00 f202 	lsl.w	r2, r0, r2
 800255a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e100 	.word	0xe000e100

08002570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	6039      	str	r1, [r7, #0]
 800257a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	2b00      	cmp	r3, #0
 8002582:	db0a      	blt.n	800259a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	490c      	ldr	r1, [pc, #48]	; (80025bc <__NVIC_SetPriority+0x4c>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	0112      	lsls	r2, r2, #4
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	440b      	add	r3, r1
 8002594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002598:	e00a      	b.n	80025b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4908      	ldr	r1, [pc, #32]	; (80025c0 <__NVIC_SetPriority+0x50>)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	3b04      	subs	r3, #4
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	440b      	add	r3, r1
 80025ae:	761a      	strb	r2, [r3, #24]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f1c3 0307 	rsb	r3, r3, #7
 80025de:	2b04      	cmp	r3, #4
 80025e0:	bf28      	it	cs
 80025e2:	2304      	movcs	r3, #4
 80025e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d902      	bls.n	80025f4 <NVIC_EncodePriority+0x30>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3b03      	subs	r3, #3
 80025f2:	e000      	b.n	80025f6 <NVIC_EncodePriority+0x32>
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	f04f 32ff 	mov.w	r2, #4294967295
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43d9      	mvns	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	4313      	orrs	r3, r2
         );
}
 800261e:	4618      	mov	r0, r3
 8002620:	3724      	adds	r7, #36	; 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800263c:	d301      	bcc.n	8002642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <SysTick_Config+0x40>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264a:	210f      	movs	r1, #15
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f7ff ff8e 	bl	8002570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <SysTick_Config+0x40>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <SysTick_Config+0x40>)
 800265c:	2207      	movs	r2, #7
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000e010 	.word	0xe000e010

08002670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff29 	bl	80024d0 <__NVIC_SetPriorityGrouping>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002698:	f7ff ff3e 	bl	8002518 <__NVIC_GetPriorityGrouping>
 800269c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff ff8e 	bl	80025c4 <NVIC_EncodePriority>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff5d 	bl	8002570 <__NVIC_SetPriority>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff31 	bl	8002534 <__NVIC_EnableIRQ>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ffa2 	bl	800262c <SysTick_Config>
 80026e8:	4603      	mov	r3, r0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	e159      	b.n	80029c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002710:	2201      	movs	r2, #1
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	429a      	cmp	r2, r3
 800272a:	f040 8148 	bne.w	80029be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d00b      	beq.n	800274e <HAL_GPIO_Init+0x5a>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002742:	2b11      	cmp	r3, #17
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b12      	cmp	r3, #18
 800274c:	d130      	bne.n	80027b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002784:	2201      	movs	r2, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 0201 	and.w	r2, r3, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0xfc>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b12      	cmp	r3, #18
 80027ee:	d123      	bne.n	8002838 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	08da      	lsrs	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3208      	adds	r2, #8
 80027f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	220f      	movs	r2, #15
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	08da      	lsrs	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3208      	adds	r2, #8
 8002832:	69b9      	ldr	r1, [r7, #24]
 8002834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0203 	and.w	r2, r3, #3
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80a2 	beq.w	80029be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <HAL_GPIO_Init+0x2e4>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4a55      	ldr	r2, [pc, #340]	; (80029d8 <HAL_GPIO_Init+0x2e4>)
 8002884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002888:	6453      	str	r3, [r2, #68]	; 0x44
 800288a:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <HAL_GPIO_Init+0x2e4>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002896:	4a51      	ldr	r2, [pc, #324]	; (80029dc <HAL_GPIO_Init+0x2e8>)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	220f      	movs	r2, #15
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a48      	ldr	r2, [pc, #288]	; (80029e0 <HAL_GPIO_Init+0x2ec>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d019      	beq.n	80028f6 <HAL_GPIO_Init+0x202>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a47      	ldr	r2, [pc, #284]	; (80029e4 <HAL_GPIO_Init+0x2f0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_GPIO_Init+0x1fe>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a46      	ldr	r2, [pc, #280]	; (80029e8 <HAL_GPIO_Init+0x2f4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00d      	beq.n	80028ee <HAL_GPIO_Init+0x1fa>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a45      	ldr	r2, [pc, #276]	; (80029ec <HAL_GPIO_Init+0x2f8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d007      	beq.n	80028ea <HAL_GPIO_Init+0x1f6>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a44      	ldr	r2, [pc, #272]	; (80029f0 <HAL_GPIO_Init+0x2fc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d101      	bne.n	80028e6 <HAL_GPIO_Init+0x1f2>
 80028e2:	2304      	movs	r3, #4
 80028e4:	e008      	b.n	80028f8 <HAL_GPIO_Init+0x204>
 80028e6:	2307      	movs	r3, #7
 80028e8:	e006      	b.n	80028f8 <HAL_GPIO_Init+0x204>
 80028ea:	2303      	movs	r3, #3
 80028ec:	e004      	b.n	80028f8 <HAL_GPIO_Init+0x204>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_Init+0x204>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_GPIO_Init+0x204>
 80028f6:	2300      	movs	r3, #0
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	f002 0203 	and.w	r2, r2, #3
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	4093      	lsls	r3, r2
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002908:	4934      	ldr	r1, [pc, #208]	; (80029dc <HAL_GPIO_Init+0x2e8>)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	3302      	adds	r3, #2
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002916:	4b37      	ldr	r3, [pc, #220]	; (80029f4 <HAL_GPIO_Init+0x300>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800293a:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <HAL_GPIO_Init+0x300>)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002940:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_GPIO_Init+0x300>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002964:	4a23      	ldr	r2, [pc, #140]	; (80029f4 <HAL_GPIO_Init+0x300>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_GPIO_Init+0x300>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800298e:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <HAL_GPIO_Init+0x300>)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002994:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <HAL_GPIO_Init+0x300>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029b8:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <HAL_GPIO_Init+0x300>)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3301      	adds	r3, #1
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b0f      	cmp	r3, #15
 80029c8:	f67f aea2 	bls.w	8002710 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029cc:	bf00      	nop
 80029ce:	3724      	adds	r7, #36	; 0x24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40013800 	.word	0x40013800
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40020400 	.word	0x40020400
 80029e8:	40020800 	.word	0x40020800
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40013c00 	.word	0x40013c00

080029f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e001      	b.n	8002a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d006      	beq.n	8002a80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a72:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fa7a 	bl	8000f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e11f      	b.n	8002cde <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fd fdf0 	bl	8000698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ade:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002af0:	f002 fab8 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 8002af4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4a7b      	ldr	r2, [pc, #492]	; (8002ce8 <HAL_I2C_Init+0x25c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d807      	bhi.n	8002b10 <HAL_I2C_Init+0x84>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a7a      	ldr	r2, [pc, #488]	; (8002cec <HAL_I2C_Init+0x260>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	bf94      	ite	ls
 8002b08:	2301      	movls	r3, #1
 8002b0a:	2300      	movhi	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	e006      	b.n	8002b1e <HAL_I2C_Init+0x92>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a77      	ldr	r2, [pc, #476]	; (8002cf0 <HAL_I2C_Init+0x264>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	bf94      	ite	ls
 8002b18:	2301      	movls	r3, #1
 8002b1a:	2300      	movhi	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0db      	b.n	8002cde <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a72      	ldr	r2, [pc, #456]	; (8002cf4 <HAL_I2C_Init+0x268>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	0c9b      	lsrs	r3, r3, #18
 8002b30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a64      	ldr	r2, [pc, #400]	; (8002ce8 <HAL_I2C_Init+0x25c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d802      	bhi.n	8002b60 <HAL_I2C_Init+0xd4>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	e009      	b.n	8002b74 <HAL_I2C_Init+0xe8>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	4a63      	ldr	r2, [pc, #396]	; (8002cf8 <HAL_I2C_Init+0x26c>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	3301      	adds	r3, #1
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4956      	ldr	r1, [pc, #344]	; (8002ce8 <HAL_I2C_Init+0x25c>)
 8002b90:	428b      	cmp	r3, r1
 8002b92:	d80d      	bhi.n	8002bb0 <HAL_I2C_Init+0x124>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1e59      	subs	r1, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	bf38      	it	cc
 8002bac:	2304      	movcc	r3, #4
 8002bae:	e04f      	b.n	8002c50 <HAL_I2C_Init+0x1c4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d111      	bne.n	8002bdc <HAL_I2C_Init+0x150>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1e58      	subs	r0, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	e012      	b.n	8002c02 <HAL_I2C_Init+0x176>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1e58      	subs	r0, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	0099      	lsls	r1, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Init+0x17e>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_I2C_Init+0x1c4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10e      	bne.n	8002c30 <HAL_I2C_Init+0x1a4>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e58      	subs	r0, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	440b      	add	r3, r1
 8002c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2e:	e00f      	b.n	8002c50 <HAL_I2C_Init+0x1c4>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e58      	subs	r0, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	0099      	lsls	r1, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	6809      	ldr	r1, [r1, #0]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6911      	ldr	r1, [r2, #16]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68d2      	ldr	r2, [r2, #12]
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	000186a0 	.word	0x000186a0
 8002cec:	001e847f 	.word	0x001e847f
 8002cf0:	003d08ff 	.word	0x003d08ff
 8002cf4:	431bde83 	.word	0x431bde83
 8002cf8:	10624dd3 	.word	0x10624dd3

08002cfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	461a      	mov	r2, r3
 8002d08:	460b      	mov	r3, r1
 8002d0a:	817b      	strh	r3, [r7, #10]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff fbb0 	bl	8002474 <HAL_GetTick>
 8002d14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	f040 80e0 	bne.w	8002ee4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2319      	movs	r3, #25
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4970      	ldr	r1, [pc, #448]	; (8002ef0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa92 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e0d3      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_I2C_Master_Transmit+0x50>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d007      	beq.n	8002d72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2221      	movs	r2, #33	; 0x21
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	893a      	ldrh	r2, [r7, #8]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4a50      	ldr	r2, [pc, #320]	; (8002ef4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002db4:	8979      	ldrh	r1, [r7, #10]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6a3a      	ldr	r2, [r7, #32]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f9ca 	bl	8003154 <I2C_MasterRequestWrite>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e08d      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002de0:	e066      	b.n	8002eb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	6a39      	ldr	r1, [r7, #32]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fb0c 	bl	8003404 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d107      	bne.n	8002e0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e06b      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	781a      	ldrb	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d11b      	bne.n	8002e84 <HAL_I2C_Master_Transmit+0x188>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d017      	beq.n	8002e84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	6a39      	ldr	r1, [r7, #32]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fafc 	bl	8003486 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00d      	beq.n	8002eb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d107      	bne.n	8002eac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eaa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e01a      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d194      	bne.n	8002de2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e000      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	00100002 	.word	0x00100002
 8002ef4:	ffff0000 	.word	0xffff0000

08002ef8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	460b      	mov	r3, r1
 8002f06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff fab4 	bl	8002474 <HAL_GetTick>
 8002f0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	f040 8111 	bne.w	8003142 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2319      	movs	r3, #25
 8002f26:	2201      	movs	r2, #1
 8002f28:	4988      	ldr	r1, [pc, #544]	; (800314c <HAL_I2C_IsDeviceReady+0x254>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f994 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
 8002f38:	e104      	b.n	8003144 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_I2C_IsDeviceReady+0x50>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e0fd      	b.n	8003144 <HAL_I2C_IsDeviceReady+0x24c>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d007      	beq.n	8002f6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2224      	movs	r2, #36	; 0x24
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a70      	ldr	r2, [pc, #448]	; (8003150 <HAL_I2C_IsDeviceReady+0x258>)
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f952 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc8:	d103      	bne.n	8002fd2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0b6      	b.n	8003144 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fd6:	897b      	ldrh	r3, [r7, #10]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fe4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002fe6:	f7ff fa45 	bl	8002474 <HAL_GetTick>
 8002fea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800301a:	e025      	b.n	8003068 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800301c:	f7ff fa2a 	bl	8002474 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d302      	bcc.n	8003032 <HAL_I2C_IsDeviceReady+0x13a>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	22a0      	movs	r2, #160	; 0xa0
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b02      	cmp	r3, #2
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2ba0      	cmp	r3, #160	; 0xa0
 8003072:	d005      	beq.n	8003080 <HAL_I2C_IsDeviceReady+0x188>
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_I2C_IsDeviceReady+0x188>
 800307a:	7dbb      	ldrb	r3, [r7, #22]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0cd      	beq.n	800301c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b02      	cmp	r3, #2
 8003094:	d129      	bne.n	80030ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2319      	movs	r3, #25
 80030c2:	2201      	movs	r2, #1
 80030c4:	4921      	ldr	r1, [pc, #132]	; (800314c <HAL_I2C_IsDeviceReady+0x254>)
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f8c6 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e036      	b.n	8003144 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e02c      	b.n	8003144 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003102:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	2319      	movs	r3, #25
 800310a:	2201      	movs	r2, #1
 800310c:	490f      	ldr	r1, [pc, #60]	; (800314c <HAL_I2C_IsDeviceReady+0x254>)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f8a2 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e012      	b.n	8003144 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	3301      	adds	r3, #1
 8003122:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	429a      	cmp	r2, r3
 800312a:	f4ff af32 	bcc.w	8002f92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
  }
}
 8003144:	4618      	mov	r0, r3
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	00100002 	.word	0x00100002
 8003150:	ffff0000 	.word	0xffff0000

08003154 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	460b      	mov	r3, r1
 8003162:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d006      	beq.n	800317e <I2C_MasterRequestWrite+0x2a>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d003      	beq.n	800317e <I2C_MasterRequestWrite+0x2a>
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800317c:	d108      	bne.n	8003190 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e00b      	b.n	80031a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	2b12      	cmp	r3, #18
 8003196:	d107      	bne.n	80031a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f84f 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00d      	beq.n	80031dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ce:	d103      	bne.n	80031d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e035      	b.n	8003248 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e4:	d108      	bne.n	80031f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031f4:	611a      	str	r2, [r3, #16]
 80031f6:	e01b      	b.n	8003230 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031f8:	897b      	ldrh	r3, [r7, #10]
 80031fa:	11db      	asrs	r3, r3, #7
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 0306 	and.w	r3, r3, #6
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f063 030f 	orn	r3, r3, #15
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	490e      	ldr	r1, [pc, #56]	; (8003250 <I2C_MasterRequestWrite+0xfc>)
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f875 	bl	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e010      	b.n	8003248 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003226:	897b      	ldrh	r3, [r7, #10]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4907      	ldr	r1, [pc, #28]	; (8003254 <I2C_MasterRequestWrite+0x100>)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f865 	bl	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	00010008 	.word	0x00010008
 8003254:	00010002 	.word	0x00010002

08003258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003268:	e025      	b.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d021      	beq.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003272:	f7ff f8ff 	bl	8002474 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d116      	bne.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e023      	b.n	80032fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d10d      	bne.n	80032dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	43da      	mvns	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4013      	ands	r3, r2
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bf0c      	ite	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	2300      	movne	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	e00c      	b.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4013      	ands	r3, r2
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bf0c      	ite	eq
 80032ee:	2301      	moveq	r3, #1
 80032f0:	2300      	movne	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d0b6      	beq.n	800326a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003314:	e051      	b.n	80033ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003324:	d123      	bne.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003334:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800333e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f043 0204 	orr.w	r2, r3, #4
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e046      	b.n	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d021      	beq.n	80033ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003376:	f7ff f87d 	bl	8002474 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	429a      	cmp	r2, r3
 8003384:	d302      	bcc.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d116      	bne.n	80033ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e020      	b.n	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10c      	bne.n	80033de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4013      	ands	r3, r2
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bf14      	ite	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	2300      	moveq	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	e00b      	b.n	80033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	43da      	mvns	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d18d      	bne.n	8003316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003410:	e02d      	b.n	800346e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f878 	bl	8003508 <I2C_IsAcknowledgeFailed>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e02d      	b.n	800347e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d021      	beq.n	800346e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7ff f823 	bl	8002474 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d116      	bne.n	800346e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e007      	b.n	800347e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b80      	cmp	r3, #128	; 0x80
 800347a:	d1ca      	bne.n	8003412 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003492:	e02d      	b.n	80034f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f837 	bl	8003508 <I2C_IsAcknowledgeFailed>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e02d      	b.n	8003500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d021      	beq.n	80034f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ac:	f7fe ffe2 	bl	8002474 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e007      	b.n	8003500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d1ca      	bne.n	8003494 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351e:	d11b      	bne.n	8003558 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003528:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003568:	b08f      	sub	sp, #60	; 0x3c
 800356a:	af0a      	add	r7, sp, #40	; 0x28
 800356c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e10f      	b.n	8003798 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f005 fd18 	bl	8008fc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2203      	movs	r2, #3
 800359c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f002 ff13 	bl	80063e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	687e      	ldr	r6, [r7, #4]
 80035c4:	466d      	mov	r5, sp
 80035c6:	f106 0410 	add.w	r4, r6, #16
 80035ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80035da:	1d33      	adds	r3, r6, #4
 80035dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035de:	6838      	ldr	r0, [r7, #0]
 80035e0:	f002 fdea 	bl	80061b8 <USB_CoreInit>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0d0      	b.n	8003798 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f002 ff01 	bl	8006404 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	e04a      	b.n	800369e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	333d      	adds	r3, #61	; 0x3d
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	333c      	adds	r3, #60	; 0x3c
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	b298      	uxth	r0, r3
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	3342      	adds	r3, #66	; 0x42
 8003644:	4602      	mov	r2, r0
 8003646:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	333f      	adds	r3, #63	; 0x3f
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800365c:	7bfa      	ldrb	r2, [r7, #15]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	3344      	adds	r3, #68	; 0x44
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	3348      	adds	r3, #72	; 0x48
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3350      	adds	r3, #80	; 0x50
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	3301      	adds	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d3af      	bcc.n	8003608 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e044      	b.n	8003738 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	3301      	adds	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	429a      	cmp	r2, r3
 8003740:	d3b5      	bcc.n	80036ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	687e      	ldr	r6, [r7, #4]
 800374a:	466d      	mov	r5, sp
 800374c:	f106 0410 	add.w	r4, r6, #16
 8003750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003758:	e894 0003 	ldmia.w	r4, {r0, r1}
 800375c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003760:	1d33      	adds	r3, r6, #4
 8003762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003764:	6838      	ldr	r0, [r7, #0]
 8003766:	f002 fe77 	bl	8006458 <USB_DevInit>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e00d      	b.n	8003798 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f003 febf 	bl	8007514 <USB_DevDisconnect>

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_PCD_Start+0x1c>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e020      	b.n	80037fe <HAL_PCD_Start+0x5e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d109      	bne.n	80037e0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d005      	beq.n	80037e0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f002 fdeb 	bl	80063c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f003 fe6f 	bl	80074d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003806:	b590      	push	{r4, r7, lr}
 8003808:	b08d      	sub	sp, #52	; 0x34
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f003 ff2d 	bl	800767c <USB_GetMode>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	f040 839d 	bne.w	8003f64 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f003 fe91 	bl	8007556 <USB_ReadInterrupts>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8393 	beq.w	8003f62 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f003 fe88 	bl	8007556 <USB_ReadInterrupts>
 8003846:	4603      	mov	r3, r0
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d107      	bne.n	8003860 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f002 0202 	and.w	r2, r2, #2
 800385e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f003 fe76 	bl	8007556 <USB_ReadInterrupts>
 800386a:	4603      	mov	r3, r0
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b10      	cmp	r3, #16
 8003872:	d161      	bne.n	8003938 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0210 	bic.w	r2, r2, #16
 8003882:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f003 020f 	and.w	r2, r3, #15
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	3304      	adds	r3, #4
 80038a2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	0c5b      	lsrs	r3, r3, #17
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d124      	bne.n	80038fa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d035      	beq.n	8003928 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	6a38      	ldr	r0, [r7, #32]
 80038d0:	f003 fcdc 	bl	800728c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038e0:	441a      	add	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f2:	441a      	add	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	619a      	str	r2, [r3, #24]
 80038f8:	e016      	b.n	8003928 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	0c5b      	lsrs	r3, r3, #17
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	2b06      	cmp	r3, #6
 8003904:	d110      	bne.n	8003928 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800390c:	2208      	movs	r2, #8
 800390e:	4619      	mov	r1, r3
 8003910:	6a38      	ldr	r0, [r7, #32]
 8003912:	f003 fcbb 	bl	800728c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003922:	441a      	add	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0210 	orr.w	r2, r2, #16
 8003936:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f003 fe0a 	bl	8007556 <USB_ReadInterrupts>
 8003942:	4603      	mov	r3, r0
 8003944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003948:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800394c:	d16e      	bne.n	8003a2c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f003 fe10 	bl	800757c <USB_ReadDevAllOutEpInterrupt>
 800395c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800395e:	e062      	b.n	8003a26 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d057      	beq.n	8003a1a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f003 fe35 	bl	80075e4 <USB_ReadDevOutEPInterrupt>
 800397a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003992:	461a      	mov	r2, r3
 8003994:	2301      	movs	r3, #1
 8003996:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fd98 	bl	80044d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b6:	461a      	mov	r2, r3
 80039b8:	2308      	movs	r3, #8
 80039ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fe92 	bl	80046e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039da:	461a      	mov	r2, r3
 80039dc:	2310      	movs	r3, #16
 80039de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	461a      	mov	r2, r3
 80039f8:	2320      	movs	r3, #32
 80039fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a12:	461a      	mov	r2, r3
 8003a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a18:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d199      	bne.n	8003960 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 fd90 	bl	8007556 <USB_ReadInterrupts>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a40:	f040 80c0 	bne.w	8003bc4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f003 fdb1 	bl	80075b0 <USB_ReadDevAllInEpInterrupt>
 8003a4e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a54:	e0b2      	b.n	8003bbc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80a7 	beq.w	8003bb0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 fdd7 	bl	8007620 <USB_ReadDevInEPInterrupt>
 8003a72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d057      	beq.n	8003b2e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	2201      	movs	r2, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69f9      	ldr	r1, [r7, #28]
 8003a9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d132      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3348      	adds	r3, #72	; 0x48
 8003acc:	6819      	ldr	r1, [r3, #0]
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4403      	add	r3, r0
 8003adc:	3344      	adds	r3, #68	; 0x44
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4419      	add	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4403      	add	r3, r0
 8003af0:	3348      	adds	r3, #72	; 0x48
 8003af2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d113      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x31c>
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3350      	adds	r3, #80	; 0x50
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d108      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	f003 fddf 	bl	80076e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f005 face 	bl	80090ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	461a      	mov	r2, r3
 8003b46:	2308      	movs	r3, #8
 8003b48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	461a      	mov	r2, r3
 8003b62:	2310      	movs	r3, #16
 8003b64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	2340      	movs	r3, #64	; 0x40
 8003b80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fc03 	bl	80043b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f47f af49 	bne.w	8003a56 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f003 fcc4 	bl	8007556 <USB_ReadInterrupts>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd8:	d122      	bne.n	8003c20 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d108      	bne.n	8003c0a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c00:	2100      	movs	r1, #0
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fe0e 	bl	8004824 <HAL_PCDEx_LPM_Callback>
 8003c08:	e002      	b.n	8003c10 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f005 faca 	bl	80091a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f003 fc96 	bl	8007556 <USB_ReadInterrupts>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c34:	d112      	bne.n	8003c5c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d102      	bne.n	8003c4c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f005 fa86 	bl	8009158 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c5a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f003 fc78 	bl	8007556 <USB_ReadInterrupts>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	f040 80c7 	bne.w	8003e02 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2110      	movs	r1, #16
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 fd46 	bl	8006720 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c94:	2300      	movs	r3, #0
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c98:	e056      	b.n	8003d48 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cbe:	0151      	lsls	r1, r2, #5
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	440a      	add	r2, r1
 8003cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ccc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cde:	0151      	lsls	r1, r2, #5
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	440a      	add	r2, r1
 8003ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d00:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d12:	0151      	lsls	r1, r2, #5
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	440a      	add	r2, r1
 8003d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d40:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	3301      	adds	r3, #1
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d3a3      	bcc.n	8003c9a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d60:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d64:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7e:	f043 030b 	orr.w	r3, r3, #11
 8003d82:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d94:	f043 030b 	orr.w	r3, r3, #11
 8003d98:	6453      	str	r3, [r2, #68]	; 0x44
 8003d9a:	e015      	b.n	8003dc8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003daa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003db2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc2:	f043 030b 	orr.w	r3, r3, #11
 8003dc6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003dda:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dec:	461a      	mov	r2, r3
 8003dee:	f003 fc77 	bl	80076e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 fba5 	bl	8007556 <USB_ReadInterrupts>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e16:	d124      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f003 fc3b 	bl	8007698 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f002 fcdb 	bl	80067e2 <USB_GetDevSpeed>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681c      	ldr	r4, [r3, #0]
 8003e38:	f001 f908 	bl	800504c <HAL_RCC_GetHCLKFreq>
 8003e3c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	4620      	mov	r0, r4
 8003e48:	f002 fa18 	bl	800627c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f005 f964 	bl	800911a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f003 fb75 	bl	8007556 <USB_ReadInterrupts>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d10a      	bne.n	8003e8c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f005 f941 	bl	80090fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f002 0208 	and.w	r2, r2, #8
 8003e8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f003 fb60 	bl	8007556 <USB_ReadInterrupts>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f005 f999 	bl	80091e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f003 fb45 	bl	8007556 <USB_ReadInterrupts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f005 f96c 	bl	80091c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f003 fb2a 	bl	8007556 <USB_ReadInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0c:	d10a      	bne.n	8003f24 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f005 f97a 	bl	8009208 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f003 fb14 	bl	8007556 <USB_ReadInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d115      	bne.n	8003f64 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f005 f96a 	bl	8009224 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	e000      	b.n	8003f64 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003f62:	bf00      	nop
    }
  }
}
 8003f64:	3734      	adds	r7, #52	; 0x34
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd90      	pop	{r4, r7, pc}

08003f6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_PCD_SetAddress+0x1a>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e013      	b.n	8003fac <HAL_PCD_SetAddress+0x42>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f003 fa72 	bl	8007486 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	70fb      	strb	r3, [r7, #3]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	803b      	strh	r3, [r7, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	da0f      	bge.n	8003ffa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	f003 020f 	and.w	r2, r3, #15
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	3338      	adds	r3, #56	; 0x38
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	3304      	adds	r3, #4
 8003ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	705a      	strb	r2, [r3, #1]
 8003ff8:	e00f      	b.n	800401a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	f003 020f 	and.w	r2, r3, #15
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	3304      	adds	r3, #4
 8004012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004026:	883a      	ldrh	r2, [r7, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	78ba      	ldrb	r2, [r7, #2]
 8004030:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	785b      	ldrb	r3, [r3, #1]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004044:	78bb      	ldrb	r3, [r7, #2]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d102      	bne.n	8004050 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_PCD_EP_Open+0xaa>
 800405a:	2302      	movs	r3, #2
 800405c:	e00e      	b.n	800407c <HAL_PCD_EP_Open+0xc8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68f9      	ldr	r1, [r7, #12]
 800406c:	4618      	mov	r0, r3
 800406e:	f002 fbdd 	bl	800682c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800407a:	7afb      	ldrb	r3, [r7, #11]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004094:	2b00      	cmp	r3, #0
 8004096:	da0f      	bge.n	80040b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	f003 020f 	and.w	r2, r3, #15
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	3338      	adds	r3, #56	; 0x38
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	3304      	adds	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	705a      	strb	r2, [r3, #1]
 80040b6:	e00f      	b.n	80040d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	3304      	adds	r3, #4
 80040d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_PCD_EP_Close+0x6e>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e00e      	b.n	8004110 <HAL_PCD_EP_Close+0x8c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	4618      	mov	r0, r3
 8004102:	f002 fc1b 	bl	800693c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	460b      	mov	r3, r1
 8004126:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004128:	7afb      	ldrb	r3, [r7, #11]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2200      	movs	r2, #0
 8004152:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2200      	movs	r2, #0
 8004158:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800415a:	7afb      	ldrb	r3, [r7, #11]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	b2da      	uxtb	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d102      	bne.n	8004174 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004174:	7afb      	ldrb	r3, [r7, #11]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	6979      	ldr	r1, [r7, #20]
 800418c:	f002 fef6 	bl	8006f7c <USB_EP0StartXfer>
 8004190:	e008      	b.n	80041a4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	6979      	ldr	r1, [r7, #20]
 80041a0:	f002 fca8 	bl	8006af4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b086      	sub	sp, #24
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	460b      	mov	r3, r1
 80041bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	f003 020f 	and.w	r2, r3, #15
 80041c4:	4613      	mov	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	3338      	adds	r3, #56	; 0x38
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	3304      	adds	r3, #4
 80041d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2201      	movs	r2, #1
 80041ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ee:	7afb      	ldrb	r3, [r7, #11]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d102      	bne.n	8004208 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004208:	7afb      	ldrb	r3, [r7, #11]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	6979      	ldr	r1, [r7, #20]
 8004220:	f002 feac 	bl	8006f7c <USB_EP0StartXfer>
 8004224:	e008      	b.n	8004238 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	6979      	ldr	r1, [r7, #20]
 8004234:	f002 fc5e 	bl	8006af4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	f003 020f 	and.w	r2, r3, #15
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d901      	bls.n	8004260 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e050      	b.n	8004302 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004264:	2b00      	cmp	r3, #0
 8004266:	da0f      	bge.n	8004288 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	f003 020f 	and.w	r2, r3, #15
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	3338      	adds	r3, #56	; 0x38
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	4413      	add	r3, r2
 800427c:	3304      	adds	r3, #4
 800427e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	705a      	strb	r2, [r3, #1]
 8004286:	e00d      	b.n	80042a4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	3304      	adds	r3, #4
 800429c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_PCD_EP_SetStall+0x82>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e01e      	b.n	8004302 <HAL_PCD_EP_SetStall+0xc0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68f9      	ldr	r1, [r7, #12]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f003 f803 	bl	80072de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	b2d9      	uxtb	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042f2:	461a      	mov	r2, r3
 80042f4:	f003 f9f4 	bl	80076e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	460b      	mov	r3, r1
 8004314:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	429a      	cmp	r2, r3
 8004322:	d901      	bls.n	8004328 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e042      	b.n	80043ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800432c:	2b00      	cmp	r3, #0
 800432e:	da0f      	bge.n	8004350 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	f003 020f 	and.w	r2, r3, #15
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	3338      	adds	r3, #56	; 0x38
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	705a      	strb	r2, [r3, #1]
 800434e:	e00f      	b.n	8004370 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	3304      	adds	r3, #4
 8004368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	b2da      	uxtb	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_PCD_EP_ClrStall+0x86>
 800438c:	2302      	movs	r3, #2
 800438e:	e00e      	b.n	80043ae <HAL_PCD_EP_ClrStall+0xa4>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68f9      	ldr	r1, [r7, #12]
 800439e:	4618      	mov	r0, r3
 80043a0:	f003 f80b 	bl	80073ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b08a      	sub	sp, #40	; 0x28
 80043ba:	af02      	add	r7, sp, #8
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	3338      	adds	r3, #56	; 0x38
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	3304      	adds	r3, #4
 80043dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d901      	bls.n	80043ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e06c      	b.n	80044c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	429a      	cmp	r2, r3
 8004402:	d902      	bls.n	800440a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3303      	adds	r3, #3
 800440e:	089b      	lsrs	r3, r3, #2
 8004410:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004412:	e02b      	b.n	800446c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	429a      	cmp	r2, r3
 8004428:	d902      	bls.n	8004430 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	3303      	adds	r3, #3
 8004434:	089b      	lsrs	r3, r3, #2
 8004436:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68d9      	ldr	r1, [r3, #12]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	b2da      	uxtb	r2, r3
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004448:	b2db      	uxtb	r3, r3
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	4603      	mov	r3, r0
 800444e:	6978      	ldr	r0, [r7, #20]
 8004450:	f002 fee7 	bl	8007222 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	441a      	add	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	699a      	ldr	r2, [r3, #24]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	441a      	add	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	b29b      	uxth	r3, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	429a      	cmp	r2, r3
 8004480:	d809      	bhi.n	8004496 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800448a:	429a      	cmp	r2, r3
 800448c:	d203      	bcs.n	8004496 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1be      	bne.n	8004414 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d811      	bhi.n	80044c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	2201      	movs	r2, #1
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	43db      	mvns	r3, r3
 80044bc:	6939      	ldr	r1, [r7, #16]
 80044be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c2:	4013      	ands	r3, r2
 80044c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	333c      	adds	r3, #60	; 0x3c
 80044e8:	3304      	adds	r3, #4
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b01      	cmp	r3, #1
 8004504:	f040 80a0 	bne.w	8004648 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d015      	beq.n	800453e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a72      	ldr	r2, [pc, #456]	; (80046e0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004516:	4293      	cmp	r3, r2
 8004518:	f240 80dd 	bls.w	80046d6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80d7 	beq.w	80046d6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004534:	461a      	mov	r2, r3
 8004536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453a:	6093      	str	r3, [r2, #8]
 800453c:	e0cb      	b.n	80046d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d009      	beq.n	800455c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004554:	461a      	mov	r2, r3
 8004556:	2320      	movs	r3, #32
 8004558:	6093      	str	r3, [r2, #8]
 800455a:	e0bc      	b.n	80046d6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004562:	2b00      	cmp	r3, #0
 8004564:	f040 80b7 	bne.w	80046d6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a5d      	ldr	r2, [pc, #372]	; (80046e0 <PCD_EP_OutXfrComplete_int+0x210>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d90f      	bls.n	8004590 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004586:	461a      	mov	r2, r3
 8004588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458c:	6093      	str	r3, [r2, #8]
 800458e:	e0a2      	b.n	80046d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045a2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	0159      	lsls	r1, r3, #5
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	440b      	add	r3, r1
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80045b6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4403      	add	r3, r0
 80045c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80045ca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045de:	6819      	ldr	r1, [r3, #0]
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4403      	add	r3, r0
 80045ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4419      	add	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4403      	add	r3, r0
 8004604:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004608:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d114      	bne.n	800463a <PCD_EP_OutXfrComplete_int+0x16a>
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d108      	bne.n	800463a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004632:	461a      	mov	r2, r3
 8004634:	2101      	movs	r1, #1
 8004636:	f003 f853 	bl	80076e0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f004 fd27 	bl	8009094 <HAL_PCD_DataOutStageCallback>
 8004646:	e046      	b.n	80046d6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <PCD_EP_OutXfrComplete_int+0x214>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d124      	bne.n	800469a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004666:	461a      	mov	r2, r3
 8004668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466c:	6093      	str	r3, [r2, #8]
 800466e:	e032      	b.n	80046d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	461a      	mov	r2, r3
 8004688:	2320      	movs	r3, #32
 800468a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	4619      	mov	r1, r3
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f004 fcfe 	bl	8009094 <HAL_PCD_DataOutStageCallback>
 8004698:	e01d      	b.n	80046d6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d114      	bne.n	80046ca <PCD_EP_OutXfrComplete_int+0x1fa>
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d108      	bne.n	80046ca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046c2:	461a      	mov	r2, r3
 80046c4:	2100      	movs	r1, #0
 80046c6:	f003 f80b 	bl	80076e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f004 fcdf 	bl	8009094 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	4f54300a 	.word	0x4f54300a
 80046e4:	4f54310a 	.word	0x4f54310a

080046e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	333c      	adds	r3, #60	; 0x3c
 8004700:	3304      	adds	r3, #4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a15      	ldr	r2, [pc, #84]	; (8004770 <PCD_EP_OutSetupPacket_int+0x88>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d90e      	bls.n	800473c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004734:	461a      	mov	r2, r3
 8004736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f004 fc97 	bl	8009070 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <PCD_EP_OutSetupPacket_int+0x88>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d90c      	bls.n	8004764 <PCD_EP_OutSetupPacket_int+0x7c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d108      	bne.n	8004764 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800475c:	461a      	mov	r2, r3
 800475e:	2101      	movs	r1, #1
 8004760:	f002 ffbe 	bl	80076e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	4f54300a 	.word	0x4f54300a

08004774 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	70fb      	strb	r3, [r7, #3]
 8004780:	4613      	mov	r3, r2
 8004782:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004792:	883b      	ldrh	r3, [r7, #0]
 8004794:	0419      	lsls	r1, r3, #16
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	430a      	orrs	r2, r1
 800479e:	629a      	str	r2, [r3, #40]	; 0x28
 80047a0:	e028      	b.n	80047f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	4413      	add	r3, r2
 80047ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047b0:	2300      	movs	r3, #0
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	e00d      	b.n	80047d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	3340      	adds	r3, #64	; 0x40
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	4413      	add	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	3301      	adds	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	7bfa      	ldrb	r2, [r7, #15]
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	429a      	cmp	r2, r3
 80047da:	d3ec      	bcc.n	80047b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047dc:	883b      	ldrh	r3, [r7, #0]
 80047de:	0418      	lsls	r0, r3, #16
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	4302      	orrs	r2, r0
 80047ec:	3340      	adds	r3, #64	; 0x40
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e25b      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d075      	beq.n	8004946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800485a:	4ba3      	ldr	r3, [pc, #652]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b04      	cmp	r3, #4
 8004864:	d00c      	beq.n	8004880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004866:	4ba0      	ldr	r3, [pc, #640]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800486e:	2b08      	cmp	r3, #8
 8004870:	d112      	bne.n	8004898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004872:	4b9d      	ldr	r3, [pc, #628]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800487e:	d10b      	bne.n	8004898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	4b99      	ldr	r3, [pc, #612]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d05b      	beq.n	8004944 <HAL_RCC_OscConfig+0x108>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d157      	bne.n	8004944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e236      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a0:	d106      	bne.n	80048b0 <HAL_RCC_OscConfig+0x74>
 80048a2:	4b91      	ldr	r3, [pc, #580]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a90      	ldr	r2, [pc, #576]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e01d      	b.n	80048ec <HAL_RCC_OscConfig+0xb0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b8:	d10c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x98>
 80048ba:	4b8b      	ldr	r3, [pc, #556]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a8a      	ldr	r2, [pc, #552]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	4b88      	ldr	r3, [pc, #544]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a87      	ldr	r2, [pc, #540]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e00b      	b.n	80048ec <HAL_RCC_OscConfig+0xb0>
 80048d4:	4b84      	ldr	r3, [pc, #528]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a83      	ldr	r2, [pc, #524]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80048da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	4b81      	ldr	r3, [pc, #516]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a80      	ldr	r2, [pc, #512]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80048e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d013      	beq.n	800491c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f4:	f7fd fdbe 	bl	8002474 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048fc:	f7fd fdba 	bl	8002474 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	; 0x64
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e1fb      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	4b76      	ldr	r3, [pc, #472]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0xc0>
 800491a:	e014      	b.n	8004946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fd fdaa 	bl	8002474 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004924:	f7fd fda6 	bl	8002474 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	; 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1e7      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004936:	4b6c      	ldr	r3, [pc, #432]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0xe8>
 8004942:	e000      	b.n	8004946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d063      	beq.n	8004a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004952:	4b65      	ldr	r3, [pc, #404]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495e:	4b62      	ldr	r3, [pc, #392]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004966:	2b08      	cmp	r3, #8
 8004968:	d11c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496a:	4b5f      	ldr	r3, [pc, #380]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d116      	bne.n	80049a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004976:	4b5c      	ldr	r3, [pc, #368]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_RCC_OscConfig+0x152>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d001      	beq.n	800498e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e1bb      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498e:	4b56      	ldr	r3, [pc, #344]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4952      	ldr	r1, [pc, #328]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a2:	e03a      	b.n	8004a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ac:	4b4f      	ldr	r3, [pc, #316]	; (8004aec <HAL_RCC_OscConfig+0x2b0>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fd fd5f 	bl	8002474 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ba:	f7fd fd5b 	bl	8002474 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e19c      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049cc:	4b46      	ldr	r3, [pc, #280]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d8:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4940      	ldr	r1, [pc, #256]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]
 80049ec:	e015      	b.n	8004a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ee:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <HAL_RCC_OscConfig+0x2b0>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fd fd3e 	bl	8002474 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049fc:	f7fd fd3a 	bl	8002474 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e17b      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0e:	4b36      	ldr	r3, [pc, #216]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d030      	beq.n	8004a88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a2e:	4b30      	ldr	r3, [pc, #192]	; (8004af0 <HAL_RCC_OscConfig+0x2b4>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fd fd1e 	bl	8002474 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a3c:	f7fd fd1a 	bl	8002474 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e15b      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4e:	4b26      	ldr	r3, [pc, #152]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f0      	beq.n	8004a3c <HAL_RCC_OscConfig+0x200>
 8004a5a:	e015      	b.n	8004a88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a5c:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <HAL_RCC_OscConfig+0x2b4>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a62:	f7fd fd07 	bl	8002474 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a6a:	f7fd fd03 	bl	8002474 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e144      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80a0 	beq.w	8004bd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a96:	2300      	movs	r3, #0
 8004a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a9a:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10f      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a0e      	ldr	r2, [pc, #56]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCC_OscConfig+0x2b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d121      	bne.n	8004b16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ad2:	4b08      	ldr	r3, [pc, #32]	; (8004af4 <HAL_RCC_OscConfig+0x2b8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a07      	ldr	r2, [pc, #28]	; (8004af4 <HAL_RCC_OscConfig+0x2b8>)
 8004ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ade:	f7fd fcc9 	bl	8002474 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae4:	e011      	b.n	8004b0a <HAL_RCC_OscConfig+0x2ce>
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	42470000 	.word	0x42470000
 8004af0:	42470e80 	.word	0x42470e80
 8004af4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af8:	f7fd fcbc 	bl	8002474 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e0fd      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0a:	4b81      	ldr	r3, [pc, #516]	; (8004d10 <HAL_RCC_OscConfig+0x4d4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d106      	bne.n	8004b2c <HAL_RCC_OscConfig+0x2f0>
 8004b1e:	4b7d      	ldr	r3, [pc, #500]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	4a7c      	ldr	r2, [pc, #496]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2a:	e01c      	b.n	8004b66 <HAL_RCC_OscConfig+0x32a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	d10c      	bne.n	8004b4e <HAL_RCC_OscConfig+0x312>
 8004b34:	4b77      	ldr	r3, [pc, #476]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4a76      	ldr	r2, [pc, #472]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b40:	4b74      	ldr	r3, [pc, #464]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	4a73      	ldr	r2, [pc, #460]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4c:	e00b      	b.n	8004b66 <HAL_RCC_OscConfig+0x32a>
 8004b4e:	4b71      	ldr	r3, [pc, #452]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	4a70      	ldr	r2, [pc, #448]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5a:	4b6e      	ldr	r3, [pc, #440]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a6d      	ldr	r2, [pc, #436]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d015      	beq.n	8004b9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fd fc81 	bl	8002474 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b76:	f7fd fc7d 	bl	8002474 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e0bc      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8c:	4b61      	ldr	r3, [pc, #388]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ee      	beq.n	8004b76 <HAL_RCC_OscConfig+0x33a>
 8004b98:	e014      	b.n	8004bc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9a:	f7fd fc6b 	bl	8002474 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba0:	e00a      	b.n	8004bb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba2:	f7fd fc67 	bl	8002474 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e0a6      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb8:	4b56      	ldr	r3, [pc, #344]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1ee      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d105      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bca:	4b52      	ldr	r3, [pc, #328]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	4a51      	ldr	r2, [pc, #324]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8092 	beq.w	8004d04 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004be0:	4b4c      	ldr	r3, [pc, #304]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 030c 	and.w	r3, r3, #12
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d05c      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d141      	bne.n	8004c78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf4:	4b48      	ldr	r3, [pc, #288]	; (8004d18 <HAL_RCC_OscConfig+0x4dc>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfa:	f7fd fc3b 	bl	8002474 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c02:	f7fd fc37 	bl	8002474 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e078      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c14:	4b3f      	ldr	r3, [pc, #252]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	019b      	lsls	r3, r3, #6
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	085b      	lsrs	r3, r3, #1
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	041b      	lsls	r3, r3, #16
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	061b      	lsls	r3, r3, #24
 8004c44:	4933      	ldr	r1, [pc, #204]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c4a:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <HAL_RCC_OscConfig+0x4dc>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fd fc10 	bl	8002474 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c58:	f7fd fc0c 	bl	8002474 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e04d      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x41c>
 8004c76:	e045      	b.n	8004d04 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c78:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <HAL_RCC_OscConfig+0x4dc>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7e:	f7fd fbf9 	bl	8002474 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c86:	f7fd fbf5 	bl	8002474 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e036      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c98:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCC_OscConfig+0x44a>
 8004ca4:	e02e      	b.n	8004d04 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e029      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cb2:	4b18      	ldr	r3, [pc, #96]	; (8004d14 <HAL_RCC_OscConfig+0x4d8>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d11c      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d115      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cda:	4013      	ands	r3, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d10d      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40007000 	.word	0x40007000
 8004d14:	40023800 	.word	0x40023800
 8004d18:	42470060 	.word	0x42470060

08004d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0cc      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d30:	4b68      	ldr	r3, [pc, #416]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d90c      	bls.n	8004d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3e:	4b65      	ldr	r3, [pc, #404]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d46:	4b63      	ldr	r3, [pc, #396]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0b8      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d020      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d70:	4b59      	ldr	r3, [pc, #356]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4a58      	ldr	r2, [pc, #352]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d88:	4b53      	ldr	r3, [pc, #332]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a52      	ldr	r2, [pc, #328]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d94:	4b50      	ldr	r3, [pc, #320]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	494d      	ldr	r1, [pc, #308]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d044      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dba:	4b47      	ldr	r3, [pc, #284]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d119      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e07f      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d003      	beq.n	8004dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d107      	bne.n	8004dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dda:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e06f      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dea:	4b3b      	ldr	r3, [pc, #236]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e067      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dfa:	4b37      	ldr	r3, [pc, #220]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f023 0203 	bic.w	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4934      	ldr	r1, [pc, #208]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e0c:	f7fd fb32 	bl	8002474 <HAL_GetTick>
 8004e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e14:	f7fd fb2e 	bl	8002474 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e04f      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	4b2b      	ldr	r3, [pc, #172]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 020c 	and.w	r2, r3, #12
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d1eb      	bne.n	8004e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e3c:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d20c      	bcs.n	8004e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4a:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e52:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e032      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e70:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4916      	ldr	r1, [pc, #88]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e8e:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	490e      	ldr	r1, [pc, #56]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ea2:	f000 f821 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 8004ea6:	4601      	mov	r1, r0
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <HAL_RCC_ClockConfig+0x1c0>)
 8004eb4:	5cd3      	ldrb	r3, [r2, r3]
 8004eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8004eba:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fd fa92 	bl	80023ec <HAL_InitTick>

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40023c00 	.word	0x40023c00
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	0800a620 	.word	0x0800a620
 8004ee0:	200000a0 	.word	0x200000a0
 8004ee4:	200000a4 	.word	0x200000a4

08004ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004efe:	4b50      	ldr	r3, [pc, #320]	; (8005040 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d007      	beq.n	8004f1a <HAL_RCC_GetSysClockFreq+0x32>
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d008      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x38>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f040 808d 	bne.w	800502e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f14:	4b4b      	ldr	r3, [pc, #300]	; (8005044 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004f16:	60bb      	str	r3, [r7, #8]
       break;
 8004f18:	e08c      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f1a:	4b4b      	ldr	r3, [pc, #300]	; (8005048 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f1c:	60bb      	str	r3, [r7, #8]
      break;
 8004f1e:	e089      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f20:	4b47      	ldr	r3, [pc, #284]	; (8005040 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f2a:	4b45      	ldr	r3, [pc, #276]	; (8005040 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d023      	beq.n	8004f7e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f36:	4b42      	ldr	r3, [pc, #264]	; (8005040 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	099b      	lsrs	r3, r3, #6
 8004f3c:	f04f 0400 	mov.w	r4, #0
 8004f40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	ea03 0501 	and.w	r5, r3, r1
 8004f4c:	ea04 0602 	and.w	r6, r4, r2
 8004f50:	4a3d      	ldr	r2, [pc, #244]	; (8005048 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f52:	fb02 f106 	mul.w	r1, r2, r6
 8004f56:	2200      	movs	r2, #0
 8004f58:	fb02 f205 	mul.w	r2, r2, r5
 8004f5c:	440a      	add	r2, r1
 8004f5e:	493a      	ldr	r1, [pc, #232]	; (8005048 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f60:	fba5 0101 	umull	r0, r1, r5, r1
 8004f64:	1853      	adds	r3, r2, r1
 8004f66:	4619      	mov	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f04f 0400 	mov.w	r4, #0
 8004f6e:	461a      	mov	r2, r3
 8004f70:	4623      	mov	r3, r4
 8004f72:	f7fb f939 	bl	80001e8 <__aeabi_uldivmod>
 8004f76:	4603      	mov	r3, r0
 8004f78:	460c      	mov	r4, r1
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e049      	b.n	8005012 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f7e:	4b30      	ldr	r3, [pc, #192]	; (8005040 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	099b      	lsrs	r3, r3, #6
 8004f84:	f04f 0400 	mov.w	r4, #0
 8004f88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	ea03 0501 	and.w	r5, r3, r1
 8004f94:	ea04 0602 	and.w	r6, r4, r2
 8004f98:	4629      	mov	r1, r5
 8004f9a:	4632      	mov	r2, r6
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	f04f 0400 	mov.w	r4, #0
 8004fa4:	0154      	lsls	r4, r2, #5
 8004fa6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004faa:	014b      	lsls	r3, r1, #5
 8004fac:	4619      	mov	r1, r3
 8004fae:	4622      	mov	r2, r4
 8004fb0:	1b49      	subs	r1, r1, r5
 8004fb2:	eb62 0206 	sbc.w	r2, r2, r6
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	f04f 0400 	mov.w	r4, #0
 8004fbe:	0194      	lsls	r4, r2, #6
 8004fc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fc4:	018b      	lsls	r3, r1, #6
 8004fc6:	1a5b      	subs	r3, r3, r1
 8004fc8:	eb64 0402 	sbc.w	r4, r4, r2
 8004fcc:	f04f 0100 	mov.w	r1, #0
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	00e2      	lsls	r2, r4, #3
 8004fd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fda:	00d9      	lsls	r1, r3, #3
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4614      	mov	r4, r2
 8004fe0:	195b      	adds	r3, r3, r5
 8004fe2:	eb44 0406 	adc.w	r4, r4, r6
 8004fe6:	f04f 0100 	mov.w	r1, #0
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	02a2      	lsls	r2, r4, #10
 8004ff0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ff4:	0299      	lsls	r1, r3, #10
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f04f 0400 	mov.w	r4, #0
 8005004:	461a      	mov	r2, r3
 8005006:	4623      	mov	r3, r4
 8005008:	f7fb f8ee 	bl	80001e8 <__aeabi_uldivmod>
 800500c:	4603      	mov	r3, r0
 800500e:	460c      	mov	r4, r1
 8005010:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005012:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_GetSysClockFreq+0x158>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	0c1b      	lsrs	r3, r3, #16
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	3301      	adds	r3, #1
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	60bb      	str	r3, [r7, #8]
      break;
 800502c:	e002      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005030:	60bb      	str	r3, [r7, #8]
      break;
 8005032:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005034:	68bb      	ldr	r3, [r7, #8]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800
 8005044:	00f42400 	.word	0x00f42400
 8005048:	017d7840 	.word	0x017d7840

0800504c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005050:	4b03      	ldr	r3, [pc, #12]	; (8005060 <HAL_RCC_GetHCLKFreq+0x14>)
 8005052:	681b      	ldr	r3, [r3, #0]
}
 8005054:	4618      	mov	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	200000a0 	.word	0x200000a0

08005064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005068:	f7ff fff0 	bl	800504c <HAL_RCC_GetHCLKFreq>
 800506c:	4601      	mov	r1, r0
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	0a9b      	lsrs	r3, r3, #10
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	4a03      	ldr	r2, [pc, #12]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800507a:	5cd3      	ldrb	r3, [r2, r3]
 800507c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005080:	4618      	mov	r0, r3
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40023800 	.word	0x40023800
 8005088:	0800a630 	.word	0x0800a630

0800508c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e056      	b.n	800514c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fc f87d 	bl	80011b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	ea42 0103 	orr.w	r1, r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	0c1b      	lsrs	r3, r3, #16
 800511c:	f003 0104 	and.w	r1, r3, #4
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800513a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_SPI_Transmit+0x22>
 8005172:	2302      	movs	r3, #2
 8005174:	e11e      	b.n	80053b4 <HAL_SPI_Transmit+0x260>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800517e:	f7fd f979 	bl	8002474 <HAL_GetTick>
 8005182:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005184:	88fb      	ldrh	r3, [r7, #6]
 8005186:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d002      	beq.n	800519a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005194:	2302      	movs	r3, #2
 8005196:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005198:	e103      	b.n	80053a2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_SPI_Transmit+0x52>
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051aa:	e0fa      	b.n	80053a2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2203      	movs	r2, #3
 80051b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f2:	d107      	bne.n	8005204 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005202:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520e:	2b40      	cmp	r3, #64	; 0x40
 8005210:	d007      	beq.n	8005222 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005220:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522a:	d14b      	bne.n	80052c4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_SPI_Transmit+0xe6>
 8005234:	8afb      	ldrh	r3, [r7, #22]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d13e      	bne.n	80052b8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	881a      	ldrh	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	1c9a      	adds	r2, r3, #2
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800525e:	e02b      	b.n	80052b8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b02      	cmp	r3, #2
 800526c:	d112      	bne.n	8005294 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	881a      	ldrh	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	1c9a      	adds	r2, r3, #2
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	86da      	strh	r2, [r3, #54]	; 0x36
 8005292:	e011      	b.n	80052b8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005294:	f7fd f8ee 	bl	8002474 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d803      	bhi.n	80052ac <HAL_SPI_Transmit+0x158>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d102      	bne.n	80052b2 <HAL_SPI_Transmit+0x15e>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052b6:	e074      	b.n	80053a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ce      	bne.n	8005260 <HAL_SPI_Transmit+0x10c>
 80052c2:	e04c      	b.n	800535e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_SPI_Transmit+0x17e>
 80052cc:	8afb      	ldrh	r3, [r7, #22]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d140      	bne.n	8005354 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	7812      	ldrb	r2, [r2, #0]
 80052de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052f8:	e02c      	b.n	8005354 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b02      	cmp	r3, #2
 8005306:	d113      	bne.n	8005330 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	7812      	ldrb	r2, [r2, #0]
 8005314:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	86da      	strh	r2, [r3, #54]	; 0x36
 800532e:	e011      	b.n	8005354 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005330:	f7fd f8a0 	bl	8002474 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d803      	bhi.n	8005348 <HAL_SPI_Transmit+0x1f4>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	d102      	bne.n	800534e <HAL_SPI_Transmit+0x1fa>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005352:	e026      	b.n	80053a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1cd      	bne.n	80052fa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fba4 	bl	8005ab0 <SPI_EndRxTxTransaction>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800537c:	2300      	movs	r3, #0
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e000      	b.n	80053a2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80053a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3720      	adds	r7, #32
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	4613      	mov	r3, r2
 80053ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d8:	d112      	bne.n	8005400 <HAL_SPI_Receive+0x44>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10e      	bne.n	8005400 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2204      	movs	r2, #4
 80053e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053ea:	88fa      	ldrh	r2, [r7, #6]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f8e9 	bl	80055ce <HAL_SPI_TransmitReceive>
 80053fc:	4603      	mov	r3, r0
 80053fe:	e0e2      	b.n	80055c6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_SPI_Receive+0x52>
 800540a:	2302      	movs	r3, #2
 800540c:	e0db      	b.n	80055c6 <HAL_SPI_Receive+0x20a>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005416:	f7fd f82d 	bl	8002474 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	d002      	beq.n	800542e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005428:	2302      	movs	r3, #2
 800542a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800542c:	e0c2      	b.n	80055b4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_SPI_Receive+0x7e>
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d102      	bne.n	8005440 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800543e:	e0b9      	b.n	80055b4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2204      	movs	r2, #4
 8005444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	88fa      	ldrh	r2, [r7, #6]
 8005458:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	88fa      	ldrh	r2, [r7, #6]
 800545e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005486:	d107      	bne.n	8005498 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005496:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d007      	beq.n	80054b6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d162      	bne.n	8005584 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80054be:	e02e      	b.n	800551e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d115      	bne.n	80054fa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f103 020c 	add.w	r2, r3, #12
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	7812      	ldrb	r2, [r2, #0]
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054f8:	e011      	b.n	800551e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054fa:	f7fc ffbb 	bl	8002474 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d803      	bhi.n	8005512 <HAL_SPI_Receive+0x156>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d102      	bne.n	8005518 <HAL_SPI_Receive+0x15c>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800551c:	e04a      	b.n	80055b4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1cb      	bne.n	80054c0 <HAL_SPI_Receive+0x104>
 8005528:	e031      	b.n	800558e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d113      	bne.n	8005560 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	b292      	uxth	r2, r2
 8005544:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	1c9a      	adds	r2, r3, #2
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800555e:	e011      	b.n	8005584 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005560:	f7fc ff88 	bl	8002474 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d803      	bhi.n	8005578 <HAL_SPI_Receive+0x1bc>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005576:	d102      	bne.n	800557e <HAL_SPI_Receive+0x1c2>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005582:	e017      	b.n	80055b4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1cd      	bne.n	800552a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fa27 	bl	80059e6 <SPI_EndRxTransaction>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	75fb      	strb	r3, [r7, #23]
 80055b0:	e000      	b.n	80055b4 <HAL_SPI_Receive+0x1f8>
  }

error :
 80055b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b08c      	sub	sp, #48	; 0x30
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055dc:	2301      	movs	r3, #1
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_SPI_TransmitReceive+0x26>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e18a      	b.n	800590a <HAL_SPI_TransmitReceive+0x33c>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055fc:	f7fc ff3a 	bl	8002474 <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005612:	887b      	ldrh	r3, [r7, #2]
 8005614:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800561a:	2b01      	cmp	r3, #1
 800561c:	d00f      	beq.n	800563e <HAL_SPI_TransmitReceive+0x70>
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005624:	d107      	bne.n	8005636 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <HAL_SPI_TransmitReceive+0x68>
 800562e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005632:	2b04      	cmp	r3, #4
 8005634:	d003      	beq.n	800563e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005636:	2302      	movs	r3, #2
 8005638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800563c:	e15b      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_SPI_TransmitReceive+0x82>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_SPI_TransmitReceive+0x82>
 800564a:	887b      	ldrh	r3, [r7, #2]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005656:	e14e      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b04      	cmp	r3, #4
 8005662:	d003      	beq.n	800566c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2205      	movs	r2, #5
 8005668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	887a      	ldrh	r2, [r7, #2]
 800567c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	887a      	ldrh	r2, [r7, #2]
 8005682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	887a      	ldrh	r2, [r7, #2]
 800568e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	887a      	ldrh	r2, [r7, #2]
 8005694:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d007      	beq.n	80056c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c8:	d178      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x10a>
 80056d2:	8b7b      	ldrh	r3, [r7, #26]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d166      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	881a      	ldrh	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	1c9a      	adds	r2, r3, #2
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056fc:	e053      	b.n	80057a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b02      	cmp	r3, #2
 800570a:	d11b      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x176>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d016      	beq.n	8005744 <HAL_SPI_TransmitReceive+0x176>
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d113      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	881a      	ldrh	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	1c9a      	adds	r2, r3, #2
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d119      	bne.n	8005786 <HAL_SPI_TransmitReceive+0x1b8>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d014      	beq.n	8005786 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	b292      	uxth	r2, r2
 8005768:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	1c9a      	adds	r2, r3, #2
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005782:	2301      	movs	r3, #1
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005786:	f7fc fe75 	bl	8002474 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005792:	429a      	cmp	r2, r3
 8005794:	d807      	bhi.n	80057a6 <HAL_SPI_TransmitReceive+0x1d8>
 8005796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d003      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057a4:	e0a7      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1a6      	bne.n	80056fe <HAL_SPI_TransmitReceive+0x130>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1a1      	bne.n	80056fe <HAL_SPI_TransmitReceive+0x130>
 80057ba:	e07c      	b.n	80058b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_SPI_TransmitReceive+0x1fc>
 80057c4:	8b7b      	ldrh	r3, [r7, #26]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d16b      	bne.n	80058a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	330c      	adds	r3, #12
 80057d4:	7812      	ldrb	r2, [r2, #0]
 80057d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057f0:	e057      	b.n	80058a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d11c      	bne.n	800583a <HAL_SPI_TransmitReceive+0x26c>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d017      	beq.n	800583a <HAL_SPI_TransmitReceive+0x26c>
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d114      	bne.n	800583a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b01      	cmp	r3, #1
 8005846:	d119      	bne.n	800587c <HAL_SPI_TransmitReceive+0x2ae>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d014      	beq.n	800587c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005878:	2301      	movs	r3, #1
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800587c:	f7fc fdfa 	bl	8002474 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005888:	429a      	cmp	r2, r3
 800588a:	d803      	bhi.n	8005894 <HAL_SPI_TransmitReceive+0x2c6>
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d102      	bne.n	800589a <HAL_SPI_TransmitReceive+0x2cc>
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058a0:	e029      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1a2      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x224>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d19d      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f8f8 	bl	8005ab0 <SPI_EndRxTxTransaction>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d006      	beq.n	80058d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058d2:	e010      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10b      	bne.n	80058f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	e000      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80058f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005906:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800590a:	4618      	mov	r0, r3
 800590c:	3730      	adds	r7, #48	; 0x30
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	4613      	mov	r3, r2
 8005920:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005922:	e04c      	b.n	80059be <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d048      	beq.n	80059be <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800592c:	f7fc fda2 	bl	8002474 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d902      	bls.n	8005942 <SPI_WaitFlagStateUntilTimeout+0x30>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d13d      	bne.n	80059be <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005950:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595a:	d111      	bne.n	8005980 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005964:	d004      	beq.n	8005970 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596e:	d107      	bne.n	8005980 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005988:	d10f      	bne.n	80059aa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e00f      	b.n	80059de <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d1a3      	bne.n	8005924 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b086      	sub	sp, #24
 80059ea:	af02      	add	r7, sp, #8
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fa:	d111      	bne.n	8005a20 <SPI_EndRxTransaction+0x3a>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a04:	d004      	beq.n	8005a10 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0e:	d107      	bne.n	8005a20 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a28:	d12a      	bne.n	8005a80 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a32:	d012      	beq.n	8005a5a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2180      	movs	r1, #128	; 0x80
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7ff ff67 	bl	8005912 <SPI_WaitFlagStateUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d02d      	beq.n	8005aa6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4e:	f043 0220 	orr.w	r2, r3, #32
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e026      	b.n	8005aa8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2200      	movs	r2, #0
 8005a62:	2101      	movs	r1, #1
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f7ff ff54 	bl	8005912 <SPI_WaitFlagStateUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01a      	beq.n	8005aa6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a74:	f043 0220 	orr.w	r2, r3, #32
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e013      	b.n	8005aa8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	2101      	movs	r1, #1
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff ff41 	bl	8005912 <SPI_WaitFlagStateUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e000      	b.n	8005aa8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005abc:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <SPI_EndRxTxTransaction+0x7c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <SPI_EndRxTxTransaction+0x80>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	0d5b      	lsrs	r3, r3, #21
 8005ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ada:	d112      	bne.n	8005b02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2180      	movs	r1, #128	; 0x80
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff ff13 	bl	8005912 <SPI_WaitFlagStateUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d016      	beq.n	8005b20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	f043 0220 	orr.w	r2, r3, #32
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e00f      	b.n	8005b22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b18:	2b80      	cmp	r3, #128	; 0x80
 8005b1a:	d0f2      	beq.n	8005b02 <SPI_EndRxTxTransaction+0x52>
 8005b1c:	e000      	b.n	8005b20 <SPI_EndRxTxTransaction+0x70>
        break;
 8005b1e:	bf00      	nop
  }

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	200000a0 	.word	0x200000a0
 8005b30:	165e9f81 	.word	0x165e9f81

08005b34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e083      	b.n	8005c50 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fc f897 	bl	8001c90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b78:	f023 0307 	bic.w	r3, r3, #7
 8005b7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f000 f9ed 	bl	8005f68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005bd4:	f023 030c 	bic.w	r3, r3, #12
 8005bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	011a      	lsls	r2, r3, #4
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	031b      	lsls	r3, r3, #12
 8005c04:	4313      	orrs	r3, r2
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	4313      	orrs	r3, r2
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_TIM_Encoder_Start_IT+0x16>
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d010      	beq.n	8005c8e <HAL_TIM_Encoder_Start_IT+0x36>
 8005c6c:	e01f      	b.n	8005cae <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2201      	movs	r2, #1
 8005c74:	2100      	movs	r1, #0
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 f9f6 	bl	8006068 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0202 	orr.w	r2, r2, #2
 8005c8a:	60da      	str	r2, [r3, #12]
      break;
 8005c8c:	e02e      	b.n	8005cec <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2201      	movs	r2, #1
 8005c94:	2104      	movs	r1, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 f9e6 	bl	8006068 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0204 	orr.w	r2, r2, #4
 8005caa:	60da      	str	r2, [r3, #12]
      break;
 8005cac:	e01e      	b.n	8005cec <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 f9d6 	bl	8006068 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	2104      	movs	r1, #4
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 f9cf 	bl	8006068 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0202 	orr.w	r2, r2, #2
 8005cd8:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0204 	orr.w	r2, r2, #4
 8005ce8:	60da      	str	r2, [r3, #12]
      break;
 8005cea:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d122      	bne.n	8005d62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d11b      	bne.n	8005d62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0202 	mvn.w	r2, #2
 8005d32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7fb f8c5 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8005d4e:	e005      	b.n	8005d5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f8ea 	bl	8005f2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f8f1 	bl	8005f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d122      	bne.n	8005db6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d11b      	bne.n	8005db6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f06f 0204 	mvn.w	r2, #4
 8005d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7fb f89b 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8005da2:	e005      	b.n	8005db0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f8c0 	bl	8005f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f8c7 	bl	8005f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d122      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d11b      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f06f 0208 	mvn.w	r2, #8
 8005dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2204      	movs	r2, #4
 8005de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7fb f871 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8005df6:	e005      	b.n	8005e04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f896 	bl	8005f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f89d 	bl	8005f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d122      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f003 0310 	and.w	r3, r3, #16
 8005e22:	2b10      	cmp	r3, #16
 8005e24:	d11b      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f06f 0210 	mvn.w	r2, #16
 8005e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2208      	movs	r2, #8
 8005e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7fb f847 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8005e4a:	e005      	b.n	8005e58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f86c 	bl	8005f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f873 	bl	8005f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d10e      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d107      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f06f 0201 	mvn.w	r2, #1
 8005e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f846 	bl	8005f16 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e94:	2b80      	cmp	r3, #128	; 0x80
 8005e96:	d10e      	bne.n	8005eb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea2:	2b80      	cmp	r3, #128	; 0x80
 8005ea4:	d107      	bne.n	8005eb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f977 	bl	80061a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d10e      	bne.n	8005ee2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	d107      	bne.n	8005ee2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f838 	bl	8005f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d10e      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b20      	cmp	r3, #32
 8005efc:	d107      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f06f 0220 	mvn.w	r2, #32
 8005f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f941 	bl	8006190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
	...

08005f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a34      	ldr	r2, [pc, #208]	; (800604c <TIM_Base_SetConfig+0xe4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00f      	beq.n	8005fa0 <TIM_Base_SetConfig+0x38>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f86:	d00b      	beq.n	8005fa0 <TIM_Base_SetConfig+0x38>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a31      	ldr	r2, [pc, #196]	; (8006050 <TIM_Base_SetConfig+0xe8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <TIM_Base_SetConfig+0x38>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a30      	ldr	r2, [pc, #192]	; (8006054 <TIM_Base_SetConfig+0xec>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_Base_SetConfig+0x38>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a2f      	ldr	r2, [pc, #188]	; (8006058 <TIM_Base_SetConfig+0xf0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d108      	bne.n	8005fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a25      	ldr	r2, [pc, #148]	; (800604c <TIM_Base_SetConfig+0xe4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d01b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x8a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc0:	d017      	beq.n	8005ff2 <TIM_Base_SetConfig+0x8a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a22      	ldr	r2, [pc, #136]	; (8006050 <TIM_Base_SetConfig+0xe8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <TIM_Base_SetConfig+0x8a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a21      	ldr	r2, [pc, #132]	; (8006054 <TIM_Base_SetConfig+0xec>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00f      	beq.n	8005ff2 <TIM_Base_SetConfig+0x8a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a20      	ldr	r2, [pc, #128]	; (8006058 <TIM_Base_SetConfig+0xf0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x8a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1f      	ldr	r2, [pc, #124]	; (800605c <TIM_Base_SetConfig+0xf4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_Base_SetConfig+0x8a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a1e      	ldr	r2, [pc, #120]	; (8006060 <TIM_Base_SetConfig+0xf8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_Base_SetConfig+0x8a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <TIM_Base_SetConfig+0xfc>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d108      	bne.n	8006004 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a08      	ldr	r2, [pc, #32]	; (800604c <TIM_Base_SetConfig+0xe4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d103      	bne.n	8006038 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	615a      	str	r2, [r3, #20]
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40010000 	.word	0x40010000
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	40000c00 	.word	0x40000c00
 800605c:	40014000 	.word	0x40014000
 8006060:	40014400 	.word	0x40014400
 8006064:	40014800 	.word	0x40014800

08006068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2201      	movs	r2, #1
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1a      	ldr	r2, [r3, #32]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	43db      	mvns	r3, r3
 800608a:	401a      	ands	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1a      	ldr	r2, [r3, #32]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	431a      	orrs	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e050      	b.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1c      	ldr	r2, [pc, #112]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d018      	beq.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006118:	d013      	beq.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a18      	ldr	r2, [pc, #96]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00e      	beq.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a16      	ldr	r2, [pc, #88]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a15      	ldr	r2, [pc, #84]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a13      	ldr	r2, [pc, #76]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d10c      	bne.n	800615c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	4313      	orrs	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40010000 	.word	0x40010000
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40014000 	.word	0x40014000

08006190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061b8:	b084      	sub	sp, #16
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	f107 001c 	add.w	r0, r7, #28
 80061c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d122      	bne.n	8006216 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d105      	bne.n	800620a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 fac6 	bl	800779c <USB_CoreReset>
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]
 8006214:	e01a      	b.n	800624c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 faba 	bl	800779c <USB_CoreReset>
 8006228:	4603      	mov	r3, r0
 800622a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800622c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	639a      	str	r2, [r3, #56]	; 0x38
 800623e:	e005      	b.n	800624c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	2b01      	cmp	r3, #1
 8006250:	d10b      	bne.n	800626a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f043 0206 	orr.w	r2, r3, #6
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f043 0220 	orr.w	r2, r3, #32
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006276:	b004      	add	sp, #16
 8006278:	4770      	bx	lr
	...

0800627c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d165      	bne.n	800635c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4a41      	ldr	r2, [pc, #260]	; (8006398 <USB_SetTurnaroundTime+0x11c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d906      	bls.n	80062a6 <USB_SetTurnaroundTime+0x2a>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4a40      	ldr	r2, [pc, #256]	; (800639c <USB_SetTurnaroundTime+0x120>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d802      	bhi.n	80062a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80062a0:	230f      	movs	r3, #15
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	e062      	b.n	800636c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4a3c      	ldr	r2, [pc, #240]	; (800639c <USB_SetTurnaroundTime+0x120>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d906      	bls.n	80062bc <USB_SetTurnaroundTime+0x40>
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4a3b      	ldr	r2, [pc, #236]	; (80063a0 <USB_SetTurnaroundTime+0x124>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d802      	bhi.n	80062bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062b6:	230e      	movs	r3, #14
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	e057      	b.n	800636c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4a38      	ldr	r2, [pc, #224]	; (80063a0 <USB_SetTurnaroundTime+0x124>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d906      	bls.n	80062d2 <USB_SetTurnaroundTime+0x56>
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4a37      	ldr	r2, [pc, #220]	; (80063a4 <USB_SetTurnaroundTime+0x128>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d802      	bhi.n	80062d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062cc:	230d      	movs	r3, #13
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	e04c      	b.n	800636c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4a33      	ldr	r2, [pc, #204]	; (80063a4 <USB_SetTurnaroundTime+0x128>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d906      	bls.n	80062e8 <USB_SetTurnaroundTime+0x6c>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4a32      	ldr	r2, [pc, #200]	; (80063a8 <USB_SetTurnaroundTime+0x12c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d802      	bhi.n	80062e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062e2:	230c      	movs	r3, #12
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	e041      	b.n	800636c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4a2f      	ldr	r2, [pc, #188]	; (80063a8 <USB_SetTurnaroundTime+0x12c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d906      	bls.n	80062fe <USB_SetTurnaroundTime+0x82>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4a2e      	ldr	r2, [pc, #184]	; (80063ac <USB_SetTurnaroundTime+0x130>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d802      	bhi.n	80062fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062f8:	230b      	movs	r3, #11
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	e036      	b.n	800636c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	4a2a      	ldr	r2, [pc, #168]	; (80063ac <USB_SetTurnaroundTime+0x130>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d906      	bls.n	8006314 <USB_SetTurnaroundTime+0x98>
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4a29      	ldr	r2, [pc, #164]	; (80063b0 <USB_SetTurnaroundTime+0x134>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d802      	bhi.n	8006314 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800630e:	230a      	movs	r3, #10
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	e02b      	b.n	800636c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4a26      	ldr	r2, [pc, #152]	; (80063b0 <USB_SetTurnaroundTime+0x134>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d906      	bls.n	800632a <USB_SetTurnaroundTime+0xae>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4a25      	ldr	r2, [pc, #148]	; (80063b4 <USB_SetTurnaroundTime+0x138>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d802      	bhi.n	800632a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006324:	2309      	movs	r3, #9
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	e020      	b.n	800636c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	4a21      	ldr	r2, [pc, #132]	; (80063b4 <USB_SetTurnaroundTime+0x138>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d906      	bls.n	8006340 <USB_SetTurnaroundTime+0xc4>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4a20      	ldr	r2, [pc, #128]	; (80063b8 <USB_SetTurnaroundTime+0x13c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d802      	bhi.n	8006340 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800633a:	2308      	movs	r3, #8
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	e015      	b.n	800636c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4a1d      	ldr	r2, [pc, #116]	; (80063b8 <USB_SetTurnaroundTime+0x13c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d906      	bls.n	8006356 <USB_SetTurnaroundTime+0xda>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <USB_SetTurnaroundTime+0x140>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d802      	bhi.n	8006356 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006350:	2307      	movs	r3, #7
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	e00a      	b.n	800636c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006356:	2306      	movs	r3, #6
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	e007      	b.n	800636c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d102      	bne.n	8006368 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006362:	2309      	movs	r3, #9
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	e001      	b.n	800636c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006368:	2309      	movs	r3, #9
 800636a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	029b      	lsls	r3, r3, #10
 8006380:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006384:	431a      	orrs	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	00d8acbf 	.word	0x00d8acbf
 800639c:	00e4e1bf 	.word	0x00e4e1bf
 80063a0:	00f423ff 	.word	0x00f423ff
 80063a4:	0106737f 	.word	0x0106737f
 80063a8:	011a499f 	.word	0x011a499f
 80063ac:	01312cff 	.word	0x01312cff
 80063b0:	014ca43f 	.word	0x014ca43f
 80063b4:	016e35ff 	.word	0x016e35ff
 80063b8:	01a6ab1f 	.word	0x01a6ab1f
 80063bc:	01e847ff 	.word	0x01e847ff

080063c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f043 0201 	orr.w	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f023 0201 	bic.w	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d106      	bne.n	8006430 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	60da      	str	r2, [r3, #12]
 800642e:	e00b      	b.n	8006448 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60da      	str	r2, [r3, #12]
 8006442:	e001      	b.n	8006448 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e003      	b.n	8006450 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006448:	2032      	movs	r0, #50	; 0x32
 800644a:	f7fc f81f 	bl	800248c <HAL_Delay>

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006458:	b084      	sub	sp, #16
 800645a:	b580      	push	{r7, lr}
 800645c:	b086      	sub	sp, #24
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006472:	2300      	movs	r3, #0
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	e009      	b.n	800648c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	3340      	adds	r3, #64	; 0x40
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	2200      	movs	r2, #0
 8006484:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	3301      	adds	r3, #1
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2b0e      	cmp	r3, #14
 8006490:	d9f2      	bls.n	8006478 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11c      	bne.n	80064d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064a6:	f043 0302 	orr.w	r3, r3, #2
 80064aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
 80064d0:	e00b      	b.n	80064ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064f0:	461a      	mov	r2, r3
 80064f2:	2300      	movs	r3, #0
 80064f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fc:	4619      	mov	r1, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006504:	461a      	mov	r2, r3
 8006506:	680b      	ldr	r3, [r1, #0]
 8006508:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	2b01      	cmp	r3, #1
 800650e:	d10c      	bne.n	800652a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006516:	2100      	movs	r1, #0
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f949 	bl	80067b0 <USB_SetDevSpeed>
 800651e:	e008      	b.n	8006532 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006520:	2101      	movs	r1, #1
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f944 	bl	80067b0 <USB_SetDevSpeed>
 8006528:	e003      	b.n	8006532 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800652a:	2103      	movs	r1, #3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f93f 	bl	80067b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006532:	2110      	movs	r1, #16
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f8f3 	bl	8006720 <USB_FlushTxFifo>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f911 	bl	800676c <USB_FlushRxFifo>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655a:	461a      	mov	r2, r3
 800655c:	2300      	movs	r3, #0
 800655e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	461a      	mov	r2, r3
 8006568:	2300      	movs	r3, #0
 800656a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	461a      	mov	r2, r3
 8006574:	2300      	movs	r3, #0
 8006576:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006578:	2300      	movs	r3, #0
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	e043      	b.n	8006606 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006594:	d118      	bne.n	80065c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a8:	461a      	mov	r2, r3
 80065aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	e013      	b.n	80065da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065be:	461a      	mov	r2, r3
 80065c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	e008      	b.n	80065da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d4:	461a      	mov	r2, r3
 80065d6:	2300      	movs	r3, #0
 80065d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e6:	461a      	mov	r2, r3
 80065e8:	2300      	movs	r3, #0
 80065ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f8:	461a      	mov	r2, r3
 80065fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	3301      	adds	r3, #1
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	429a      	cmp	r2, r3
 800660c:	d3b7      	bcc.n	800657e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800660e:	2300      	movs	r3, #0
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	e043      	b.n	800669c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800662a:	d118      	bne.n	800665e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663e:	461a      	mov	r2, r3
 8006640:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e013      	b.n	8006670 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006654:	461a      	mov	r2, r3
 8006656:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	e008      	b.n	8006670 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666a:	461a      	mov	r2, r3
 800666c:	2300      	movs	r3, #0
 800666e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	461a      	mov	r2, r3
 800667e:	2300      	movs	r3, #0
 8006680:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	461a      	mov	r2, r3
 8006690:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006694:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	3301      	adds	r3, #1
 800669a:	613b      	str	r3, [r7, #16]
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d3b7      	bcc.n	8006614 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d105      	bne.n	80066d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	f043 0210 	orr.w	r2, r3, #16
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <USB_DevInit+0x2c4>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	f043 0208 	orr.w	r2, r3, #8
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d107      	bne.n	800670c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006704:	f043 0304 	orr.w	r3, r3, #4
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006718:	b004      	add	sp, #16
 800671a:	4770      	bx	lr
 800671c:	803c3800 	.word	0x803c3800

08006720 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	019b      	lsls	r3, r3, #6
 8006732:	f043 0220 	orr.w	r2, r3, #32
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3301      	adds	r3, #1
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4a09      	ldr	r2, [pc, #36]	; (8006768 <USB_FlushTxFifo+0x48>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d901      	bls.n	800674c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e006      	b.n	800675a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b20      	cmp	r3, #32
 8006756:	d0f0      	beq.n	800673a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	00030d40 	.word	0x00030d40

0800676c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2210      	movs	r2, #16
 800677c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3301      	adds	r3, #1
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a09      	ldr	r2, [pc, #36]	; (80067ac <USB_FlushRxFifo+0x40>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d901      	bls.n	8006790 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e006      	b.n	800679e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b10      	cmp	r3, #16
 800679a:	d0f0      	beq.n	800677e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	00030d40 	.word	0x00030d40

080067b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	68f9      	ldr	r1, [r7, #12]
 80067cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d0:	4313      	orrs	r3, r2
 80067d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b087      	sub	sp, #28
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 0306 	and.w	r3, r3, #6
 80067fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d102      	bne.n	8006808 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006802:	2300      	movs	r3, #0
 8006804:	75fb      	strb	r3, [r7, #23]
 8006806:	e00a      	b.n	800681e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d002      	beq.n	8006814 <USB_GetDevSpeed+0x32>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b06      	cmp	r3, #6
 8006812:	d102      	bne.n	800681a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006814:	2302      	movs	r3, #2
 8006816:	75fb      	strb	r3, [r7, #23]
 8006818:	e001      	b.n	800681e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800681a:	230f      	movs	r3, #15
 800681c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d13a      	bne.n	80068be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	2101      	movs	r1, #1
 800685a:	fa01 f303 	lsl.w	r3, r1, r3
 800685e:	b29b      	uxth	r3, r3
 8006860:	68f9      	ldr	r1, [r7, #12]
 8006862:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006866:	4313      	orrs	r3, r2
 8006868:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d155      	bne.n	800692c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	78db      	ldrb	r3, [r3, #3]
 800689a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800689c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	059b      	lsls	r3, r3, #22
 80068a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068a4:	4313      	orrs	r3, r2
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	e036      	b.n	800692c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c4:	69da      	ldr	r2, [r3, #28]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	2101      	movs	r1, #1
 80068d0:	fa01 f303 	lsl.w	r3, r1, r3
 80068d4:	041b      	lsls	r3, r3, #16
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068dc:	4313      	orrs	r3, r2
 80068de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d11a      	bne.n	800692c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	78db      	ldrb	r3, [r3, #3]
 8006910:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006912:	430b      	orrs	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	0151      	lsls	r1, r2, #5
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	440a      	add	r2, r1
 800691e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
	...

0800693c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d161      	bne.n	8006a1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800696a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800696e:	d11f      	bne.n	80069b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800698e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	f003 030f 	and.w	r3, r3, #15
 80069c0:	2101      	movs	r1, #1
 80069c2:	fa01 f303 	lsl.w	r3, r1, r3
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	43db      	mvns	r3, r3
 80069ca:	68f9      	ldr	r1, [r7, #12]
 80069cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069d0:	4013      	ands	r3, r2
 80069d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	43db      	mvns	r3, r3
 80069ee:	68f9      	ldr	r1, [r7, #12]
 80069f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069f4:	4013      	ands	r3, r2
 80069f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	0159      	lsls	r1, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	440b      	add	r3, r1
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a12:	4619      	mov	r1, r3
 8006a14:	4b35      	ldr	r3, [pc, #212]	; (8006aec <USB_DeactivateEndpoint+0x1b0>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	600b      	str	r3, [r1, #0]
 8006a1a:	e060      	b.n	8006ade <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a32:	d11f      	bne.n	8006a74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	0151      	lsls	r1, r2, #5
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	440a      	add	r2, r1
 8006a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	f003 030f 	and.w	r3, r3, #15
 8006a84:	2101      	movs	r1, #1
 8006a86:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8a:	041b      	lsls	r3, r3, #16
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a94:	4013      	ands	r3, r2
 8006a96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	68f9      	ldr	r1, [r7, #12]
 8006ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ab8:	4013      	ands	r3, r2
 8006aba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	0159      	lsls	r1, r3, #5
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	440b      	add	r3, r1
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <USB_DeactivateEndpoint+0x1b4>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	ec337800 	.word	0xec337800
 8006af0:	eff37800 	.word	0xeff37800

08006af4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	; 0x28
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	4613      	mov	r3, r2
 8006b00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	f040 815c 	bne.w	8006dce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d132      	bne.n	8006b84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	69fa      	ldr	r2, [r7, #28]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b7c:	0cdb      	lsrs	r3, r3, #19
 8006b7e:	04db      	lsls	r3, r3, #19
 8006b80:	6113      	str	r3, [r2, #16]
 8006b82:	e074      	b.n	8006c6e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9e:	0cdb      	lsrs	r3, r3, #19
 8006ba0:	04db      	lsls	r3, r3, #19
 8006ba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	6959      	ldr	r1, [r3, #20]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	440b      	add	r3, r1
 8006be0:	1e59      	subs	r1, r3, #1
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bea:	04d9      	lsls	r1, r3, #19
 8006bec:	4b9d      	ldr	r3, [pc, #628]	; (8006e64 <USB_EPStartXfer+0x370>)
 8006bee:	400b      	ands	r3, r1
 8006bf0:	69b9      	ldr	r1, [r7, #24]
 8006bf2:	0148      	lsls	r0, r1, #5
 8006bf4:	69f9      	ldr	r1, [r7, #28]
 8006bf6:	4401      	add	r1, r0
 8006bf8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c16:	69b9      	ldr	r1, [r7, #24]
 8006c18:	0148      	lsls	r0, r1, #5
 8006c1a:	69f9      	ldr	r1, [r7, #28]
 8006c1c:	4401      	add	r1, r0
 8006c1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c22:	4313      	orrs	r3, r2
 8006c24:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	78db      	ldrb	r3, [r3, #3]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d11f      	bne.n	8006c6e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c48:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c4c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c6c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d14b      	bne.n	8006d0c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d009      	beq.n	8006c90 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c88:	461a      	mov	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	78db      	ldrb	r3, [r3, #3]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d128      	bne.n	8006cea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d110      	bne.n	8006cca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	0151      	lsls	r1, r2, #5
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	e00f      	b.n	8006cea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	69fa      	ldr	r2, [r7, #28]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	69fa      	ldr	r2, [r7, #28]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	e12f      	b.n	8006f6c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	78db      	ldrb	r3, [r3, #3]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d015      	beq.n	8006d60 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8117 	beq.w	8006f6c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	2101      	movs	r1, #1
 8006d50:	fa01 f303 	lsl.w	r3, r1, r3
 8006d54:	69f9      	ldr	r1, [r7, #28]
 8006d56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	634b      	str	r3, [r1, #52]	; 0x34
 8006d5e:	e105      	b.n	8006f6c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d110      	bne.n	8006d92 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	0151      	lsls	r1, r2, #5
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	440a      	add	r2, r1
 8006d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	e00f      	b.n	8006db2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	68d9      	ldr	r1, [r3, #12]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	781a      	ldrb	r2, [r3, #0]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	b298      	uxth	r0, r3
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fa2b 	bl	8007222 <USB_WritePacket>
 8006dcc:	e0ce      	b.n	8006f6c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006de8:	0cdb      	lsrs	r3, r3, #19
 8006dea:	04db      	lsls	r3, r3, #19
 8006dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d126      	bne.n	8006e68 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e30:	69b9      	ldr	r1, [r7, #24]
 8006e32:	0148      	lsls	r0, r1, #5
 8006e34:	69f9      	ldr	r1, [r7, #28]
 8006e36:	4401      	add	r1, r0
 8006e38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e5e:	6113      	str	r3, [r2, #16]
 8006e60:	e036      	b.n	8006ed0 <USB_EPStartXfer+0x3dc>
 8006e62:	bf00      	nop
 8006e64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4413      	add	r3, r2
 8006e72:	1e5a      	subs	r2, r3, #1
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8a:	691a      	ldr	r2, [r3, #16]
 8006e8c:	8afb      	ldrh	r3, [r7, #22]
 8006e8e:	04d9      	lsls	r1, r3, #19
 8006e90:	4b39      	ldr	r3, [pc, #228]	; (8006f78 <USB_EPStartXfer+0x484>)
 8006e92:	400b      	ands	r3, r1
 8006e94:	69b9      	ldr	r1, [r7, #24]
 8006e96:	0148      	lsls	r0, r1, #5
 8006e98:	69f9      	ldr	r1, [r7, #28]
 8006e9a:	4401      	add	r1, r0
 8006e9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb0:	691a      	ldr	r2, [r3, #16]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	8af9      	ldrh	r1, [r7, #22]
 8006eb8:	fb01 f303 	mul.w	r3, r1, r3
 8006ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ec0:	69b9      	ldr	r1, [r7, #24]
 8006ec2:	0148      	lsls	r0, r1, #5
 8006ec4:	69f9      	ldr	r1, [r7, #28]
 8006ec6:	4401      	add	r1, r0
 8006ec8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d10d      	bne.n	8006ef2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d009      	beq.n	8006ef2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	68d9      	ldr	r1, [r3, #12]
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eee:	460a      	mov	r2, r1
 8006ef0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	78db      	ldrb	r3, [r3, #3]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d128      	bne.n	8006f4c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d110      	bne.n	8006f2c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	e00f      	b.n	8006f4c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	0151      	lsls	r1, r2, #5
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	440a      	add	r2, r1
 8006f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3720      	adds	r7, #32
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	1ff80000 	.word	0x1ff80000

08006f7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	f040 80cd 	bne.w	8007138 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d132      	bne.n	800700c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	0151      	lsls	r1, r2, #5
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fe8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007004:	0cdb      	lsrs	r3, r3, #19
 8007006:	04db      	lsls	r3, r3, #19
 8007008:	6113      	str	r3, [r2, #16]
 800700a:	e04e      	b.n	80070aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	0151      	lsls	r1, r2, #5
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	440a      	add	r2, r1
 8007022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007026:	0cdb      	lsrs	r3, r3, #19
 8007028:	04db      	lsls	r3, r3, #19
 800702a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	440a      	add	r2, r1
 8007042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007046:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800704a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800704e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	429a      	cmp	r2, r3
 800705a:	d903      	bls.n	8007064 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007082:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007090:	691a      	ldr	r2, [r3, #16]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800709a:	6939      	ldr	r1, [r7, #16]
 800709c:	0148      	lsls	r0, r1, #5
 800709e:	6979      	ldr	r1, [r7, #20]
 80070a0:	4401      	add	r1, r0
 80070a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070a6:	4313      	orrs	r3, r2
 80070a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d11e      	bne.n	80070ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d009      	beq.n	80070cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	461a      	mov	r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	e092      	b.n	8007214 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	0151      	lsls	r1, r2, #5
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	440a      	add	r2, r1
 8007104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007108:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800710c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d07e      	beq.n	8007214 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	2101      	movs	r1, #1
 8007128:	fa01 f303 	lsl.w	r3, r1, r3
 800712c:	6979      	ldr	r1, [r7, #20]
 800712e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007132:	4313      	orrs	r3, r2
 8007134:	634b      	str	r3, [r1, #52]	; 0x34
 8007136:	e06d      	b.n	8007214 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007152:	0cdb      	lsrs	r3, r3, #19
 8007154:	04db      	lsls	r3, r3, #19
 8007156:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	440a      	add	r2, r1
 800716e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007172:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007176:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800717a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b8:	691a      	ldr	r2, [r3, #16]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c2:	6939      	ldr	r1, [r7, #16]
 80071c4:	0148      	lsls	r0, r1, #5
 80071c6:	6979      	ldr	r1, [r7, #20]
 80071c8:	4401      	add	r1, r0
 80071ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071ce:	4313      	orrs	r3, r2
 80071d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80071d2:	79fb      	ldrb	r3, [r7, #7]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d10d      	bne.n	80071f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d009      	beq.n	80071f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	68d9      	ldr	r1, [r3, #12]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f0:	460a      	mov	r2, r1
 80071f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	440a      	add	r2, r1
 800720a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007212:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007222:	b480      	push	{r7}
 8007224:	b089      	sub	sp, #36	; 0x24
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	4611      	mov	r1, r2
 800722e:	461a      	mov	r2, r3
 8007230:	460b      	mov	r3, r1
 8007232:	71fb      	strb	r3, [r7, #7]
 8007234:	4613      	mov	r3, r2
 8007236:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007240:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007244:	2b00      	cmp	r3, #0
 8007246:	d11a      	bne.n	800727e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007248:	88bb      	ldrh	r3, [r7, #4]
 800724a:	3303      	adds	r3, #3
 800724c:	089b      	lsrs	r3, r3, #2
 800724e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007250:	2300      	movs	r3, #0
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	e00f      	b.n	8007276 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	031a      	lsls	r2, r3, #12
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	4413      	add	r3, r2
 800725e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007262:	461a      	mov	r2, r3
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6013      	str	r3, [r2, #0]
      pSrc++;
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	3304      	adds	r3, #4
 800726e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	3301      	adds	r3, #1
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	429a      	cmp	r2, r3
 800727c:	d3eb      	bcc.n	8007256 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3724      	adds	r7, #36	; 0x24
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800728c:	b480      	push	{r7}
 800728e:	b089      	sub	sp, #36	; 0x24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	3303      	adds	r3, #3
 80072a6:	089b      	lsrs	r3, r3, #2
 80072a8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80072aa:	2300      	movs	r3, #0
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	e00b      	b.n	80072c8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	3304      	adds	r3, #4
 80072c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	3301      	adds	r3, #1
 80072c6:	61bb      	str	r3, [r7, #24]
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d3ef      	bcc.n	80072b0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80072d0:	69fb      	ldr	r3, [r7, #28]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3724      	adds	r7, #36	; 0x24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072de:	b480      	push	{r7}
 80072e0:	b085      	sub	sp, #20
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	785b      	ldrb	r3, [r3, #1]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d12c      	bne.n	8007354 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	db12      	blt.n	8007332 <USB_EPSetStall+0x54>
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00f      	beq.n	8007332 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	0151      	lsls	r1, r2, #5
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	440a      	add	r2, r1
 8007328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007330:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	0151      	lsls	r1, r2, #5
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	440a      	add	r2, r1
 8007348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	e02b      	b.n	80073ac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	db12      	blt.n	800738c <USB_EPSetStall+0xae>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00f      	beq.n	800738c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	440a      	add	r2, r1
 8007382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800738a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d128      	bne.n	8007428 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	0151      	lsls	r1, r2, #5
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	440a      	add	r2, r1
 80073ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	78db      	ldrb	r3, [r3, #3]
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d003      	beq.n	8007406 <USB_EPClearStall+0x4c>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	78db      	ldrb	r3, [r3, #3]
 8007402:	2b02      	cmp	r3, #2
 8007404:	d138      	bne.n	8007478 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	e027      	b.n	8007478 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007446:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	78db      	ldrb	r3, [r3, #3]
 800744c:	2b03      	cmp	r3, #3
 800744e:	d003      	beq.n	8007458 <USB_EPClearStall+0x9e>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	78db      	ldrb	r3, [r3, #3]
 8007454:	2b02      	cmp	r3, #2
 8007456:	d10f      	bne.n	8007478 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	0151      	lsls	r1, r2, #5
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	440a      	add	r2, r1
 800746e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007476:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007486:	b480      	push	{r7}
 8007488:	b085      	sub	sp, #20
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80074a8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074c0:	4313      	orrs	r3, r2
 80074c2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ec:	f023 0303 	bic.w	r3, r3, #3
 80074f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007500:	f023 0302 	bic.w	r3, r3, #2
 8007504:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800752e:	f023 0303 	bic.w	r3, r3, #3
 8007532:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007542:	f043 0302 	orr.w	r3, r3, #2
 8007546:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007556:	b480      	push	{r7}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4013      	ands	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800756e:	68fb      	ldr	r3, [r7, #12]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	4013      	ands	r3, r2
 800759e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	0c1b      	lsrs	r3, r3, #16
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	4013      	ands	r3, r2
 80075d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	b29b      	uxth	r3, r3
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	4013      	ands	r3, r2
 8007610:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007612:	68bb      	ldr	r3, [r7, #8]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	460b      	mov	r3, r1
 800762a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007642:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	fa22 f303 	lsr.w	r3, r2, r3
 8007650:	01db      	lsls	r3, r3, #7
 8007652:	b2db      	uxtb	r3, r3
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800765a:	78fb      	ldrb	r3, [r7, #3]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4013      	ands	r3, r2
 800766c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800766e:	68bb      	ldr	r3, [r7, #8]
}
 8007670:	4618      	mov	r0, r3
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	f003 0301 	and.w	r3, r3, #1
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076b6:	f023 0307 	bic.w	r3, r3, #7
 80076ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
	...

080076e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	460b      	mov	r3, r1
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	333c      	adds	r3, #60	; 0x3c
 80076f6:	3304      	adds	r3, #4
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	4a26      	ldr	r2, [pc, #152]	; (8007798 <USB_EP0_OutStart+0xb8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d90a      	bls.n	800771a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007710:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007714:	d101      	bne.n	800771a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	e037      	b.n	800778a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007720:	461a      	mov	r2, r3
 8007722:	2300      	movs	r3, #0
 8007724:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007734:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007738:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007748:	f043 0318 	orr.w	r3, r3, #24
 800774c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007760:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007762:	7afb      	ldrb	r3, [r7, #11]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d10f      	bne.n	8007788 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776e:	461a      	mov	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007782:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007786:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	4f54300a 	.word	0x4f54300a

0800779c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3301      	adds	r3, #1
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4a13      	ldr	r2, [pc, #76]	; (8007800 <USB_CoreReset+0x64>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d901      	bls.n	80077ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e01b      	b.n	80077f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	daf2      	bge.n	80077a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f043 0201 	orr.w	r2, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3301      	adds	r3, #1
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4a09      	ldr	r2, [pc, #36]	; (8007800 <USB_CoreReset+0x64>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d901      	bls.n	80077e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e006      	b.n	80077f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d0f0      	beq.n	80077d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	00030d40 	.word	0x00030d40

08007804 <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	USBD_HID_HandleTypeDef *hhid;

	hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007810:	2010      	movs	r0, #16
 8007812:	f001 fee3 	bl	80095dc <malloc>
 8007816:	4603      	mov	r3, r0
 8007818:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d105      	bne.n	800782c <USBD_HID_Init+0x28>
	{
		pdev->pClassData = NULL;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		return (uint8_t)USBD_EMEM;
 8007828:	2302      	movs	r3, #2
 800782a:	e01b      	b.n	8007864 <USBD_HID_Init+0x60>
	}

	pdev->pClassData = (void *)hhid;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7c1b      	ldrb	r3, [r3, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d103      	bne.n	8007844 <USBD_HID_Init+0x40>
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2207      	movs	r2, #7
 8007840:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007842:	e002      	b.n	800784a <USBD_HID_Init+0x46>
	}
	else   /* LOW and FULL-speed endpoints */
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	220a      	movs	r2, #10
 8007848:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	/* Open EP IN */
	(void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800784a:	2304      	movs	r3, #4
 800784c:	2203      	movs	r2, #3
 800784e:	2181      	movs	r1, #129	; 0x81
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 fd5c 	bl	800930e <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	871a      	strh	r2, [r3, #56]	; 0x38

	hhid->state = HID_IDLE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_HID_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	/* Close HID EPs */
	(void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007878:	2181      	movs	r1, #129	; 0x81
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 fd6d 	bl	800935a <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	871a      	strh	r2, [r3, #56]	; 0x38
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	875a      	strh	r2, [r3, #58]	; 0x3a

	/* FRee allocated memory */
	if (pdev->pClassData != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007892:	2b00      	cmp	r3, #0
 8007894:	d009      	beq.n	80078aa <USBD_HID_DeInit+0x3e>
	{
		(void)USBD_free(pdev->pClassData);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800789c:	4618      	mov	r0, r3
 800789e:	f001 fea5 	bl	80095ec <free>
		pdev->pClassData = NULL;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t)USBD_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078c4:	60fb      	str	r3, [r7, #12]
	USBD_StatusTypeDef ret = USBD_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	817b      	strh	r3, [r7, #10]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d045      	beq.n	8007966 <USBD_HID_Setup+0xb2>
 80078da:	2b20      	cmp	r3, #32
 80078dc:	f040 80d4 	bne.w	8007a88 <USBD_HID_Setup+0x1d4>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	785b      	ldrb	r3, [r3, #1]
 80078e4:	3b02      	subs	r3, #2
 80078e6:	2b09      	cmp	r3, #9
 80078e8:	d835      	bhi.n	8007956 <USBD_HID_Setup+0xa2>
 80078ea:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <USBD_HID_Setup+0x3c>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	08007947 	.word	0x08007947
 80078f4:	08007927 	.word	0x08007927
 80078f8:	08007957 	.word	0x08007957
 80078fc:	08007957 	.word	0x08007957
 8007900:	08007957 	.word	0x08007957
 8007904:	08007957 	.word	0x08007957
 8007908:	08007957 	.word	0x08007957
 800790c:	08007957 	.word	0x08007957
 8007910:	08007935 	.word	0x08007935
 8007914:	08007919 	.word	0x08007919
		{
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	885b      	ldrh	r3, [r3, #2]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	601a      	str	r2, [r3, #0]
			break;
 8007924:	e01e      	b.n	8007964 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 f9b4 	bl	8008c9a <USBD_CtlSendData>
			break;
 8007932:	e017      	b.n	8007964 <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	885b      	ldrh	r3, [r3, #2]
 8007938:	0a1b      	lsrs	r3, r3, #8
 800793a:	b29b      	uxth	r3, r3
 800793c:	b2db      	uxtb	r3, r3
 800793e:	461a      	mov	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	605a      	str	r2, [r3, #4]
			break;
 8007944:	e00e      	b.n	8007964 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3304      	adds	r3, #4
 800794a:	2201      	movs	r2, #1
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 f9a3 	bl	8008c9a <USBD_CtlSendData>
			break;
 8007954:	e006      	b.n	8007964 <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f001 f92d 	bl	8008bb8 <USBD_CtlError>
			ret = USBD_FAIL;
 800795e:	2303      	movs	r3, #3
 8007960:	75fb      	strb	r3, [r7, #23]
			break;
 8007962:	bf00      	nop
		}
		break;
 8007964:	e097      	b.n	8007a96 <USBD_HID_Setup+0x1e2>
		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	785b      	ldrb	r3, [r3, #1]
 800796a:	2b0b      	cmp	r3, #11
 800796c:	f200 8083 	bhi.w	8007a76 <USBD_HID_Setup+0x1c2>
 8007970:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <USBD_HID_Setup+0xc4>)
 8007972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007976:	bf00      	nop
 8007978:	080079a9 	.word	0x080079a9
 800797c:	08007a85 	.word	0x08007a85
 8007980:	08007a77 	.word	0x08007a77
 8007984:	08007a77 	.word	0x08007a77
 8007988:	08007a77 	.word	0x08007a77
 800798c:	08007a77 	.word	0x08007a77
 8007990:	080079d1 	.word	0x080079d1
 8007994:	08007a77 	.word	0x08007a77
 8007998:	08007a77 	.word	0x08007a77
 800799c:	08007a77 	.word	0x08007a77
 80079a0:	08007a29 	.word	0x08007a29
 80079a4:	08007a51 	.word	0x08007a51
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d107      	bne.n	80079c2 <USBD_HID_Setup+0x10e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80079b2:	f107 030a 	add.w	r3, r7, #10
 80079b6:	2202      	movs	r2, #2
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 f96d 	bl	8008c9a <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 80079c0:	e061      	b.n	8007a86 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 f8f7 	bl	8008bb8 <USBD_CtlError>
					ret = USBD_FAIL;
 80079ca:	2303      	movs	r3, #3
 80079cc:	75fb      	strb	r3, [r7, #23]
				break;
 80079ce:	e05a      	b.n	8007a86 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_DESCRIPTOR:
				if ((req->wValue >> 8) == HID_REPORT_DESC)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	885b      	ldrh	r3, [r3, #2]
 80079d4:	0a1b      	lsrs	r3, r3, #8
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b22      	cmp	r3, #34	; 0x22
 80079da:	d108      	bne.n	80079ee <USBD_HID_Setup+0x13a>
				{
					len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	88db      	ldrh	r3, [r3, #6]
 80079e0:	2b3f      	cmp	r3, #63	; 0x3f
 80079e2:	bf28      	it	cs
 80079e4:	233f      	movcs	r3, #63	; 0x3f
 80079e6:	82bb      	strh	r3, [r7, #20]
					pbuf = HID_MOUSE_ReportDesc;
 80079e8:	4b2d      	ldr	r3, [pc, #180]	; (8007aa0 <USBD_HID_Setup+0x1ec>)
 80079ea:	613b      	str	r3, [r7, #16]
 80079ec:	e015      	b.n	8007a1a <USBD_HID_Setup+0x166>
				}
				else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	885b      	ldrh	r3, [r3, #2]
 80079f2:	0a1b      	lsrs	r3, r3, #8
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b21      	cmp	r3, #33	; 0x21
 80079f8:	d108      	bne.n	8007a0c <USBD_HID_Setup+0x158>
				{
					pbuf = USBD_HID_Desc;
 80079fa:	4b2a      	ldr	r3, [pc, #168]	; (8007aa4 <USBD_HID_Setup+0x1f0>)
 80079fc:	613b      	str	r3, [r7, #16]
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	88db      	ldrh	r3, [r3, #6]
 8007a02:	2b09      	cmp	r3, #9
 8007a04:	bf28      	it	cs
 8007a06:	2309      	movcs	r3, #9
 8007a08:	82bb      	strh	r3, [r7, #20]
 8007a0a:	e006      	b.n	8007a1a <USBD_HID_Setup+0x166>
				}
				else
				{
					USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 f8d2 	bl	8008bb8 <USBD_CtlError>
					ret = USBD_FAIL;
 8007a14:	2303      	movs	r3, #3
 8007a16:	75fb      	strb	r3, [r7, #23]
					break;
 8007a18:	e035      	b.n	8007a86 <USBD_HID_Setup+0x1d2>
				}
				(void)USBD_CtlSendData(pdev, pbuf, len);
 8007a1a:	8abb      	ldrh	r3, [r7, #20]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6939      	ldr	r1, [r7, #16]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 f93a 	bl	8008c9a <USBD_CtlSendData>
				break;
 8007a26:	e02e      	b.n	8007a86 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d107      	bne.n	8007a42 <USBD_HID_Setup+0x18e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3308      	adds	r3, #8
 8007a36:	2201      	movs	r2, #1
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 f92d 	bl	8008c9a <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8007a40:	e021      	b.n	8007a86 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 f8b7 	bl	8008bb8 <USBD_CtlError>
					ret = USBD_FAIL;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	75fb      	strb	r3, [r7, #23]
				break;
 8007a4e:	e01a      	b.n	8007a86 <USBD_HID_Setup+0x1d2>

			case USB_REQ_SET_INTERFACE:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d106      	bne.n	8007a68 <USBD_HID_Setup+0x1b4>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	461a      	mov	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	609a      	str	r2, [r3, #8]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8007a66:	e00e      	b.n	8007a86 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f001 f8a4 	bl	8008bb8 <USBD_CtlError>
					ret = USBD_FAIL;
 8007a70:	2303      	movs	r3, #3
 8007a72:	75fb      	strb	r3, [r7, #23]
				break;
 8007a74:	e007      	b.n	8007a86 <USBD_HID_Setup+0x1d2>

			case USB_REQ_CLEAR_FEATURE:
				break;

			default:
				USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f89d 	bl	8008bb8 <USBD_CtlError>
				ret = USBD_FAIL;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	75fb      	strb	r3, [r7, #23]
				break;
 8007a82:	e000      	b.n	8007a86 <USBD_HID_Setup+0x1d2>
				break;
 8007a84:	bf00      	nop
			}
			break;
 8007a86:	e006      	b.n	8007a96 <USBD_HID_Setup+0x1e2>

			default:
				USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 f894 	bl	8008bb8 <USBD_CtlError>
				ret = USBD_FAIL;
 8007a90:	2303      	movs	r3, #3
 8007a92:	75fb      	strb	r3, [r7, #23]
				break;
 8007a94:	bf00      	nop
	}

	return (uint8_t)ret;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20000168 	.word	0x20000168
 8007aa4:	20000150 	.word	0x20000150

08007aa8 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	80fb      	strh	r3, [r7, #6]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007abc:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d10c      	bne.n	8007ae2 <USBD_HID_SendReport+0x3a>
	{
		if (hhid->state == HID_IDLE)
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	7b1b      	ldrb	r3, [r3, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d108      	bne.n	8007ae2 <USBD_HID_SendReport+0x3a>
		{
			hhid->state = HID_BUSY;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	731a      	strb	r2, [r3, #12]
			(void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007ad6:	88fb      	ldrh	r3, [r7, #6]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	2181      	movs	r1, #129	; 0x81
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f001 fce4 	bl	80094aa <USBD_LL_Transmit>
		}
	}

	return (uint8_t)USBD_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2222      	movs	r2, #34	; 0x22
 8007af8:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgFSDesc;
 8007afa:	4b03      	ldr	r3, [pc, #12]	; (8007b08 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	200000e4 	.word	0x200000e4

08007b0c <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2222      	movs	r2, #34	; 0x22
 8007b18:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgHSDesc;
 8007b1a:	4b03      	ldr	r3, [pc, #12]	; (8007b28 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	20000108 	.word	0x20000108

08007b2c <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2222      	movs	r2, #34	; 0x22
 8007b38:	801a      	strh	r2, [r3, #0]

	return USBD_HID_OtherSpeedCfgDesc;
 8007b3a:	4b03      	ldr	r3, [pc, #12]	; (8007b48 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	2000012c 	.word	0x2000012c

08007b4c <USBD_HID_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
	UNUSED(epnum);
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b5e:	2200      	movs	r2, #0
 8007b60:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	220a      	movs	r2, #10
 8007b7c:	801a      	strh	r2, [r3, #0]

	return USBD_HID_DeviceQualifierDesc;
 8007b7e:	4b03      	ldr	r3, [pc, #12]	; (8007b8c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	2000015c 	.word	0x2000015c

08007b90 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e025      	b.n	8007bf4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	79fa      	ldrb	r2, [r7, #7]
 8007be6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f001 fb29 	bl	8009240 <USBD_LL_Init>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e010      	b.n	8007c36 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c24:	f107 020e 	add.w	r2, r7, #14
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f001 fb46 	bl	80092d8 <USBD_LL_Start>
 8007c4c:	4603      	mov	r3, r0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d009      	beq.n	8007c9a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	78fa      	ldrb	r2, [r7, #3]
 8007c90:	4611      	mov	r1, r2
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	4798      	blx	r3
 8007c96:	4603      	mov	r3, r0
 8007c98:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d007      	beq.n	8007cca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
  }

  return USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 ff2c 	bl	8008b44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d00e      	beq.n	8007d2e <USBD_LL_SetupStage+0x5a>
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d302      	bcc.n	8007d1a <USBD_LL_SetupStage+0x46>
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d014      	beq.n	8007d42 <USBD_LL_SetupStage+0x6e>
 8007d18:	e01d      	b.n	8007d56 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa18 	bl	8008158 <USBD_StdDevReq>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d2c:	e020      	b.n	8007d70 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa7c 	bl	8008234 <USBD_StdItfReq>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d40:	e016      	b.n	8007d70 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fab8 	bl	80082c0 <USBD_StdEPReq>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
      break;
 8007d54:	e00c      	b.n	8007d70 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 fb17 	bl	8009398 <USBD_LL_StallEP>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d6e:	bf00      	nop
  }

  return ret;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b086      	sub	sp, #24
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	460b      	mov	r3, r1
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d137      	bne.n	8007dfe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d14a      	bne.n	8007e36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d913      	bls.n	8007dd4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	1ad2      	subs	r2, r2, r3
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	bf28      	it	cs
 8007dc6:	4613      	movcs	r3, r2
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 ff90 	bl	8008cf2 <USBD_CtlContinueRx>
 8007dd2:	e030      	b.n	8007e36 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d105      	bne.n	8007df6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 ff8c 	bl	8008d14 <USBD_CtlSendStatus>
 8007dfc:	e01b      	b.n	8007e36 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d013      	beq.n	8007e32 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d10e      	bne.n	8007e32 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	7afa      	ldrb	r2, [r7, #11]
 8007e1e:	4611      	mov	r1, r2
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	4798      	blx	r3
 8007e24:	4603      	mov	r3, r0
 8007e26:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	e002      	b.n	8007e38 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e000      	b.n	8007e38 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d16a      	bne.n	8007f2a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3314      	adds	r3, #20
 8007e58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d155      	bne.n	8007f10 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d914      	bls.n	8007e9a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	1ad2      	subs	r2, r2, r3
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	461a      	mov	r2, r3
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 ff22 	bl	8008cd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f001 fb2a 	bl	80094ec <USBD_LL_PrepareReceive>
 8007e98:	e03a      	b.n	8007f10 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d11c      	bne.n	8007ee0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d316      	bcc.n	8007ee0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d20f      	bcs.n	8007ee0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 ff03 	bl	8008cd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f001 fb07 	bl	80094ec <USBD_LL_PrepareReceive>
 8007ede:	e017      	b.n	8007f10 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d105      	bne.n	8007f02 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f02:	2180      	movs	r1, #128	; 0x80
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f001 fa47 	bl	8009398 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 ff15 	bl	8008d3a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d123      	bne.n	8007f62 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f7ff fe9b 	bl	8007c56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f28:	e01b      	b.n	8007f62 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d013      	beq.n	8007f5e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d10e      	bne.n	8007f5e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	7afa      	ldrb	r2, [r7, #11]
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	4798      	blx	r3
 8007f50:	4603      	mov	r3, r0
 8007f52:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	e002      	b.n	8007f64 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e000      	b.n	8007f64 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d009      	beq.n	8007fb0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6852      	ldr	r2, [r2, #4]
 8007fa8:	b2d2      	uxtb	r2, r2
 8007faa:	4611      	mov	r1, r2
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fb0:	2340      	movs	r3, #64	; 0x40
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 f9a9 	bl	800930e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2240      	movs	r2, #64	; 0x40
 8007fc8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fcc:	2340      	movs	r3, #64	; 0x40
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2180      	movs	r1, #128	; 0x80
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 f99b 	bl	800930e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2240      	movs	r2, #64	; 0x40
 8007fe2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	78fa      	ldrb	r2, [r7, #3]
 8007ffe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2204      	movs	r2, #4
 8008026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008046:	2b04      	cmp	r3, #4
 8008048:	d105      	bne.n	8008056 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008072:	2b03      	cmp	r3, #3
 8008074:	d10b      	bne.n	800808e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	6852      	ldr	r2, [r2, #4]
 8008108:	b2d2      	uxtb	r2, r2
 800810a:	4611      	mov	r1, r2
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
  }

  return USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800811a:	b480      	push	{r7}
 800811c:	b087      	sub	sp, #28
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	3301      	adds	r3, #1
 8008130:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008138:	8a3b      	ldrh	r3, [r7, #16]
 800813a:	021b      	lsls	r3, r3, #8
 800813c:	b21a      	sxth	r2, r3
 800813e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008142:	4313      	orrs	r3, r2
 8008144:	b21b      	sxth	r3, r3
 8008146:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008148:	89fb      	ldrh	r3, [r7, #14]
}
 800814a:	4618      	mov	r0, r3
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
	...

08008158 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800816e:	2b20      	cmp	r3, #32
 8008170:	d004      	beq.n	800817c <USBD_StdDevReq+0x24>
 8008172:	2b40      	cmp	r3, #64	; 0x40
 8008174:	d002      	beq.n	800817c <USBD_StdDevReq+0x24>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <USBD_StdDevReq+0x38>
 800817a:	e050      	b.n	800821e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	4798      	blx	r3
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]
    break;
 800818e:	e04b      	b.n	8008228 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	785b      	ldrb	r3, [r3, #1]
 8008194:	2b09      	cmp	r3, #9
 8008196:	d83c      	bhi.n	8008212 <USBD_StdDevReq+0xba>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <USBD_StdDevReq+0x48>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081f5 	.word	0x080081f5
 80081a4:	08008209 	.word	0x08008209
 80081a8:	08008213 	.word	0x08008213
 80081ac:	080081ff 	.word	0x080081ff
 80081b0:	08008213 	.word	0x08008213
 80081b4:	080081d3 	.word	0x080081d3
 80081b8:	080081c9 	.word	0x080081c9
 80081bc:	08008213 	.word	0x08008213
 80081c0:	080081eb 	.word	0x080081eb
 80081c4:	080081dd 	.word	0x080081dd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f9ce 	bl	800856c <USBD_GetDescriptor>
      break;
 80081d0:	e024      	b.n	800821c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fb33 	bl	8008840 <USBD_SetAddress>
      break;
 80081da:	e01f      	b.n	800821c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fb70 	bl	80088c4 <USBD_SetConfig>
 80081e4:	4603      	mov	r3, r0
 80081e6:	73fb      	strb	r3, [r7, #15]
      break;
 80081e8:	e018      	b.n	800821c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fc0d 	bl	8008a0c <USBD_GetConfig>
      break;
 80081f2:	e013      	b.n	800821c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fc3c 	bl	8008a74 <USBD_GetStatus>
      break;
 80081fc:	e00e      	b.n	800821c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fc6a 	bl	8008ada <USBD_SetFeature>
      break;
 8008206:	e009      	b.n	800821c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fc79 	bl	8008b02 <USBD_ClrFeature>
      break;
 8008210:	e004      	b.n	800821c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fccf 	bl	8008bb8 <USBD_CtlError>
      break;
 800821a:	bf00      	nop
    }
    break;
 800821c:	e004      	b.n	8008228 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fcc9 	bl	8008bb8 <USBD_CtlError>
    break;
 8008226:	bf00      	nop
  }

  return ret;
 8008228:	7bfb      	ldrb	r3, [r7, #15]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop

08008234 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800824a:	2b20      	cmp	r3, #32
 800824c:	d003      	beq.n	8008256 <USBD_StdItfReq+0x22>
 800824e:	2b40      	cmp	r3, #64	; 0x40
 8008250:	d001      	beq.n	8008256 <USBD_StdItfReq+0x22>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d12a      	bne.n	80082ac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825c:	3b01      	subs	r3, #1
 800825e:	2b02      	cmp	r3, #2
 8008260:	d81d      	bhi.n	800829e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	889b      	ldrh	r3, [r3, #4]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b01      	cmp	r3, #1
 800826a:	d813      	bhi.n	8008294 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	4798      	blx	r3
 800827a:	4603      	mov	r3, r0
 800827c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	88db      	ldrh	r3, [r3, #6]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d110      	bne.n	80082a8 <USBD_StdItfReq+0x74>
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10d      	bne.n	80082a8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fd41 	bl	8008d14 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008292:	e009      	b.n	80082a8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fc8e 	bl	8008bb8 <USBD_CtlError>
      break;
 800829c:	e004      	b.n	80082a8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fc89 	bl	8008bb8 <USBD_CtlError>
      break;
 80082a6:	e000      	b.n	80082aa <USBD_StdItfReq+0x76>
      break;
 80082a8:	bf00      	nop
    }
    break;
 80082aa:	e004      	b.n	80082b6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fc82 	bl	8008bb8 <USBD_CtlError>
    break;
 80082b4:	bf00      	nop
  }

  return ret;
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	889b      	ldrh	r3, [r3, #4]
 80082d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082dc:	2b20      	cmp	r3, #32
 80082de:	d004      	beq.n	80082ea <USBD_StdEPReq+0x2a>
 80082e0:	2b40      	cmp	r3, #64	; 0x40
 80082e2:	d002      	beq.n	80082ea <USBD_StdEPReq+0x2a>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <USBD_StdEPReq+0x3e>
 80082e8:	e135      	b.n	8008556 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	4798      	blx	r3
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]
    break;
 80082fc:	e130      	b.n	8008560 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d03e      	beq.n	8008384 <USBD_StdEPReq+0xc4>
 8008306:	2b03      	cmp	r3, #3
 8008308:	d002      	beq.n	8008310 <USBD_StdEPReq+0x50>
 800830a:	2b00      	cmp	r3, #0
 800830c:	d077      	beq.n	80083fe <USBD_StdEPReq+0x13e>
 800830e:	e11c      	b.n	800854a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008316:	2b02      	cmp	r3, #2
 8008318:	d002      	beq.n	8008320 <USBD_StdEPReq+0x60>
 800831a:	2b03      	cmp	r3, #3
 800831c:	d015      	beq.n	800834a <USBD_StdEPReq+0x8a>
 800831e:	e02b      	b.n	8008378 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00c      	beq.n	8008340 <USBD_StdEPReq+0x80>
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b80      	cmp	r3, #128	; 0x80
 800832a:	d009      	beq.n	8008340 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 f831 	bl	8009398 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008336:	2180      	movs	r1, #128	; 0x80
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 f82d 	bl	8009398 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800833e:	e020      	b.n	8008382 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fc38 	bl	8008bb8 <USBD_CtlError>
        break;
 8008348:	e01b      	b.n	8008382 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	885b      	ldrh	r3, [r3, #2]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10e      	bne.n	8008370 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00b      	beq.n	8008370 <USBD_StdEPReq+0xb0>
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b80      	cmp	r3, #128	; 0x80
 800835c:	d008      	beq.n	8008370 <USBD_StdEPReq+0xb0>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88db      	ldrh	r3, [r3, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d104      	bne.n	8008370 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 f814 	bl	8009398 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fccf 	bl	8008d14 <USBD_CtlSendStatus>

        break;
 8008376:	e004      	b.n	8008382 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fc1c 	bl	8008bb8 <USBD_CtlError>
        break;
 8008380:	bf00      	nop
      }
      break;
 8008382:	e0e7      	b.n	8008554 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838a:	2b02      	cmp	r3, #2
 800838c:	d002      	beq.n	8008394 <USBD_StdEPReq+0xd4>
 800838e:	2b03      	cmp	r3, #3
 8008390:	d015      	beq.n	80083be <USBD_StdEPReq+0xfe>
 8008392:	e02d      	b.n	80083f0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00c      	beq.n	80083b4 <USBD_StdEPReq+0xf4>
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b80      	cmp	r3, #128	; 0x80
 800839e:	d009      	beq.n	80083b4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fff7 	bl	8009398 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80083aa:	2180      	movs	r1, #128	; 0x80
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fff3 	bl	8009398 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80083b2:	e023      	b.n	80083fc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fbfe 	bl	8008bb8 <USBD_CtlError>
        break;
 80083bc:	e01e      	b.n	80083fc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	885b      	ldrh	r3, [r3, #2]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d119      	bne.n	80083fa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fffe 	bl	80093d6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fc9a 	bl	8008d14 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	4798      	blx	r3
        }
        break;
 80083ee:	e004      	b.n	80083fa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fbe0 	bl	8008bb8 <USBD_CtlError>
        break;
 80083f8:	e000      	b.n	80083fc <USBD_StdEPReq+0x13c>
        break;
 80083fa:	bf00      	nop
      }
      break;
 80083fc:	e0aa      	b.n	8008554 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008404:	2b02      	cmp	r3, #2
 8008406:	d002      	beq.n	800840e <USBD_StdEPReq+0x14e>
 8008408:	2b03      	cmp	r3, #3
 800840a:	d032      	beq.n	8008472 <USBD_StdEPReq+0x1b2>
 800840c:	e097      	b.n	800853e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <USBD_StdEPReq+0x164>
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b80      	cmp	r3, #128	; 0x80
 8008418:	d004      	beq.n	8008424 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fbcb 	bl	8008bb8 <USBD_CtlError>
          break;
 8008422:	e091      	b.n	8008548 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008428:	2b00      	cmp	r3, #0
 800842a:	da0b      	bge.n	8008444 <USBD_StdEPReq+0x184>
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	3310      	adds	r3, #16
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	4413      	add	r3, r2
 8008440:	3304      	adds	r3, #4
 8008442:	e00b      	b.n	800845c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4413      	add	r3, r2
 800845a:	3304      	adds	r3, #4
 800845c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2202      	movs	r2, #2
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc15 	bl	8008c9a <USBD_CtlSendData>
        break;
 8008470:	e06a      	b.n	8008548 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008476:	2b00      	cmp	r3, #0
 8008478:	da11      	bge.n	800849e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	f003 020f 	and.w	r2, r3, #15
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	440b      	add	r3, r1
 800848c:	3324      	adds	r3, #36	; 0x24
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d117      	bne.n	80084c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fb8e 	bl	8008bb8 <USBD_CtlError>
            break;
 800849c:	e054      	b.n	8008548 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	f003 020f 	and.w	r2, r3, #15
 80084a4:	6879      	ldr	r1, [r7, #4]
 80084a6:	4613      	mov	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	440b      	add	r3, r1
 80084b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d104      	bne.n	80084c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fb7b 	bl	8008bb8 <USBD_CtlError>
            break;
 80084c2:	e041      	b.n	8008548 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da0b      	bge.n	80084e4 <USBD_StdEPReq+0x224>
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	3310      	adds	r3, #16
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	4413      	add	r3, r2
 80084e0:	3304      	adds	r3, #4
 80084e2:	e00b      	b.n	80084fc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	4413      	add	r3, r2
 80084fa:	3304      	adds	r3, #4
 80084fc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <USBD_StdEPReq+0x24a>
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	2b80      	cmp	r3, #128	; 0x80
 8008508:	d103      	bne.n	8008512 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	e00e      	b.n	8008530 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 ff7c 	bl	8009414 <USBD_LL_IsStallEP>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2201      	movs	r2, #1
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	e002      	b.n	8008530 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2202      	movs	r2, #2
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fbaf 	bl	8008c9a <USBD_CtlSendData>
          break;
 800853c:	e004      	b.n	8008548 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fb39 	bl	8008bb8 <USBD_CtlError>
        break;
 8008546:	bf00      	nop
      }
      break;
 8008548:	e004      	b.n	8008554 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fb33 	bl	8008bb8 <USBD_CtlError>
      break;
 8008552:	bf00      	nop
    }
    break;
 8008554:	e004      	b.n	8008560 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fb2d 	bl	8008bb8 <USBD_CtlError>
    break;
 800855e:	bf00      	nop
  }

  return ret;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	885b      	ldrh	r3, [r3, #2]
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	b29b      	uxth	r3, r3
 800858a:	3b01      	subs	r3, #1
 800858c:	2b06      	cmp	r3, #6
 800858e:	f200 8128 	bhi.w	80087e2 <USBD_GetDescriptor+0x276>
 8008592:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <USBD_GetDescriptor+0x2c>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	080085b5 	.word	0x080085b5
 800859c:	080085cd 	.word	0x080085cd
 80085a0:	0800860d 	.word	0x0800860d
 80085a4:	080087e3 	.word	0x080087e3
 80085a8:	080087e3 	.word	0x080087e3
 80085ac:	08008783 	.word	0x08008783
 80085b0:	080087af 	.word	0x080087af
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	7c12      	ldrb	r2, [r2, #16]
 80085c0:	f107 0108 	add.w	r1, r7, #8
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	60f8      	str	r0, [r7, #12]
    break;
 80085ca:	e112      	b.n	80087f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7c1b      	ldrb	r3, [r3, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10d      	bne.n	80085f0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085dc:	f107 0208 	add.w	r2, r7, #8
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
 80085e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3301      	adds	r3, #1
 80085ea:	2202      	movs	r2, #2
 80085ec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80085ee:	e100      	b.n	80087f2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	f107 0208 	add.w	r2, r7, #8
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
 8008600:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3301      	adds	r3, #1
 8008606:	2202      	movs	r2, #2
 8008608:	701a      	strb	r2, [r3, #0]
    break;
 800860a:	e0f2      	b.n	80087f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	885b      	ldrh	r3, [r3, #2]
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b05      	cmp	r3, #5
 8008614:	f200 80ac 	bhi.w	8008770 <USBD_GetDescriptor+0x204>
 8008618:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <USBD_GetDescriptor+0xb4>)
 800861a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861e:	bf00      	nop
 8008620:	08008639 	.word	0x08008639
 8008624:	0800866d 	.word	0x0800866d
 8008628:	080086a1 	.word	0x080086a1
 800862c:	080086d5 	.word	0x080086d5
 8008630:	08008709 	.word	0x08008709
 8008634:	0800873d 	.word	0x0800873d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00b      	beq.n	800865c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	7c12      	ldrb	r2, [r2, #16]
 8008650:	f107 0108 	add.w	r1, r7, #8
 8008654:	4610      	mov	r0, r2
 8008656:	4798      	blx	r3
 8008658:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800865a:	e091      	b.n	8008780 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 faaa 	bl	8008bb8 <USBD_CtlError>
        err++;
 8008664:	7afb      	ldrb	r3, [r7, #11]
 8008666:	3301      	adds	r3, #1
 8008668:	72fb      	strb	r3, [r7, #11]
      break;
 800866a:	e089      	b.n	8008780 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00b      	beq.n	8008690 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	7c12      	ldrb	r2, [r2, #16]
 8008684:	f107 0108 	add.w	r1, r7, #8
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
 800868c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800868e:	e077      	b.n	8008780 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa90 	bl	8008bb8 <USBD_CtlError>
        err++;
 8008698:	7afb      	ldrb	r3, [r7, #11]
 800869a:	3301      	adds	r3, #1
 800869c:	72fb      	strb	r3, [r7, #11]
      break;
 800869e:	e06f      	b.n	8008780 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00b      	beq.n	80086c4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	7c12      	ldrb	r2, [r2, #16]
 80086b8:	f107 0108 	add.w	r1, r7, #8
 80086bc:	4610      	mov	r0, r2
 80086be:	4798      	blx	r3
 80086c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086c2:	e05d      	b.n	8008780 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fa76 	bl	8008bb8 <USBD_CtlError>
        err++;
 80086cc:	7afb      	ldrb	r3, [r7, #11]
 80086ce:	3301      	adds	r3, #1
 80086d0:	72fb      	strb	r3, [r7, #11]
      break;
 80086d2:	e055      	b.n	8008780 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7c12      	ldrb	r2, [r2, #16]
 80086ec:	f107 0108 	add.w	r1, r7, #8
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086f6:	e043      	b.n	8008780 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa5c 	bl	8008bb8 <USBD_CtlError>
        err++;
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	3301      	adds	r3, #1
 8008704:	72fb      	strb	r3, [r7, #11]
      break;
 8008706:	e03b      	b.n	8008780 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	7c12      	ldrb	r2, [r2, #16]
 8008720:	f107 0108 	add.w	r1, r7, #8
 8008724:	4610      	mov	r0, r2
 8008726:	4798      	blx	r3
 8008728:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800872a:	e029      	b.n	8008780 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa42 	bl	8008bb8 <USBD_CtlError>
        err++;
 8008734:	7afb      	ldrb	r3, [r7, #11]
 8008736:	3301      	adds	r3, #1
 8008738:	72fb      	strb	r3, [r7, #11]
      break;
 800873a:	e021      	b.n	8008780 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	7c12      	ldrb	r2, [r2, #16]
 8008754:	f107 0108 	add.w	r1, r7, #8
 8008758:	4610      	mov	r0, r2
 800875a:	4798      	blx	r3
 800875c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800875e:	e00f      	b.n	8008780 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa28 	bl	8008bb8 <USBD_CtlError>
        err++;
 8008768:	7afb      	ldrb	r3, [r7, #11]
 800876a:	3301      	adds	r3, #1
 800876c:	72fb      	strb	r3, [r7, #11]
      break;
 800876e:	e007      	b.n	8008780 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa20 	bl	8008bb8 <USBD_CtlError>
      err++;
 8008778:	7afb      	ldrb	r3, [r7, #11]
 800877a:	3301      	adds	r3, #1
 800877c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800877e:	bf00      	nop
    }
    break;
 8008780:	e037      	b.n	80087f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	7c1b      	ldrb	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008792:	f107 0208 	add.w	r2, r7, #8
 8008796:	4610      	mov	r0, r2
 8008798:	4798      	blx	r3
 800879a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800879c:	e029      	b.n	80087f2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fa09 	bl	8008bb8 <USBD_CtlError>
      err++;
 80087a6:	7afb      	ldrb	r3, [r7, #11]
 80087a8:	3301      	adds	r3, #1
 80087aa:	72fb      	strb	r3, [r7, #11]
    break;
 80087ac:	e021      	b.n	80087f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	7c1b      	ldrb	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10d      	bne.n	80087d2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087be:	f107 0208 	add.w	r2, r7, #8
 80087c2:	4610      	mov	r0, r2
 80087c4:	4798      	blx	r3
 80087c6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3301      	adds	r3, #1
 80087cc:	2207      	movs	r2, #7
 80087ce:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80087d0:	e00f      	b.n	80087f2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f9ef 	bl	8008bb8 <USBD_CtlError>
      err++;
 80087da:	7afb      	ldrb	r3, [r7, #11]
 80087dc:	3301      	adds	r3, #1
 80087de:	72fb      	strb	r3, [r7, #11]
    break;
 80087e0:	e007      	b.n	80087f2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f9e7 	bl	8008bb8 <USBD_CtlError>
    err++;
 80087ea:	7afb      	ldrb	r3, [r7, #11]
 80087ec:	3301      	adds	r3, #1
 80087ee:	72fb      	strb	r3, [r7, #11]
    break;
 80087f0:	bf00      	nop
  }

  if (err != 0U)
 80087f2:	7afb      	ldrb	r3, [r7, #11]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d11e      	bne.n	8008836 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	88db      	ldrh	r3, [r3, #6]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d016      	beq.n	800882e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008800:	893b      	ldrh	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00e      	beq.n	8008824 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	88da      	ldrh	r2, [r3, #6]
 800880a:	893b      	ldrh	r3, [r7, #8]
 800880c:	4293      	cmp	r3, r2
 800880e:	bf28      	it	cs
 8008810:	4613      	movcs	r3, r2
 8008812:	b29b      	uxth	r3, r3
 8008814:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008816:	893b      	ldrh	r3, [r7, #8]
 8008818:	461a      	mov	r2, r3
 800881a:	68f9      	ldr	r1, [r7, #12]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fa3c 	bl	8008c9a <USBD_CtlSendData>
 8008822:	e009      	b.n	8008838 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f9c6 	bl	8008bb8 <USBD_CtlError>
 800882c:	e004      	b.n	8008838 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fa70 	bl	8008d14 <USBD_CtlSendStatus>
 8008834:	e000      	b.n	8008838 <USBD_GetDescriptor+0x2cc>
    return;
 8008836:	bf00      	nop
    }
  }
}
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop

08008840 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	889b      	ldrh	r3, [r3, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d130      	bne.n	80088b4 <USBD_SetAddress+0x74>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	88db      	ldrh	r3, [r3, #6]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d12c      	bne.n	80088b4 <USBD_SetAddress+0x74>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	885b      	ldrh	r3, [r3, #2]
 800885e:	2b7f      	cmp	r3, #127	; 0x7f
 8008860:	d828      	bhi.n	80088b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	885b      	ldrh	r3, [r3, #2]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800886c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008874:	2b03      	cmp	r3, #3
 8008876:	d104      	bne.n	8008882 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f99c 	bl	8008bb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008880:	e01c      	b.n	80088bc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	7bfa      	ldrb	r2, [r7, #15]
 8008886:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fdec 	bl	800946c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fa3d 	bl	8008d14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a8:	e008      	b.n	80088bc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b2:	e003      	b.n	80088bc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f97e 	bl	8008bb8 <USBD_CtlError>
  }
}
 80088bc:	bf00      	nop
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	885b      	ldrh	r3, [r3, #2]
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	4b4b      	ldr	r3, [pc, #300]	; (8008a08 <USBD_SetConfig+0x144>)
 80088da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088dc:	4b4a      	ldr	r3, [pc, #296]	; (8008a08 <USBD_SetConfig+0x144>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d905      	bls.n	80088f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f966 	bl	8008bb8 <USBD_CtlError>
    return USBD_FAIL;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e087      	b.n	8008a00 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d002      	beq.n	8008900 <USBD_SetConfig+0x3c>
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d025      	beq.n	800894a <USBD_SetConfig+0x86>
 80088fe:	e071      	b.n	80089e4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008900:	4b41      	ldr	r3, [pc, #260]	; (8008a08 <USBD_SetConfig+0x144>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01c      	beq.n	8008942 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008908:	4b3f      	ldr	r3, [pc, #252]	; (8008a08 <USBD_SetConfig+0x144>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008912:	4b3d      	ldr	r3, [pc, #244]	; (8008a08 <USBD_SetConfig+0x144>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7ff f9a7 	bl	8007c6c <USBD_SetClassConfig>
 800891e:	4603      	mov	r3, r0
 8008920:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d004      	beq.n	8008932 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f944 	bl	8008bb8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008930:	e065      	b.n	80089fe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f9ee 	bl	8008d14 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2203      	movs	r2, #3
 800893c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008940:	e05d      	b.n	80089fe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f9e6 	bl	8008d14 <USBD_CtlSendStatus>
    break;
 8008948:	e059      	b.n	80089fe <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800894a:	4b2f      	ldr	r3, [pc, #188]	; (8008a08 <USBD_SetConfig+0x144>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d112      	bne.n	8008978 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2202      	movs	r2, #2
 8008956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800895a:	4b2b      	ldr	r3, [pc, #172]	; (8008a08 <USBD_SetConfig+0x144>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008964:	4b28      	ldr	r3, [pc, #160]	; (8008a08 <USBD_SetConfig+0x144>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff f99a 	bl	8007ca4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f9cf 	bl	8008d14 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008976:	e042      	b.n	80089fe <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008978:	4b23      	ldr	r3, [pc, #140]	; (8008a08 <USBD_SetConfig+0x144>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	429a      	cmp	r2, r3
 8008984:	d02a      	beq.n	80089dc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff f988 	bl	8007ca4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008994:	4b1c      	ldr	r3, [pc, #112]	; (8008a08 <USBD_SetConfig+0x144>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800899e:	4b1a      	ldr	r3, [pc, #104]	; (8008a08 <USBD_SetConfig+0x144>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff f961 	bl	8007c6c <USBD_SetClassConfig>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00f      	beq.n	80089d4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f8fe 	bl	8008bb8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff f96d 	bl	8007ca4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2202      	movs	r2, #2
 80089ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80089d2:	e014      	b.n	80089fe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f99d 	bl	8008d14 <USBD_CtlSendStatus>
    break;
 80089da:	e010      	b.n	80089fe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f999 	bl	8008d14 <USBD_CtlSendStatus>
    break;
 80089e2:	e00c      	b.n	80089fe <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f8e6 	bl	8008bb8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089ec:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <USBD_SetConfig+0x144>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff f956 	bl	8007ca4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	73fb      	strb	r3, [r7, #15]
    break;
 80089fc:	bf00      	nop
  }

  return ret;
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	200006c8 	.word	0x200006c8

08008a0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	88db      	ldrh	r3, [r3, #6]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d004      	beq.n	8008a28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f8c9 	bl	8008bb8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008a26:	e021      	b.n	8008a6c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	db17      	blt.n	8008a62 <USBD_GetConfig+0x56>
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	dd02      	ble.n	8008a3c <USBD_GetConfig+0x30>
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d00b      	beq.n	8008a52 <USBD_GetConfig+0x46>
 8008a3a:	e012      	b.n	8008a62 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3308      	adds	r3, #8
 8008a46:	2201      	movs	r2, #1
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f925 	bl	8008c9a <USBD_CtlSendData>
      break;
 8008a50:	e00c      	b.n	8008a6c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3304      	adds	r3, #4
 8008a56:	2201      	movs	r2, #1
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f91d 	bl	8008c9a <USBD_CtlSendData>
      break;
 8008a60:	e004      	b.n	8008a6c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f8a7 	bl	8008bb8 <USBD_CtlError>
      break;
 8008a6a:	bf00      	nop
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a84:	3b01      	subs	r3, #1
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d81e      	bhi.n	8008ac8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	88db      	ldrh	r3, [r3, #6]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d004      	beq.n	8008a9c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f88f 	bl	8008bb8 <USBD_CtlError>
      break;
 8008a9a:	e01a      	b.n	8008ad2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d005      	beq.n	8008ab8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f043 0202 	orr.w	r2, r3, #2
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	330c      	adds	r3, #12
 8008abc:	2202      	movs	r2, #2
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f8ea 	bl	8008c9a <USBD_CtlSendData>
    break;
 8008ac6:	e004      	b.n	8008ad2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f874 	bl	8008bb8 <USBD_CtlError>
    break;
 8008ad0:	bf00      	nop
  }
}
 8008ad2:	bf00      	nop
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	885b      	ldrh	r3, [r3, #2]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d106      	bne.n	8008afa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f90d 	bl	8008d14 <USBD_CtlSendStatus>
  }
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b12:	3b01      	subs	r3, #1
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d80b      	bhi.n	8008b30 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	885b      	ldrh	r3, [r3, #2]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d10c      	bne.n	8008b3a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f8f3 	bl	8008d14 <USBD_CtlSendStatus>
      }
      break;
 8008b2e:	e004      	b.n	8008b3a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f840 	bl	8008bb8 <USBD_CtlError>
      break;
 8008b38:	e000      	b.n	8008b3c <USBD_ClrFeature+0x3a>
      break;
 8008b3a:	bf00      	nop
  }
}
 8008b3c:	bf00      	nop
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	781a      	ldrb	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	781a      	ldrb	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff fad3 	bl	800811a <SWAPBYTE>
 8008b74:	4603      	mov	r3, r0
 8008b76:	461a      	mov	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3301      	adds	r3, #1
 8008b86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f7ff fac6 	bl	800811a <SWAPBYTE>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	461a      	mov	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f7ff fab9 	bl	800811a <SWAPBYTE>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	461a      	mov	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	80da      	strh	r2, [r3, #6]
}
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bc2:	2180      	movs	r1, #128	; 0x80
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fbe7 	bl	8009398 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008bca:	2100      	movs	r1, #0
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fbe3 	bl	8009398 <USBD_LL_StallEP>
}
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b086      	sub	sp, #24
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008be6:	2300      	movs	r3, #0
 8008be8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d036      	beq.n	8008c5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bf4:	6938      	ldr	r0, [r7, #16]
 8008bf6:	f000 f836 	bl	8008c66 <USBD_GetLen>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	7812      	ldrb	r2, [r2, #0]
 8008c12:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	3301      	adds	r3, #1
 8008c18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	4413      	add	r3, r2
 8008c20:	2203      	movs	r2, #3
 8008c22:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	3301      	adds	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c2a:	e013      	b.n	8008c54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	4413      	add	r3, r2
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	7812      	ldrb	r2, [r2, #0]
 8008c36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	613b      	str	r3, [r7, #16]
    idx++;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	3301      	adds	r3, #1
 8008c42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	4413      	add	r3, r2
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	3301      	adds	r3, #1
 8008c52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e7      	bne.n	8008c2c <USBD_GetString+0x52>
 8008c5c:	e000      	b.n	8008c60 <USBD_GetString+0x86>
    return;
 8008c5e:	bf00      	nop
  }
}
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c76:	e005      	b.n	8008c84 <USBD_GetLen+0x1e>
  {
    len++;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	3301      	adds	r3, #1
 8008c82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1f5      	bne.n	8008c78 <USBD_GetLen+0x12>
  }

  return len;
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 fbf2 	bl	80094aa <USBD_LL_Transmit>

  return USBD_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 fbe1 	bl	80094aa <USBD_LL_Transmit>

  return USBD_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	60f8      	str	r0, [r7, #12]
 8008cfa:	60b9      	str	r1, [r7, #8]
 8008cfc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	2100      	movs	r1, #0
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 fbf1 	bl	80094ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2204      	movs	r2, #4
 8008d20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d24:	2300      	movs	r3, #0
 8008d26:	2200      	movs	r2, #0
 8008d28:	2100      	movs	r1, #0
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fbbd 	bl	80094aa <USBD_LL_Transmit>

  return USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2205      	movs	r2, #5
 8008d46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2100      	movs	r1, #0
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fbcb 	bl	80094ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d64:	2200      	movs	r2, #0
 8008d66:	490e      	ldr	r1, [pc, #56]	; (8008da0 <MX_USB_DEVICE_Init+0x40>)
 8008d68:	480e      	ldr	r0, [pc, #56]	; (8008da4 <MX_USB_DEVICE_Init+0x44>)
 8008d6a:	f7fe ff11 	bl	8007b90 <USBD_Init>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d74:	f7f8 f9e2 	bl	800113c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008d78:	490b      	ldr	r1, [pc, #44]	; (8008da8 <MX_USB_DEVICE_Init+0x48>)
 8008d7a:	480a      	ldr	r0, [pc, #40]	; (8008da4 <MX_USB_DEVICE_Init+0x44>)
 8008d7c:	f7fe ff3e 	bl	8007bfc <USBD_RegisterClass>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d86:	f7f8 f9d9 	bl	800113c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d8a:	4806      	ldr	r0, [pc, #24]	; (8008da4 <MX_USB_DEVICE_Init+0x44>)
 8008d8c:	f7fe ff57 	bl	8007c3e <USBD_Start>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008d96:	f7f8 f9d1 	bl	800113c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d9a:	bf00      	nop
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	200001a8 	.word	0x200001a8
 8008da4:	200009f8 	.word	0x200009f8
 8008da8:	200000ac 	.word	0x200000ac

08008dac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	6039      	str	r1, [r7, #0]
 8008db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2212      	movs	r2, #18
 8008dbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008dbe:	4b03      	ldr	r3, [pc, #12]	; (8008dcc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	200001c4 	.word	0x200001c4

08008dd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	6039      	str	r1, [r7, #0]
 8008dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	2204      	movs	r2, #4
 8008de0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008de2:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	200001d8 	.word	0x200001d8

08008df4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	6039      	str	r1, [r7, #0]
 8008dfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d105      	bne.n	8008e12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	4907      	ldr	r1, [pc, #28]	; (8008e28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e0a:	4808      	ldr	r0, [pc, #32]	; (8008e2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e0c:	f7ff fee5 	bl	8008bda <USBD_GetString>
 8008e10:	e004      	b.n	8008e1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	4904      	ldr	r1, [pc, #16]	; (8008e28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e16:	4805      	ldr	r0, [pc, #20]	; (8008e2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e18:	f7ff fedf 	bl	8008bda <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e1c:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000cc8 	.word	0x20000cc8
 8008e2c:	0800987c 	.word	0x0800987c

08008e30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	6039      	str	r1, [r7, #0]
 8008e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	4904      	ldr	r1, [pc, #16]	; (8008e50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e40:	4804      	ldr	r0, [pc, #16]	; (8008e54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e42:	f7ff feca 	bl	8008bda <USBD_GetString>
  return USBD_StrDesc;
 8008e46:	4b02      	ldr	r3, [pc, #8]	; (8008e50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000cc8 	.word	0x20000cc8
 8008e54:	08009894 	.word	0x08009894

08008e58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	6039      	str	r1, [r7, #0]
 8008e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	221a      	movs	r2, #26
 8008e68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e6a:	f000 f843 	bl	8008ef4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e6e:	4b02      	ldr	r3, [pc, #8]	; (8008e78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	200001dc 	.word	0x200001dc

08008e7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	6039      	str	r1, [r7, #0]
 8008e86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e88:	79fb      	ldrb	r3, [r7, #7]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d105      	bne.n	8008e9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	4907      	ldr	r1, [pc, #28]	; (8008eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e92:	4808      	ldr	r0, [pc, #32]	; (8008eb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e94:	f7ff fea1 	bl	8008bda <USBD_GetString>
 8008e98:	e004      	b.n	8008ea4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	4904      	ldr	r1, [pc, #16]	; (8008eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e9e:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ea0:	f7ff fe9b 	bl	8008bda <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ea4:	4b02      	ldr	r3, [pc, #8]	; (8008eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	20000cc8 	.word	0x20000cc8
 8008eb4:	080098a8 	.word	0x080098a8

08008eb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d105      	bne.n	8008ed6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	4907      	ldr	r1, [pc, #28]	; (8008eec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ece:	4808      	ldr	r0, [pc, #32]	; (8008ef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ed0:	f7ff fe83 	bl	8008bda <USBD_GetString>
 8008ed4:	e004      	b.n	8008ee0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	4904      	ldr	r1, [pc, #16]	; (8008eec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eda:	4805      	ldr	r0, [pc, #20]	; (8008ef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008edc:	f7ff fe7d 	bl	8008bda <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ee0:	4b02      	ldr	r3, [pc, #8]	; (8008eec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20000cc8 	.word	0x20000cc8
 8008ef0:	080098b4 	.word	0x080098b4

08008ef4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008efa:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <Get_SerialNum+0x44>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f00:	4b0e      	ldr	r3, [pc, #56]	; (8008f3c <Get_SerialNum+0x48>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f06:	4b0e      	ldr	r3, [pc, #56]	; (8008f40 <Get_SerialNum+0x4c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4413      	add	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d009      	beq.n	8008f2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f1a:	2208      	movs	r2, #8
 8008f1c:	4909      	ldr	r1, [pc, #36]	; (8008f44 <Get_SerialNum+0x50>)
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 f814 	bl	8008f4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f24:	2204      	movs	r2, #4
 8008f26:	4908      	ldr	r1, [pc, #32]	; (8008f48 <Get_SerialNum+0x54>)
 8008f28:	68b8      	ldr	r0, [r7, #8]
 8008f2a:	f000 f80f 	bl	8008f4c <IntToUnicode>
  }
}
 8008f2e:	bf00      	nop
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	1fff7a10 	.word	0x1fff7a10
 8008f3c:	1fff7a14 	.word	0x1fff7a14
 8008f40:	1fff7a18 	.word	0x1fff7a18
 8008f44:	200001de 	.word	0x200001de
 8008f48:	200001ee 	.word	0x200001ee

08008f4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	4613      	mov	r3, r2
 8008f58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f5e:	2300      	movs	r3, #0
 8008f60:	75fb      	strb	r3, [r7, #23]
 8008f62:	e027      	b.n	8008fb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	0f1b      	lsrs	r3, r3, #28
 8008f68:	2b09      	cmp	r3, #9
 8008f6a:	d80b      	bhi.n	8008f84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	0f1b      	lsrs	r3, r3, #28
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	4619      	mov	r1, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	440b      	add	r3, r1
 8008f7c:	3230      	adds	r2, #48	; 0x30
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]
 8008f82:	e00a      	b.n	8008f9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	0f1b      	lsrs	r3, r3, #28
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	005b      	lsls	r3, r3, #1
 8008f8e:	4619      	mov	r1, r3
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	440b      	add	r3, r1
 8008f94:	3237      	adds	r2, #55	; 0x37
 8008f96:	b2d2      	uxtb	r2, r2
 8008f98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	4413      	add	r3, r2
 8008faa:	2200      	movs	r2, #0
 8008fac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	75fb      	strb	r3, [r7, #23]
 8008fb4:	7dfa      	ldrb	r2, [r7, #23]
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d3d3      	bcc.n	8008f64 <IntToUnicode+0x18>
  }
}
 8008fbc:	bf00      	nop
 8008fbe:	371c      	adds	r7, #28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	; 0x28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fd0:	f107 0314 	add.w	r3, r7, #20
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	605a      	str	r2, [r3, #4]
 8008fda:	609a      	str	r2, [r3, #8]
 8008fdc:	60da      	str	r2, [r3, #12]
 8008fde:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fe8:	d13a      	bne.n	8009060 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fea:	2300      	movs	r3, #0
 8008fec:	613b      	str	r3, [r7, #16]
 8008fee:	4b1e      	ldr	r3, [pc, #120]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	4a1d      	ldr	r2, [pc, #116]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 8008ff4:	f043 0301 	orr.w	r3, r3, #1
 8008ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8008ffa:	4b1b      	ldr	r3, [pc, #108]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 8008ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	613b      	str	r3, [r7, #16]
 8009004:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009006:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800900a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800900c:	2302      	movs	r3, #2
 800900e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009010:	2300      	movs	r3, #0
 8009012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009014:	2303      	movs	r3, #3
 8009016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009018:	230a      	movs	r3, #10
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800901c:	f107 0314 	add.w	r3, r7, #20
 8009020:	4619      	mov	r1, r3
 8009022:	4812      	ldr	r0, [pc, #72]	; (800906c <HAL_PCD_MspInit+0xa4>)
 8009024:	f7f9 fb66 	bl	80026f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009028:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 800902a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902c:	4a0e      	ldr	r2, [pc, #56]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 800902e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009032:	6353      	str	r3, [r2, #52]	; 0x34
 8009034:	2300      	movs	r3, #0
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 800903a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903c:	4a0a      	ldr	r2, [pc, #40]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 800903e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009042:	6453      	str	r3, [r2, #68]	; 0x44
 8009044:	4b08      	ldr	r3, [pc, #32]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 8009046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800904c:	60fb      	str	r3, [r7, #12]
 800904e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009050:	2200      	movs	r2, #0
 8009052:	2100      	movs	r1, #0
 8009054:	2043      	movs	r0, #67	; 0x43
 8009056:	f7f9 fb16 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800905a:	2043      	movs	r0, #67	; 0x43
 800905c:	f7f9 fb2f 	bl	80026be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009060:	bf00      	nop
 8009062:	3728      	adds	r7, #40	; 0x28
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	40023800 	.word	0x40023800
 800906c:	40020000 	.word	0x40020000

08009070 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7fe fe24 	bl	8007cd4 <USBD_LL_SetupStage>
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090a6:	78fa      	ldrb	r2, [r7, #3]
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	78fb      	ldrb	r3, [r7, #3]
 80090bc:	4619      	mov	r1, r3
 80090be:	f7fe fe5c 	bl	8007d7a <USBD_LL_DataOutStage>
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	460b      	mov	r3, r1
 80090d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090dc:	78fa      	ldrb	r2, [r7, #3]
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4613      	mov	r3, r2
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	1a9b      	subs	r3, r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	440b      	add	r3, r1
 80090ea:	3348      	adds	r3, #72	; 0x48
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	78fb      	ldrb	r3, [r7, #3]
 80090f0:	4619      	mov	r1, r3
 80090f2:	f7fe fea5 	bl	8007e40 <USBD_LL_DataInStage>
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe ffa9 	bl	8008064 <USBD_LL_SOF>
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d001      	beq.n	8009132 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800912e:	f7f8 f805 	bl	800113c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009138:	7bfa      	ldrb	r2, [r7, #15]
 800913a:	4611      	mov	r1, r2
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe ff56 	bl	8007fee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009148:	4618      	mov	r0, r3
 800914a:	f7fe ff0f 	bl	8007f6c <USBD_LL_Reset>
}
 800914e:	bf00      	nop
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe ff51 	bl	800800e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6812      	ldr	r2, [r2, #0]
 800917a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800918c:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <HAL_PCD_SuspendCallback+0x48>)
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	4a03      	ldr	r2, [pc, #12]	; (80091a0 <HAL_PCD_SuspendCallback+0x48>)
 8009192:	f043 0306 	orr.w	r3, r3, #6
 8009196:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	e000ed00 	.word	0xe000ed00

080091a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe ff40 	bl	8008038 <USBD_LL_Resume>
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe ff6b 	bl	80080b2 <USBD_LL_IsoOUTIncomplete>
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091f6:	78fa      	ldrb	r2, [r7, #3]
 80091f8:	4611      	mov	r1, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe ff4c 	bl	8008098 <USBD_LL_IsoINIncomplete>
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe ff58 	bl	80080cc <USBD_LL_DevConnected>
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe ff55 	bl	80080e2 <USBD_LL_DevDisconnected>
}
 8009238:	bf00      	nop
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d13c      	bne.n	80092ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009250:	4a20      	ldr	r2, [pc, #128]	; (80092d4 <USBD_LL_Init+0x94>)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a1e      	ldr	r2, [pc, #120]	; (80092d4 <USBD_LL_Init+0x94>)
 800925c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009260:	4b1c      	ldr	r3, [pc, #112]	; (80092d4 <USBD_LL_Init+0x94>)
 8009262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009268:	4b1a      	ldr	r3, [pc, #104]	; (80092d4 <USBD_LL_Init+0x94>)
 800926a:	2204      	movs	r2, #4
 800926c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800926e:	4b19      	ldr	r3, [pc, #100]	; (80092d4 <USBD_LL_Init+0x94>)
 8009270:	2202      	movs	r2, #2
 8009272:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009274:	4b17      	ldr	r3, [pc, #92]	; (80092d4 <USBD_LL_Init+0x94>)
 8009276:	2200      	movs	r2, #0
 8009278:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800927a:	4b16      	ldr	r3, [pc, #88]	; (80092d4 <USBD_LL_Init+0x94>)
 800927c:	2202      	movs	r2, #2
 800927e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009280:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <USBD_LL_Init+0x94>)
 8009282:	2200      	movs	r2, #0
 8009284:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009286:	4b13      	ldr	r3, [pc, #76]	; (80092d4 <USBD_LL_Init+0x94>)
 8009288:	2200      	movs	r2, #0
 800928a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800928c:	4b11      	ldr	r3, [pc, #68]	; (80092d4 <USBD_LL_Init+0x94>)
 800928e:	2200      	movs	r2, #0
 8009290:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009292:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <USBD_LL_Init+0x94>)
 8009294:	2200      	movs	r2, #0
 8009296:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009298:	4b0e      	ldr	r3, [pc, #56]	; (80092d4 <USBD_LL_Init+0x94>)
 800929a:	2200      	movs	r2, #0
 800929c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800929e:	480d      	ldr	r0, [pc, #52]	; (80092d4 <USBD_LL_Init+0x94>)
 80092a0:	f7fa f961 	bl	8003566 <HAL_PCD_Init>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80092aa:	f7f7 ff47 	bl	800113c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80092ae:	2180      	movs	r1, #128	; 0x80
 80092b0:	4808      	ldr	r0, [pc, #32]	; (80092d4 <USBD_LL_Init+0x94>)
 80092b2:	f7fb faa6 	bl	8004802 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80092b6:	2240      	movs	r2, #64	; 0x40
 80092b8:	2100      	movs	r1, #0
 80092ba:	4806      	ldr	r0, [pc, #24]	; (80092d4 <USBD_LL_Init+0x94>)
 80092bc:	f7fb fa5a 	bl	8004774 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80092c0:	2280      	movs	r2, #128	; 0x80
 80092c2:	2101      	movs	r1, #1
 80092c4:	4803      	ldr	r0, [pc, #12]	; (80092d4 <USBD_LL_Init+0x94>)
 80092c6:	f7fb fa55 	bl	8004774 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20000ec8 	.word	0x20000ec8

080092d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fa fa56 	bl	80037a0 <HAL_PCD_Start>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f918 	bl	8009530 <USBD_Get_USB_Status>
 8009300:	4603      	mov	r3, r0
 8009302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009304:	7bbb      	ldrb	r3, [r7, #14]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	4608      	mov	r0, r1
 8009318:	4611      	mov	r1, r2
 800931a:	461a      	mov	r2, r3
 800931c:	4603      	mov	r3, r0
 800931e:	70fb      	strb	r3, [r7, #3]
 8009320:	460b      	mov	r3, r1
 8009322:	70bb      	strb	r3, [r7, #2]
 8009324:	4613      	mov	r3, r2
 8009326:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009336:	78bb      	ldrb	r3, [r7, #2]
 8009338:	883a      	ldrh	r2, [r7, #0]
 800933a:	78f9      	ldrb	r1, [r7, #3]
 800933c:	f7fa fe3a 	bl	8003fb4 <HAL_PCD_EP_Open>
 8009340:	4603      	mov	r3, r0
 8009342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f8f2 	bl	8009530 <USBD_Get_USB_Status>
 800934c:	4603      	mov	r3, r0
 800934e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009350:	7bbb      	ldrb	r3, [r7, #14]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f7fa fe83 	bl	8004084 <HAL_PCD_EP_Close>
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f8d3 	bl	8009530 <USBD_Get_USB_Status>
 800938a:	4603      	mov	r3, r0
 800938c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800938e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	4611      	mov	r1, r2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fa ff43 	bl	8004242 <HAL_PCD_EP_SetStall>
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 f8b4 	bl	8009530 <USBD_Get_USB_Status>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093f0:	78fa      	ldrb	r2, [r7, #3]
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fa ff88 	bl	800430a <HAL_PCD_EP_ClrStall>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f895 	bl	8009530 <USBD_Get_USB_Status>
 8009406:	4603      	mov	r3, r0
 8009408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940a:	7bbb      	ldrb	r3, [r7, #14]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009426:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800942c:	2b00      	cmp	r3, #0
 800942e:	da0b      	bge.n	8009448 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	4613      	mov	r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	1a9b      	subs	r3, r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	333e      	adds	r3, #62	; 0x3e
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	e00b      	b.n	8009460 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009448:	78fb      	ldrb	r3, [r7, #3]
 800944a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	4613      	mov	r3, r2
 8009452:	00db      	lsls	r3, r3, #3
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	440b      	add	r3, r1
 800945a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800945e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	4611      	mov	r1, r2
 800948a:	4618      	mov	r0, r3
 800948c:	f7fa fd6d 	bl	8003f6a <HAL_PCD_SetAddress>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f84a 	bl	8009530 <USBD_Get_USB_Status>
 800949c:	4603      	mov	r3, r0
 800949e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b086      	sub	sp, #24
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	603b      	str	r3, [r7, #0]
 80094b6:	460b      	mov	r3, r1
 80094b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094c8:	7af9      	ldrb	r1, [r7, #11]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	f7fa fe6e 	bl	80041ae <HAL_PCD_EP_Transmit>
 80094d2:	4603      	mov	r3, r0
 80094d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
 80094d8:	4618      	mov	r0, r3
 80094da:	f000 f829 	bl	8009530 <USBD_Get_USB_Status>
 80094de:	4603      	mov	r3, r0
 80094e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	607a      	str	r2, [r7, #4]
 80094f6:	603b      	str	r3, [r7, #0]
 80094f8:	460b      	mov	r3, r1
 80094fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800950a:	7af9      	ldrb	r1, [r7, #11]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	f7fa fe02 	bl	8004118 <HAL_PCD_EP_Receive>
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 f808 	bl	8009530 <USBD_Get_USB_Status>
 8009520:	4603      	mov	r3, r0
 8009522:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009524:	7dbb      	ldrb	r3, [r7, #22]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	4603      	mov	r3, r0
 8009538:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	2b03      	cmp	r3, #3
 8009542:	d817      	bhi.n	8009574 <USBD_Get_USB_Status+0x44>
 8009544:	a201      	add	r2, pc, #4	; (adr r2, 800954c <USBD_Get_USB_Status+0x1c>)
 8009546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954a:	bf00      	nop
 800954c:	0800955d 	.word	0x0800955d
 8009550:	08009563 	.word	0x08009563
 8009554:	08009569 	.word	0x08009569
 8009558:	0800956f 	.word	0x0800956f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
    break;
 8009560:	e00b      	b.n	800957a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009562:	2303      	movs	r3, #3
 8009564:	73fb      	strb	r3, [r7, #15]
    break;
 8009566:	e008      	b.n	800957a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009568:	2301      	movs	r3, #1
 800956a:	73fb      	strb	r3, [r7, #15]
    break;
 800956c:	e005      	b.n	800957a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800956e:	2303      	movs	r3, #3
 8009570:	73fb      	strb	r3, [r7, #15]
    break;
 8009572:	e002      	b.n	800957a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009574:	2303      	movs	r3, #3
 8009576:	73fb      	strb	r3, [r7, #15]
    break;
 8009578:	bf00      	nop
  }
  return usb_status;
 800957a:	7bfb      	ldrb	r3, [r7, #15]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <__errno>:
 8009588:	4b01      	ldr	r3, [pc, #4]	; (8009590 <__errno+0x8>)
 800958a:	6818      	ldr	r0, [r3, #0]
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	200001f8 	.word	0x200001f8

08009594 <__libc_init_array>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	4e0d      	ldr	r6, [pc, #52]	; (80095cc <__libc_init_array+0x38>)
 8009598:	4c0d      	ldr	r4, [pc, #52]	; (80095d0 <__libc_init_array+0x3c>)
 800959a:	1ba4      	subs	r4, r4, r6
 800959c:	10a4      	asrs	r4, r4, #2
 800959e:	2500      	movs	r5, #0
 80095a0:	42a5      	cmp	r5, r4
 80095a2:	d109      	bne.n	80095b8 <__libc_init_array+0x24>
 80095a4:	4e0b      	ldr	r6, [pc, #44]	; (80095d4 <__libc_init_array+0x40>)
 80095a6:	4c0c      	ldr	r4, [pc, #48]	; (80095d8 <__libc_init_array+0x44>)
 80095a8:	f000 f8f6 	bl	8009798 <_init>
 80095ac:	1ba4      	subs	r4, r4, r6
 80095ae:	10a4      	asrs	r4, r4, #2
 80095b0:	2500      	movs	r5, #0
 80095b2:	42a5      	cmp	r5, r4
 80095b4:	d105      	bne.n	80095c2 <__libc_init_array+0x2e>
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095bc:	4798      	blx	r3
 80095be:	3501      	adds	r5, #1
 80095c0:	e7ee      	b.n	80095a0 <__libc_init_array+0xc>
 80095c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095c6:	4798      	blx	r3
 80095c8:	3501      	adds	r5, #1
 80095ca:	e7f2      	b.n	80095b2 <__libc_init_array+0x1e>
 80095cc:	0800a640 	.word	0x0800a640
 80095d0:	0800a640 	.word	0x0800a640
 80095d4:	0800a640 	.word	0x0800a640
 80095d8:	0800a644 	.word	0x0800a644

080095dc <malloc>:
 80095dc:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <malloc+0xc>)
 80095de:	4601      	mov	r1, r0
 80095e0:	6818      	ldr	r0, [r3, #0]
 80095e2:	f000 b86d 	b.w	80096c0 <_malloc_r>
 80095e6:	bf00      	nop
 80095e8:	200001f8 	.word	0x200001f8

080095ec <free>:
 80095ec:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <free+0xc>)
 80095ee:	4601      	mov	r1, r0
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	f000 b817 	b.w	8009624 <_free_r>
 80095f6:	bf00      	nop
 80095f8:	200001f8 	.word	0x200001f8

080095fc <memcpy>:
 80095fc:	b510      	push	{r4, lr}
 80095fe:	1e43      	subs	r3, r0, #1
 8009600:	440a      	add	r2, r1
 8009602:	4291      	cmp	r1, r2
 8009604:	d100      	bne.n	8009608 <memcpy+0xc>
 8009606:	bd10      	pop	{r4, pc}
 8009608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800960c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009610:	e7f7      	b.n	8009602 <memcpy+0x6>

08009612 <memset>:
 8009612:	4402      	add	r2, r0
 8009614:	4603      	mov	r3, r0
 8009616:	4293      	cmp	r3, r2
 8009618:	d100      	bne.n	800961c <memset+0xa>
 800961a:	4770      	bx	lr
 800961c:	f803 1b01 	strb.w	r1, [r3], #1
 8009620:	e7f9      	b.n	8009616 <memset+0x4>
	...

08009624 <_free_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4605      	mov	r5, r0
 8009628:	2900      	cmp	r1, #0
 800962a:	d045      	beq.n	80096b8 <_free_r+0x94>
 800962c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009630:	1f0c      	subs	r4, r1, #4
 8009632:	2b00      	cmp	r3, #0
 8009634:	bfb8      	it	lt
 8009636:	18e4      	addlt	r4, r4, r3
 8009638:	f000 f8ac 	bl	8009794 <__malloc_lock>
 800963c:	4a1f      	ldr	r2, [pc, #124]	; (80096bc <_free_r+0x98>)
 800963e:	6813      	ldr	r3, [r2, #0]
 8009640:	4610      	mov	r0, r2
 8009642:	b933      	cbnz	r3, 8009652 <_free_r+0x2e>
 8009644:	6063      	str	r3, [r4, #4]
 8009646:	6014      	str	r4, [r2, #0]
 8009648:	4628      	mov	r0, r5
 800964a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800964e:	f000 b8a2 	b.w	8009796 <__malloc_unlock>
 8009652:	42a3      	cmp	r3, r4
 8009654:	d90c      	bls.n	8009670 <_free_r+0x4c>
 8009656:	6821      	ldr	r1, [r4, #0]
 8009658:	1862      	adds	r2, r4, r1
 800965a:	4293      	cmp	r3, r2
 800965c:	bf04      	itt	eq
 800965e:	681a      	ldreq	r2, [r3, #0]
 8009660:	685b      	ldreq	r3, [r3, #4]
 8009662:	6063      	str	r3, [r4, #4]
 8009664:	bf04      	itt	eq
 8009666:	1852      	addeq	r2, r2, r1
 8009668:	6022      	streq	r2, [r4, #0]
 800966a:	6004      	str	r4, [r0, #0]
 800966c:	e7ec      	b.n	8009648 <_free_r+0x24>
 800966e:	4613      	mov	r3, r2
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	b10a      	cbz	r2, 8009678 <_free_r+0x54>
 8009674:	42a2      	cmp	r2, r4
 8009676:	d9fa      	bls.n	800966e <_free_r+0x4a>
 8009678:	6819      	ldr	r1, [r3, #0]
 800967a:	1858      	adds	r0, r3, r1
 800967c:	42a0      	cmp	r0, r4
 800967e:	d10b      	bne.n	8009698 <_free_r+0x74>
 8009680:	6820      	ldr	r0, [r4, #0]
 8009682:	4401      	add	r1, r0
 8009684:	1858      	adds	r0, r3, r1
 8009686:	4282      	cmp	r2, r0
 8009688:	6019      	str	r1, [r3, #0]
 800968a:	d1dd      	bne.n	8009648 <_free_r+0x24>
 800968c:	6810      	ldr	r0, [r2, #0]
 800968e:	6852      	ldr	r2, [r2, #4]
 8009690:	605a      	str	r2, [r3, #4]
 8009692:	4401      	add	r1, r0
 8009694:	6019      	str	r1, [r3, #0]
 8009696:	e7d7      	b.n	8009648 <_free_r+0x24>
 8009698:	d902      	bls.n	80096a0 <_free_r+0x7c>
 800969a:	230c      	movs	r3, #12
 800969c:	602b      	str	r3, [r5, #0]
 800969e:	e7d3      	b.n	8009648 <_free_r+0x24>
 80096a0:	6820      	ldr	r0, [r4, #0]
 80096a2:	1821      	adds	r1, r4, r0
 80096a4:	428a      	cmp	r2, r1
 80096a6:	bf04      	itt	eq
 80096a8:	6811      	ldreq	r1, [r2, #0]
 80096aa:	6852      	ldreq	r2, [r2, #4]
 80096ac:	6062      	str	r2, [r4, #4]
 80096ae:	bf04      	itt	eq
 80096b0:	1809      	addeq	r1, r1, r0
 80096b2:	6021      	streq	r1, [r4, #0]
 80096b4:	605c      	str	r4, [r3, #4]
 80096b6:	e7c7      	b.n	8009648 <_free_r+0x24>
 80096b8:	bd38      	pop	{r3, r4, r5, pc}
 80096ba:	bf00      	nop
 80096bc:	200006cc 	.word	0x200006cc

080096c0 <_malloc_r>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	1ccd      	adds	r5, r1, #3
 80096c4:	f025 0503 	bic.w	r5, r5, #3
 80096c8:	3508      	adds	r5, #8
 80096ca:	2d0c      	cmp	r5, #12
 80096cc:	bf38      	it	cc
 80096ce:	250c      	movcc	r5, #12
 80096d0:	2d00      	cmp	r5, #0
 80096d2:	4606      	mov	r6, r0
 80096d4:	db01      	blt.n	80096da <_malloc_r+0x1a>
 80096d6:	42a9      	cmp	r1, r5
 80096d8:	d903      	bls.n	80096e2 <_malloc_r+0x22>
 80096da:	230c      	movs	r3, #12
 80096dc:	6033      	str	r3, [r6, #0]
 80096de:	2000      	movs	r0, #0
 80096e0:	bd70      	pop	{r4, r5, r6, pc}
 80096e2:	f000 f857 	bl	8009794 <__malloc_lock>
 80096e6:	4a21      	ldr	r2, [pc, #132]	; (800976c <_malloc_r+0xac>)
 80096e8:	6814      	ldr	r4, [r2, #0]
 80096ea:	4621      	mov	r1, r4
 80096ec:	b991      	cbnz	r1, 8009714 <_malloc_r+0x54>
 80096ee:	4c20      	ldr	r4, [pc, #128]	; (8009770 <_malloc_r+0xb0>)
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	b91b      	cbnz	r3, 80096fc <_malloc_r+0x3c>
 80096f4:	4630      	mov	r0, r6
 80096f6:	f000 f83d 	bl	8009774 <_sbrk_r>
 80096fa:	6020      	str	r0, [r4, #0]
 80096fc:	4629      	mov	r1, r5
 80096fe:	4630      	mov	r0, r6
 8009700:	f000 f838 	bl	8009774 <_sbrk_r>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d124      	bne.n	8009752 <_malloc_r+0x92>
 8009708:	230c      	movs	r3, #12
 800970a:	6033      	str	r3, [r6, #0]
 800970c:	4630      	mov	r0, r6
 800970e:	f000 f842 	bl	8009796 <__malloc_unlock>
 8009712:	e7e4      	b.n	80096de <_malloc_r+0x1e>
 8009714:	680b      	ldr	r3, [r1, #0]
 8009716:	1b5b      	subs	r3, r3, r5
 8009718:	d418      	bmi.n	800974c <_malloc_r+0x8c>
 800971a:	2b0b      	cmp	r3, #11
 800971c:	d90f      	bls.n	800973e <_malloc_r+0x7e>
 800971e:	600b      	str	r3, [r1, #0]
 8009720:	50cd      	str	r5, [r1, r3]
 8009722:	18cc      	adds	r4, r1, r3
 8009724:	4630      	mov	r0, r6
 8009726:	f000 f836 	bl	8009796 <__malloc_unlock>
 800972a:	f104 000b 	add.w	r0, r4, #11
 800972e:	1d23      	adds	r3, r4, #4
 8009730:	f020 0007 	bic.w	r0, r0, #7
 8009734:	1ac3      	subs	r3, r0, r3
 8009736:	d0d3      	beq.n	80096e0 <_malloc_r+0x20>
 8009738:	425a      	negs	r2, r3
 800973a:	50e2      	str	r2, [r4, r3]
 800973c:	e7d0      	b.n	80096e0 <_malloc_r+0x20>
 800973e:	428c      	cmp	r4, r1
 8009740:	684b      	ldr	r3, [r1, #4]
 8009742:	bf16      	itet	ne
 8009744:	6063      	strne	r3, [r4, #4]
 8009746:	6013      	streq	r3, [r2, #0]
 8009748:	460c      	movne	r4, r1
 800974a:	e7eb      	b.n	8009724 <_malloc_r+0x64>
 800974c:	460c      	mov	r4, r1
 800974e:	6849      	ldr	r1, [r1, #4]
 8009750:	e7cc      	b.n	80096ec <_malloc_r+0x2c>
 8009752:	1cc4      	adds	r4, r0, #3
 8009754:	f024 0403 	bic.w	r4, r4, #3
 8009758:	42a0      	cmp	r0, r4
 800975a:	d005      	beq.n	8009768 <_malloc_r+0xa8>
 800975c:	1a21      	subs	r1, r4, r0
 800975e:	4630      	mov	r0, r6
 8009760:	f000 f808 	bl	8009774 <_sbrk_r>
 8009764:	3001      	adds	r0, #1
 8009766:	d0cf      	beq.n	8009708 <_malloc_r+0x48>
 8009768:	6025      	str	r5, [r4, #0]
 800976a:	e7db      	b.n	8009724 <_malloc_r+0x64>
 800976c:	200006cc 	.word	0x200006cc
 8009770:	200006d0 	.word	0x200006d0

08009774 <_sbrk_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4c06      	ldr	r4, [pc, #24]	; (8009790 <_sbrk_r+0x1c>)
 8009778:	2300      	movs	r3, #0
 800977a:	4605      	mov	r5, r0
 800977c:	4608      	mov	r0, r1
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	f7f8 f9e6 	bl	8001b50 <_sbrk>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d102      	bne.n	800978e <_sbrk_r+0x1a>
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	b103      	cbz	r3, 800978e <_sbrk_r+0x1a>
 800978c:	602b      	str	r3, [r5, #0]
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	200012d0 	.word	0x200012d0

08009794 <__malloc_lock>:
 8009794:	4770      	bx	lr

08009796 <__malloc_unlock>:
 8009796:	4770      	bx	lr

08009798 <_init>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr

080097a4 <_fini>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr
