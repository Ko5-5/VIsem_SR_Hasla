
SR_MHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a70c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed4  0800a8ac  0800a8ac  0001a8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b780  0800b780  000203b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b780  0800b780  0001b780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b788  0800b788  000203b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b788  0800b788  0001b788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b78c  0800b78c  0001b78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  0800b790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  200003b0  0800bb40  000203b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001504  0800bb40  00021504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c0c  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004831  00000000  00000000  00041fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001890  00000000  00000000  00046820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d8  00000000  00000000  000480b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bb74  00000000  00000000  00049788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017df8  00000000  00000000  000652fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009422d  00000000  00000000  0007d0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111321  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068d8  00000000  00000000  0011139c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003b0 	.word	0x200003b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a894 	.word	0x0800a894

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003b4 	.word	0x200003b4
 80001dc:	0800a894 	.word	0x0800a894

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_CRC_Init+0x20>)
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <MX_CRC_Init+0x24>)
 8000598:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_CRC_Init+0x20>)
 800059c:	f002 f957 	bl	800284e <HAL_CRC_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005a6:	f000 fea7 	bl	80012f8 <Error_Handler>
  }

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000082c 	.word	0x2000082c
 80005b4:	40023000 	.word	0x40023000

080005b8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <HAL_CRC_MspInit+0x3c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d10d      	bne.n	80005e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023000 	.word	0x40023000
 80005f8:	40023800 	.word	0x40023800

080005fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b4a      	ldr	r3, [pc, #296]	; (8000740 <MX_GPIO_Init+0x144>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a49      	ldr	r2, [pc, #292]	; (8000740 <MX_GPIO_Init+0x144>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b47      	ldr	r3, [pc, #284]	; (8000740 <MX_GPIO_Init+0x144>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <MX_GPIO_Init+0x144>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a42      	ldr	r2, [pc, #264]	; (8000740 <MX_GPIO_Init+0x144>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <MX_GPIO_Init+0x144>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <MX_GPIO_Init+0x144>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a3b      	ldr	r2, [pc, #236]	; (8000740 <MX_GPIO_Init+0x144>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b39      	ldr	r3, [pc, #228]	; (8000740 <MX_GPIO_Init+0x144>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <MX_GPIO_Init+0x144>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a34      	ldr	r2, [pc, #208]	; (8000740 <MX_GPIO_Init+0x144>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <MX_GPIO_Init+0x144>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000688:	482e      	ldr	r0, [pc, #184]	; (8000744 <MX_GPIO_Init+0x148>)
 800068a:	f002 fa97 	bl	8002bbc <HAL_GPIO_WritePin>
                          |CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000694:	482c      	ldr	r0, [pc, #176]	; (8000748 <MX_GPIO_Init+0x14c>)
 8000696:	f002 fa91 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin;
 800069a:	231c      	movs	r3, #28
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <MX_GPIO_Init+0x150>)
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4825      	ldr	r0, [pc, #148]	; (8000744 <MX_GPIO_Init+0x148>)
 80006ae:	f002 f8eb 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 80006b2:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80006b6:	617b      	str	r3, [r7, #20]
                          |CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	481e      	ldr	r0, [pc, #120]	; (8000744 <MX_GPIO_Init+0x148>)
 80006cc:	f002 f8dc 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_BUT_Pin;
 80006d0:	2302      	movs	r3, #2
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d8:	2301      	movs	r3, #1
 80006da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	4819      	ldr	r0, [pc, #100]	; (8000748 <MX_GPIO_Init+0x14c>)
 80006e4:	f002 f8d0 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 80006e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4811      	ldr	r0, [pc, #68]	; (8000748 <MX_GPIO_Init+0x14c>)
 8000702:	f002 f8c1 	bl	8002888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2008      	movs	r0, #8
 800070c:	f002 f869 	bl	80027e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000710:	2008      	movs	r0, #8
 8000712:	f002 f882 	bl	800281a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2009      	movs	r0, #9
 800071c:	f002 f861 	bl	80027e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000720:	2009      	movs	r0, #9
 8000722:	f002 f87a 	bl	800281a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	200a      	movs	r0, #10
 800072c:	f002 f859 	bl	80027e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000730:	200a      	movs	r0, #10
 8000732:	f002 f872 	bl	800281a <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40020000 	.word	0x40020000
 8000748:	40020400 	.word	0x40020400
 800074c:	10110000 	.word	0x10110000

08000750 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000756:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <MX_I2C1_Init+0x54>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C1_Init+0x50>)
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x58>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_I2C1_Init+0x50>)
 800076e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_I2C1_Init+0x50>)
 800078e:	f002 fa47 	bl	8002c20 <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 fdae 	bl	80012f8 <Error_Handler>
  }

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000834 	.word	0x20000834
 80007a4:	40005400 	.word	0x40005400
 80007a8:	00061a80 	.word	0x00061a80

080007ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a19      	ldr	r2, [pc, #100]	; (8000830 <HAL_I2C_MspInit+0x84>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d12b      	bne.n	8000826 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_I2C_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <HAL_I2C_MspInit+0x88>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_I2C_MspInit+0x88>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ea:	23c0      	movs	r3, #192	; 0xc0
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ee:	2312      	movs	r3, #18
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007fa:	2304      	movs	r3, #4
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <HAL_I2C_MspInit+0x8c>)
 8000806:	f002 f83f 	bl	8002888 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_I2C_MspInit+0x88>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_I2C_MspInit+0x88>)
 8000814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_I2C_MspInit+0x88>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40005400 	.word	0x40005400
 8000834:	40023800 	.word	0x40023800
 8000838:	40020400 	.word	0x40020400

0800083c <XORCipher>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void XORCipher(char* string, char* key)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < strlen(string); i++)
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	e018      	b.n	800087e <XORCipher+0x42>
	{
		string[i] = string[i] ^ key[i % 8];
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	7819      	ldrb	r1, [r3, #0]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	425a      	negs	r2, r3
 8000858:	f003 0307 	and.w	r3, r3, #7
 800085c:	f002 0207 	and.w	r2, r2, #7
 8000860:	bf58      	it	pl
 8000862:	4253      	negpl	r3, r2
 8000864:	461a      	mov	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	4413      	add	r3, r2
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	4403      	add	r3, r0
 8000872:	404a      	eors	r2, r1
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < strlen(string); i++)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	3301      	adds	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fcae 	bl	80001e0 <strlen>
 8000884:	4602      	mov	r2, r0
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	429a      	cmp	r2, r3
 800088a:	d8df      	bhi.n	800084c <XORCipher+0x10>
	}
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <OLED_page_sc>:

void OLED_page_sc(){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 800089a:	f001 fe99 	bl	80025d0 <HAL_GetTick>
 800089e:	4602      	mov	r2, r0
 80008a0:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <OLED_page_sc+0xcc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008aa:	d955      	bls.n	8000958 <OLED_page_sc+0xc4>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 fe9b 	bl	80015e8 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 80008b2:	2106      	movs	r1, #6
 80008b4:	2004      	movs	r0, #4
 80008b6:	f000 ff0f 	bl	80016d8 <SSD1306_GotoXY>
		SSD1306_Puts ("--MHS--", &Font_11x18, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	4929      	ldr	r1, [pc, #164]	; (8000964 <OLED_page_sc+0xd0>)
 80008be:	482a      	ldr	r0, [pc, #168]	; (8000968 <OLED_page_sc+0xd4>)
 80008c0:	f000 ffa0 	bl	8001804 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 80008c4:	2119      	movs	r1, #25
 80008c6:	2004      	movs	r0, #4
 80008c8:	f000 ff06 	bl	80016d8 <SSD1306_GotoXY>
		SSD1306_Puts ("PAGE", &Font_11x18, 1);
 80008cc:	2201      	movs	r2, #1
 80008ce:	4925      	ldr	r1, [pc, #148]	; (8000964 <OLED_page_sc+0xd0>)
 80008d0:	4826      	ldr	r0, [pc, #152]	; (800096c <OLED_page_sc+0xd8>)
 80008d2:	f000 ff97 	bl	8001804 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 80008d6:	212c      	movs	r1, #44	; 0x2c
 80008d8:	2004      	movs	r0, #4
 80008da:	f000 fefd 	bl	80016d8 <SSD1306_GotoXY>
		SSD1306_Puts ("NUMBER:", &Font_11x18, 1);
 80008de:	2201      	movs	r2, #1
 80008e0:	4920      	ldr	r1, [pc, #128]	; (8000964 <OLED_page_sc+0xd0>)
 80008e2:	4823      	ldr	r0, [pc, #140]	; (8000970 <OLED_page_sc+0xdc>)
 80008e4:	f000 ff8e 	bl	8001804 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 80008e8:	2301      	movs	r3, #1
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2301      	movs	r3, #1
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	2101      	movs	r1, #1
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 ffab 	bl	800184e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 80008f8:	2301      	movs	r3, #1
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f000 ffa3 	bl	800184e <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000908:	2301      	movs	r3, #1
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2340      	movs	r3, #64	; 0x40
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	2100      	movs	r1, #0
 8000912:	2080      	movs	r0, #128	; 0x80
 8000914:	f000 ff9b 	bl	800184e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000918:	2301      	movs	r3, #1
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	2140      	movs	r1, #64	; 0x40
 8000922:	2000      	movs	r0, #0
 8000924:	f000 ff93 	bl	800184e <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 8000928:	2301      	movs	r3, #1
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	233e      	movs	r3, #62	; 0x3e
 800092e:	221b      	movs	r2, #27
 8000930:	2102      	movs	r1, #2
 8000932:	2064      	movs	r0, #100	; 0x64
 8000934:	f001 f886 	bl	8001a44 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 8000938:	2119      	movs	r1, #25
 800093a:	206e      	movs	r0, #110	; 0x6e
 800093c:	f000 fecc 	bl	80016d8 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(pageNumber+'0'), &Font_11x18, 1);
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <OLED_page_sc+0xe0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	3330      	adds	r3, #48	; 0x30
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2201      	movs	r2, #1
 800094c:	4905      	ldr	r1, [pc, #20]	; (8000964 <OLED_page_sc+0xd0>)
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fed8 	bl	8001704 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 8000954:	f000 fe1a 	bl	800158c <SSD1306_UpdateScreen>
	}
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000408 	.word	0x20000408
 8000964:	20000000 	.word	0x20000000
 8000968:	0800a8ac 	.word	0x0800a8ac
 800096c:	0800a8b4 	.word	0x0800a8b4
 8000970:	0800a8bc 	.word	0x0800a8bc
 8000974:	20000404 	.word	0x20000404

08000978 <OLED_login_sc>:

void OLED_login_sc(){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 800097e:	f001 fe27 	bl	80025d0 <HAL_GetTick>
 8000982:	4602      	mov	r2, r0
 8000984:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <OLED_login_sc+0xc8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800098e:	d954      	bls.n	8000a3a <OLED_login_sc+0xc2>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fe29 	bl	80015e8 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 8000996:	2106      	movs	r1, #6
 8000998:	2004      	movs	r0, #4
 800099a:	f000 fe9d 	bl	80016d8 <SSD1306_GotoXY>
		SSD1306_Puts ("-ENTER-", &Font_11x18, 1);
 800099e:	2201      	movs	r2, #1
 80009a0:	4928      	ldr	r1, [pc, #160]	; (8000a44 <OLED_login_sc+0xcc>)
 80009a2:	4829      	ldr	r0, [pc, #164]	; (8000a48 <OLED_login_sc+0xd0>)
 80009a4:	f000 ff2e 	bl	8001804 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 80009a8:	2119      	movs	r1, #25
 80009aa:	2004      	movs	r0, #4
 80009ac:	f000 fe94 	bl	80016d8 <SSD1306_GotoXY>
		SSD1306_Puts ("PASSWORD", &Font_11x18, 1);
 80009b0:	2201      	movs	r2, #1
 80009b2:	4924      	ldr	r1, [pc, #144]	; (8000a44 <OLED_login_sc+0xcc>)
 80009b4:	4825      	ldr	r0, [pc, #148]	; (8000a4c <OLED_login_sc+0xd4>)
 80009b6:	f000 ff25 	bl	8001804 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 80009ba:	212c      	movs	r1, #44	; 0x2c
 80009bc:	2004      	movs	r0, #4
 80009be:	f000 fe8b 	bl	80016d8 <SSD1306_GotoXY>
		SSD1306_Puts ("TRIES:", &Font_11x18, 1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	491f      	ldr	r1, [pc, #124]	; (8000a44 <OLED_login_sc+0xcc>)
 80009c6:	4822      	ldr	r0, [pc, #136]	; (8000a50 <OLED_login_sc+0xd8>)
 80009c8:	f000 ff1c 	bl	8001804 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 80009cc:	2301      	movs	r3, #1
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2301      	movs	r3, #1
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	2101      	movs	r1, #1
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 ff39 	bl	800184e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 80009dc:	2301      	movs	r3, #1
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2340      	movs	r3, #64	; 0x40
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 ff31 	bl	800184e <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 80009ec:	2301      	movs	r3, #1
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	2100      	movs	r1, #0
 80009f6:	2080      	movs	r0, #128	; 0x80
 80009f8:	f000 ff29 	bl	800184e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 80009fc:	2301      	movs	r3, #1
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 ff21 	bl	800184e <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	233e      	movs	r3, #62	; 0x3e
 8000a12:	221b      	movs	r2, #27
 8000a14:	2102      	movs	r1, #2
 8000a16:	2064      	movs	r0, #100	; 0x64
 8000a18:	f001 f814 	bl	8001a44 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 8000a1c:	2119      	movs	r1, #25
 8000a1e:	206e      	movs	r0, #110	; 0x6e
 8000a20:	f000 fe5a 	bl	80016d8 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(loginTries+'0'), &Font_11x18, 1);
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <OLED_login_sc+0xdc>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	3330      	adds	r3, #48	; 0x30
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4905      	ldr	r1, [pc, #20]	; (8000a44 <OLED_login_sc+0xcc>)
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fe67 	bl	8001704 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 8000a36:	f000 fda9 	bl	800158c <SSD1306_UpdateScreen>
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000040c 	.word	0x2000040c
 8000a44:	20000000 	.word	0x20000000
 8000a48:	0800a8c4 	.word	0x0800a8c4
 8000a4c:	0800a8cc 	.word	0x0800a8cc
 8000a50:	0800a8d8 	.word	0x0800a8d8
 8000a54:	20000092 	.word	0x20000092

08000a58 <OLED_block_sc>:

void OLED_block_sc(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000a5e:	f001 fdb7 	bl	80025d0 <HAL_GetTick>
 8000a62:	4602      	mov	r2, r0
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <OLED_block_sc+0x8c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a6e:	d936      	bls.n	8000ade <OLED_block_sc+0x86>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 fdb9 	bl	80015e8 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 8000a76:	2106      	movs	r1, #6
 8000a78:	2004      	movs	r0, #4
 8000a7a:	f000 fe2d 	bl	80016d8 <SSD1306_GotoXY>
		SSD1306_Puts ("- DEVICE  -", &Font_11x18, 1);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4919      	ldr	r1, [pc, #100]	; (8000ae8 <OLED_block_sc+0x90>)
 8000a82:	481a      	ldr	r0, [pc, #104]	; (8000aec <OLED_block_sc+0x94>)
 8000a84:	f000 febe 	bl	8001804 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000a88:	2119      	movs	r1, #25
 8000a8a:	2004      	movs	r0, #4
 8000a8c:	f000 fe24 	bl	80016d8 <SSD1306_GotoXY>
		SSD1306_Puts ("- BLOCKED -", &Font_11x18, 1);
 8000a90:	2201      	movs	r2, #1
 8000a92:	4915      	ldr	r1, [pc, #84]	; (8000ae8 <OLED_block_sc+0x90>)
 8000a94:	4816      	ldr	r0, [pc, #88]	; (8000af0 <OLED_block_sc+0x98>)
 8000a96:	f000 feb5 	bl	8001804 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	2280      	movs	r2, #128	; 0x80
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 fed2 	bl	800184e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000aaa:	2301      	movs	r3, #1
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 feca 	bl	800184e <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000aba:	2301      	movs	r3, #1
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2080      	movs	r0, #128	; 0x80
 8000ac6:	f000 fec2 	bl	800184e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000aca:	2301      	movs	r3, #1
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2340      	movs	r3, #64	; 0x40
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f000 feba 	bl	800184e <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 8000ada:	f000 fd57 	bl	800158c <SSD1306_UpdateScreen>
	}
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000410 	.word	0x20000410
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	0800a8e0 	.word	0x0800a8e0
 8000af0:	0800a8ec 	.word	0x0800a8ec

08000af4 <sendUSB>:
		keyPressed = 9;
	}
	HAL_Delay(200);
}

void sendUSB(uint8_t *pass){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	while(*pass != '\0'){
 8000afc:	e066      	b.n	8000bcc <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e060      	b.n	8000bc6 <sendUSB+0xd2>
			if(*pass == keys[i].value){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7819      	ldrb	r1, [r3, #0]
 8000b08:	4834      	ldr	r0, [pc, #208]	; (8000bdc <sendUSB+0xe8>)
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	4403      	add	r3, r0
 8000b14:	3301      	adds	r3, #1
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	d11f      	bne.n	8000b5c <sendUSB+0x68>
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000b1c:	492f      	ldr	r1, [pc, #188]	; (8000bdc <sendUSB+0xe8>)
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	4613      	mov	r3, r2
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4413      	add	r3, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <sendUSB+0xec>)
 8000b2c:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b2e:	2208      	movs	r2, #8
 8000b30:	492b      	ldr	r1, [pc, #172]	; (8000be0 <sendUSB+0xec>)
 8000b32:	482c      	ldr	r0, [pc, #176]	; (8000be4 <sendUSB+0xf0>)
 8000b34:	f007 fba0 	bl	8008278 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000b38:	2032      	movs	r0, #50	; 0x32
 8000b3a:	f001 fd55 	bl	80025e8 <HAL_Delay>
				keyboardhid.KEYCODE1 = 0x00;
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <sendUSB+0xec>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b44:	2208      	movs	r2, #8
 8000b46:	4926      	ldr	r1, [pc, #152]	; (8000be0 <sendUSB+0xec>)
 8000b48:	4826      	ldr	r0, [pc, #152]	; (8000be4 <sendUSB+0xf0>)
 8000b4a:	f007 fb95 	bl	8008278 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000b4e:	2032      	movs	r0, #50	; 0x32
 8000b50:	f001 fd4a 	bl	80025e8 <HAL_Delay>
				pass++;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3301      	adds	r3, #1
 8000b58:	607b      	str	r3, [r7, #4]
				break;
 8000b5a:	e037      	b.n	8000bcc <sendUSB+0xd8>
			}
			else if(*pass == keys[i].shiftValue){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7819      	ldrb	r1, [r3, #0]
 8000b60:	481e      	ldr	r0, [pc, #120]	; (8000bdc <sendUSB+0xe8>)
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	4403      	add	r3, r0
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4299      	cmp	r1, r3
 8000b72:	d125      	bne.n	8000bc0 <sendUSB+0xcc>
				keyboardhid.MODIFIER = 0x02; // lewy Shift naciśniety
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <sendUSB+0xec>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000b7a:	4918      	ldr	r1, [pc, #96]	; (8000bdc <sendUSB+0xe8>)
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <sendUSB+0xec>)
 8000b8a:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b8c:	2208      	movs	r2, #8
 8000b8e:	4914      	ldr	r1, [pc, #80]	; (8000be0 <sendUSB+0xec>)
 8000b90:	4814      	ldr	r0, [pc, #80]	; (8000be4 <sendUSB+0xf0>)
 8000b92:	f007 fb71 	bl	8008278 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000b96:	2032      	movs	r0, #50	; 0x32
 8000b98:	f001 fd26 	bl	80025e8 <HAL_Delay>
				keyboardhid.MODIFIER = 0x00; // lewy Shift puszczony
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <sendUSB+0xec>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = 0x00;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <sendUSB+0xec>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000ba8:	2208      	movs	r2, #8
 8000baa:	490d      	ldr	r1, [pc, #52]	; (8000be0 <sendUSB+0xec>)
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <sendUSB+0xf0>)
 8000bae:	f007 fb63 	bl	8008278 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000bb2:	2032      	movs	r0, #50	; 0x32
 8000bb4:	f001 fd18 	bl	80025e8 <HAL_Delay>
				pass++;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
				break;
 8000bbe:	e005      	b.n	8000bcc <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8000bca:	dd9b      	ble.n	8000b04 <sendUSB+0x10>
	while(*pass != '\0'){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d194      	bne.n	8000afe <sendUSB+0xa>
			}
		}
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	200003f8 	.word	0x200003f8
 8000be4:	20000bc0 	.word	0x20000bc0

08000be8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bee:	f001 fc89 	bl	8002504 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bf2:	f000 f9e7 	bl	8000fc4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bf6:	f7ff fd01 	bl	80005fc <MX_GPIO_Init>
	MX_I2C1_Init();
 8000bfa:	f7ff fda9 	bl	8000750 <MX_I2C1_Init>
	MX_SPI3_Init();
 8000bfe:	f000 fb83 	bl	8001308 <MX_SPI3_Init>
	MX_TIM2_Init();
 8000c02:	f001 f8cf 	bl	8001da4 <MX_TIM2_Init>
	if(HAL_GPIO_ReadPin(ROT_BUT_GPIO_Port, ROT_BUT_Pin)){
 8000c06:	2102      	movs	r1, #2
 8000c08:	48bb      	ldr	r0, [pc, #748]	; (8000ef8 <main+0x310>)
 8000c0a:	f001 ffbf 	bl	8002b8c <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d006      	beq.n	8000c22 <main+0x3a>
		MX_USB_DEVICE_Init(0);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f008 fca9 	bl	800956c <MX_USB_DEVICE_Init>
		deviceFLAG = 0;
 8000c1a:	4bb8      	ldr	r3, [pc, #736]	; (8000efc <main+0x314>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e007      	b.n	8000c32 <main+0x4a>
	}else{
		MX_USB_DEVICE_Init(1);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f008 fca2 	bl	800956c <MX_USB_DEVICE_Init>
		deviceFLAG = 1;
 8000c28:	4bb4      	ldr	r3, [pc, #720]	; (8000efc <main+0x314>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
		MX_CRC_Init();
 8000c2e:	f7ff fcaf 	bl	8000590 <MX_CRC_Init>
	}
	/* USER CODE BEGIN 2 */

	//---- Inicjalizacja wyświetlacza OLED ----
	SSD1306_Init();
 8000c32:	f000 fbe7 	bl	8001404 <SSD1306_Init>

	//---- Inicjalizacja obsługi enkodera ----
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000c36:	213c      	movs	r1, #60	; 0x3c
 8000c38:	48b1      	ldr	r0, [pc, #708]	; (8000f00 <main+0x318>)
 8000c3a:	f005 f8ef 	bl	8005e1c <HAL_TIM_Encoder_Start_IT>

	//---- Inicjalizacja pamięci FLASH ----
	W25qxx_Init();
 8000c3e:	f001 fa65 	bl	800210c <W25qxx_Init>
	// W25qxx_EraseChip();
	// W25qxx_WriteSector(writeBuffer, 1, 0, 8);
	// W25qxx_ReadSector(readBuffer, 1, 0, 8);

	memcpy(passwordWrite, "123456\0", sizeof(passwordWrite));
 8000c42:	4ab0      	ldr	r2, [pc, #704]	; (8000f04 <main+0x31c>)
 8000c44:	4bb0      	ldr	r3, [pc, #704]	; (8000f08 <main+0x320>)
 8000c46:	4610      	mov	r0, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4e:	461a      	mov	r2, r3
 8000c50:	f009 fa10 	bl	800a074 <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000c54:	49ad      	ldr	r1, [pc, #692]	; (8000f0c <main+0x324>)
 8000c56:	48ab      	ldr	r0, [pc, #684]	; (8000f04 <main+0x31c>)
 8000c58:	f7ff fdf0 	bl	800083c <XORCipher>
	W25qxx_WritePage(passwordWrite, 1, 0, 255);
 8000c5c:	23ff      	movs	r3, #255	; 0xff
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2101      	movs	r1, #1
 8000c62:	48a8      	ldr	r0, [pc, #672]	; (8000f04 <main+0x31c>)
 8000c64:	f001 fb1e 	bl	80022a4 <W25qxx_WritePage>
	memcpy(passwordWrite, "654321\0", sizeof(passwordWrite));
 8000c68:	4aa6      	ldr	r2, [pc, #664]	; (8000f04 <main+0x31c>)
 8000c6a:	4ba9      	ldr	r3, [pc, #676]	; (8000f10 <main+0x328>)
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c74:	461a      	mov	r2, r3
 8000c76:	f009 f9fd 	bl	800a074 <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000c7a:	49a4      	ldr	r1, [pc, #656]	; (8000f0c <main+0x324>)
 8000c7c:	48a1      	ldr	r0, [pc, #644]	; (8000f04 <main+0x31c>)
 8000c7e:	f7ff fddd 	bl	800083c <XORCipher>
	W25qxx_WritePage(passwordWrite, 2, 0, 256);
 8000c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c86:	2200      	movs	r2, #0
 8000c88:	2102      	movs	r1, #2
 8000c8a:	489e      	ldr	r0, [pc, #632]	; (8000f04 <main+0x31c>)
 8000c8c:	f001 fb0a 	bl	80022a4 <W25qxx_WritePage>
	memcpy(passwordWrite, "HaloHalo\0", sizeof(passwordWrite));
 8000c90:	4a9c      	ldr	r2, [pc, #624]	; (8000f04 <main+0x31c>)
 8000c92:	4ba0      	ldr	r3, [pc, #640]	; (8000f14 <main+0x32c>)
 8000c94:	4610      	mov	r0, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	f009 f9e9 	bl	800a074 <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000ca2:	499a      	ldr	r1, [pc, #616]	; (8000f0c <main+0x324>)
 8000ca4:	4897      	ldr	r0, [pc, #604]	; (8000f04 <main+0x31c>)
 8000ca6:	f7ff fdc9 	bl	800083c <XORCipher>
	W25qxx_WritePage(passwordWrite, 3, 0, 256);
 8000caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	4894      	ldr	r0, [pc, #592]	; (8000f04 <main+0x31c>)
 8000cb4:	f001 faf6 	bl	80022a4 <W25qxx_WritePage>
	memcpy(passwordWrite, "Cartoon-Duck-14-Coffee-Glvs\0", sizeof(passwordWrite));
 8000cb8:	4a92      	ldr	r2, [pc, #584]	; (8000f04 <main+0x31c>)
 8000cba:	4b97      	ldr	r3, [pc, #604]	; (8000f18 <main+0x330>)
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	f009 f9d5 	bl	800a074 <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000cca:	4990      	ldr	r1, [pc, #576]	; (8000f0c <main+0x324>)
 8000ccc:	488d      	ldr	r0, [pc, #564]	; (8000f04 <main+0x31c>)
 8000cce:	f7ff fdb5 	bl	800083c <XORCipher>
	W25qxx_WritePage(passwordWrite, 4, 0, 256);
 8000cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2104      	movs	r1, #4
 8000cda:	488a      	ldr	r0, [pc, #552]	; (8000f04 <main+0x31c>)
 8000cdc:	f001 fae2 	bl	80022a4 <W25qxx_WritePage>
	memcpy(passwordWrite, "doubleclick\0", sizeof(passwordWrite));
 8000ce0:	4a88      	ldr	r2, [pc, #544]	; (8000f04 <main+0x31c>)
 8000ce2:	4b8e      	ldr	r3, [pc, #568]	; (8000f1c <main+0x334>)
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cec:	461a      	mov	r2, r3
 8000cee:	f009 f9c1 	bl	800a074 <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000cf2:	4986      	ldr	r1, [pc, #536]	; (8000f0c <main+0x324>)
 8000cf4:	4883      	ldr	r0, [pc, #524]	; (8000f04 <main+0x31c>)
 8000cf6:	f7ff fda1 	bl	800083c <XORCipher>
	W25qxx_WritePage(passwordWrite, 5, 0, 256);
 8000cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	4880      	ldr	r0, [pc, #512]	; (8000f04 <main+0x31c>)
 8000d04:	f001 face 	bl	80022a4 <W25qxx_WritePage>
	memcpy(passwordWrite, "supersecure\0", sizeof(passwordWrite));
 8000d08:	4a7e      	ldr	r2, [pc, #504]	; (8000f04 <main+0x31c>)
 8000d0a:	4b85      	ldr	r3, [pc, #532]	; (8000f20 <main+0x338>)
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d14:	461a      	mov	r2, r3
 8000d16:	f009 f9ad 	bl	800a074 <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000d1a:	497c      	ldr	r1, [pc, #496]	; (8000f0c <main+0x324>)
 8000d1c:	4879      	ldr	r0, [pc, #484]	; (8000f04 <main+0x31c>)
 8000d1e:	f7ff fd8d 	bl	800083c <XORCipher>
	W25qxx_WritePage(passwordWrite, 6, 0, 256);
 8000d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d26:	2200      	movs	r2, #0
 8000d28:	2106      	movs	r1, #6
 8000d2a:	4876      	ldr	r0, [pc, #472]	; (8000f04 <main+0x31c>)
 8000d2c:	f001 faba 	bl	80022a4 <W25qxx_WritePage>
	memcpy(passwordWrite, "Qwerty\0", sizeof(passwordWrite));
 8000d30:	4a74      	ldr	r2, [pc, #464]	; (8000f04 <main+0x31c>)
 8000d32:	4b7c      	ldr	r3, [pc, #496]	; (8000f24 <main+0x33c>)
 8000d34:	4610      	mov	r0, r2
 8000d36:	4619      	mov	r1, r3
 8000d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f009 f999 	bl	800a074 <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000d42:	4972      	ldr	r1, [pc, #456]	; (8000f0c <main+0x324>)
 8000d44:	486f      	ldr	r0, [pc, #444]	; (8000f04 <main+0x31c>)
 8000d46:	f7ff fd79 	bl	800083c <XORCipher>
	W25qxx_WritePage(passwordWrite, 7, 0, 256);
 8000d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2107      	movs	r1, #7
 8000d52:	486c      	ldr	r0, [pc, #432]	; (8000f04 <main+0x31c>)
 8000d54:	f001 faa6 	bl	80022a4 <W25qxx_WritePage>
	memcpy(passwordWrite, "DEFAULT\0", sizeof(passwordWrite));
 8000d58:	4a6a      	ldr	r2, [pc, #424]	; (8000f04 <main+0x31c>)
 8000d5a:	4b73      	ldr	r3, [pc, #460]	; (8000f28 <main+0x340>)
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d64:	461a      	mov	r2, r3
 8000d66:	f009 f985 	bl	800a074 <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000d6a:	4968      	ldr	r1, [pc, #416]	; (8000f0c <main+0x324>)
 8000d6c:	4865      	ldr	r0, [pc, #404]	; (8000f04 <main+0x31c>)
 8000d6e:	f7ff fd65 	bl	800083c <XORCipher>
	W25qxx_WritePage(passwordWrite, 8, 0, 256);
 8000d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d76:	2200      	movs	r2, #0
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4862      	ldr	r0, [pc, #392]	; (8000f04 <main+0x31c>)
 8000d7c:	f001 fa92 	bl	80022a4 <W25qxx_WritePage>
	memcpy(passwordWrite, "password\0", sizeof(passwordWrite));
 8000d80:	4a60      	ldr	r2, [pc, #384]	; (8000f04 <main+0x31c>)
 8000d82:	4b6a      	ldr	r3, [pc, #424]	; (8000f2c <main+0x344>)
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f009 f971 	bl	800a074 <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000d92:	495e      	ldr	r1, [pc, #376]	; (8000f0c <main+0x324>)
 8000d94:	485b      	ldr	r0, [pc, #364]	; (8000f04 <main+0x31c>)
 8000d96:	f7ff fd51 	bl	800083c <XORCipher>
	W25qxx_WritePage(passwordWrite, 9, 0, 256);
 8000d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2109      	movs	r1, #9
 8000da2:	4858      	ldr	r0, [pc, #352]	; (8000f04 <main+0x31c>)
 8000da4:	f001 fa7e 	bl	80022a4 <W25qxx_WritePage>
	memcpy(passwordWrite, "0\0", sizeof(passwordWrite));
 8000da8:	4a56      	ldr	r2, [pc, #344]	; (8000f04 <main+0x31c>)
 8000daa:	4b61      	ldr	r3, [pc, #388]	; (8000f30 <main+0x348>)
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db4:	461a      	mov	r2, r3
 8000db6:	f009 f95d 	bl	800a074 <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000dba:	4954      	ldr	r1, [pc, #336]	; (8000f0c <main+0x324>)
 8000dbc:	4851      	ldr	r0, [pc, #324]	; (8000f04 <main+0x31c>)
 8000dbe:	f7ff fd3d 	bl	800083c <XORCipher>
	W25qxx_WritePage(passwordWrite, 10, 0, 256);
 8000dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	210a      	movs	r1, #10
 8000dca:	484e      	ldr	r0, [pc, #312]	; (8000f04 <main+0x31c>)
 8000dcc:	f001 fa6a 	bl	80022a4 <W25qxx_WritePage>

	//---- Inicjalizacja obsługi macierzy przycisków
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	4857      	ldr	r0, [pc, #348]	; (8000f34 <main+0x34c>)
 8000dd6:	f001 fef1 	bl	8002bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	4855      	ldr	r0, [pc, #340]	; (8000f34 <main+0x34c>)
 8000de0:	f001 feec 	bl	8002bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	4852      	ldr	r0, [pc, #328]	; (8000f34 <main+0x34c>)
 8000dea:	f001 fee7 	bl	8002bbc <HAL_GPIO_WritePin>

	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	4840      	ldr	r0, [pc, #256]	; (8000ef8 <main+0x310>)
 8000df6:	f001 fee1 	bl	8002bbc <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(deviceFLAG){
 8000dfa:	4b40      	ldr	r3, [pc, #256]	; (8000efc <main+0x314>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d025      	beq.n	8000e4e <main+0x266>
			uint8_t Text[] = "Hello\r\n";
 8000e02:	4a4d      	ldr	r2, [pc, #308]	; (8000f38 <main+0x350>)
 8000e04:	463b      	mov	r3, r7
 8000e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e0a:	e883 0003 	stmia.w	r3, {r0, r1}
			CDC_Transmit_FS(Text,6); /*when commented the port is recognized*/
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2106      	movs	r1, #6
 8000e12:	4618      	mov	r0, r3
 8000e14:	f008 fcaa 	bl	800976c <CDC_Transmit_FS>
			if(ReceivedDataFlag == 1){
 8000e18:	4b48      	ldr	r3, [pc, #288]	; (8000f3c <main+0x354>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d111      	bne.n	8000e44 <main+0x25c>
				ReceivedDataFlag = 0;
 8000e20:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <main+0x354>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]

				MessageLength = sprintf(DataToSend, "Odebrano: %s\n\r", ReceivedData);
 8000e26:	4a46      	ldr	r2, [pc, #280]	; (8000f40 <main+0x358>)
 8000e28:	4946      	ldr	r1, [pc, #280]	; (8000f44 <main+0x35c>)
 8000e2a:	4847      	ldr	r0, [pc, #284]	; (8000f48 <main+0x360>)
 8000e2c:	f009 f9ee 	bl	800a20c <siprintf>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b45      	ldr	r3, [pc, #276]	; (8000f4c <main+0x364>)
 8000e36:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 8000e38:	4b44      	ldr	r3, [pc, #272]	; (8000f4c <main+0x364>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4842      	ldr	r0, [pc, #264]	; (8000f48 <main+0x360>)
 8000e40:	f008 fc94 	bl	800976c <CDC_Transmit_FS>
			}
			HAL_Delay(1000);
 8000e44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e48:	f001 fbce 	bl	80025e8 <HAL_Delay>
 8000e4c:	e7d5      	b.n	8000dfa <main+0x212>
		}else{
			if(deviceState == 0){
 8000e4e:	4b40      	ldr	r3, [pc, #256]	; (8000f50 <main+0x368>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d148      	bne.n	8000ee8 <main+0x300>
				OLED_login_sc();
 8000e56:	f7ff fd8f 	bl	8000978 <OLED_login_sc>
				if(keyFlag){
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <main+0x36c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d010      	beq.n	8000e86 <main+0x29e>
					loginBuff[loginCounter] = keyPressed;
 8000e64:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <main+0x370>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b3c      	ldr	r3, [pc, #240]	; (8000f5c <main+0x374>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2d9      	uxtb	r1, r3
 8000e70:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <main+0x378>)
 8000e72:	5499      	strb	r1, [r3, r2]
					loginCounter++;
 8000e74:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <main+0x370>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <main+0x370>)
 8000e7e:	701a      	strb	r2, [r3, #0]
					keyFlag = 0;
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <main+0x36c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
				}
				if(loginCounter == 4){
 8000e86:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <main+0x370>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	d124      	bne.n	8000ed8 <main+0x2f0>
					if(login[0] == loginBuff[0] && login[1] == loginBuff[1] && login[2] == loginBuff[2] && login[3] == loginBuff[3]){
 8000e8e:	4b35      	ldr	r3, [pc, #212]	; (8000f64 <main+0x37c>)
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	4b33      	ldr	r3, [pc, #204]	; (8000f60 <main+0x378>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d115      	bne.n	8000ec6 <main+0x2de>
 8000e9a:	4b32      	ldr	r3, [pc, #200]	; (8000f64 <main+0x37c>)
 8000e9c:	785a      	ldrb	r2, [r3, #1]
 8000e9e:	4b30      	ldr	r3, [pc, #192]	; (8000f60 <main+0x378>)
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d10f      	bne.n	8000ec6 <main+0x2de>
 8000ea6:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <main+0x37c>)
 8000ea8:	789a      	ldrb	r2, [r3, #2]
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <main+0x378>)
 8000eac:	789b      	ldrb	r3, [r3, #2]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d109      	bne.n	8000ec6 <main+0x2de>
 8000eb2:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <main+0x37c>)
 8000eb4:	78da      	ldrb	r2, [r3, #3]
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <main+0x378>)
 8000eb8:	78db      	ldrb	r3, [r3, #3]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d103      	bne.n	8000ec6 <main+0x2de>
						deviceState = 1;
 8000ebe:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <main+0x368>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e008      	b.n	8000ed8 <main+0x2f0>
					}else{
						loginCounter = 0;
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <main+0x370>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
						loginTries--;
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <main+0x380>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <main+0x380>)
 8000ed6:	701a      	strb	r2, [r3, #0]
					}
				}
				if(loginTries == 0){
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <main+0x380>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d18c      	bne.n	8000dfa <main+0x212>
					deviceState = 99;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <main+0x368>)
 8000ee2:	2263      	movs	r2, #99	; 0x63
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	e788      	b.n	8000dfa <main+0x212>
				}
			}
			else if(deviceState == 99){
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <main+0x368>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b63      	cmp	r3, #99	; 0x63
 8000eee:	d13d      	bne.n	8000f6c <main+0x384>
				OLED_block_sc();
 8000ef0:	f7ff fdb2 	bl	8000a58 <OLED_block_sc>
 8000ef4:	e781      	b.n	8000dfa <main+0x212>
 8000ef6:	bf00      	nop
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	200003ce 	.word	0x200003ce
 8000f00:	20000b54 	.word	0x20000b54
 8000f04:	200009b8 	.word	0x200009b8
 8000f08:	0800a8f8 	.word	0x0800a8f8
 8000f0c:	20000098 	.word	0x20000098
 8000f10:	0800a900 	.word	0x0800a900
 8000f14:	0800a908 	.word	0x0800a908
 8000f18:	0800a914 	.word	0x0800a914
 8000f1c:	0800a934 	.word	0x0800a934
 8000f20:	0800a944 	.word	0x0800a944
 8000f24:	0800a954 	.word	0x0800a954
 8000f28:	0800a95c 	.word	0x0800a95c
 8000f2c:	0800a968 	.word	0x0800a968
 8000f30:	0800a974 	.word	0x0800a974
 8000f34:	40020000 	.word	0x40020000
 8000f38:	0800a988 	.word	0x0800a988
 8000f3c:	20000401 	.word	0x20000401
 8000f40:	20000abc 	.word	0x20000abc
 8000f44:	0800a978 	.word	0x0800a978
 8000f48:	20000890 	.word	0x20000890
 8000f4c:	20000400 	.word	0x20000400
 8000f50:	200003cc 	.word	0x200003cc
 8000f54:	200003e5 	.word	0x200003e5
 8000f58:	200003cd 	.word	0x200003cd
 8000f5c:	200003e4 	.word	0x200003e4
 8000f60:	20000ab8 	.word	0x20000ab8
 8000f64:	20000094 	.word	0x20000094
 8000f68:	20000092 	.word	0x20000092
			}
			else{
				OLED_page_sc();
 8000f6c:	f7ff fc92 	bl	8000894 <OLED_page_sc>
				if(keyFlag){
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <main+0x3c8>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f43f af3f 	beq.w	8000dfa <main+0x212>
					W25qxx_ReadPage(passwordRead, pageNumber*9+keyPressed, 0, 255);
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <main+0x3cc>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	4413      	add	r3, r2
 8000f86:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <main+0x3d0>)
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	1899      	adds	r1, r3, r2
 8000f8e:	23ff      	movs	r3, #255	; 0xff
 8000f90:	2200      	movs	r2, #0
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <main+0x3d4>)
 8000f94:	f001 fa0c 	bl	80023b0 <W25qxx_ReadPage>
					XORCipher(passwordRead, cipherKey);
 8000f98:	4909      	ldr	r1, [pc, #36]	; (8000fc0 <main+0x3d8>)
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <main+0x3d4>)
 8000f9c:	f7ff fc4e 	bl	800083c <XORCipher>
					sendUSB(passwordRead);
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <main+0x3d4>)
 8000fa2:	f7ff fda7 	bl	8000af4 <sendUSB>
					keyFlag = 0;
 8000fa6:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <main+0x3c8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
		if(deviceFLAG){
 8000fac:	e725      	b.n	8000dfa <main+0x212>
 8000fae:	bf00      	nop
 8000fb0:	200003e5 	.word	0x200003e5
 8000fb4:	20000404 	.word	0x20000404
 8000fb8:	200003e4 	.word	0x200003e4
 8000fbc:	200008b8 	.word	0x200008b8
 8000fc0:	20000098 	.word	0x20000098

08000fc4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2230      	movs	r2, #48	; 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f009 f859 	bl	800a08a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b27      	ldr	r3, [pc, #156]	; (800108c <SystemClock_Config+0xc8>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <SystemClock_Config+0xc8>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <SystemClock_Config+0xc8>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <SystemClock_Config+0xcc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a20      	ldr	r2, [pc, #128]	; (8001090 <SystemClock_Config+0xcc>)
 800100e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <SystemClock_Config+0xcc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001032:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001034:	2319      	movs	r3, #25
 8001036:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8001038:	23c0      	movs	r3, #192	; 0xc0
 800103a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001040:	2304      	movs	r3, #4
 8001042:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fcd9 	bl	8004a00 <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001054:	f000 f950 	bl	80012f8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001058:	230f      	movs	r3, #15
 800105a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001068:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2103      	movs	r1, #3
 8001074:	4618      	mov	r0, r3
 8001076:	f003 ff33 	bl	8004ee0 <HAL_RCC_ClockConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8001080:	f000 f93a 	bl	80012f8 <Error_Handler>
	}
}
 8001084:	bf00      	nop
 8001086:	3750      	adds	r7, #80	; 0x50
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40007000 	.word	0x40007000

08001094 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80010a4:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x90>)
 80010ae:	801a      	strh	r2, [r3, #0]
	if(count - old_count > 5)
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x90>)
 80010b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x94>)
 80010ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	dd0e      	ble.n	80010e2 <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(pageNumber > 0)
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_TIM_IC_CaptureCallback+0x98>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <HAL_TIM_IC_CaptureCallback+0x42>
			pageNumber--;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_TIM_IC_CaptureCallback+0x98>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	4a16      	ldr	r2, [pc, #88]	; (800112c <HAL_TIM_IC_CaptureCallback+0x98>)
 80010d4:	6013      	str	r3, [r2, #0]
		old_count = count;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x90>)
 80010d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x94>)
 80010de:	801a      	strh	r2, [r3, #0]
		if(pageNumber < 9)
			pageNumber++;
		old_count = count;
	}

}
 80010e0:	e018      	b.n	8001114 <HAL_TIM_IC_CaptureCallback+0x80>
	}else if(count - old_count < -5)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x90>)
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x94>)
 80010ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	f113 0f05 	cmn.w	r3, #5
 80010f6:	da0d      	bge.n	8001114 <HAL_TIM_IC_CaptureCallback+0x80>
		if(pageNumber < 9)
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_TIM_IC_CaptureCallback+0x98>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d804      	bhi.n	800110a <HAL_TIM_IC_CaptureCallback+0x76>
			pageNumber++;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_TIM_IC_CaptureCallback+0x98>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_TIM_IC_CaptureCallback+0x98>)
 8001108:	6013      	str	r3, [r2, #0]
		old_count = count;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x90>)
 800110c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001112:	801a      	strh	r2, [r3, #0]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	200003f0 	.word	0x200003f0
 8001124:	200003f4 	.word	0x200003f4
 8001128:	200003f6 	.word	0x200003f6
 800112c:	20000404 	.word	0x20000404

08001130 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 800113a:	f001 fa49 	bl	80025d0 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	4b66      	ldr	r3, [pc, #408]	; (80012dc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001142:	601a      	str	r2, [r3, #0]
	if(currentMillis - previousMillis > 300)
 8001144:	4b65      	ldr	r3, [pc, #404]	; (80012dc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b65      	ldr	r3, [pc, #404]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001152:	f240 80be 	bls.w	80012d2 <HAL_GPIO_EXTI_Callback+0x1a2>
	{
		GPIO_InitStructPrivate.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8001156:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001158:	221c      	movs	r2, #28
 800115a:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800115c:	4b61      	ldr	r3, [pc, #388]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001162:	4b60      	ldr	r3, [pc, #384]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001164:	2202      	movs	r2, #2
 8001166:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 800116e:	495d      	ldr	r1, [pc, #372]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001170:	485d      	ldr	r0, [pc, #372]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001172:	f001 fb89 	bl	8002888 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2120      	movs	r1, #32
 800117a:	485b      	ldr	r0, [pc, #364]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800117c:	f001 fd1e 	bl	8002bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	4858      	ldr	r0, [pc, #352]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001186:	f001 fd19 	bl	8002bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	4856      	ldr	r0, [pc, #344]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001190:	f001 fd14 	bl	8002bbc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8001194:	2110      	movs	r1, #16
 8001196:	4854      	ldr	r0, [pc, #336]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001198:	f001 fcf8 	bl	8002b8c <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_EXTI_Callback+0x7a>
			keyPressed = 1;
 80011a2:	4b52      	ldr	r3, [pc, #328]	; (80012ec <HAL_GPIO_EXTI_Callback+0x1bc>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e014      	b.n	80011d4 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 80011aa:	2108      	movs	r1, #8
 80011ac:	484e      	ldr	r0, [pc, #312]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80011ae:	f001 fced 	bl	8002b8c <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_EXTI_Callback+0x90>
			keyPressed = 4;
 80011b8:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <HAL_GPIO_EXTI_Callback+0x1bc>)
 80011ba:	2204      	movs	r2, #4
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e009      	b.n	80011d4 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 80011c0:	2104      	movs	r1, #4
 80011c2:	4849      	ldr	r0, [pc, #292]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80011c4:	f001 fce2 	bl	8002b8c <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <HAL_GPIO_EXTI_Callback+0xa4>
			keyPressed = 7;
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <HAL_GPIO_EXTI_Callback+0x1bc>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	701a      	strb	r2, [r3, #0]

		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2120      	movs	r1, #32
 80011d8:	4843      	ldr	r0, [pc, #268]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80011da:	f001 fcef 	bl	8002bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	4841      	ldr	r0, [pc, #260]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80011e4:	f001 fcea 	bl	8002bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	483e      	ldr	r0, [pc, #248]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80011ee:	f001 fce5 	bl	8002bbc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 80011f2:	2110      	movs	r1, #16
 80011f4:	483c      	ldr	r0, [pc, #240]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80011f6:	f001 fcc9 	bl	8002b8c <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_EXTI_Callback+0xd8>
			keyPressed = 2;
 8001200:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001202:	2202      	movs	r2, #2
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e014      	b.n	8001232 <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8001208:	2108      	movs	r1, #8
 800120a:	4837      	ldr	r0, [pc, #220]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800120c:	f001 fcbe 	bl	8002b8c <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_EXTI_Callback+0xee>
			keyPressed = 5;
 8001216:	4b35      	ldr	r3, [pc, #212]	; (80012ec <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001218:	2205      	movs	r2, #5
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e009      	b.n	8001232 <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 800121e:	2104      	movs	r1, #4
 8001220:	4831      	ldr	r0, [pc, #196]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001222:	f001 fcb3 	bl	8002b8c <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <HAL_GPIO_EXTI_Callback+0x102>
			keyPressed = 8;
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <HAL_GPIO_EXTI_Callback+0x1bc>)
 800122e:	2208      	movs	r2, #8
 8001230:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2120      	movs	r1, #32
 8001236:	482c      	ldr	r0, [pc, #176]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001238:	f001 fcc0 	bl	8002bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	4829      	ldr	r0, [pc, #164]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001242:	f001 fcbb 	bl	8002bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	4827      	ldr	r0, [pc, #156]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800124c:	f001 fcb6 	bl	8002bbc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8001250:	2110      	movs	r1, #16
 8001252:	4825      	ldr	r0, [pc, #148]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001254:	f001 fc9a 	bl	8002b8c <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_EXTI_Callback+0x136>
			keyPressed = 3;
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001260:	2203      	movs	r2, #3
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e014      	b.n	8001290 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8001266:	2108      	movs	r1, #8
 8001268:	481f      	ldr	r0, [pc, #124]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800126a:	f001 fc8f 	bl	8002b8c <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_EXTI_Callback+0x14c>
			keyPressed = 6;
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001276:	2206      	movs	r2, #6
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e009      	b.n	8001290 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 800127c:	2104      	movs	r1, #4
 800127e:	481a      	ldr	r0, [pc, #104]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001280:	f001 fc84 	bl	8002b8c <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_GPIO_EXTI_Callback+0x160>
			keyPressed = 9;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_GPIO_EXTI_Callback+0x1bc>)
 800128c:	2209      	movs	r2, #9
 800128e:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2120      	movs	r1, #32
 8001294:	4814      	ldr	r0, [pc, #80]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001296:	f001 fc91 	bl	8002bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	2140      	movs	r1, #64	; 0x40
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80012a0:	f001 fc8c 	bl	8002bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80012aa:	f001 fc87 	bl	8002bbc <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80012b0:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80012b2:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80012b6:	2202      	movs	r2, #2
 80012b8:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 80012ba:	490a      	ldr	r1, [pc, #40]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80012be:	f001 fae3 	bl	8002888 <HAL_GPIO_Init>


		keyFlag = 1;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
		previousMillis = HAL_GetTick();
 80012c8:	f001 f982 	bl	80025d0 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80012d0:	601a      	str	r2, [r3, #0]
	}

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200003ec 	.word	0x200003ec
 80012e0:	200003e8 	.word	0x200003e8
 80012e4:	200003d0 	.word	0x200003d0
 80012e8:	40020000 	.word	0x40020000
 80012ec:	200003e4 	.word	0x200003e4
 80012f0:	10110000 	.word	0x10110000
 80012f4:	200003e5 	.word	0x200003e5

080012f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_SPI3_Init+0x64>)
 800130e:	4a18      	ldr	r2, [pc, #96]	; (8001370 <MX_SPI3_Init+0x68>)
 8001310:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_SPI3_Init+0x64>)
 8001314:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001318:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_SPI3_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_SPI3_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_SPI3_Init+0x64>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_SPI3_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_SPI3_Init+0x64>)
 8001334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001338:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_SPI3_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <MX_SPI3_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_SPI3_Init+0x64>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <MX_SPI3_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_SPI3_Init+0x64>)
 8001354:	220a      	movs	r2, #10
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_SPI3_Init+0x64>)
 800135a:	f003 ff79 	bl	8005250 <HAL_SPI_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001364:	f7ff ffc8 	bl	80012f8 <Error_Handler>
  }

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000afc 	.word	0x20000afc
 8001370:	40003c00 	.word	0x40003c00

08001374 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <HAL_SPI_MspInit+0x84>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12b      	bne.n	80013ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_SPI_MspInit+0x88>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a17      	ldr	r2, [pc, #92]	; (80013fc <HAL_SPI_MspInit+0x88>)
 80013a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_SPI_MspInit+0x88>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_SPI_MspInit+0x88>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_SPI_MspInit+0x88>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_SPI_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013ce:	2338      	movs	r3, #56	; 0x38
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013de:	2306      	movs	r3, #6
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_SPI_MspInit+0x8c>)
 80013ea:	f001 fa4d 	bl	8002888 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40003c00 	.word	0x40003c00
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020400 	.word	0x40020400

08001404 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800140a:	f000 fb85 	bl	8001b18 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800140e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001412:	2201      	movs	r2, #1
 8001414:	2178      	movs	r1, #120	; 0x78
 8001416:	485b      	ldr	r0, [pc, #364]	; (8001584 <SSD1306_Init+0x180>)
 8001418:	f001 fe38 	bl	800308c <HAL_I2C_IsDeviceReady>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001422:	2300      	movs	r3, #0
 8001424:	e0a9      	b.n	800157a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001426:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800142a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800142c:	e002      	b.n	8001434 <SSD1306_Init+0x30>
		p--;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3b01      	subs	r3, #1
 8001432:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800143a:	22ae      	movs	r2, #174	; 0xae
 800143c:	2100      	movs	r1, #0
 800143e:	2078      	movs	r0, #120	; 0x78
 8001440:	f000 fbc6 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001444:	2220      	movs	r2, #32
 8001446:	2100      	movs	r1, #0
 8001448:	2078      	movs	r0, #120	; 0x78
 800144a:	f000 fbc1 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800144e:	2210      	movs	r2, #16
 8001450:	2100      	movs	r1, #0
 8001452:	2078      	movs	r0, #120	; 0x78
 8001454:	f000 fbbc 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001458:	22b0      	movs	r2, #176	; 0xb0
 800145a:	2100      	movs	r1, #0
 800145c:	2078      	movs	r0, #120	; 0x78
 800145e:	f000 fbb7 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001462:	22c8      	movs	r2, #200	; 0xc8
 8001464:	2100      	movs	r1, #0
 8001466:	2078      	movs	r0, #120	; 0x78
 8001468:	f000 fbb2 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2078      	movs	r0, #120	; 0x78
 8001472:	f000 fbad 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001476:	2210      	movs	r2, #16
 8001478:	2100      	movs	r1, #0
 800147a:	2078      	movs	r0, #120	; 0x78
 800147c:	f000 fba8 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001480:	2240      	movs	r2, #64	; 0x40
 8001482:	2100      	movs	r1, #0
 8001484:	2078      	movs	r0, #120	; 0x78
 8001486:	f000 fba3 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800148a:	2281      	movs	r2, #129	; 0x81
 800148c:	2100      	movs	r1, #0
 800148e:	2078      	movs	r0, #120	; 0x78
 8001490:	f000 fb9e 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001494:	22ff      	movs	r2, #255	; 0xff
 8001496:	2100      	movs	r1, #0
 8001498:	2078      	movs	r0, #120	; 0x78
 800149a:	f000 fb99 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800149e:	22a1      	movs	r2, #161	; 0xa1
 80014a0:	2100      	movs	r1, #0
 80014a2:	2078      	movs	r0, #120	; 0x78
 80014a4:	f000 fb94 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80014a8:	22a6      	movs	r2, #166	; 0xa6
 80014aa:	2100      	movs	r1, #0
 80014ac:	2078      	movs	r0, #120	; 0x78
 80014ae:	f000 fb8f 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80014b2:	22a8      	movs	r2, #168	; 0xa8
 80014b4:	2100      	movs	r1, #0
 80014b6:	2078      	movs	r0, #120	; 0x78
 80014b8:	f000 fb8a 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80014bc:	223f      	movs	r2, #63	; 0x3f
 80014be:	2100      	movs	r1, #0
 80014c0:	2078      	movs	r0, #120	; 0x78
 80014c2:	f000 fb85 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014c6:	22a4      	movs	r2, #164	; 0xa4
 80014c8:	2100      	movs	r1, #0
 80014ca:	2078      	movs	r0, #120	; 0x78
 80014cc:	f000 fb80 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80014d0:	22d3      	movs	r2, #211	; 0xd3
 80014d2:	2100      	movs	r1, #0
 80014d4:	2078      	movs	r0, #120	; 0x78
 80014d6:	f000 fb7b 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2078      	movs	r0, #120	; 0x78
 80014e0:	f000 fb76 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80014e4:	22d5      	movs	r2, #213	; 0xd5
 80014e6:	2100      	movs	r1, #0
 80014e8:	2078      	movs	r0, #120	; 0x78
 80014ea:	f000 fb71 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014ee:	22f0      	movs	r2, #240	; 0xf0
 80014f0:	2100      	movs	r1, #0
 80014f2:	2078      	movs	r0, #120	; 0x78
 80014f4:	f000 fb6c 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80014f8:	22d9      	movs	r2, #217	; 0xd9
 80014fa:	2100      	movs	r1, #0
 80014fc:	2078      	movs	r0, #120	; 0x78
 80014fe:	f000 fb67 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001502:	2222      	movs	r2, #34	; 0x22
 8001504:	2100      	movs	r1, #0
 8001506:	2078      	movs	r0, #120	; 0x78
 8001508:	f000 fb62 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800150c:	22da      	movs	r2, #218	; 0xda
 800150e:	2100      	movs	r1, #0
 8001510:	2078      	movs	r0, #120	; 0x78
 8001512:	f000 fb5d 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001516:	2212      	movs	r2, #18
 8001518:	2100      	movs	r1, #0
 800151a:	2078      	movs	r0, #120	; 0x78
 800151c:	f000 fb58 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001520:	22db      	movs	r2, #219	; 0xdb
 8001522:	2100      	movs	r1, #0
 8001524:	2078      	movs	r0, #120	; 0x78
 8001526:	f000 fb53 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800152a:	2220      	movs	r2, #32
 800152c:	2100      	movs	r1, #0
 800152e:	2078      	movs	r0, #120	; 0x78
 8001530:	f000 fb4e 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001534:	228d      	movs	r2, #141	; 0x8d
 8001536:	2100      	movs	r1, #0
 8001538:	2078      	movs	r0, #120	; 0x78
 800153a:	f000 fb49 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800153e:	2214      	movs	r2, #20
 8001540:	2100      	movs	r1, #0
 8001542:	2078      	movs	r0, #120	; 0x78
 8001544:	f000 fb44 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001548:	22af      	movs	r2, #175	; 0xaf
 800154a:	2100      	movs	r1, #0
 800154c:	2078      	movs	r0, #120	; 0x78
 800154e:	f000 fb3f 	bl	8001bd0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001552:	222e      	movs	r2, #46	; 0x2e
 8001554:	2100      	movs	r1, #0
 8001556:	2078      	movs	r0, #120	; 0x78
 8001558:	f000 fb3a 	bl	8001bd0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800155c:	2000      	movs	r0, #0
 800155e:	f000 f843 	bl	80015e8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001562:	f000 f813 	bl	800158c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <SSD1306_Init+0x184>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <SSD1306_Init+0x184>)
 800156e:	2200      	movs	r2, #0
 8001570:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SSD1306_Init+0x184>)
 8001574:	2201      	movs	r2, #1
 8001576:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001578:	2301      	movs	r3, #1
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000834 	.word	0x20000834
 8001588:	20000814 	.word	0x20000814

0800158c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001592:	2300      	movs	r3, #0
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	e01d      	b.n	80015d4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	3b50      	subs	r3, #80	; 0x50
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	2100      	movs	r1, #0
 80015a2:	2078      	movs	r0, #120	; 0x78
 80015a4:	f000 fb14 	bl	8001bd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2078      	movs	r0, #120	; 0x78
 80015ae:	f000 fb0f 	bl	8001bd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80015b2:	2210      	movs	r2, #16
 80015b4:	2100      	movs	r1, #0
 80015b6:	2078      	movs	r0, #120	; 0x78
 80015b8:	f000 fb0a 	bl	8001bd0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	01db      	lsls	r3, r3, #7
 80015c0:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <SSD1306_UpdateScreen+0x58>)
 80015c2:	441a      	add	r2, r3
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	2078      	movs	r0, #120	; 0x78
 80015ca:	f000 fab9 	bl	8001b40 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	3301      	adds	r3, #1
 80015d2:	71fb      	strb	r3, [r7, #7]
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b07      	cmp	r3, #7
 80015d8:	d9de      	bls.n	8001598 <SSD1306_UpdateScreen+0xc>
	}
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000414 	.word	0x20000414

080015e8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <SSD1306_Fill+0x14>
 80015f8:	2300      	movs	r3, #0
 80015fa:	e000      	b.n	80015fe <SSD1306_Fill+0x16>
 80015fc:	23ff      	movs	r3, #255	; 0xff
 80015fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001602:	4619      	mov	r1, r3
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <SSD1306_Fill+0x2c>)
 8001606:	f008 fd40 	bl	800a08a <memset>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000414 	.word	0x20000414

08001618 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
 8001622:	460b      	mov	r3, r1
 8001624:	80bb      	strh	r3, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	70fb      	strb	r3, [r7, #3]
	if (
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	2b7f      	cmp	r3, #127	; 0x7f
 800162e:	d848      	bhi.n	80016c2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	2b3f      	cmp	r3, #63	; 0x3f
 8001634:	d845      	bhi.n	80016c2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <SSD1306_DrawPixel+0xb8>)
 8001638:	791b      	ldrb	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d11a      	bne.n	8001688 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001652:	88fa      	ldrh	r2, [r7, #6]
 8001654:	88bb      	ldrh	r3, [r7, #4]
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	b298      	uxth	r0, r3
 800165a:	4603      	mov	r3, r0
 800165c:	01db      	lsls	r3, r3, #7
 800165e:	4413      	add	r3, r2
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <SSD1306_DrawPixel+0xbc>)
 8001662:	5cd3      	ldrb	r3, [r2, r3]
 8001664:	b25a      	sxtb	r2, r3
 8001666:	88bb      	ldrh	r3, [r7, #4]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	b25b      	sxtb	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b259      	sxtb	r1, r3
 8001678:	88fa      	ldrh	r2, [r7, #6]
 800167a:	4603      	mov	r3, r0
 800167c:	01db      	lsls	r3, r3, #7
 800167e:	4413      	add	r3, r2
 8001680:	b2c9      	uxtb	r1, r1
 8001682:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <SSD1306_DrawPixel+0xbc>)
 8001684:	54d1      	strb	r1, [r2, r3]
 8001686:	e01d      	b.n	80016c4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	88bb      	ldrh	r3, [r7, #4]
 800168c:	08db      	lsrs	r3, r3, #3
 800168e:	b298      	uxth	r0, r3
 8001690:	4603      	mov	r3, r0
 8001692:	01db      	lsls	r3, r3, #7
 8001694:	4413      	add	r3, r2
 8001696:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <SSD1306_DrawPixel+0xbc>)
 8001698:	5cd3      	ldrb	r3, [r2, r3]
 800169a:	b25a      	sxtb	r2, r3
 800169c:	88bb      	ldrh	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	4013      	ands	r3, r2
 80016b0:	b259      	sxtb	r1, r3
 80016b2:	88fa      	ldrh	r2, [r7, #6]
 80016b4:	4603      	mov	r3, r0
 80016b6:	01db      	lsls	r3, r3, #7
 80016b8:	4413      	add	r3, r2
 80016ba:	b2c9      	uxtb	r1, r1
 80016bc:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <SSD1306_DrawPixel+0xbc>)
 80016be:	54d1      	strb	r1, [r2, r3]
 80016c0:	e000      	b.n	80016c4 <SSD1306_DrawPixel+0xac>
		return;
 80016c2:	bf00      	nop
	}
}
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000814 	.word	0x20000814
 80016d4:	20000414 	.word	0x20000414

080016d8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	460a      	mov	r2, r1
 80016e2:	80fb      	strh	r3, [r7, #6]
 80016e4:	4613      	mov	r3, r2
 80016e6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80016e8:	4a05      	ldr	r2, [pc, #20]	; (8001700 <SSD1306_GotoXY+0x28>)
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80016ee:	4a04      	ldr	r2, [pc, #16]	; (8001700 <SSD1306_GotoXY+0x28>)
 80016f0:	88bb      	ldrh	r3, [r7, #4]
 80016f2:	8053      	strh	r3, [r2, #2]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	20000814 	.word	0x20000814

08001704 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	4613      	mov	r3, r2
 8001712:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001714:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <SSD1306_Putc+0xfc>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
	if (
 8001720:	2b7f      	cmp	r3, #127	; 0x7f
 8001722:	dc07      	bgt.n	8001734 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001724:	4b36      	ldr	r3, [pc, #216]	; (8001800 <SSD1306_Putc+0xfc>)
 8001726:	885b      	ldrh	r3, [r3, #2]
 8001728:	461a      	mov	r2, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	785b      	ldrb	r3, [r3, #1]
 800172e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001730:	2b3f      	cmp	r3, #63	; 0x3f
 8001732:	dd01      	ble.n	8001738 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001734:	2300      	movs	r3, #0
 8001736:	e05e      	b.n	80017f6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e04b      	b.n	80017d6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	3b20      	subs	r3, #32
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	7849      	ldrb	r1, [r1, #1]
 800174a:	fb01 f303 	mul.w	r3, r1, r3
 800174e:	4619      	mov	r1, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	440b      	add	r3, r1
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e030      	b.n	80017c4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d010      	beq.n	8001794 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <SSD1306_Putc+0xfc>)
 8001774:	881a      	ldrh	r2, [r3, #0]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4413      	add	r3, r2
 800177c:	b298      	uxth	r0, r3
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <SSD1306_Putc+0xfc>)
 8001780:	885a      	ldrh	r2, [r3, #2]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	b29b      	uxth	r3, r3
 8001786:	4413      	add	r3, r2
 8001788:	b29b      	uxth	r3, r3
 800178a:	79ba      	ldrb	r2, [r7, #6]
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff ff43 	bl	8001618 <SSD1306_DrawPixel>
 8001792:	e014      	b.n	80017be <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <SSD1306_Putc+0xfc>)
 8001796:	881a      	ldrh	r2, [r3, #0]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	b29b      	uxth	r3, r3
 800179c:	4413      	add	r3, r2
 800179e:	b298      	uxth	r0, r3
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <SSD1306_Putc+0xfc>)
 80017a2:	885a      	ldrh	r2, [r3, #2]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	b299      	uxth	r1, r3
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bf0c      	ite	eq
 80017b2:	2301      	moveq	r3, #1
 80017b4:	2300      	movne	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	f7ff ff2d 	bl	8001618 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	3301      	adds	r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d3c8      	bcc.n	8001762 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	461a      	mov	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	4293      	cmp	r3, r2
 80017e0:	d3ad      	bcc.n	800173e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <SSD1306_Putc+0xfc>)
 80017e4:	881a      	ldrh	r2, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <SSD1306_Putc+0xfc>)
 80017f2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80017f4:	79fb      	ldrb	r3, [r7, #7]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000814 	.word	0x20000814

08001804 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	4613      	mov	r3, r2
 8001810:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001812:	e012      	b.n	800183a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	79fa      	ldrb	r2, [r7, #7]
 800181a:	68b9      	ldr	r1, [r7, #8]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff71 	bl	8001704 <SSD1306_Putc>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d002      	beq.n	8001834 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	e008      	b.n	8001846 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3301      	adds	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1e8      	bne.n	8001814 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	781b      	ldrb	r3, [r3, #0]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800184e:	b590      	push	{r4, r7, lr}
 8001850:	b087      	sub	sp, #28
 8001852:	af00      	add	r7, sp, #0
 8001854:	4604      	mov	r4, r0
 8001856:	4608      	mov	r0, r1
 8001858:	4611      	mov	r1, r2
 800185a:	461a      	mov	r2, r3
 800185c:	4623      	mov	r3, r4
 800185e:	80fb      	strh	r3, [r7, #6]
 8001860:	4603      	mov	r3, r0
 8001862:	80bb      	strh	r3, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	2b7f      	cmp	r3, #127	; 0x7f
 8001870:	d901      	bls.n	8001876 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001872:	237f      	movs	r3, #127	; 0x7f
 8001874:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	2b7f      	cmp	r3, #127	; 0x7f
 800187a:	d901      	bls.n	8001880 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 800187c:	237f      	movs	r3, #127	; 0x7f
 800187e:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	2b3f      	cmp	r3, #63	; 0x3f
 8001884:	d901      	bls.n	800188a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001886:	233f      	movs	r3, #63	; 0x3f
 8001888:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800188a:	883b      	ldrh	r3, [r7, #0]
 800188c:	2b3f      	cmp	r3, #63	; 0x3f
 800188e:	d901      	bls.n	8001894 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001890:	233f      	movs	r3, #63	; 0x3f
 8001892:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001894:	88fa      	ldrh	r2, [r7, #6]
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	429a      	cmp	r2, r3
 800189a:	d205      	bcs.n	80018a8 <SSD1306_DrawLine+0x5a>
 800189c:	887a      	ldrh	r2, [r7, #2]
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	e004      	b.n	80018b2 <SSD1306_DrawLine+0x64>
 80018a8:	88fa      	ldrh	r2, [r7, #6]
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80018b4:	88ba      	ldrh	r2, [r7, #4]
 80018b6:	883b      	ldrh	r3, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d205      	bcs.n	80018c8 <SSD1306_DrawLine+0x7a>
 80018bc:	883a      	ldrh	r2, [r7, #0]
 80018be:	88bb      	ldrh	r3, [r7, #4]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	e004      	b.n	80018d2 <SSD1306_DrawLine+0x84>
 80018c8:	88ba      	ldrh	r2, [r7, #4]
 80018ca:	883b      	ldrh	r3, [r7, #0]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80018d4:	88fa      	ldrh	r2, [r7, #6]
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d201      	bcs.n	80018e0 <SSD1306_DrawLine+0x92>
 80018dc:	2301      	movs	r3, #1
 80018de:	e001      	b.n	80018e4 <SSD1306_DrawLine+0x96>
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
 80018e4:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80018e6:	88ba      	ldrh	r2, [r7, #4]
 80018e8:	883b      	ldrh	r3, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d201      	bcs.n	80018f2 <SSD1306_DrawLine+0xa4>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e001      	b.n	80018f6 <SSD1306_DrawLine+0xa8>
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80018f8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	dd06      	ble.n	8001912 <SSD1306_DrawLine+0xc4>
 8001904:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001908:	0fda      	lsrs	r2, r3, #31
 800190a:	4413      	add	r3, r2
 800190c:	105b      	asrs	r3, r3, #1
 800190e:	b21b      	sxth	r3, r3
 8001910:	e006      	b.n	8001920 <SSD1306_DrawLine+0xd2>
 8001912:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001916:	425b      	negs	r3, r3
 8001918:	0fda      	lsrs	r2, r3, #31
 800191a:	4413      	add	r3, r2
 800191c:	105b      	asrs	r3, r3, #1
 800191e:	b21b      	sxth	r3, r3
 8001920:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001922:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d129      	bne.n	800197e <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800192a:	883a      	ldrh	r2, [r7, #0]
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	d205      	bcs.n	800193e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001932:	883b      	ldrh	r3, [r7, #0]
 8001934:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800193a:	893b      	ldrh	r3, [r7, #8]
 800193c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	429a      	cmp	r2, r3
 8001944:	d205      	bcs.n	8001952 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800194e:	893b      	ldrh	r3, [r7, #8]
 8001950:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001952:	88bb      	ldrh	r3, [r7, #4]
 8001954:	82bb      	strh	r3, [r7, #20]
 8001956:	e00c      	b.n	8001972 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001958:	8ab9      	ldrh	r1, [r7, #20]
 800195a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fe59 	bl	8001618 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001966:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800196a:	b29b      	uxth	r3, r3
 800196c:	3301      	adds	r3, #1
 800196e:	b29b      	uxth	r3, r3
 8001970:	82bb      	strh	r3, [r7, #20]
 8001972:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001976:	883b      	ldrh	r3, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	dded      	ble.n	8001958 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 800197c:	e05f      	b.n	8001a3e <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800197e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d129      	bne.n	80019da <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001986:	883a      	ldrh	r2, [r7, #0]
 8001988:	88bb      	ldrh	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	d205      	bcs.n	800199a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800198e:	883b      	ldrh	r3, [r7, #0]
 8001990:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001992:	88bb      	ldrh	r3, [r7, #4]
 8001994:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001996:	893b      	ldrh	r3, [r7, #8]
 8001998:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d205      	bcs.n	80019ae <SSD1306_DrawLine+0x160>
			tmp = x1;
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80019aa:	893b      	ldrh	r3, [r7, #8]
 80019ac:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	82bb      	strh	r3, [r7, #20]
 80019b2:	e00c      	b.n	80019ce <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80019b4:	8abb      	ldrh	r3, [r7, #20]
 80019b6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80019ba:	88b9      	ldrh	r1, [r7, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fe2b 	bl	8001618 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80019c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	82bb      	strh	r3, [r7, #20]
 80019ce:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dded      	ble.n	80019b4 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80019d8:	e031      	b.n	8001a3e <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80019da:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80019de:	88b9      	ldrh	r1, [r7, #4]
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fe18 	bl	8001618 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80019e8:	88fa      	ldrh	r2, [r7, #6]
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d103      	bne.n	80019f8 <SSD1306_DrawLine+0x1aa>
 80019f0:	88ba      	ldrh	r2, [r7, #4]
 80019f2:	883b      	ldrh	r3, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d021      	beq.n	8001a3c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80019f8:	8afb      	ldrh	r3, [r7, #22]
 80019fa:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80019fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a04:	425b      	negs	r3, r3
 8001a06:	429a      	cmp	r2, r3
 8001a08:	dd08      	ble.n	8001a1c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001a0a:	8afa      	ldrh	r2, [r7, #22]
 8001a0c:	8a3b      	ldrh	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001a14:	89fa      	ldrh	r2, [r7, #14]
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	4413      	add	r3, r2
 8001a1a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001a1c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dad8      	bge.n	80019da <SSD1306_DrawLine+0x18c>
			err += dx;
 8001a28:	8afa      	ldrh	r2, [r7, #22]
 8001a2a:	8a7b      	ldrh	r3, [r7, #18]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001a32:	89ba      	ldrh	r2, [r7, #12]
 8001a34:	88bb      	ldrh	r3, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001a3a:	e7ce      	b.n	80019da <SSD1306_DrawLine+0x18c>
			break;
 8001a3c:	bf00      	nop
		} 
	}
}
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}

08001a44 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	80fb      	strh	r3, [r7, #6]
 8001a56:	4603      	mov	r3, r0
 8001a58:	80bb      	strh	r3, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	807b      	strh	r3, [r7, #2]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b7f      	cmp	r3, #127	; 0x7f
 8001a66:	d853      	bhi.n	8001b10 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001a68:	88bb      	ldrh	r3, [r7, #4]
 8001a6a:	2b3f      	cmp	r3, #63	; 0x3f
 8001a6c:	d850      	bhi.n	8001b10 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001a6e:	88fa      	ldrh	r2, [r7, #6]
 8001a70:	887b      	ldrh	r3, [r7, #2]
 8001a72:	4413      	add	r3, r2
 8001a74:	2b7f      	cmp	r3, #127	; 0x7f
 8001a76:	dd03      	ble.n	8001a80 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001a7e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001a80:	88ba      	ldrh	r2, [r7, #4]
 8001a82:	883b      	ldrh	r3, [r7, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	2b3f      	cmp	r3, #63	; 0x3f
 8001a88:	dd03      	ble.n	8001a92 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001a8a:	88bb      	ldrh	r3, [r7, #4]
 8001a8c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001a90:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001a92:	88fa      	ldrh	r2, [r7, #6]
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	4413      	add	r3, r2
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	88bc      	ldrh	r4, [r7, #4]
 8001a9c:	88b9      	ldrh	r1, [r7, #4]
 8001a9e:	88f8      	ldrh	r0, [r7, #6]
 8001aa0:	7e3b      	ldrb	r3, [r7, #24]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	4623      	mov	r3, r4
 8001aa6:	f7ff fed2 	bl	800184e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001aaa:	88ba      	ldrh	r2, [r7, #4]
 8001aac:	883b      	ldrh	r3, [r7, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	b299      	uxth	r1, r3
 8001ab2:	88fa      	ldrh	r2, [r7, #6]
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b29c      	uxth	r4, r3
 8001aba:	88ba      	ldrh	r2, [r7, #4]
 8001abc:	883b      	ldrh	r3, [r7, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	88f8      	ldrh	r0, [r7, #6]
 8001ac4:	7e3b      	ldrb	r3, [r7, #24]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	4622      	mov	r2, r4
 8001acc:	f7ff febf 	bl	800184e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001ad0:	88ba      	ldrh	r2, [r7, #4]
 8001ad2:	883b      	ldrh	r3, [r7, #0]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29c      	uxth	r4, r3
 8001ad8:	88fa      	ldrh	r2, [r7, #6]
 8001ada:	88b9      	ldrh	r1, [r7, #4]
 8001adc:	88f8      	ldrh	r0, [r7, #6]
 8001ade:	7e3b      	ldrb	r3, [r7, #24]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	f7ff feb3 	bl	800184e <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	4413      	add	r3, r2
 8001aee:	b298      	uxth	r0, r3
 8001af0:	88fa      	ldrh	r2, [r7, #6]
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	4413      	add	r3, r2
 8001af6:	b29c      	uxth	r4, r3
 8001af8:	88ba      	ldrh	r2, [r7, #4]
 8001afa:	883b      	ldrh	r3, [r7, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	88b9      	ldrh	r1, [r7, #4]
 8001b02:	7e3b      	ldrb	r3, [r7, #24]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	4613      	mov	r3, r2
 8001b08:	4622      	mov	r2, r4
 8001b0a:	f7ff fea0 	bl	800184e <SSD1306_DrawLine>
 8001b0e:	e000      	b.n	8001b12 <SSD1306_DrawRectangle+0xce>
		return;
 8001b10:	bf00      	nop
}
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}

08001b18 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <ssd1306_I2C_Init+0x24>)
 8001b20:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b22:	e002      	b.n	8001b2a <ssd1306_I2C_Init+0x12>
		p--;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f9      	bne.n	8001b24 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	0003d090 	.word	0x0003d090

08001b40 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b0c7      	sub	sp, #284	; 0x11c
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	4604      	mov	r4, r0
 8001b48:	4608      	mov	r0, r1
 8001b4a:	4639      	mov	r1, r7
 8001b4c:	600a      	str	r2, [r1, #0]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	1dfb      	adds	r3, r7, #7
 8001b52:	4622      	mov	r2, r4
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	1dbb      	adds	r3, r7, #6
 8001b58:	4602      	mov	r2, r0
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	460a      	mov	r2, r1
 8001b60:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	1dba      	adds	r2, r7, #6
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b72:	e010      	b.n	8001b96 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001b74:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b78:	463a      	mov	r2, r7
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b82:	3301      	adds	r3, #1
 8001b84:	7811      	ldrb	r1, [r2, #0]
 8001b86:	f107 020c 	add.w	r2, r7, #12
 8001b8a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b8c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b90:	3301      	adds	r3, #1
 8001b92:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b96:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	1d3a      	adds	r2, r7, #4
 8001b9e:	8812      	ldrh	r2, [r2, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d8e7      	bhi.n	8001b74 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b299      	uxth	r1, r3
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b298      	uxth	r0, r3
 8001bb2:	f107 020c 	add.w	r2, r7, #12
 8001bb6:	230a      	movs	r3, #10
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <ssd1306_I2C_WriteMulti+0x8c>)
 8001bbe:	f001 f967 	bl	8002e90 <HAL_I2C_Master_Transmit>
}
 8001bc2:	bf00      	nop
 8001bc4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	20000834 	.word	0x20000834

08001bd0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	71bb      	strb	r3, [r7, #6]
 8001bde:	4613      	mov	r3, r2
 8001be0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001be6:	797b      	ldrb	r3, [r7, #5]
 8001be8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	b299      	uxth	r1, r3
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <ssd1306_I2C_Write+0x38>)
 8001bfa:	f001 f949 	bl	8002e90 <HAL_I2C_Master_Transmit>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000834 	.word	0x20000834

08001c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_MspInit+0x4c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a0f      	ldr	r2, [pc, #60]	; (8001c58 <HAL_MspInit+0x4c>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_MspInit+0x4c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_MspInit+0x4c>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_MspInit+0x4c>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_MspInit+0x4c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler+0x4>

08001c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb0:	f000 fc7a 	bl	80025a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001cbc:	2004      	movs	r0, #4
 8001cbe:	f000 ff97 	bl	8002bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001cca:	2008      	movs	r0, #8
 8001ccc:	f000 ff90 	bl	8002bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001cd8:	2010      	movs	r0, #16
 8001cda:	f000 ff89 	bl	8002bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <TIM2_IRQHandler+0x10>)
 8001cea:	f004 f8ee 	bl	8005eca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000b54 	.word	0x20000b54

08001cf8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <OTG_FS_IRQHandler+0x10>)
 8001cfe:	f001 fe4c 	bl	800399a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200010f8 	.word	0x200010f8

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f008 f960 	bl	800a000 <__errno>
 8001d40:	4602      	mov	r2, r0
 8001d42:	230c      	movs	r3, #12
 8001d44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20020000 	.word	0x20020000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	2000081c 	.word	0x2000081c
 8001d74:	20001508 	.word	0x20001508

08001d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <SystemInit+0x28>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <SystemInit+0x28>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SystemInit+0x28>)
 8001d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d92:	609a      	str	r2, [r3, #8]
#endif
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f008 f969 	bl	800a08a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <MX_TIM2_Init+0xa4>)
 8001dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <MX_TIM2_Init+0xa4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dce:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <MX_TIM2_Init+0xa4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <MX_TIM2_Init+0xa4>)
 8001dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <MX_TIM2_Init+0xa4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <MX_TIM2_Init+0xa4>)
 8001de4:	2280      	movs	r2, #128	; 0x80
 8001de6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001de8:	2303      	movs	r3, #3
 8001dea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001dec:	2302      	movs	r3, #2
 8001dee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001df0:	2301      	movs	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001df8:	230a      	movs	r3, #10
 8001dfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e00:	2301      	movs	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001e08:	230a      	movs	r3, #10
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	4619      	mov	r1, r3
 8001e12:	480d      	ldr	r0, [pc, #52]	; (8001e48 <MX_TIM2_Init+0xa4>)
 8001e14:	f003 ff70 	bl	8005cf8 <HAL_TIM_Encoder_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e1e:	f7ff fa6b 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <MX_TIM2_Init+0xa4>)
 8001e30:	f004 fa22 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001e3a:	f7ff fa5d 	bl	80012f8 <Error_Handler>
  }

}
 8001e3e:	bf00      	nop
 8001e40:	3730      	adds	r7, #48	; 0x30
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000b54 	.word	0x20000b54

08001e4c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d133      	bne.n	8001ed6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a1a      	ldr	r2, [pc, #104]	; (8001ee0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4808      	ldr	r0, [pc, #32]	; (8001ee4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ec2:	f000 fce1 	bl	8002888 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	201c      	movs	r0, #28
 8001ecc:	f000 fc89 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ed0:	201c      	movs	r0, #28
 8001ed2:	f000 fca2 	bl	800281a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000

08001ee8 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001ef2:	f107 020f 	add.w	r2, r7, #15
 8001ef6:	1df9      	adds	r1, r7, #7
 8001ef8:	2364      	movs	r3, #100	; 0x64
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	4804      	ldr	r0, [pc, #16]	; (8001f10 <W25qxx_Spi+0x28>)
 8001f00:	f003 fc47 	bl	8005792 <HAL_SPI_TransmitReceive>
	return ret;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000afc 	.word	0x20000afc

08001f14 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f30:	4813      	ldr	r0, [pc, #76]	; (8001f80 <W25qxx_ReadID+0x6c>)
 8001f32:	f000 fe43 	bl	8002bbc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001f36:	209f      	movs	r0, #159	; 0x9f
 8001f38:	f7ff ffd6 	bl	8001ee8 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f3c:	20a5      	movs	r0, #165	; 0xa5
 8001f3e:	f7ff ffd3 	bl	8001ee8 <W25qxx_Spi>
 8001f42:	4603      	mov	r3, r0
 8001f44:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f46:	20a5      	movs	r0, #165	; 0xa5
 8001f48:	f7ff ffce 	bl	8001ee8 <W25qxx_Spi>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f50:	20a5      	movs	r0, #165	; 0xa5
 8001f52:	f7ff ffc9 	bl	8001ee8 <W25qxx_Spi>
 8001f56:	4603      	mov	r3, r0
 8001f58:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f60:	4807      	ldr	r0, [pc, #28]	; (8001f80 <W25qxx_ReadID+0x6c>)
 8001f62:	f000 fe2b 	bl	8002bbc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40020000 	.word	0x40020000

08001f84 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f90:	4816      	ldr	r0, [pc, #88]	; (8001fec <W25qxx_ReadUniqID+0x68>)
 8001f92:	f000 fe13 	bl	8002bbc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8001f96:	204b      	movs	r0, #75	; 0x4b
 8001f98:	f7ff ffa6 	bl	8001ee8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	e005      	b.n	8001fae <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fa2:	20a5      	movs	r0, #165	; 0xa5
 8001fa4:	f7ff ffa0 	bl	8001ee8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	3301      	adds	r3, #1
 8001fac:	71fb      	strb	r3, [r7, #7]
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d9f6      	bls.n	8001fa2 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	71bb      	strb	r3, [r7, #6]
 8001fb8:	e00b      	b.n	8001fd2 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fba:	79bc      	ldrb	r4, [r7, #6]
 8001fbc:	20a5      	movs	r0, #165	; 0xa5
 8001fbe:	f7ff ff93 	bl	8001ee8 <W25qxx_Spi>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <W25qxx_ReadUniqID+0x6c>)
 8001fc8:	4423      	add	r3, r4
 8001fca:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8001fcc:	79bb      	ldrb	r3, [r7, #6]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	71bb      	strb	r3, [r7, #6]
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	2b07      	cmp	r3, #7
 8001fd6:	d9f0      	bls.n	8001fba <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fde:	4803      	ldr	r0, [pc, #12]	; (8001fec <W25qxx_ReadUniqID+0x68>)
 8001fe0:	f000 fdec 	bl	8002bbc <HAL_GPIO_WritePin>
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	20000b94 	.word	0x20000b94

08001ff4 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ffe:	4808      	ldr	r0, [pc, #32]	; (8002020 <W25qxx_WriteEnable+0x2c>)
 8002000:	f000 fddc 	bl	8002bbc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8002004:	2006      	movs	r0, #6
 8002006:	f7ff ff6f 	bl	8001ee8 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800200a:	2201      	movs	r2, #1
 800200c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002010:	4803      	ldr	r0, [pc, #12]	; (8002020 <W25qxx_WriteEnable+0x2c>)
 8002012:	f000 fdd3 	bl	8002bbc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8002016:	2001      	movs	r0, #1
 8002018:	f000 fae6 	bl	80025e8 <HAL_Delay>
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40020000 	.word	0x40020000

08002024 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002038:	481c      	ldr	r0, [pc, #112]	; (80020ac <W25qxx_ReadStatusRegister+0x88>)
 800203a:	f000 fdbf 	bl	8002bbc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10c      	bne.n	800205e <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8002044:	2005      	movs	r0, #5
 8002046:	f7ff ff4f 	bl	8001ee8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800204a:	20a5      	movs	r0, #165	; 0xa5
 800204c:	f7ff ff4c 	bl	8001ee8 <W25qxx_Spi>
 8002050:	4603      	mov	r3, r0
 8002052:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8002054:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <W25qxx_ReadStatusRegister+0x8c>)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800205c:	e01b      	b.n	8002096 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d10c      	bne.n	800207e <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8002064:	2035      	movs	r0, #53	; 0x35
 8002066:	f7ff ff3f 	bl	8001ee8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800206a:	20a5      	movs	r0, #165	; 0xa5
 800206c:	f7ff ff3c 	bl	8001ee8 <W25qxx_Spi>
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002074:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <W25qxx_ReadStatusRegister+0x8c>)
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800207c:	e00b      	b.n	8002096 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 800207e:	2015      	movs	r0, #21
 8002080:	f7ff ff32 	bl	8001ee8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002084:	20a5      	movs	r0, #165	; 0xa5
 8002086:	f7ff ff2f 	bl	8001ee8 <W25qxx_Spi>
 800208a:	4603      	mov	r3, r0
 800208c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <W25qxx_ReadStatusRegister+0x8c>)
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002096:	2201      	movs	r2, #1
 8002098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <W25qxx_ReadStatusRegister+0x88>)
 800209e:	f000 fd8d 	bl	8002bbc <HAL_GPIO_WritePin>
	return status;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40020000 	.word	0x40020000
 80020b0:	20000b94 	.word	0x20000b94

080020b4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f000 fa95 	bl	80025e8 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c4:	480f      	ldr	r0, [pc, #60]	; (8002104 <W25qxx_WaitForWriteEnd+0x50>)
 80020c6:	f000 fd79 	bl	8002bbc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80020ca:	2005      	movs	r0, #5
 80020cc:	f7ff ff0c 	bl	8001ee8 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020d0:	20a5      	movs	r0, #165	; 0xa5
 80020d2:	f7ff ff09 	bl	8001ee8 <W25qxx_Spi>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <W25qxx_WaitForWriteEnd+0x54>)
 80020dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f000 fa81 	bl	80025e8 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <W25qxx_WaitForWriteEnd+0x54>)
 80020e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ed      	bne.n	80020d0 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020fa:	4802      	ldr	r0, [pc, #8]	; (8002104 <W25qxx_WaitForWriteEnd+0x50>)
 80020fc:	f000 fd5e 	bl	8002bbc <HAL_GPIO_WritePin>
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40020000 	.word	0x40020000
 8002108:	20000b94 	.word	0x20000b94

0800210c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8002112:	4b62      	ldr	r3, [pc, #392]	; (800229c <W25qxx_Init+0x190>)
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//while (HAL_GetTick() < 100)
	//	W25qxx_Delay(1);
	W25qxx_Delay(100);
 800211a:	2064      	movs	r0, #100	; 0x64
 800211c:	f000 fa64 	bl	80025e8 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002120:	2201      	movs	r2, #1
 8002122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002126:	485e      	ldr	r0, [pc, #376]	; (80022a0 <W25qxx_Init+0x194>)
 8002128:	f000 fd48 	bl	8002bbc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800212c:	2064      	movs	r0, #100	; 0x64
 800212e:	f000 fa5b 	bl	80025e8 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8002132:	f7ff feef 	bl	8001f14 <W25qxx_ReadID>
 8002136:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3b11      	subs	r3, #17
 800213e:	2b0f      	cmp	r3, #15
 8002140:	d86b      	bhi.n	800221a <W25qxx_Init+0x10e>
 8002142:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <W25qxx_Init+0x3c>)
 8002144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002148:	0800220d 	.word	0x0800220d
 800214c:	080021ff 	.word	0x080021ff
 8002150:	080021f1 	.word	0x080021f1
 8002154:	080021e3 	.word	0x080021e3
 8002158:	080021d5 	.word	0x080021d5
 800215c:	080021c7 	.word	0x080021c7
 8002160:	080021b9 	.word	0x080021b9
 8002164:	080021a9 	.word	0x080021a9
 8002168:	08002199 	.word	0x08002199
 800216c:	0800221b 	.word	0x0800221b
 8002170:	0800221b 	.word	0x0800221b
 8002174:	0800221b 	.word	0x0800221b
 8002178:	0800221b 	.word	0x0800221b
 800217c:	0800221b 	.word	0x0800221b
 8002180:	0800221b 	.word	0x0800221b
 8002184:	08002189 	.word	0x08002189
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002188:	4b44      	ldr	r3, [pc, #272]	; (800229c <W25qxx_Init+0x190>)
 800218a:	220a      	movs	r2, #10
 800218c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800218e:	4b43      	ldr	r3, [pc, #268]	; (800229c <W25qxx_Init+0x190>)
 8002190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002194:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8002196:	e046      	b.n	8002226 <W25qxx_Init+0x11a>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <W25qxx_Init+0x190>)
 800219a:	2209      	movs	r2, #9
 800219c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <W25qxx_Init+0x190>)
 80021a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 80021a6:	e03e      	b.n	8002226 <W25qxx_Init+0x11a>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80021a8:	4b3c      	ldr	r3, [pc, #240]	; (800229c <W25qxx_Init+0x190>)
 80021aa:	2208      	movs	r2, #8
 80021ac:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80021ae:	4b3b      	ldr	r3, [pc, #236]	; (800229c <W25qxx_Init+0x190>)
 80021b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80021b6:	e036      	b.n	8002226 <W25qxx_Init+0x11a>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80021b8:	4b38      	ldr	r3, [pc, #224]	; (800229c <W25qxx_Init+0x190>)
 80021ba:	2207      	movs	r2, #7
 80021bc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <W25qxx_Init+0x190>)
 80021c0:	2280      	movs	r2, #128	; 0x80
 80021c2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80021c4:	e02f      	b.n	8002226 <W25qxx_Init+0x11a>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80021c6:	4b35      	ldr	r3, [pc, #212]	; (800229c <W25qxx_Init+0x190>)
 80021c8:	2206      	movs	r2, #6
 80021ca:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80021cc:	4b33      	ldr	r3, [pc, #204]	; (800229c <W25qxx_Init+0x190>)
 80021ce:	2240      	movs	r2, #64	; 0x40
 80021d0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80021d2:	e028      	b.n	8002226 <W25qxx_Init+0x11a>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80021d4:	4b31      	ldr	r3, [pc, #196]	; (800229c <W25qxx_Init+0x190>)
 80021d6:	2205      	movs	r2, #5
 80021d8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <W25qxx_Init+0x190>)
 80021dc:	2220      	movs	r2, #32
 80021de:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80021e0:	e021      	b.n	8002226 <W25qxx_Init+0x11a>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80021e2:	4b2e      	ldr	r3, [pc, #184]	; (800229c <W25qxx_Init+0x190>)
 80021e4:	2204      	movs	r2, #4
 80021e6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80021e8:	4b2c      	ldr	r3, [pc, #176]	; (800229c <W25qxx_Init+0x190>)
 80021ea:	2210      	movs	r2, #16
 80021ec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 80021ee:	e01a      	b.n	8002226 <W25qxx_Init+0x11a>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <W25qxx_Init+0x190>)
 80021f2:	2203      	movs	r2, #3
 80021f4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <W25qxx_Init+0x190>)
 80021f8:	2208      	movs	r2, #8
 80021fa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80021fc:	e013      	b.n	8002226 <W25qxx_Init+0x11a>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80021fe:	4b27      	ldr	r3, [pc, #156]	; (800229c <W25qxx_Init+0x190>)
 8002200:	2202      	movs	r2, #2
 8002202:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <W25qxx_Init+0x190>)
 8002206:	2204      	movs	r2, #4
 8002208:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800220a:	e00c      	b.n	8002226 <W25qxx_Init+0x11a>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800220c:	4b23      	ldr	r3, [pc, #140]	; (800229c <W25qxx_Init+0x190>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <W25qxx_Init+0x190>)
 8002214:	2202      	movs	r2, #2
 8002216:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8002218:	e005      	b.n	8002226 <W25qxx_Init+0x11a>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <W25qxx_Init+0x190>)
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8002222:	2300      	movs	r3, #0
 8002224:	e036      	b.n	8002294 <W25qxx_Init+0x188>
	}
	w25qxx.PageSize = 256;
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <W25qxx_Init+0x190>)
 8002228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <W25qxx_Init+0x190>)
 8002230:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002234:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <W25qxx_Init+0x190>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	4a17      	ldr	r2, [pc, #92]	; (800229c <W25qxx_Init+0x190>)
 800223e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <W25qxx_Init+0x190>)
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <W25qxx_Init+0x190>)
 8002246:	6912      	ldr	r2, [r2, #16]
 8002248:	fb02 f303 	mul.w	r3, r2, r3
 800224c:	4a13      	ldr	r2, [pc, #76]	; (800229c <W25qxx_Init+0x190>)
 800224e:	8952      	ldrh	r2, [r2, #10]
 8002250:	fbb3 f3f2 	udiv	r3, r3, r2
 8002254:	4a11      	ldr	r2, [pc, #68]	; (800229c <W25qxx_Init+0x190>)
 8002256:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <W25qxx_Init+0x190>)
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	4a0f      	ldr	r2, [pc, #60]	; (800229c <W25qxx_Init+0x190>)
 8002260:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <W25qxx_Init+0x190>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4a0d      	ldr	r2, [pc, #52]	; (800229c <W25qxx_Init+0x190>)
 8002268:	6912      	ldr	r2, [r2, #16]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	0a9b      	lsrs	r3, r3, #10
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <W25qxx_Init+0x190>)
 8002272:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002274:	f7ff fe86 	bl	8001f84 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fed3 	bl	8002024 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800227e:	2002      	movs	r0, #2
 8002280:	f7ff fed0 	bl	8002024 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002284:	2003      	movs	r0, #3
 8002286:	f7ff fecd 	bl	8002024 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <W25qxx_Init+0x190>)
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000b94 	.word	0x20000b94
 80022a0:	40020000 	.word	0x40020000

080022a4 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80022b2:	e002      	b.n	80022ba <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80022b4:	2001      	movs	r0, #1
 80022b6:	f000 f997 	bl	80025e8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80022ba:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <W25qxx_WritePage+0x100>)
 80022bc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d0f7      	beq.n	80022b4 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80022c4:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <W25qxx_WritePage+0x100>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	4a34      	ldr	r2, [pc, #208]	; (80023a4 <W25qxx_WritePage+0x100>)
 80022d4:	8952      	ldrh	r2, [r2, #10]
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d802      	bhi.n	80022e0 <W25qxx_WritePage+0x3c>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <W25qxx_WritePage+0x100>)
 80022e2:	895b      	ldrh	r3, [r3, #10]
 80022e4:	461a      	mov	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <W25qxx_WritePage+0x100>)
 80022f4:	8952      	ldrh	r2, [r2, #10]
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d905      	bls.n	8002306 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80022fa:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <W25qxx_WritePage+0x100>)
 80022fc:	895b      	ldrh	r3, [r3, #10]
 80022fe:	461a      	mov	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8002306:	f7ff fed5 	bl	80020b4 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800230a:	f7ff fe73 	bl	8001ff4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002314:	4824      	ldr	r0, [pc, #144]	; (80023a8 <W25qxx_WritePage+0x104>)
 8002316:	f000 fc51 	bl	8002bbc <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <W25qxx_WritePage+0x100>)
 800231c:	895b      	ldrh	r3, [r3, #10]
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	fb03 f302 	mul.w	r3, r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <W25qxx_WritePage+0x100>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d909      	bls.n	8002348 <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 8002334:	2012      	movs	r0, #18
 8002336:	f7ff fdd7 	bl	8001ee8 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	0e1b      	lsrs	r3, r3, #24
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fdd1 	bl	8001ee8 <W25qxx_Spi>
 8002346:	e002      	b.n	800234e <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 8002348:	2002      	movs	r0, #2
 800234a:	f7ff fdcd 	bl	8001ee8 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fdc7 	bl	8001ee8 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fdc1 	bl	8001ee8 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fdbc 	bl	8001ee8 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b29a      	uxth	r2, r3
 8002374:	2364      	movs	r3, #100	; 0x64
 8002376:	68f9      	ldr	r1, [r7, #12]
 8002378:	480c      	ldr	r0, [pc, #48]	; (80023ac <W25qxx_WritePage+0x108>)
 800237a:	f002 ffcd 	bl	8005318 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800237e:	2201      	movs	r2, #1
 8002380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002384:	4808      	ldr	r0, [pc, #32]	; (80023a8 <W25qxx_WritePage+0x104>)
 8002386:	f000 fc19 	bl	8002bbc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800238a:	f7ff fe93 	bl	80020b4 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800238e:	2001      	movs	r0, #1
 8002390:	f000 f92a 	bl	80025e8 <HAL_Delay>
	w25qxx.Lock = 0;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <W25qxx_WritePage+0x100>)
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000b94 	.word	0x20000b94
 80023a8:	40020000 	.word	0x40020000
 80023ac:	20000afc 	.word	0x20000afc

080023b0 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80023be:	e002      	b.n	80023c6 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f000 f911 	bl	80025e8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <W25qxx_ReadPage+0xf4>)
 80023c8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d0f7      	beq.n	80023c0 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80023d0:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <W25qxx_ReadPage+0xf4>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80023d8:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <W25qxx_ReadPage+0xf4>)
 80023da:	895b      	ldrh	r3, [r3, #10]
 80023dc:	461a      	mov	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d802      	bhi.n	80023ea <W25qxx_ReadPage+0x3a>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80023ea:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <W25qxx_ReadPage+0xf4>)
 80023ec:	895b      	ldrh	r3, [r3, #10]
 80023ee:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <W25qxx_ReadPage+0xf4>)
 80023f8:	8952      	ldrh	r2, [r2, #10]
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d905      	bls.n	800240a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80023fe:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <W25qxx_ReadPage+0xf4>)
 8002400:	895b      	ldrh	r3, [r3, #10]
 8002402:	461a      	mov	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <W25qxx_ReadPage+0xf4>)
 800240c:	895b      	ldrh	r3, [r3, #10]
 800240e:	461a      	mov	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	fb03 f302 	mul.w	r3, r3, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800241c:	2200      	movs	r2, #0
 800241e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002422:	4821      	ldr	r0, [pc, #132]	; (80024a8 <W25qxx_ReadPage+0xf8>)
 8002424:	f000 fbca 	bl	8002bbc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <W25qxx_ReadPage+0xf4>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d909      	bls.n	8002444 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 8002430:	200c      	movs	r0, #12
 8002432:	f7ff fd59 	bl	8001ee8 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	0e1b      	lsrs	r3, r3, #24
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fd53 	bl	8001ee8 <W25qxx_Spi>
 8002442:	e002      	b.n	800244a <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8002444:	200b      	movs	r0, #11
 8002446:	f7ff fd4f 	bl	8001ee8 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	b2db      	uxtb	r3, r3
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fd49 	bl	8001ee8 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fd43 	bl	8001ee8 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fd3e 	bl	8001ee8 <W25qxx_Spi>
	W25qxx_Spi(0);
 800246c:	2000      	movs	r0, #0
 800246e:	f7ff fd3b 	bl	8001ee8 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b29a      	uxth	r2, r3
 8002476:	2364      	movs	r3, #100	; 0x64
 8002478:	68f9      	ldr	r1, [r7, #12]
 800247a:	480c      	ldr	r0, [pc, #48]	; (80024ac <W25qxx_ReadPage+0xfc>)
 800247c:	f003 f880 	bl	8005580 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002480:	2201      	movs	r2, #1
 8002482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002486:	4808      	ldr	r0, [pc, #32]	; (80024a8 <W25qxx_ReadPage+0xf8>)
 8002488:	f000 fb98 	bl	8002bbc <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800248c:	2001      	movs	r0, #1
 800248e:	f000 f8ab 	bl	80025e8 <HAL_Delay>
	w25qxx.Lock = 0;
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <W25qxx_ReadPage+0xf4>)
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000b94 	.word	0x20000b94
 80024a8:	40020000 	.word	0x40020000
 80024ac:	20000afc 	.word	0x20000afc

080024b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024b6:	e003      	b.n	80024c0 <LoopCopyDataInit>

080024b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024be:	3104      	adds	r1, #4

080024c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024c8:	d3f6      	bcc.n	80024b8 <CopyDataInit>
  ldr  r2, =_sbss
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024cc:	e002      	b.n	80024d4 <LoopFillZerobss>

080024ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024d0:	f842 3b04 	str.w	r3, [r2], #4

080024d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024d8:	d3f9      	bcc.n	80024ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024da:	f7ff fc4d 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024de:	f007 fd95 	bl	800a00c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e2:	f7fe fb81 	bl	8000be8 <main>
  bx  lr    
 80024e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80024ec:	0800b790 	.word	0x0800b790
  ldr  r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024f4:	200003b0 	.word	0x200003b0
  ldr  r2, =_sbss
 80024f8:	200003b0 	.word	0x200003b0
  ldr  r3, = _ebss
 80024fc:	20001504 	.word	0x20001504

08002500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC_IRQHandler>
	...

08002504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_Init+0x40>)
 800250e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_Init+0x40>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_Init+0x40>)
 800251a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_Init+0x40>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800252c:	2003      	movs	r0, #3
 800252e:	f000 f94d 	bl	80027cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002532:	2000      	movs	r0, #0
 8002534:	f000 f808 	bl	8002548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002538:	f7ff fb68 	bl	8001c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00

08002548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_InitTick+0x54>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_InitTick+0x58>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f965 	bl	8002836 <HAL_SYSTICK_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00e      	b.n	8002594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b0f      	cmp	r3, #15
 800257a:	d80a      	bhi.n	8002592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800257c:	2200      	movs	r2, #0
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f000 f92d 	bl	80027e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002588:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <HAL_InitTick+0x5c>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200000a0 	.word	0x200000a0
 80025a0:	200000a8 	.word	0x200000a8
 80025a4:	200000a4 	.word	0x200000a4

080025a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_IncTick+0x20>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_IncTick+0x24>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_IncTick+0x24>)
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	200000a8 	.word	0x200000a8
 80025cc:	20000bbc 	.word	0x20000bbc

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_GetTick+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000bbc 	.word	0x20000bbc

080025e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff ffee 	bl	80025d0 <HAL_GetTick>
 80025f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d005      	beq.n	800260e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_Delay+0x40>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800260e:	bf00      	nop
 8002610:	f7ff ffde 	bl	80025d0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d8f7      	bhi.n	8002610 <HAL_Delay+0x28>
  {
  }
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	200000a8 	.word	0x200000a8

0800262c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002648:	4013      	ands	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	60d3      	str	r3, [r2, #12]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <__NVIC_GetPriorityGrouping+0x18>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 0307 	and.w	r3, r3, #7
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	db0b      	blt.n	80026ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	4907      	ldr	r1, [pc, #28]	; (80026c8 <__NVIC_EnableIRQ+0x38>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2001      	movs	r0, #1
 80026b2:	fa00 f202 	lsl.w	r2, r0, r2
 80026b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000e100 	.word	0xe000e100

080026cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	db0a      	blt.n	80026f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	490c      	ldr	r1, [pc, #48]	; (8002718 <__NVIC_SetPriority+0x4c>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	0112      	lsls	r2, r2, #4
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	440b      	add	r3, r1
 80026f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f4:	e00a      	b.n	800270c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4908      	ldr	r1, [pc, #32]	; (800271c <__NVIC_SetPriority+0x50>)
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	3b04      	subs	r3, #4
 8002704:	0112      	lsls	r2, r2, #4
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	440b      	add	r3, r1
 800270a:	761a      	strb	r2, [r3, #24]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000e100 	.word	0xe000e100
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f1c3 0307 	rsb	r3, r3, #7
 800273a:	2b04      	cmp	r3, #4
 800273c:	bf28      	it	cs
 800273e:	2304      	movcs	r3, #4
 8002740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3304      	adds	r3, #4
 8002746:	2b06      	cmp	r3, #6
 8002748:	d902      	bls.n	8002750 <NVIC_EncodePriority+0x30>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3b03      	subs	r3, #3
 800274e:	e000      	b.n	8002752 <NVIC_EncodePriority+0x32>
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	401a      	ands	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002768:	f04f 31ff 	mov.w	r1, #4294967295
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	43d9      	mvns	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	4313      	orrs	r3, r2
         );
}
 800277a:	4618      	mov	r0, r3
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002798:	d301      	bcc.n	800279e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279a:	2301      	movs	r3, #1
 800279c:	e00f      	b.n	80027be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <SysTick_Config+0x40>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a6:	210f      	movs	r1, #15
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	f7ff ff8e 	bl	80026cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <SysTick_Config+0x40>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <SysTick_Config+0x40>)
 80027b8:	2207      	movs	r2, #7
 80027ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	e000e010 	.word	0xe000e010

080027cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff ff29 	bl	800262c <__NVIC_SetPriorityGrouping>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f4:	f7ff ff3e 	bl	8002674 <__NVIC_GetPriorityGrouping>
 80027f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	6978      	ldr	r0, [r7, #20]
 8002800:	f7ff ff8e 	bl	8002720 <NVIC_EncodePriority>
 8002804:	4602      	mov	r2, r0
 8002806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff5d 	bl	80026cc <__NVIC_SetPriority>
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff31 	bl	8002690 <__NVIC_EnableIRQ>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ffa2 	bl	8002788 <SysTick_Config>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e00e      	b.n	800287e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	795b      	ldrb	r3, [r3, #5]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fd fea1 	bl	80005b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	e159      	b.n	8002b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	429a      	cmp	r2, r3
 80028be:	f040 8148 	bne.w	8002b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d00b      	beq.n	80028e2 <HAL_GPIO_Init+0x5a>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d007      	beq.n	80028e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028d6:	2b11      	cmp	r3, #17
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b12      	cmp	r3, #18
 80028e0:	d130      	bne.n	8002944 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	2203      	movs	r2, #3
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002918:	2201      	movs	r2, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 0201 	and.w	r2, r3, #1
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0xfc>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b12      	cmp	r3, #18
 8002982:	d123      	bne.n	80029cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	69b9      	ldr	r1, [r7, #24]
 80029c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80a2 	beq.w	8002b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b56      	ldr	r3, [pc, #344]	; (8002b6c <HAL_GPIO_Init+0x2e4>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	4a55      	ldr	r2, [pc, #340]	; (8002b6c <HAL_GPIO_Init+0x2e4>)
 8002a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1e:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_GPIO_Init+0x2e4>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2a:	4a51      	ldr	r2, [pc, #324]	; (8002b70 <HAL_GPIO_Init+0x2e8>)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	220f      	movs	r2, #15
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a48      	ldr	r2, [pc, #288]	; (8002b74 <HAL_GPIO_Init+0x2ec>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d019      	beq.n	8002a8a <HAL_GPIO_Init+0x202>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a47      	ldr	r2, [pc, #284]	; (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_GPIO_Init+0x1fe>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a46      	ldr	r2, [pc, #280]	; (8002b7c <HAL_GPIO_Init+0x2f4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00d      	beq.n	8002a82 <HAL_GPIO_Init+0x1fa>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a45      	ldr	r2, [pc, #276]	; (8002b80 <HAL_GPIO_Init+0x2f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <HAL_GPIO_Init+0x1f6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a44      	ldr	r2, [pc, #272]	; (8002b84 <HAL_GPIO_Init+0x2fc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_GPIO_Init+0x1f2>
 8002a76:	2304      	movs	r3, #4
 8002a78:	e008      	b.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a7a:	2307      	movs	r3, #7
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e004      	b.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e002      	b.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	f002 0203 	and.w	r2, r2, #3
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	4093      	lsls	r3, r2
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a9c:	4934      	ldr	r1, [pc, #208]	; (8002b70 <HAL_GPIO_Init+0x2e8>)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aaa:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ace:	4a2e      	ldr	r2, [pc, #184]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ad4:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af8:	4a23      	ldr	r2, [pc, #140]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b22:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b28:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3301      	adds	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	f67f aea2 	bls.w	80028a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b60:	bf00      	nop
 8002b62:	3724      	adds	r7, #36	; 0x24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40013800 	.word	0x40013800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	e001      	b.n	8002bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bcc:	787b      	ldrb	r3, [r7, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd8:	e003      	b.n	8002be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	619a      	str	r2, [r3, #24]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d006      	beq.n	8002c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fa8e 	bl	8001130 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40013c00 	.word	0x40013c00

08002c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e11f      	b.n	8002e72 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fd fdb0 	bl	80007ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2224      	movs	r2, #36	; 0x24
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c84:	f002 fad0 	bl	8005228 <HAL_RCC_GetPCLK1Freq>
 8002c88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a7b      	ldr	r2, [pc, #492]	; (8002e7c <HAL_I2C_Init+0x25c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d807      	bhi.n	8002ca4 <HAL_I2C_Init+0x84>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a7a      	ldr	r2, [pc, #488]	; (8002e80 <HAL_I2C_Init+0x260>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	bf94      	ite	ls
 8002c9c:	2301      	movls	r3, #1
 8002c9e:	2300      	movhi	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	e006      	b.n	8002cb2 <HAL_I2C_Init+0x92>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a77      	ldr	r2, [pc, #476]	; (8002e84 <HAL_I2C_Init+0x264>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0db      	b.n	8002e72 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4a72      	ldr	r2, [pc, #456]	; (8002e88 <HAL_I2C_Init+0x268>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	0c9b      	lsrs	r3, r3, #18
 8002cc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a64      	ldr	r2, [pc, #400]	; (8002e7c <HAL_I2C_Init+0x25c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d802      	bhi.n	8002cf4 <HAL_I2C_Init+0xd4>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	e009      	b.n	8002d08 <HAL_I2C_Init+0xe8>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	4a63      	ldr	r2, [pc, #396]	; (8002e8c <HAL_I2C_Init+0x26c>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	3301      	adds	r3, #1
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4956      	ldr	r1, [pc, #344]	; (8002e7c <HAL_I2C_Init+0x25c>)
 8002d24:	428b      	cmp	r3, r1
 8002d26:	d80d      	bhi.n	8002d44 <HAL_I2C_Init+0x124>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e59      	subs	r1, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	bf38      	it	cc
 8002d40:	2304      	movcc	r3, #4
 8002d42:	e04f      	b.n	8002de4 <HAL_I2C_Init+0x1c4>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d111      	bne.n	8002d70 <HAL_I2C_Init+0x150>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e58      	subs	r0, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	440b      	add	r3, r1
 8002d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e012      	b.n	8002d96 <HAL_I2C_Init+0x176>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	0099      	lsls	r1, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Init+0x17e>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e022      	b.n	8002de4 <HAL_I2C_Init+0x1c4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10e      	bne.n	8002dc4 <HAL_I2C_Init+0x1a4>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1e58      	subs	r0, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	440b      	add	r3, r1
 8002db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc2:	e00f      	b.n	8002de4 <HAL_I2C_Init+0x1c4>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1e58      	subs	r0, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	0099      	lsls	r1, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	6809      	ldr	r1, [r1, #0]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69da      	ldr	r2, [r3, #28]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6911      	ldr	r1, [r2, #16]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68d2      	ldr	r2, [r2, #12]
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	000186a0 	.word	0x000186a0
 8002e80:	001e847f 	.word	0x001e847f
 8002e84:	003d08ff 	.word	0x003d08ff
 8002e88:	431bde83 	.word	0x431bde83
 8002e8c:	10624dd3 	.word	0x10624dd3

08002e90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	817b      	strh	r3, [r7, #10]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ea4:	f7ff fb94 	bl	80025d0 <HAL_GetTick>
 8002ea8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	f040 80e0 	bne.w	8003078 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2319      	movs	r3, #25
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4970      	ldr	r1, [pc, #448]	; (8003084 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fa92 	bl	80033ec <I2C_WaitOnFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e0d3      	b.n	800307a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_I2C_Master_Transmit+0x50>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e0cc      	b.n	800307a <HAL_I2C_Master_Transmit+0x1ea>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d007      	beq.n	8002f06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0201 	orr.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2221      	movs	r2, #33	; 0x21
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2210      	movs	r2, #16
 8002f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	893a      	ldrh	r2, [r7, #8]
 8002f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a50      	ldr	r2, [pc, #320]	; (8003088 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f48:	8979      	ldrh	r1, [r7, #10]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f9ca 	bl	80032e8 <I2C_MasterRequestWrite>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e08d      	b.n	800307a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f74:	e066      	b.n	8003044 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	6a39      	ldr	r1, [r7, #32]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fb0c 	bl	8003598 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00d      	beq.n	8002fa2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d107      	bne.n	8002f9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e06b      	b.n	800307a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d11b      	bne.n	8003018 <HAL_I2C_Master_Transmit+0x188>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d017      	beq.n	8003018 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	781a      	ldrb	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	6a39      	ldr	r1, [r7, #32]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fafc 	bl	800361a <I2C_WaitOnBTFFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00d      	beq.n	8003044 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	2b04      	cmp	r3, #4
 800302e:	d107      	bne.n	8003040 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e01a      	b.n	800307a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d194      	bne.n	8002f76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	e000      	b.n	800307a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
  }
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	00100002 	.word	0x00100002
 8003088:	ffff0000 	.word	0xffff0000

0800308c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	460b      	mov	r3, r1
 800309a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800309c:	f7ff fa98 	bl	80025d0 <HAL_GetTick>
 80030a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80030a2:	2301      	movs	r3, #1
 80030a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	f040 8111 	bne.w	80032d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2319      	movs	r3, #25
 80030ba:	2201      	movs	r2, #1
 80030bc:	4988      	ldr	r1, [pc, #544]	; (80032e0 <HAL_I2C_IsDeviceReady+0x254>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f994 	bl	80033ec <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
 80030cc:	e104      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_I2C_IsDeviceReady+0x50>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0fd      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x24c>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d007      	beq.n	8003102 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003110:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2224      	movs	r2, #36	; 0x24
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a70      	ldr	r2, [pc, #448]	; (80032e4 <HAL_I2C_IsDeviceReady+0x258>)
 8003124:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003134:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2200      	movs	r2, #0
 800313e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f952 	bl	80033ec <I2C_WaitOnFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315c:	d103      	bne.n	8003166 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0b6      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800316a:	897b      	ldrh	r3, [r7, #10]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003178:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800317a:	f7ff fa29 	bl	80025d0 <HAL_GetTick>
 800317e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031ae:	e025      	b.n	80031fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031b0:	f7ff fa0e 	bl	80025d0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d302      	bcc.n	80031c6 <HAL_I2C_IsDeviceReady+0x13a>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	22a0      	movs	r2, #160	; 0xa0
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2ba0      	cmp	r3, #160	; 0xa0
 8003206:	d005      	beq.n	8003214 <HAL_I2C_IsDeviceReady+0x188>
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <HAL_I2C_IsDeviceReady+0x188>
 800320e:	7dbb      	ldrb	r3, [r7, #22]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0cd      	beq.n	80031b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b02      	cmp	r3, #2
 8003228:	d129      	bne.n	800327e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003238:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2319      	movs	r3, #25
 8003256:	2201      	movs	r2, #1
 8003258:	4921      	ldr	r1, [pc, #132]	; (80032e0 <HAL_I2C_IsDeviceReady+0x254>)
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f8c6 	bl	80033ec <I2C_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e036      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e02c      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003296:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	2319      	movs	r3, #25
 800329e:	2201      	movs	r2, #1
 80032a0:	490f      	ldr	r1, [pc, #60]	; (80032e0 <HAL_I2C_IsDeviceReady+0x254>)
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f8a2 	bl	80033ec <I2C_WaitOnFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e012      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	3301      	adds	r3, #1
 80032b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	429a      	cmp	r2, r3
 80032be:	f4ff af32 	bcc.w	8003126 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	00100002 	.word	0x00100002
 80032e4:	ffff0000 	.word	0xffff0000

080032e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	460b      	mov	r3, r1
 80032f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d006      	beq.n	8003312 <I2C_MasterRequestWrite+0x2a>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d003      	beq.n	8003312 <I2C_MasterRequestWrite+0x2a>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003310:	d108      	bne.n	8003324 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e00b      	b.n	800333c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	2b12      	cmp	r3, #18
 800332a:	d107      	bne.n	800333c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800333a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f84f 	bl	80033ec <I2C_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003362:	d103      	bne.n	800336c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e035      	b.n	80033dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003378:	d108      	bne.n	800338c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800337a:	897b      	ldrh	r3, [r7, #10]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003388:	611a      	str	r2, [r3, #16]
 800338a:	e01b      	b.n	80033c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800338c:	897b      	ldrh	r3, [r7, #10]
 800338e:	11db      	asrs	r3, r3, #7
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 0306 	and.w	r3, r3, #6
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f063 030f 	orn	r3, r3, #15
 800339c:	b2da      	uxtb	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	490e      	ldr	r1, [pc, #56]	; (80033e4 <I2C_MasterRequestWrite+0xfc>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f875 	bl	800349a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e010      	b.n	80033dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033ba:	897b      	ldrh	r3, [r7, #10]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4907      	ldr	r1, [pc, #28]	; (80033e8 <I2C_MasterRequestWrite+0x100>)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f865 	bl	800349a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	00010008 	.word	0x00010008
 80033e8:	00010002 	.word	0x00010002

080033ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033fc:	e025      	b.n	800344a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d021      	beq.n	800344a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003406:	f7ff f8e3 	bl	80025d0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d302      	bcc.n	800341c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d116      	bne.n	800344a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f043 0220 	orr.w	r2, r3, #32
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e023      	b.n	8003492 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d10d      	bne.n	8003470 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4013      	ands	r3, r2
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	e00c      	b.n	800348a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4013      	ands	r3, r2
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf0c      	ite	eq
 8003482:	2301      	moveq	r3, #1
 8003484:	2300      	movne	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	429a      	cmp	r2, r3
 800348e:	d0b6      	beq.n	80033fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a8:	e051      	b.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b8:	d123      	bne.n	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f043 0204 	orr.w	r2, r3, #4
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e046      	b.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d021      	beq.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350a:	f7ff f861 	bl	80025d0 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d116      	bne.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e020      	b.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10c      	bne.n	8003572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	43da      	mvns	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4013      	ands	r3, r2
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	bf14      	ite	ne
 800356a:	2301      	movne	r3, #1
 800356c:	2300      	moveq	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	e00b      	b.n	800358a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	43da      	mvns	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d18d      	bne.n	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a4:	e02d      	b.n	8003602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f878 	bl	800369c <I2C_IsAcknowledgeFailed>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e02d      	b.n	8003612 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d021      	beq.n	8003602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7ff f807 	bl	80025d0 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d116      	bne.n	8003602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e007      	b.n	8003612 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d1ca      	bne.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003626:	e02d      	b.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f837 	bl	800369c <I2C_IsAcknowledgeFailed>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e02d      	b.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d021      	beq.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003640:	f7fe ffc6 	bl	80025d0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	429a      	cmp	r2, r3
 800364e:	d302      	bcc.n	8003656 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e007      	b.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b04      	cmp	r3, #4
 8003690:	d1ca      	bne.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d11b      	bne.n	80036ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	f043 0204 	orr.w	r2, r3, #4
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fc:	b08f      	sub	sp, #60	; 0x3c
 80036fe:	af0a      	add	r7, sp, #40	; 0x28
 8003700:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e10f      	b.n	800392c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f006 f978 	bl	8009a1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2203      	movs	r2, #3
 8003730:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f002 ff2b 	bl	80065a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	687e      	ldr	r6, [r7, #4]
 8003758:	466d      	mov	r5, sp
 800375a:	f106 0410 	add.w	r4, r6, #16
 800375e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003766:	e894 0003 	ldmia.w	r4, {r0, r1}
 800376a:	e885 0003 	stmia.w	r5, {r0, r1}
 800376e:	1d33      	adds	r3, r6, #4
 8003770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003772:	6838      	ldr	r0, [r7, #0]
 8003774:	f002 fe02 	bl	800637c <USB_CoreInit>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0d0      	b.n	800392c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f002 ff19 	bl	80065c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e04a      	b.n	8003832 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	333d      	adds	r3, #61	; 0x3d
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	333c      	adds	r3, #60	; 0x3c
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	b298      	uxth	r0, r3
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3342      	adds	r3, #66	; 0x42
 80037d8:	4602      	mov	r2, r0
 80037da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	333f      	adds	r3, #63	; 0x3f
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3344      	adds	r3, #68	; 0x44
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	3348      	adds	r3, #72	; 0x48
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3350      	adds	r3, #80	; 0x50
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	3301      	adds	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	d3af      	bcc.n	800379c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e044      	b.n	80038cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800389a:	7bfa      	ldrb	r2, [r7, #15]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	3301      	adds	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d3b5      	bcc.n	8003842 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	687e      	ldr	r6, [r7, #4]
 80038de:	466d      	mov	r5, sp
 80038e0:	f106 0410 	add.w	r4, r6, #16
 80038e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80038f4:	1d33      	adds	r3, r6, #4
 80038f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038f8:	6838      	ldr	r0, [r7, #0]
 80038fa:	f002 fe8f 	bl	800661c <USB_DevInit>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e00d      	b.n	800392c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f003 fed7 	bl	80076d8 <USB_DevDisconnect>

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003934 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_PCD_Start+0x1c>
 800394c:	2302      	movs	r3, #2
 800394e:	e020      	b.n	8003992 <HAL_PCD_Start+0x5e>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	2b01      	cmp	r3, #1
 800395e:	d109      	bne.n	8003974 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003964:	2b01      	cmp	r3, #1
 8003966:	d005      	beq.n	8003974 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f002 fe03 	bl	8006584 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f003 fe87 	bl	8007696 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800399a:	b590      	push	{r4, r7, lr}
 800399c:	b08d      	sub	sp, #52	; 0x34
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f003 ff45 	bl	8007840 <USB_GetMode>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f040 839d 	bne.w	80040f8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 fea9 	bl	800771a <USB_ReadInterrupts>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8393 	beq.w	80040f6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f003 fea0 	bl	800771a <USB_ReadInterrupts>
 80039da:	4603      	mov	r3, r0
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d107      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f002 0202 	and.w	r2, r2, #2
 80039f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 fe8e 	bl	800771a <USB_ReadInterrupts>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d161      	bne.n	8003acc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0210 	bic.w	r2, r2, #16
 8003a16:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f003 020f 	and.w	r2, r3, #15
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	4413      	add	r3, r2
 8003a34:	3304      	adds	r3, #4
 8003a36:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	0c5b      	lsrs	r3, r3, #17
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d124      	bne.n	8003a8e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d035      	beq.n	8003abc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	6a38      	ldr	r0, [r7, #32]
 8003a64:	f003 fcf4 	bl	8007450 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a74:	441a      	add	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a86:	441a      	add	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	619a      	str	r2, [r3, #24]
 8003a8c:	e016      	b.n	8003abc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	0c5b      	lsrs	r3, r3, #17
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d110      	bne.n	8003abc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003aa0:	2208      	movs	r2, #8
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6a38      	ldr	r0, [r7, #32]
 8003aa6:	f003 fcd3 	bl	8007450 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab6:	441a      	add	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0210 	orr.w	r2, r2, #16
 8003aca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f003 fe22 	bl	800771a <USB_ReadInterrupts>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003adc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ae0:	d16e      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f003 fe28 	bl	8007740 <USB_ReadDevAllOutEpInterrupt>
 8003af0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003af2:	e062      	b.n	8003bba <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d057      	beq.n	8003bae <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 fe4d 	bl	80077a8 <USB_ReadDevOutEPInterrupt>
 8003b0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00c      	beq.n	8003b34 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b26:	461a      	mov	r2, r3
 8003b28:	2301      	movs	r3, #1
 8003b2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fdb0 	bl	8004694 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00c      	beq.n	8003b58 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	2308      	movs	r3, #8
 8003b4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 feaa 	bl	80048ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2310      	movs	r3, #16
 8003b72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2320      	movs	r3, #32
 8003b8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d199      	bne.n	8003af4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f003 fda8 	bl	800771a <USB_ReadInterrupts>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bd4:	f040 80c0 	bne.w	8003d58 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f003 fdc9 	bl	8007774 <USB_ReadDevAllInEpInterrupt>
 8003be2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003be8:	e0b2      	b.n	8003d50 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80a7 	beq.w	8003d44 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f003 fdef 	bl	80077e4 <USB_ReadDevInEPInterrupt>
 8003c06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d057      	beq.n	8003cc2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	2201      	movs	r2, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	69f9      	ldr	r1, [r7, #28]
 8003c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c32:	4013      	ands	r3, r2
 8003c34:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c42:	461a      	mov	r2, r3
 8003c44:	2301      	movs	r3, #1
 8003c46:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d132      	bne.n	8003cb6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3348      	adds	r3, #72	; 0x48
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4403      	add	r3, r0
 8003c70:	3344      	adds	r3, #68	; 0x44
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4419      	add	r1, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4403      	add	r3, r0
 8003c84:	3348      	adds	r3, #72	; 0x48
 8003c86:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d113      	bne.n	8003cb6 <HAL_PCD_IRQHandler+0x31c>
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3350      	adds	r3, #80	; 0x50
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d108      	bne.n	8003cb6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	f003 fdf7 	bl	80078a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f005 ff2e 	bl	8009b1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2308      	movs	r3, #8
 8003cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2310      	movs	r3, #16
 8003cf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d10:	461a      	mov	r2, r3
 8003d12:	2340      	movs	r3, #64	; 0x40
 8003d14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2302      	movs	r3, #2
 8003d30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fc1b 	bl	800457a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	3301      	adds	r3, #1
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f47f af49 	bne.w	8003bea <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 fcdc 	bl	800771a <USB_ReadInterrupts>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d6c:	d122      	bne.n	8003db4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d108      	bne.n	8003d9e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d94:	2100      	movs	r1, #0
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fe26 	bl	80049e8 <HAL_PCDEx_LPM_Callback>
 8003d9c:	e002      	b.n	8003da4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f005 ff2a 	bl	8009bf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f003 fcae 	bl	800771a <USB_ReadInterrupts>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc8:	d112      	bne.n	8003df0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d102      	bne.n	8003de0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f005 fee6 	bl	8009bac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003dee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 fc90 	bl	800771a <USB_ReadInterrupts>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e04:	f040 80c7 	bne.w	8003f96 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2110      	movs	r1, #16
 8003e22:	4618      	mov	r0, r3
 8003e24:	f002 fd5e 	bl	80068e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2c:	e056      	b.n	8003edc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e60:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea6:	0151      	lsls	r1, r2, #5
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	440a      	add	r2, r1
 8003eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec6:	0151      	lsls	r1, r2, #5
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	440a      	add	r2, r1
 8003ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ed0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ed4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed8:	3301      	adds	r3, #1
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d3a3      	bcc.n	8003e2e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ef8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d016      	beq.n	8003f30 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f12:	f043 030b 	orr.w	r3, r3, #11
 8003f16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f28:	f043 030b 	orr.w	r3, r3, #11
 8003f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f2e:	e015      	b.n	8003f5c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f42:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f56:	f043 030b 	orr.w	r3, r3, #11
 8003f5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f80:	461a      	mov	r2, r3
 8003f82:	f003 fc8f 	bl	80078a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f003 fbbd 	bl	800771a <USB_ReadInterrupts>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003faa:	d124      	bne.n	8003ff6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 fc53 	bl	800785c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f002 fcf3 	bl	80069a6 <USB_GetDevSpeed>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681c      	ldr	r4, [r3, #0]
 8003fcc:	f001 f920 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 8003fd0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f002 fa30 	bl	8006440 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f005 fdc4 	bl	8009b6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ff4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f003 fb8d 	bl	800771a <USB_ReadInterrupts>
 8004000:	4603      	mov	r3, r0
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b08      	cmp	r3, #8
 8004008:	d10a      	bne.n	8004020 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f005 fda1 	bl	8009b52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f002 0208 	and.w	r2, r2, #8
 800401e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f003 fb78 	bl	800771a <USB_ReadInterrupts>
 800402a:	4603      	mov	r3, r0
 800402c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004034:	d10f      	bne.n	8004056 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	b2db      	uxtb	r3, r3
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f005 fdf9 	bl	8009c38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004054:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f003 fb5d 	bl	800771a <USB_ReadInterrupts>
 8004060:	4603      	mov	r3, r0
 8004062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800406a:	d10f      	bne.n	800408c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	b2db      	uxtb	r3, r3
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f005 fdcc 	bl	8009c14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800408a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f003 fb42 	bl	800771a <USB_ReadInterrupts>
 8004096:	4603      	mov	r3, r0
 8004098:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800409c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a0:	d10a      	bne.n	80040b8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f005 fdda 	bl	8009c5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f003 fb2c 	bl	800771a <USB_ReadInterrupts>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d115      	bne.n	80040f8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f005 fdca 	bl	8009c78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	e000      	b.n	80040f8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80040f6:	bf00      	nop
    }
  }
}
 80040f8:	3734      	adds	r7, #52	; 0x34
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd90      	pop	{r4, r7, pc}

080040fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	460b      	mov	r3, r1
 8004108:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_PCD_SetAddress+0x1a>
 8004114:	2302      	movs	r3, #2
 8004116:	e013      	b.n	8004140 <HAL_PCD_SetAddress+0x42>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f003 fa8a 	bl	800764a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	461a      	mov	r2, r3
 8004156:	4603      	mov	r3, r0
 8004158:	70fb      	strb	r3, [r7, #3]
 800415a:	460b      	mov	r3, r1
 800415c:	803b      	strh	r3, [r7, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004166:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800416a:	2b00      	cmp	r3, #0
 800416c:	da0f      	bge.n	800418e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	f003 020f 	and.w	r2, r3, #15
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	3338      	adds	r3, #56	; 0x38
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	3304      	adds	r3, #4
 8004184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	705a      	strb	r2, [r3, #1]
 800418c:	e00f      	b.n	80041ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	f003 020f 	and.w	r2, r3, #15
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	3304      	adds	r3, #4
 80041a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041ba:	883a      	ldrh	r2, [r7, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	78ba      	ldrb	r2, [r7, #2]
 80041c4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	785b      	ldrb	r3, [r3, #1]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d004      	beq.n	80041d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041d8:	78bb      	ldrb	r3, [r7, #2]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d102      	bne.n	80041e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_PCD_EP_Open+0xaa>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e00e      	b.n	8004210 <HAL_PCD_EP_Open+0xc8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68f9      	ldr	r1, [r7, #12]
 8004200:	4618      	mov	r0, r3
 8004202:	f002 fbf5 	bl	80069f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800420e:	7afb      	ldrb	r3, [r7, #11]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004228:	2b00      	cmp	r3, #0
 800422a:	da0f      	bge.n	800424c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	f003 020f 	and.w	r2, r3, #15
 8004232:	4613      	mov	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	3338      	adds	r3, #56	; 0x38
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	4413      	add	r3, r2
 8004240:	3304      	adds	r3, #4
 8004242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	705a      	strb	r2, [r3, #1]
 800424a:	e00f      	b.n	800426c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	f003 020f 	and.w	r2, r3, #15
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	3304      	adds	r3, #4
 8004264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	b2da      	uxtb	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_PCD_EP_Close+0x6e>
 8004282:	2302      	movs	r3, #2
 8004284:	e00e      	b.n	80042a4 <HAL_PCD_EP_Close+0x8c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68f9      	ldr	r1, [r7, #12]
 8004294:	4618      	mov	r0, r3
 8004296:	f002 fc33 	bl	8006b00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	460b      	mov	r3, r1
 80042ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042bc:	7afb      	ldrb	r3, [r7, #11]
 80042be:	f003 020f 	and.w	r2, r3, #15
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4413      	add	r3, r2
 80042d2:	3304      	adds	r3, #4
 80042d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2200      	movs	r2, #0
 80042e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2200      	movs	r2, #0
 80042ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ee:	7afb      	ldrb	r3, [r7, #11]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d102      	bne.n	8004308 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004308:	7afb      	ldrb	r3, [r7, #11]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	6979      	ldr	r1, [r7, #20]
 8004320:	f002 ff0e 	bl	8007140 <USB_EP0StartXfer>
 8004324:	e008      	b.n	8004338 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	6979      	ldr	r1, [r7, #20]
 8004334:	f002 fcc0 	bl	8006cb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	460b      	mov	r3, r1
 800434c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	f003 020f 	and.w	r2, r3, #15
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004364:	681b      	ldr	r3, [r3, #0]
}
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b086      	sub	sp, #24
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	460b      	mov	r3, r1
 8004380:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004382:	7afb      	ldrb	r3, [r7, #11]
 8004384:	f003 020f 	and.w	r2, r3, #15
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	3338      	adds	r3, #56	; 0x38
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4413      	add	r3, r2
 8004396:	3304      	adds	r3, #4
 8004398:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2200      	movs	r2, #0
 80043aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2201      	movs	r2, #1
 80043b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043b2:	7afb      	ldrb	r3, [r7, #11]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d102      	bne.n	80043cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043cc:	7afb      	ldrb	r3, [r7, #11]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	6979      	ldr	r1, [r7, #20]
 80043e4:	f002 feac 	bl	8007140 <USB_EP0StartXfer>
 80043e8:	e008      	b.n	80043fc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	6979      	ldr	r1, [r7, #20]
 80043f8:	f002 fc5e 	bl	8006cb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	f003 020f 	and.w	r2, r3, #15
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	429a      	cmp	r2, r3
 800441e:	d901      	bls.n	8004424 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e050      	b.n	80044c6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004428:	2b00      	cmp	r3, #0
 800442a:	da0f      	bge.n	800444c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	f003 020f 	and.w	r2, r3, #15
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	3338      	adds	r3, #56	; 0x38
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	4413      	add	r3, r2
 8004440:	3304      	adds	r3, #4
 8004442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	705a      	strb	r2, [r3, #1]
 800444a:	e00d      	b.n	8004468 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	3304      	adds	r3, #4
 8004460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_PCD_EP_SetStall+0x82>
 8004484:	2302      	movs	r3, #2
 8004486:	e01e      	b.n	80044c6 <HAL_PCD_EP_SetStall+0xc0>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68f9      	ldr	r1, [r7, #12]
 8004496:	4618      	mov	r0, r3
 8004498:	f003 f803 	bl	80074a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	b2d9      	uxtb	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044b6:	461a      	mov	r2, r3
 80044b8:	f003 f9f4 	bl	80078a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	f003 020f 	and.w	r2, r3, #15
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d901      	bls.n	80044ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e042      	b.n	8004572 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	da0f      	bge.n	8004514 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	f003 020f 	and.w	r2, r3, #15
 80044fa:	4613      	mov	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	3338      	adds	r3, #56	; 0x38
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	4413      	add	r3, r2
 8004508:	3304      	adds	r3, #4
 800450a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	705a      	strb	r2, [r3, #1]
 8004512:	e00f      	b.n	8004534 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	f003 020f 	and.w	r2, r3, #15
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	3304      	adds	r3, #4
 800452c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_PCD_EP_ClrStall+0x86>
 8004550:	2302      	movs	r3, #2
 8004552:	e00e      	b.n	8004572 <HAL_PCD_EP_ClrStall+0xa4>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	4618      	mov	r0, r3
 8004564:	f003 f80b 	bl	800757e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b08a      	sub	sp, #40	; 0x28
 800457e:	af02      	add	r7, sp, #8
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	3338      	adds	r3, #56	; 0x38
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	3304      	adds	r3, #4
 80045a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d901      	bls.n	80045b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e06c      	b.n	800468c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d902      	bls.n	80045ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3303      	adds	r3, #3
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045d6:	e02b      	b.n	8004630 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d902      	bls.n	80045f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	3303      	adds	r3, #3
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68d9      	ldr	r1, [r3, #12]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800460c:	b2db      	uxtb	r3, r3
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	4603      	mov	r3, r0
 8004612:	6978      	ldr	r0, [r7, #20]
 8004614:	f002 fee7 	bl	80073e6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	441a      	add	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	699a      	ldr	r2, [r3, #24]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	441a      	add	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	b29b      	uxth	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	429a      	cmp	r2, r3
 8004644:	d809      	bhi.n	800465a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800464e:	429a      	cmp	r2, r3
 8004650:	d203      	bcs.n	800465a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1be      	bne.n	80045d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	429a      	cmp	r2, r3
 8004664:	d811      	bhi.n	800468a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	2201      	movs	r2, #1
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	43db      	mvns	r3, r3
 8004680:	6939      	ldr	r1, [r7, #16]
 8004682:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004686:	4013      	ands	r3, r2
 8004688:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3720      	adds	r7, #32
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	333c      	adds	r3, #60	; 0x3c
 80046ac:	3304      	adds	r3, #4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	f040 80a0 	bne.w	800480c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d015      	beq.n	8004702 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a72      	ldr	r2, [pc, #456]	; (80048a4 <PCD_EP_OutXfrComplete_int+0x210>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	f240 80dd 	bls.w	800489a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80d7 	beq.w	800489a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f8:	461a      	mov	r2, r3
 80046fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fe:	6093      	str	r3, [r2, #8]
 8004700:	e0cb      	b.n	800489a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	461a      	mov	r2, r3
 800471a:	2320      	movs	r3, #32
 800471c:	6093      	str	r3, [r2, #8]
 800471e:	e0bc      	b.n	800489a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004726:	2b00      	cmp	r3, #0
 8004728:	f040 80b7 	bne.w	800489a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a5d      	ldr	r2, [pc, #372]	; (80048a4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d90f      	bls.n	8004754 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	461a      	mov	r2, r3
 800474c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004750:	6093      	str	r3, [r2, #8]
 8004752:	e0a2      	b.n	800489a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004766:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	0159      	lsls	r1, r3, #5
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	440b      	add	r3, r1
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800477a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	4613      	mov	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4403      	add	r3, r0
 800478a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800478e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4403      	add	r3, r0
 80047b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4419      	add	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4403      	add	r3, r0
 80047c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047cc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d114      	bne.n	80047fe <PCD_EP_OutXfrComplete_int+0x16a>
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d108      	bne.n	80047fe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047f6:	461a      	mov	r2, r3
 80047f8:	2101      	movs	r1, #1
 80047fa:	f003 f853 	bl	80078a4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f005 f96f 	bl	8009ae8 <HAL_PCD_DataOutStageCallback>
 800480a:	e046      	b.n	800489a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4a26      	ldr	r2, [pc, #152]	; (80048a8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d124      	bne.n	800485e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482a:	461a      	mov	r2, r3
 800482c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004830:	6093      	str	r3, [r2, #8]
 8004832:	e032      	b.n	800489a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d008      	beq.n	8004850 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484a:	461a      	mov	r2, r3
 800484c:	2320      	movs	r3, #32
 800484e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	4619      	mov	r1, r3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f005 f946 	bl	8009ae8 <HAL_PCD_DataOutStageCallback>
 800485c:	e01d      	b.n	800489a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d114      	bne.n	800488e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d108      	bne.n	800488e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004886:	461a      	mov	r2, r3
 8004888:	2100      	movs	r1, #0
 800488a:	f003 f80b 	bl	80078a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	4619      	mov	r1, r3
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f005 f927 	bl	8009ae8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	4f54300a 	.word	0x4f54300a
 80048a8:	4f54310a 	.word	0x4f54310a

080048ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	333c      	adds	r3, #60	; 0x3c
 80048c4:	3304      	adds	r3, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a15      	ldr	r2, [pc, #84]	; (8004934 <PCD_EP_OutSetupPacket_int+0x88>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d90e      	bls.n	8004900 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	461a      	mov	r2, r3
 80048fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f005 f8df 	bl	8009ac4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <PCD_EP_OutSetupPacket_int+0x88>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d90c      	bls.n	8004928 <PCD_EP_OutSetupPacket_int+0x7c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d108      	bne.n	8004928 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004920:	461a      	mov	r2, r3
 8004922:	2101      	movs	r1, #1
 8004924:	f002 ffbe 	bl	80078a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	4f54300a 	.word	0x4f54300a

08004938 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
 8004944:	4613      	mov	r3, r2
 8004946:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d107      	bne.n	8004966 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004956:	883b      	ldrh	r3, [r7, #0]
 8004958:	0419      	lsls	r1, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	430a      	orrs	r2, r1
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
 8004964:	e028      	b.n	80049b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	4413      	add	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	e00d      	b.n	8004996 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	3340      	adds	r3, #64	; 0x40
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	0c1b      	lsrs	r3, r3, #16
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4413      	add	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	3301      	adds	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
 8004996:	7bfa      	ldrb	r2, [r7, #15]
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	3b01      	subs	r3, #1
 800499c:	429a      	cmp	r2, r3
 800499e:	d3ec      	bcc.n	800497a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049a0:	883b      	ldrh	r3, [r7, #0]
 80049a2:	0418      	lsls	r0, r3, #16
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6819      	ldr	r1, [r3, #0]
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	4302      	orrs	r2, r0
 80049b0:	3340      	adds	r3, #64	; 0x40
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e25b      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d075      	beq.n	8004b0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a1e:	4ba3      	ldr	r3, [pc, #652]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d00c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2a:	4ba0      	ldr	r3, [pc, #640]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d112      	bne.n	8004a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a36:	4b9d      	ldr	r3, [pc, #628]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a42:	d10b      	bne.n	8004a5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	4b99      	ldr	r3, [pc, #612]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05b      	beq.n	8004b08 <HAL_RCC_OscConfig+0x108>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d157      	bne.n	8004b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e236      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d106      	bne.n	8004a74 <HAL_RCC_OscConfig+0x74>
 8004a66:	4b91      	ldr	r3, [pc, #580]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a90      	ldr	r2, [pc, #576]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e01d      	b.n	8004ab0 <HAL_RCC_OscConfig+0xb0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x98>
 8004a7e:	4b8b      	ldr	r3, [pc, #556]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a8a      	ldr	r2, [pc, #552]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b88      	ldr	r3, [pc, #544]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a87      	ldr	r2, [pc, #540]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e00b      	b.n	8004ab0 <HAL_RCC_OscConfig+0xb0>
 8004a98:	4b84      	ldr	r3, [pc, #528]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a83      	ldr	r2, [pc, #524]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	4b81      	ldr	r3, [pc, #516]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a80      	ldr	r2, [pc, #512]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d013      	beq.n	8004ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7fd fd8a 	bl	80025d0 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac0:	f7fd fd86 	bl	80025d0 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	; 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e1fb      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b76      	ldr	r3, [pc, #472]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0xc0>
 8004ade:	e014      	b.n	8004b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fd fd76 	bl	80025d0 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7fd fd72 	bl	80025d0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e1e7      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afa:	4b6c      	ldr	r3, [pc, #432]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0xe8>
 8004b06:	e000      	b.n	8004b0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d063      	beq.n	8004bde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b16:	4b65      	ldr	r3, [pc, #404]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b22:	4b62      	ldr	r3, [pc, #392]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d11c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b2e:	4b5f      	ldr	r3, [pc, #380]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d116      	bne.n	8004b68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3a:	4b5c      	ldr	r3, [pc, #368]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_RCC_OscConfig+0x152>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d001      	beq.n	8004b52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e1bb      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b52:	4b56      	ldr	r3, [pc, #344]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4952      	ldr	r1, [pc, #328]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b66:	e03a      	b.n	8004bde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d020      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b70:	4b4f      	ldr	r3, [pc, #316]	; (8004cb0 <HAL_RCC_OscConfig+0x2b0>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fd fd2b 	bl	80025d0 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b7e:	f7fd fd27 	bl	80025d0 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e19c      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	4b46      	ldr	r3, [pc, #280]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9c:	4b43      	ldr	r3, [pc, #268]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4940      	ldr	r1, [pc, #256]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]
 8004bb0:	e015      	b.n	8004bde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb2:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <HAL_RCC_OscConfig+0x2b0>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fd fd0a 	bl	80025d0 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc0:	f7fd fd06 	bl	80025d0 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e17b      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	4b36      	ldr	r3, [pc, #216]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d030      	beq.n	8004c4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d016      	beq.n	8004c20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf2:	4b30      	ldr	r3, [pc, #192]	; (8004cb4 <HAL_RCC_OscConfig+0x2b4>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fd fcea 	bl	80025d0 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c00:	f7fd fce6 	bl	80025d0 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e15b      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	4b26      	ldr	r3, [pc, #152]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x200>
 8004c1e:	e015      	b.n	8004c4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c20:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <HAL_RCC_OscConfig+0x2b4>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c26:	f7fd fcd3 	bl	80025d0 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c2e:	f7fd fccf 	bl	80025d0 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e144      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c40:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f0      	bne.n	8004c2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a0 	beq.w	8004d9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	4a0e      	ldr	r2, [pc, #56]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c82:	60bb      	str	r3, [r7, #8]
 8004c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCC_OscConfig+0x2b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d121      	bne.n	8004cda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <HAL_RCC_OscConfig+0x2b8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a07      	ldr	r2, [pc, #28]	; (8004cb8 <HAL_RCC_OscConfig+0x2b8>)
 8004c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca2:	f7fd fc95 	bl	80025d0 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca8:	e011      	b.n	8004cce <HAL_RCC_OscConfig+0x2ce>
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	42470000 	.word	0x42470000
 8004cb4:	42470e80 	.word	0x42470e80
 8004cb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cbc:	f7fd fc88 	bl	80025d0 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e0fd      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cce:	4b81      	ldr	r3, [pc, #516]	; (8004ed4 <HAL_RCC_OscConfig+0x4d4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d106      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x2f0>
 8004ce2:	4b7d      	ldr	r3, [pc, #500]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	4a7c      	ldr	r2, [pc, #496]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	6713      	str	r3, [r2, #112]	; 0x70
 8004cee:	e01c      	b.n	8004d2a <HAL_RCC_OscConfig+0x32a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2b05      	cmp	r3, #5
 8004cf6:	d10c      	bne.n	8004d12 <HAL_RCC_OscConfig+0x312>
 8004cf8:	4b77      	ldr	r3, [pc, #476]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	4a76      	ldr	r2, [pc, #472]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004cfe:	f043 0304 	orr.w	r3, r3, #4
 8004d02:	6713      	str	r3, [r2, #112]	; 0x70
 8004d04:	4b74      	ldr	r3, [pc, #464]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	4a73      	ldr	r2, [pc, #460]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d10:	e00b      	b.n	8004d2a <HAL_RCC_OscConfig+0x32a>
 8004d12:	4b71      	ldr	r3, [pc, #452]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	4a70      	ldr	r2, [pc, #448]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1e:	4b6e      	ldr	r3, [pc, #440]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	4a6d      	ldr	r2, [pc, #436]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004d24:	f023 0304 	bic.w	r3, r3, #4
 8004d28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d015      	beq.n	8004d5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d32:	f7fd fc4d 	bl	80025d0 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d3a:	f7fd fc49 	bl	80025d0 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0bc      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d50:	4b61      	ldr	r3, [pc, #388]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ee      	beq.n	8004d3a <HAL_RCC_OscConfig+0x33a>
 8004d5c:	e014      	b.n	8004d88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5e:	f7fd fc37 	bl	80025d0 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fd fc33 	bl	80025d0 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e0a6      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7c:	4b56      	ldr	r3, [pc, #344]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ee      	bne.n	8004d66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8e:	4b52      	ldr	r3, [pc, #328]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	4a51      	ldr	r2, [pc, #324]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8092 	beq.w	8004ec8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004da4:	4b4c      	ldr	r3, [pc, #304]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d05c      	beq.n	8004e6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d141      	bne.n	8004e3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db8:	4b48      	ldr	r3, [pc, #288]	; (8004edc <HAL_RCC_OscConfig+0x4dc>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fd fc07 	bl	80025d0 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fd fc03 	bl	80025d0 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e078      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd8:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69da      	ldr	r2, [r3, #28]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	019b      	lsls	r3, r3, #6
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	061b      	lsls	r3, r3, #24
 8004e08:	4933      	ldr	r1, [pc, #204]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e0e:	4b33      	ldr	r3, [pc, #204]	; (8004edc <HAL_RCC_OscConfig+0x4dc>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fd fbdc 	bl	80025d0 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fd fbd8 	bl	80025d0 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e04d      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2e:	4b2a      	ldr	r3, [pc, #168]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x41c>
 8004e3a:	e045      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3c:	4b27      	ldr	r3, [pc, #156]	; (8004edc <HAL_RCC_OscConfig+0x4dc>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e42:	f7fd fbc5 	bl	80025d0 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e4a:	f7fd fbc1 	bl	80025d0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e036      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f0      	bne.n	8004e4a <HAL_RCC_OscConfig+0x44a>
 8004e68:	e02e      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e029      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e76:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <HAL_RCC_OscConfig+0x4d8>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d11c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d115      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d10d      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	42470060 	.word	0x42470060

08004ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0cc      	b.n	800508e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef4:	4b68      	ldr	r3, [pc, #416]	; (8005098 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d90c      	bls.n	8004f1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f02:	4b65      	ldr	r3, [pc, #404]	; (8005098 <HAL_RCC_ClockConfig+0x1b8>)
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0a:	4b63      	ldr	r3, [pc, #396]	; (8005098 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0b8      	b.n	800508e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d020      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f34:	4b59      	ldr	r3, [pc, #356]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4a58      	ldr	r2, [pc, #352]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f4c:	4b53      	ldr	r3, [pc, #332]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4a52      	ldr	r2, [pc, #328]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f58:	4b50      	ldr	r3, [pc, #320]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	494d      	ldr	r1, [pc, #308]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d044      	beq.n	8005000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d107      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7e:	4b47      	ldr	r3, [pc, #284]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d119      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e07f      	b.n	800508e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d003      	beq.n	8004f9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d107      	bne.n	8004fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9e:	4b3f      	ldr	r3, [pc, #252]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e06f      	b.n	800508e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fae:	4b3b      	ldr	r3, [pc, #236]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e067      	b.n	800508e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fbe:	4b37      	ldr	r3, [pc, #220]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f023 0203 	bic.w	r2, r3, #3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4934      	ldr	r1, [pc, #208]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fd0:	f7fd fafe 	bl	80025d0 <HAL_GetTick>
 8004fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd8:	f7fd fafa 	bl	80025d0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e04f      	b.n	800508e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fee:	4b2b      	ldr	r3, [pc, #172]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 020c 	and.w	r2, r3, #12
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d1eb      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005000:	4b25      	ldr	r3, [pc, #148]	; (8005098 <HAL_RCC_ClockConfig+0x1b8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d20c      	bcs.n	8005028 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b22      	ldr	r3, [pc, #136]	; (8005098 <HAL_RCC_ClockConfig+0x1b8>)
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b20      	ldr	r3, [pc, #128]	; (8005098 <HAL_RCC_ClockConfig+0x1b8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e032      	b.n	800508e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d008      	beq.n	8005046 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005034:	4b19      	ldr	r3, [pc, #100]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4916      	ldr	r1, [pc, #88]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	490e      	ldr	r1, [pc, #56]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	4313      	orrs	r3, r2
 8005064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005066:	f000 f821 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 800506a:	4601      	mov	r1, r0
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	091b      	lsrs	r3, r3, #4
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	4a0a      	ldr	r2, [pc, #40]	; (80050a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005078:	5cd3      	ldrb	r3, [r2, r3]
 800507a:	fa21 f303 	lsr.w	r3, r1, r3
 800507e:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005082:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7fd fa5e 	bl	8002548 <HAL_InitTick>

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40023c00 	.word	0x40023c00
 800509c:	40023800 	.word	0x40023800
 80050a0:	0800b734 	.word	0x0800b734
 80050a4:	200000a0 	.word	0x200000a0
 80050a8:	200000a4 	.word	0x200000a4

080050ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	607b      	str	r3, [r7, #4]
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	2300      	movs	r3, #0
 80050bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050c2:	4b50      	ldr	r3, [pc, #320]	; (8005204 <HAL_RCC_GetSysClockFreq+0x158>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d007      	beq.n	80050de <HAL_RCC_GetSysClockFreq+0x32>
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d008      	beq.n	80050e4 <HAL_RCC_GetSysClockFreq+0x38>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f040 808d 	bne.w	80051f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d8:	4b4b      	ldr	r3, [pc, #300]	; (8005208 <HAL_RCC_GetSysClockFreq+0x15c>)
 80050da:	60bb      	str	r3, [r7, #8]
       break;
 80050dc:	e08c      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050de:	4b4b      	ldr	r3, [pc, #300]	; (800520c <HAL_RCC_GetSysClockFreq+0x160>)
 80050e0:	60bb      	str	r3, [r7, #8]
      break;
 80050e2:	e089      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e4:	4b47      	ldr	r3, [pc, #284]	; (8005204 <HAL_RCC_GetSysClockFreq+0x158>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ee:	4b45      	ldr	r3, [pc, #276]	; (8005204 <HAL_RCC_GetSysClockFreq+0x158>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d023      	beq.n	8005142 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fa:	4b42      	ldr	r3, [pc, #264]	; (8005204 <HAL_RCC_GetSysClockFreq+0x158>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	099b      	lsrs	r3, r3, #6
 8005100:	f04f 0400 	mov.w	r4, #0
 8005104:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	ea03 0501 	and.w	r5, r3, r1
 8005110:	ea04 0602 	and.w	r6, r4, r2
 8005114:	4a3d      	ldr	r2, [pc, #244]	; (800520c <HAL_RCC_GetSysClockFreq+0x160>)
 8005116:	fb02 f106 	mul.w	r1, r2, r6
 800511a:	2200      	movs	r2, #0
 800511c:	fb02 f205 	mul.w	r2, r2, r5
 8005120:	440a      	add	r2, r1
 8005122:	493a      	ldr	r1, [pc, #232]	; (800520c <HAL_RCC_GetSysClockFreq+0x160>)
 8005124:	fba5 0101 	umull	r0, r1, r5, r1
 8005128:	1853      	adds	r3, r2, r1
 800512a:	4619      	mov	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f04f 0400 	mov.w	r4, #0
 8005132:	461a      	mov	r2, r3
 8005134:	4623      	mov	r3, r4
 8005136:	f7fb f8ab 	bl	8000290 <__aeabi_uldivmod>
 800513a:	4603      	mov	r3, r0
 800513c:	460c      	mov	r4, r1
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	e049      	b.n	80051d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005142:	4b30      	ldr	r3, [pc, #192]	; (8005204 <HAL_RCC_GetSysClockFreq+0x158>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	099b      	lsrs	r3, r3, #6
 8005148:	f04f 0400 	mov.w	r4, #0
 800514c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	ea03 0501 	and.w	r5, r3, r1
 8005158:	ea04 0602 	and.w	r6, r4, r2
 800515c:	4629      	mov	r1, r5
 800515e:	4632      	mov	r2, r6
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	f04f 0400 	mov.w	r4, #0
 8005168:	0154      	lsls	r4, r2, #5
 800516a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800516e:	014b      	lsls	r3, r1, #5
 8005170:	4619      	mov	r1, r3
 8005172:	4622      	mov	r2, r4
 8005174:	1b49      	subs	r1, r1, r5
 8005176:	eb62 0206 	sbc.w	r2, r2, r6
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	f04f 0400 	mov.w	r4, #0
 8005182:	0194      	lsls	r4, r2, #6
 8005184:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005188:	018b      	lsls	r3, r1, #6
 800518a:	1a5b      	subs	r3, r3, r1
 800518c:	eb64 0402 	sbc.w	r4, r4, r2
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	00e2      	lsls	r2, r4, #3
 800519a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800519e:	00d9      	lsls	r1, r3, #3
 80051a0:	460b      	mov	r3, r1
 80051a2:	4614      	mov	r4, r2
 80051a4:	195b      	adds	r3, r3, r5
 80051a6:	eb44 0406 	adc.w	r4, r4, r6
 80051aa:	f04f 0100 	mov.w	r1, #0
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	02a2      	lsls	r2, r4, #10
 80051b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051b8:	0299      	lsls	r1, r3, #10
 80051ba:	460b      	mov	r3, r1
 80051bc:	4614      	mov	r4, r2
 80051be:	4618      	mov	r0, r3
 80051c0:	4621      	mov	r1, r4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	461a      	mov	r2, r3
 80051ca:	4623      	mov	r3, r4
 80051cc:	f7fb f860 	bl	8000290 <__aeabi_uldivmod>
 80051d0:	4603      	mov	r3, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_RCC_GetSysClockFreq+0x158>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	0c1b      	lsrs	r3, r3, #16
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	3301      	adds	r3, #1
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	60bb      	str	r3, [r7, #8]
      break;
 80051f0:	e002      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051f2:	4b05      	ldr	r3, [pc, #20]	; (8005208 <HAL_RCC_GetSysClockFreq+0x15c>)
 80051f4:	60bb      	str	r3, [r7, #8]
      break;
 80051f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f8:	68bb      	ldr	r3, [r7, #8]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005202:	bf00      	nop
 8005204:	40023800 	.word	0x40023800
 8005208:	00f42400 	.word	0x00f42400
 800520c:	017d7840 	.word	0x017d7840

08005210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005214:	4b03      	ldr	r3, [pc, #12]	; (8005224 <HAL_RCC_GetHCLKFreq+0x14>)
 8005216:	681b      	ldr	r3, [r3, #0]
}
 8005218:	4618      	mov	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	200000a0 	.word	0x200000a0

08005228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800522c:	f7ff fff0 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 8005230:	4601      	mov	r1, r0
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	0a9b      	lsrs	r3, r3, #10
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	4a03      	ldr	r2, [pc, #12]	; (800524c <HAL_RCC_GetPCLK1Freq+0x24>)
 800523e:	5cd3      	ldrb	r3, [r2, r3]
 8005240:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40023800 	.word	0x40023800
 800524c:	0800b744 	.word	0x0800b744

08005250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e056      	b.n	8005310 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d106      	bne.n	8005282 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fc f879 	bl	8001374 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005298:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	ea42 0103 	orr.w	r1, r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	0c1b      	lsrs	r3, r3, #16
 80052e0:	f003 0104 	and.w	r1, r3, #4
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69da      	ldr	r2, [r3, #28]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_SPI_Transmit+0x22>
 8005336:	2302      	movs	r3, #2
 8005338:	e11e      	b.n	8005578 <HAL_SPI_Transmit+0x260>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005342:	f7fd f945 	bl	80025d0 <HAL_GetTick>
 8005346:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d002      	beq.n	800535e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005358:	2302      	movs	r3, #2
 800535a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800535c:	e103      	b.n	8005566 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_SPI_Transmit+0x52>
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d102      	bne.n	8005370 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800536e:	e0fa      	b.n	8005566 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2203      	movs	r2, #3
 8005374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	88fa      	ldrh	r2, [r7, #6]
 8005388:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	88fa      	ldrh	r2, [r7, #6]
 800538e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b6:	d107      	bne.n	80053c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b40      	cmp	r3, #64	; 0x40
 80053d4:	d007      	beq.n	80053e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ee:	d14b      	bne.n	8005488 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_SPI_Transmit+0xe6>
 80053f8:	8afb      	ldrh	r3, [r7, #22]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d13e      	bne.n	800547c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	881a      	ldrh	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	1c9a      	adds	r2, r3, #2
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005422:	e02b      	b.n	800547c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b02      	cmp	r3, #2
 8005430:	d112      	bne.n	8005458 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	1c9a      	adds	r2, r3, #2
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	86da      	strh	r2, [r3, #54]	; 0x36
 8005456:	e011      	b.n	800547c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005458:	f7fd f8ba 	bl	80025d0 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d803      	bhi.n	8005470 <HAL_SPI_Transmit+0x158>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d102      	bne.n	8005476 <HAL_SPI_Transmit+0x15e>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d102      	bne.n	800547c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	77fb      	strb	r3, [r7, #31]
          goto error;
 800547a:	e074      	b.n	8005566 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1ce      	bne.n	8005424 <HAL_SPI_Transmit+0x10c>
 8005486:	e04c      	b.n	8005522 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_SPI_Transmit+0x17e>
 8005490:	8afb      	ldrh	r3, [r7, #22]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d140      	bne.n	8005518 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054bc:	e02c      	b.n	8005518 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d113      	bne.n	80054f4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	7812      	ldrb	r2, [r2, #0]
 80054d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80054f2:	e011      	b.n	8005518 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054f4:	f7fd f86c 	bl	80025d0 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d803      	bhi.n	800550c <HAL_SPI_Transmit+0x1f4>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d102      	bne.n	8005512 <HAL_SPI_Transmit+0x1fa>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005516:	e026      	b.n	8005566 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1cd      	bne.n	80054be <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 fba4 	bl	8005c74 <SPI_EndRxTxTransaction>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	77fb      	strb	r3, [r7, #31]
 8005562:	e000      	b.n	8005566 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005564:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005576:	7ffb      	ldrb	r3, [r7, #31]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800559c:	d112      	bne.n	80055c4 <HAL_SPI_Receive+0x44>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10e      	bne.n	80055c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2204      	movs	r2, #4
 80055aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055ae:	88fa      	ldrh	r2, [r7, #6]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f8e9 	bl	8005792 <HAL_SPI_TransmitReceive>
 80055c0:	4603      	mov	r3, r0
 80055c2:	e0e2      	b.n	800578a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_SPI_Receive+0x52>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e0db      	b.n	800578a <HAL_SPI_Receive+0x20a>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055da:	f7fc fff9 	bl	80025d0 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d002      	beq.n	80055f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
 80055ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055f0:	e0c2      	b.n	8005778 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_SPI_Receive+0x7e>
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005602:	e0b9      	b.n	8005778 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2204      	movs	r2, #4
 8005608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	88fa      	ldrh	r2, [r7, #6]
 800561c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564a:	d107      	bne.n	800565c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800565a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005666:	2b40      	cmp	r3, #64	; 0x40
 8005668:	d007      	beq.n	800567a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005678:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d162      	bne.n	8005748 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005682:	e02e      	b.n	80056e2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b01      	cmp	r3, #1
 8005690:	d115      	bne.n	80056be <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f103 020c 	add.w	r2, r3, #12
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	7812      	ldrb	r2, [r2, #0]
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056bc:	e011      	b.n	80056e2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056be:	f7fc ff87 	bl	80025d0 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d803      	bhi.n	80056d6 <HAL_SPI_Receive+0x156>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d102      	bne.n	80056dc <HAL_SPI_Receive+0x15c>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056e0:	e04a      	b.n	8005778 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1cb      	bne.n	8005684 <HAL_SPI_Receive+0x104>
 80056ec:	e031      	b.n	8005752 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d113      	bne.n	8005724 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	b292      	uxth	r2, r2
 8005708:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	1c9a      	adds	r2, r3, #2
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005722:	e011      	b.n	8005748 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005724:	f7fc ff54 	bl	80025d0 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d803      	bhi.n	800573c <HAL_SPI_Receive+0x1bc>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d102      	bne.n	8005742 <HAL_SPI_Receive+0x1c2>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d102      	bne.n	8005748 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005746:	e017      	b.n	8005778 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1cd      	bne.n	80056ee <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fa27 	bl	8005baa <SPI_EndRxTransaction>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	75fb      	strb	r3, [r7, #23]
 8005774:	e000      	b.n	8005778 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005776:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005788:	7dfb      	ldrb	r3, [r7, #23]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b08c      	sub	sp, #48	; 0x30
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057a0:	2301      	movs	r3, #1
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x26>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e18a      	b.n	8005ace <HAL_SPI_TransmitReceive+0x33c>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057c0:	f7fc ff06 	bl	80025d0 <HAL_GetTick>
 80057c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80057d6:	887b      	ldrh	r3, [r7, #2]
 80057d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d00f      	beq.n	8005802 <HAL_SPI_TransmitReceive+0x70>
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e8:	d107      	bne.n	80057fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <HAL_SPI_TransmitReceive+0x68>
 80057f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d003      	beq.n	8005802 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80057fa:	2302      	movs	r3, #2
 80057fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005800:	e15b      	b.n	8005aba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_SPI_TransmitReceive+0x82>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <HAL_SPI_TransmitReceive+0x82>
 800580e:	887b      	ldrh	r3, [r7, #2]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d103      	bne.n	800581c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800581a:	e14e      	b.n	8005aba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b04      	cmp	r3, #4
 8005826:	d003      	beq.n	8005830 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2205      	movs	r2, #5
 800582c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	887a      	ldrh	r2, [r7, #2]
 8005840:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	887a      	ldrh	r2, [r7, #2]
 8005846:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	887a      	ldrh	r2, [r7, #2]
 8005852:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	887a      	ldrh	r2, [r7, #2]
 8005858:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d007      	beq.n	8005884 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005882:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588c:	d178      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_SPI_TransmitReceive+0x10a>
 8005896:	8b7b      	ldrh	r3, [r7, #26]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d166      	bne.n	800596a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	881a      	ldrh	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	1c9a      	adds	r2, r3, #2
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c0:	e053      	b.n	800596a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d11b      	bne.n	8005908 <HAL_SPI_TransmitReceive+0x176>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <HAL_SPI_TransmitReceive+0x176>
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d113      	bne.n	8005908 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	881a      	ldrh	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f0:	1c9a      	adds	r2, r3, #2
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b01      	cmp	r3, #1
 8005914:	d119      	bne.n	800594a <HAL_SPI_TransmitReceive+0x1b8>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d014      	beq.n	800594a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	b292      	uxth	r2, r2
 800592c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	1c9a      	adds	r2, r3, #2
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005946:	2301      	movs	r3, #1
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800594a:	f7fc fe41 	bl	80025d0 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005956:	429a      	cmp	r2, r3
 8005958:	d807      	bhi.n	800596a <HAL_SPI_TransmitReceive+0x1d8>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d003      	beq.n	800596a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005968:	e0a7      	b.n	8005aba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1a6      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x130>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1a1      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x130>
 800597e:	e07c      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <HAL_SPI_TransmitReceive+0x1fc>
 8005988:	8b7b      	ldrh	r3, [r7, #26]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d16b      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	330c      	adds	r3, #12
 8005998:	7812      	ldrb	r2, [r2, #0]
 800599a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059b4:	e057      	b.n	8005a66 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d11c      	bne.n	80059fe <HAL_SPI_TransmitReceive+0x26c>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d017      	beq.n	80059fe <HAL_SPI_TransmitReceive+0x26c>
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d114      	bne.n	80059fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	7812      	ldrb	r2, [r2, #0]
 80059e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d119      	bne.n	8005a40 <HAL_SPI_TransmitReceive+0x2ae>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d014      	beq.n	8005a40 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a40:	f7fc fdc6 	bl	80025d0 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d803      	bhi.n	8005a58 <HAL_SPI_TransmitReceive+0x2c6>
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d102      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x2cc>
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d103      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a64:	e029      	b.n	8005aba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1a2      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x224>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d19d      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 f8f8 	bl	8005c74 <SPI_EndRxTxTransaction>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d006      	beq.n	8005a98 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a96:	e010      	b.n	8005aba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10b      	bne.n	8005ab8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	e000      	b.n	8005aba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ab8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005aca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3730      	adds	r7, #48	; 0x30
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ae6:	e04c      	b.n	8005b82 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d048      	beq.n	8005b82 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005af0:	f7fc fd6e 	bl	80025d0 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d902      	bls.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d13d      	bne.n	8005b82 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b1e:	d111      	bne.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b28:	d004      	beq.n	8005b34 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b32:	d107      	bne.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b4c:	d10f      	bne.n	8005b6e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e00f      	b.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	bf0c      	ite	eq
 8005b92:	2301      	moveq	r3, #1
 8005b94:	2300      	movne	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d1a3      	bne.n	8005ae8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af02      	add	r7, sp, #8
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bbe:	d111      	bne.n	8005be4 <SPI_EndRxTransaction+0x3a>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc8:	d004      	beq.n	8005bd4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd2:	d107      	bne.n	8005be4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bec:	d12a      	bne.n	8005c44 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf6:	d012      	beq.n	8005c1e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2180      	movs	r1, #128	; 0x80
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff ff67 	bl	8005ad6 <SPI_WaitFlagStateUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d02d      	beq.n	8005c6a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c12:	f043 0220 	orr.w	r2, r3, #32
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e026      	b.n	8005c6c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2200      	movs	r2, #0
 8005c26:	2101      	movs	r1, #1
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff ff54 	bl	8005ad6 <SPI_WaitFlagStateUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01a      	beq.n	8005c6a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c38:	f043 0220 	orr.w	r2, r3, #32
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e013      	b.n	8005c6c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff ff41 	bl	8005ad6 <SPI_WaitFlagStateUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	f043 0220 	orr.w	r2, r3, #32
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e000      	b.n	8005c6c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c80:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <SPI_EndRxTxTransaction+0x7c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <SPI_EndRxTxTransaction+0x80>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	0d5b      	lsrs	r3, r3, #21
 8005c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
 8005c94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c9e:	d112      	bne.n	8005cc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2180      	movs	r1, #128	; 0x80
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff ff13 	bl	8005ad6 <SPI_WaitFlagStateUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cba:	f043 0220 	orr.w	r2, r3, #32
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e00f      	b.n	8005ce6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cdc:	2b80      	cmp	r3, #128	; 0x80
 8005cde:	d0f2      	beq.n	8005cc6 <SPI_EndRxTxTransaction+0x52>
 8005ce0:	e000      	b.n	8005ce4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ce2:	bf00      	nop
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	200000a0 	.word	0x200000a0
 8005cf4:	165e9f81 	.word	0x165e9f81

08005cf8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e083      	b.n	8005e14 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d106      	bne.n	8005d26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7fc f893 	bl	8001e4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d3c:	f023 0307 	bic.w	r3, r3, #7
 8005d40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f000 f9ed 	bl	800612c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7a:	f023 0303 	bic.w	r3, r3, #3
 8005d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d98:	f023 030c 	bic.w	r3, r3, #12
 8005d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	4313      	orrs	r3, r2
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	011a      	lsls	r2, r3, #4
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	031b      	lsls	r3, r3, #12
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005dd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005dde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	4313      	orrs	r3, r2
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <HAL_TIM_Encoder_Start_IT+0x16>
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d010      	beq.n	8005e52 <HAL_TIM_Encoder_Start_IT+0x36>
 8005e30:	e01f      	b.n	8005e72 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2201      	movs	r2, #1
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 f9f6 	bl	800622c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0202 	orr.w	r2, r2, #2
 8005e4e:	60da      	str	r2, [r3, #12]
      break;
 8005e50:	e02e      	b.n	8005eb0 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2201      	movs	r2, #1
 8005e58:	2104      	movs	r1, #4
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 f9e6 	bl	800622c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0204 	orr.w	r2, r2, #4
 8005e6e:	60da      	str	r2, [r3, #12]
      break;
 8005e70:	e01e      	b.n	8005eb0 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2201      	movs	r2, #1
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f9d6 	bl	800622c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2201      	movs	r2, #1
 8005e86:	2104      	movs	r1, #4
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 f9cf 	bl	800622c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0202 	orr.w	r2, r2, #2
 8005e9c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0204 	orr.w	r2, r2, #4
 8005eac:	60da      	str	r2, [r3, #12]
      break;
 8005eae:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d122      	bne.n	8005f26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d11b      	bne.n	8005f26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f06f 0202 	mvn.w	r2, #2
 8005ef6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f003 0303 	and.w	r3, r3, #3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7fb f8c1 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8005f12:	e005      	b.n	8005f20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f8ea 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f8f1 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d122      	bne.n	8005f7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d11b      	bne.n	8005f7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f06f 0204 	mvn.w	r2, #4
 8005f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fb f897 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8005f66:	e005      	b.n	8005f74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f8c0 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8c7 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d122      	bne.n	8005fce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b08      	cmp	r3, #8
 8005f94:	d11b      	bne.n	8005fce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f06f 0208 	mvn.w	r2, #8
 8005f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2204      	movs	r2, #4
 8005fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7fb f86d 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8005fba:	e005      	b.n	8005fc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f896 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f89d 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d122      	bne.n	8006022 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d11b      	bne.n	8006022 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f06f 0210 	mvn.w	r2, #16
 8005ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7fb f843 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 800600e:	e005      	b.n	800601c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f86c 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f873 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	d10e      	bne.n	800604e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b01      	cmp	r3, #1
 800603c:	d107      	bne.n	800604e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f06f 0201 	mvn.w	r2, #1
 8006046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f846 	bl	80060da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006058:	2b80      	cmp	r3, #128	; 0x80
 800605a:	d10e      	bne.n	800607a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006066:	2b80      	cmp	r3, #128	; 0x80
 8006068:	d107      	bne.n	800607a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f977 	bl	8006368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d10e      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d107      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800609e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f838 	bl	8006116 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f003 0320 	and.w	r3, r3, #32
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d10e      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d107      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f06f 0220 	mvn.w	r2, #32
 80060ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f941 	bl	8006354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
	...

0800612c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a34      	ldr	r2, [pc, #208]	; (8006210 <TIM_Base_SetConfig+0xe4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00f      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614a:	d00b      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a31      	ldr	r2, [pc, #196]	; (8006214 <TIM_Base_SetConfig+0xe8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d007      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a30      	ldr	r2, [pc, #192]	; (8006218 <TIM_Base_SetConfig+0xec>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d003      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a2f      	ldr	r2, [pc, #188]	; (800621c <TIM_Base_SetConfig+0xf0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d108      	bne.n	8006176 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a25      	ldr	r2, [pc, #148]	; (8006210 <TIM_Base_SetConfig+0xe4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d01b      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006184:	d017      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a22      	ldr	r2, [pc, #136]	; (8006214 <TIM_Base_SetConfig+0xe8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d013      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a21      	ldr	r2, [pc, #132]	; (8006218 <TIM_Base_SetConfig+0xec>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00f      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a20      	ldr	r2, [pc, #128]	; (800621c <TIM_Base_SetConfig+0xf0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00b      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a1f      	ldr	r2, [pc, #124]	; (8006220 <TIM_Base_SetConfig+0xf4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d007      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a1e      	ldr	r2, [pc, #120]	; (8006224 <TIM_Base_SetConfig+0xf8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d003      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <TIM_Base_SetConfig+0xfc>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d108      	bne.n	80061c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a08      	ldr	r2, [pc, #32]	; (8006210 <TIM_Base_SetConfig+0xe4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d103      	bne.n	80061fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	615a      	str	r2, [r3, #20]
}
 8006202:	bf00      	nop
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40010000 	.word	0x40010000
 8006214:	40000400 	.word	0x40000400
 8006218:	40000800 	.word	0x40000800
 800621c:	40000c00 	.word	0x40000c00
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800

0800622c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2201      	movs	r2, #1
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	fa01 f303 	lsl.w	r3, r1, r3
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
	...

08006278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800628c:	2302      	movs	r3, #2
 800628e:	e050      	b.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1c      	ldr	r2, [pc, #112]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062dc:	d013      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a18      	ldr	r2, [pc, #96]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a16      	ldr	r2, [pc, #88]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a15      	ldr	r2, [pc, #84]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a13      	ldr	r2, [pc, #76]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d10c      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	4313      	orrs	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40014000 	.word	0x40014000

08006354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800637c:	b084      	sub	sp, #16
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	f107 001c 	add.w	r0, r7, #28
 800638a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	2b01      	cmp	r3, #1
 8006392:	d122      	bne.n	80063da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d105      	bne.n	80063ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 fac6 	bl	8007960 <USB_CoreReset>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73fb      	strb	r3, [r7, #15]
 80063d8:	e01a      	b.n	8006410 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 faba 	bl	8007960 <USB_CoreReset>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	639a      	str	r2, [r3, #56]	; 0x38
 8006402:	e005      	b.n	8006410 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	2b01      	cmp	r3, #1
 8006414:	d10b      	bne.n	800642e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f043 0206 	orr.w	r2, r3, #6
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f043 0220 	orr.w	r2, r3, #32
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800643a:	b004      	add	sp, #16
 800643c:	4770      	bx	lr
	...

08006440 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d165      	bne.n	8006520 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4a41      	ldr	r2, [pc, #260]	; (800655c <USB_SetTurnaroundTime+0x11c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d906      	bls.n	800646a <USB_SetTurnaroundTime+0x2a>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4a40      	ldr	r2, [pc, #256]	; (8006560 <USB_SetTurnaroundTime+0x120>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d802      	bhi.n	800646a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006464:	230f      	movs	r3, #15
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	e062      	b.n	8006530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4a3c      	ldr	r2, [pc, #240]	; (8006560 <USB_SetTurnaroundTime+0x120>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d906      	bls.n	8006480 <USB_SetTurnaroundTime+0x40>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4a3b      	ldr	r2, [pc, #236]	; (8006564 <USB_SetTurnaroundTime+0x124>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d802      	bhi.n	8006480 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800647a:	230e      	movs	r3, #14
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e057      	b.n	8006530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4a38      	ldr	r2, [pc, #224]	; (8006564 <USB_SetTurnaroundTime+0x124>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d906      	bls.n	8006496 <USB_SetTurnaroundTime+0x56>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4a37      	ldr	r2, [pc, #220]	; (8006568 <USB_SetTurnaroundTime+0x128>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d802      	bhi.n	8006496 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006490:	230d      	movs	r3, #13
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	e04c      	b.n	8006530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	4a33      	ldr	r2, [pc, #204]	; (8006568 <USB_SetTurnaroundTime+0x128>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d906      	bls.n	80064ac <USB_SetTurnaroundTime+0x6c>
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4a32      	ldr	r2, [pc, #200]	; (800656c <USB_SetTurnaroundTime+0x12c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d802      	bhi.n	80064ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80064a6:	230c      	movs	r3, #12
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	e041      	b.n	8006530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4a2f      	ldr	r2, [pc, #188]	; (800656c <USB_SetTurnaroundTime+0x12c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d906      	bls.n	80064c2 <USB_SetTurnaroundTime+0x82>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4a2e      	ldr	r2, [pc, #184]	; (8006570 <USB_SetTurnaroundTime+0x130>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d802      	bhi.n	80064c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80064bc:	230b      	movs	r3, #11
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e036      	b.n	8006530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4a2a      	ldr	r2, [pc, #168]	; (8006570 <USB_SetTurnaroundTime+0x130>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d906      	bls.n	80064d8 <USB_SetTurnaroundTime+0x98>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	4a29      	ldr	r2, [pc, #164]	; (8006574 <USB_SetTurnaroundTime+0x134>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d802      	bhi.n	80064d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064d2:	230a      	movs	r3, #10
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e02b      	b.n	8006530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4a26      	ldr	r2, [pc, #152]	; (8006574 <USB_SetTurnaroundTime+0x134>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d906      	bls.n	80064ee <USB_SetTurnaroundTime+0xae>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a25      	ldr	r2, [pc, #148]	; (8006578 <USB_SetTurnaroundTime+0x138>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d802      	bhi.n	80064ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064e8:	2309      	movs	r3, #9
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	e020      	b.n	8006530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4a21      	ldr	r2, [pc, #132]	; (8006578 <USB_SetTurnaroundTime+0x138>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d906      	bls.n	8006504 <USB_SetTurnaroundTime+0xc4>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4a20      	ldr	r2, [pc, #128]	; (800657c <USB_SetTurnaroundTime+0x13c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d802      	bhi.n	8006504 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064fe:	2308      	movs	r3, #8
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	e015      	b.n	8006530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4a1d      	ldr	r2, [pc, #116]	; (800657c <USB_SetTurnaroundTime+0x13c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d906      	bls.n	800651a <USB_SetTurnaroundTime+0xda>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4a1c      	ldr	r2, [pc, #112]	; (8006580 <USB_SetTurnaroundTime+0x140>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d802      	bhi.n	800651a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006514:	2307      	movs	r3, #7
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e00a      	b.n	8006530 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800651a:	2306      	movs	r3, #6
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	e007      	b.n	8006530 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006526:	2309      	movs	r3, #9
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	e001      	b.n	8006530 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800652c:	2309      	movs	r3, #9
 800652e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006548:	431a      	orrs	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	371c      	adds	r7, #28
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	00d8acbf 	.word	0x00d8acbf
 8006560:	00e4e1bf 	.word	0x00e4e1bf
 8006564:	00f423ff 	.word	0x00f423ff
 8006568:	0106737f 	.word	0x0106737f
 800656c:	011a499f 	.word	0x011a499f
 8006570:	01312cff 	.word	0x01312cff
 8006574:	014ca43f 	.word	0x014ca43f
 8006578:	016e35ff 	.word	0x016e35ff
 800657c:	01a6ab1f 	.word	0x01a6ab1f
 8006580:	01e847ff 	.word	0x01e847ff

08006584 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f043 0201 	orr.w	r2, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f023 0201 	bic.w	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d106      	bne.n	80065f4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60da      	str	r2, [r3, #12]
 80065f2:	e00b      	b.n	800660c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d106      	bne.n	8006608 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	e001      	b.n	800660c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e003      	b.n	8006614 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800660c:	2032      	movs	r0, #50	; 0x32
 800660e:	f7fb ffeb 	bl	80025e8 <HAL_Delay>

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800661c:	b084      	sub	sp, #16
 800661e:	b580      	push	{r7, lr}
 8006620:	b086      	sub	sp, #24
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800662a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006636:	2300      	movs	r3, #0
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	e009      	b.n	8006650 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	3340      	adds	r3, #64	; 0x40
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	2200      	movs	r2, #0
 8006648:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	3301      	adds	r3, #1
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b0e      	cmp	r3, #14
 8006654:	d9f2      	bls.n	800663c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d11c      	bne.n	8006696 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800666a:	f043 0302 	orr.w	r3, r3, #2
 800666e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	639a      	str	r2, [r3, #56]	; 0x38
 8006694:	e00b      	b.n	80066ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066b4:	461a      	mov	r2, r3
 80066b6:	2300      	movs	r3, #0
 80066b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c0:	4619      	mov	r1, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c8:	461a      	mov	r2, r3
 80066ca:	680b      	ldr	r3, [r1, #0]
 80066cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d10c      	bne.n	80066ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066da:	2100      	movs	r1, #0
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f949 	bl	8006974 <USB_SetDevSpeed>
 80066e2:	e008      	b.n	80066f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066e4:	2101      	movs	r1, #1
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f944 	bl	8006974 <USB_SetDevSpeed>
 80066ec:	e003      	b.n	80066f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066ee:	2103      	movs	r1, #3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f93f 	bl	8006974 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066f6:	2110      	movs	r1, #16
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f8f3 	bl	80068e4 <USB_FlushTxFifo>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f911 	bl	8006930 <USB_FlushRxFifo>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671e:	461a      	mov	r2, r3
 8006720:	2300      	movs	r3, #0
 8006722:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672a:	461a      	mov	r2, r3
 800672c:	2300      	movs	r3, #0
 800672e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006736:	461a      	mov	r2, r3
 8006738:	2300      	movs	r3, #0
 800673a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800673c:	2300      	movs	r3, #0
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	e043      	b.n	80067ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006758:	d118      	bne.n	800678c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676c:	461a      	mov	r2, r3
 800676e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	e013      	b.n	800679e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006782:	461a      	mov	r2, r3
 8006784:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	e008      	b.n	800679e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006798:	461a      	mov	r2, r3
 800679a:	2300      	movs	r3, #0
 800679c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067aa:	461a      	mov	r2, r3
 80067ac:	2300      	movs	r3, #0
 80067ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	461a      	mov	r2, r3
 80067be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	3301      	adds	r3, #1
 80067c8:	613b      	str	r3, [r7, #16]
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d3b7      	bcc.n	8006742 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d2:	2300      	movs	r3, #0
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	e043      	b.n	8006860 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ee:	d118      	bne.n	8006822 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10a      	bne.n	800680c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006802:	461a      	mov	r2, r3
 8006804:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	e013      	b.n	8006834 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006818:	461a      	mov	r2, r3
 800681a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	e008      	b.n	8006834 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682e:	461a      	mov	r2, r3
 8006830:	2300      	movs	r3, #0
 8006832:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006840:	461a      	mov	r2, r3
 8006842:	2300      	movs	r3, #0
 8006844:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006852:	461a      	mov	r2, r3
 8006854:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006858:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	3301      	adds	r3, #1
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	429a      	cmp	r2, r3
 8006866:	d3b7      	bcc.n	80067d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800687a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006888:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f043 0210 	orr.w	r2, r3, #16
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <USB_DevInit+0x2c4>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d005      	beq.n	80068ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f043 0208 	orr.w	r2, r3, #8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d107      	bne.n	80068d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068c8:	f043 0304 	orr.w	r3, r3, #4
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068dc:	b004      	add	sp, #16
 80068de:	4770      	bx	lr
 80068e0:	803c3800 	.word	0x803c3800

080068e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	019b      	lsls	r3, r3, #6
 80068f6:	f043 0220 	orr.w	r2, r3, #32
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a09      	ldr	r2, [pc, #36]	; (800692c <USB_FlushTxFifo+0x48>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d901      	bls.n	8006910 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e006      	b.n	800691e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f003 0320 	and.w	r3, r3, #32
 8006918:	2b20      	cmp	r3, #32
 800691a:	d0f0      	beq.n	80068fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	00030d40 	.word	0x00030d40

08006930 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2210      	movs	r2, #16
 8006940:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3301      	adds	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4a09      	ldr	r2, [pc, #36]	; (8006970 <USB_FlushRxFifo+0x40>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d901      	bls.n	8006954 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e006      	b.n	8006962 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b10      	cmp	r3, #16
 800695e:	d0f0      	beq.n	8006942 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	00030d40 	.word	0x00030d40

08006974 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006994:	4313      	orrs	r3, r2
 8006996:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b087      	sub	sp, #28
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 0306 	and.w	r3, r3, #6
 80069be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d102      	bne.n	80069cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80069c6:	2300      	movs	r3, #0
 80069c8:	75fb      	strb	r3, [r7, #23]
 80069ca:	e00a      	b.n	80069e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d002      	beq.n	80069d8 <USB_GetDevSpeed+0x32>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b06      	cmp	r3, #6
 80069d6:	d102      	bne.n	80069de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80069d8:	2302      	movs	r3, #2
 80069da:	75fb      	strb	r3, [r7, #23]
 80069dc:	e001      	b.n	80069e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80069de:	230f      	movs	r3, #15
 80069e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d13a      	bne.n	8006a82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a12:	69da      	ldr	r2, [r3, #28]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	f003 030f 	and.w	r3, r3, #15
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	68f9      	ldr	r1, [r7, #12]
 8006a26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d155      	bne.n	8006af0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	78db      	ldrb	r3, [r3, #3]
 8006a5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	059b      	lsls	r3, r3, #22
 8006a66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	e036      	b.n	8006af0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a88:	69da      	ldr	r2, [r3, #28]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	2101      	movs	r1, #1
 8006a94:	fa01 f303 	lsl.w	r3, r1, r3
 8006a98:	041b      	lsls	r3, r3, #16
 8006a9a:	68f9      	ldr	r1, [r7, #12]
 8006a9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d11a      	bne.n	8006af0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	78db      	ldrb	r3, [r3, #3]
 8006ad4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
	...

08006b00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d161      	bne.n	8006be0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b32:	d11f      	bne.n	8006b74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	0151      	lsls	r1, r2, #5
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	440a      	add	r2, r1
 8006b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	0151      	lsls	r1, r2, #5
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	440a      	add	r2, r1
 8006b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	2101      	movs	r1, #1
 8006b86:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b94:	4013      	ands	r3, r2
 8006b96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	2101      	movs	r1, #1
 8006baa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	68f9      	ldr	r1, [r7, #12]
 8006bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bb8:	4013      	ands	r3, r2
 8006bba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	0159      	lsls	r1, r3, #5
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	440b      	add	r3, r1
 8006bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4b35      	ldr	r3, [pc, #212]	; (8006cb0 <USB_DeactivateEndpoint+0x1b0>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	600b      	str	r3, [r1, #0]
 8006bde:	e060      	b.n	8006ca2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf6:	d11f      	bne.n	8006c38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	2101      	movs	r1, #1
 8006c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4e:	041b      	lsls	r3, r3, #16
 8006c50:	43db      	mvns	r3, r3
 8006c52:	68f9      	ldr	r1, [r7, #12]
 8006c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c58:	4013      	ands	r3, r2
 8006c5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c62:	69da      	ldr	r2, [r3, #28]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c72:	041b      	lsls	r3, r3, #16
 8006c74:	43db      	mvns	r3, r3
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	0159      	lsls	r1, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	440b      	add	r3, r1
 8006c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <USB_DeactivateEndpoint+0x1b4>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	ec337800 	.word	0xec337800
 8006cb4:	eff37800 	.word	0xeff37800

08006cb8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af02      	add	r7, sp, #8
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	f040 815c 	bne.w	8006f92 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d132      	bne.n	8006d48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	0151      	lsls	r1, r2, #5
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	440a      	add	r2, r1
 8006cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	0151      	lsls	r1, r2, #5
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	440a      	add	r2, r1
 8006d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d40:	0cdb      	lsrs	r3, r3, #19
 8006d42:	04db      	lsls	r3, r3, #19
 8006d44:	6113      	str	r3, [r2, #16]
 8006d46:	e074      	b.n	8006e32 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d62:	0cdb      	lsrs	r3, r3, #19
 8006d64:	04db      	lsls	r3, r3, #19
 8006d66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	691a      	ldr	r2, [r3, #16]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6959      	ldr	r1, [r3, #20]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	440b      	add	r3, r1
 8006da4:	1e59      	subs	r1, r3, #1
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dae:	04d9      	lsls	r1, r3, #19
 8006db0:	4b9d      	ldr	r3, [pc, #628]	; (8007028 <USB_EPStartXfer+0x370>)
 8006db2:	400b      	ands	r3, r1
 8006db4:	69b9      	ldr	r1, [r7, #24]
 8006db6:	0148      	lsls	r0, r1, #5
 8006db8:	69f9      	ldr	r1, [r7, #28]
 8006dba:	4401      	add	r1, r0
 8006dbc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dda:	69b9      	ldr	r1, [r7, #24]
 8006ddc:	0148      	lsls	r0, r1, #5
 8006dde:	69f9      	ldr	r1, [r7, #28]
 8006de0:	4401      	add	r1, r0
 8006de2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006de6:	4313      	orrs	r3, r2
 8006de8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	78db      	ldrb	r3, [r3, #3]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d11f      	bne.n	8006e32 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	0151      	lsls	r1, r2, #5
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	440a      	add	r2, r1
 8006e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	0151      	lsls	r1, r2, #5
 8006e24:	69fa      	ldr	r2, [r7, #28]
 8006e26:	440a      	add	r2, r1
 8006e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d14b      	bne.n	8006ed0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d009      	beq.n	8006e54 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	78db      	ldrb	r3, [r3, #3]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d128      	bne.n	8006eae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d110      	bne.n	8006e8e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	e00f      	b.n	8006eae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	0151      	lsls	r1, r2, #5
 8006ea0:	69fa      	ldr	r2, [r7, #28]
 8006ea2:	440a      	add	r2, r1
 8006ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	e12f      	b.n	8007130 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	0151      	lsls	r1, r2, #5
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	440a      	add	r2, r1
 8006ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	78db      	ldrb	r3, [r3, #3]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d015      	beq.n	8006f24 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8117 	beq.w	8007130 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	2101      	movs	r1, #1
 8006f14:	fa01 f303 	lsl.w	r3, r1, r3
 8006f18:	69f9      	ldr	r1, [r7, #28]
 8006f1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	634b      	str	r3, [r1, #52]	; 0x34
 8006f22:	e105      	b.n	8007130 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d110      	bne.n	8006f56 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	e00f      	b.n	8006f76 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	68d9      	ldr	r1, [r3, #12]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	781a      	ldrb	r2, [r3, #0]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	b298      	uxth	r0, r3
 8006f84:	79fb      	ldrb	r3, [r7, #7]
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	4603      	mov	r3, r0
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 fa2b 	bl	80073e6 <USB_WritePacket>
 8006f90:	e0ce      	b.n	8007130 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fac:	0cdb      	lsrs	r3, r3, #19
 8006fae:	04db      	lsls	r3, r3, #19
 8006fb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fd4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d126      	bne.n	800702c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ff4:	69b9      	ldr	r1, [r7, #24]
 8006ff6:	0148      	lsls	r0, r1, #5
 8006ff8:	69f9      	ldr	r1, [r7, #28]
 8006ffa:	4401      	add	r1, r0
 8006ffc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007000:	4313      	orrs	r3, r2
 8007002:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	440a      	add	r2, r1
 800701a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007022:	6113      	str	r3, [r2, #16]
 8007024:	e036      	b.n	8007094 <USB_EPStartXfer+0x3dc>
 8007026:	bf00      	nop
 8007028:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	4413      	add	r3, r2
 8007036:	1e5a      	subs	r2, r3, #1
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007040:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	8afb      	ldrh	r3, [r7, #22]
 8007052:	04d9      	lsls	r1, r3, #19
 8007054:	4b39      	ldr	r3, [pc, #228]	; (800713c <USB_EPStartXfer+0x484>)
 8007056:	400b      	ands	r3, r1
 8007058:	69b9      	ldr	r1, [r7, #24]
 800705a:	0148      	lsls	r0, r1, #5
 800705c:	69f9      	ldr	r1, [r7, #28]
 800705e:	4401      	add	r1, r0
 8007060:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007064:	4313      	orrs	r3, r2
 8007066:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007074:	691a      	ldr	r2, [r3, #16]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	8af9      	ldrh	r1, [r7, #22]
 800707c:	fb01 f303 	mul.w	r3, r1, r3
 8007080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007084:	69b9      	ldr	r1, [r7, #24]
 8007086:	0148      	lsls	r0, r1, #5
 8007088:	69f9      	ldr	r1, [r7, #28]
 800708a:	4401      	add	r1, r0
 800708c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007090:	4313      	orrs	r3, r2
 8007092:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d10d      	bne.n	80070b6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	68d9      	ldr	r1, [r3, #12]
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b2:	460a      	mov	r2, r1
 80070b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	78db      	ldrb	r3, [r3, #3]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d128      	bne.n	8007110 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d110      	bne.n	80070f0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	e00f      	b.n	8007110 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800710e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	440a      	add	r2, r1
 8007126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800712a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800712e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3720      	adds	r7, #32
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	1ff80000 	.word	0x1ff80000

08007140 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	2b01      	cmp	r3, #1
 800715e:	f040 80cd 	bne.w	80072fc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d132      	bne.n	80071d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	440a      	add	r2, r1
 8007180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007184:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007188:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800718c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	0151      	lsls	r1, r2, #5
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	440a      	add	r2, r1
 80071a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	0151      	lsls	r1, r2, #5
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	440a      	add	r2, r1
 80071c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c8:	0cdb      	lsrs	r3, r3, #19
 80071ca:	04db      	lsls	r3, r3, #19
 80071cc:	6113      	str	r3, [r2, #16]
 80071ce:	e04e      	b.n	800726e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ea:	0cdb      	lsrs	r3, r3, #19
 80071ec:	04db      	lsls	r3, r3, #19
 80071ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	440a      	add	r2, r1
 8007206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800720e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007212:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	695a      	ldr	r2, [r3, #20]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	429a      	cmp	r2, r3
 800721e:	d903      	bls.n	8007228 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	440a      	add	r2, r1
 800723e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007246:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007254:	691a      	ldr	r2, [r3, #16]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800725e:	6939      	ldr	r1, [r7, #16]
 8007260:	0148      	lsls	r0, r1, #5
 8007262:	6979      	ldr	r1, [r7, #20]
 8007264:	4401      	add	r1, r0
 8007266:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800726a:	4313      	orrs	r3, r2
 800726c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d11e      	bne.n	80072b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d009      	beq.n	8007290 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	461a      	mov	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	e092      	b.n	80073d8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	0151      	lsls	r1, r2, #5
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	440a      	add	r2, r1
 80072c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d07e      	beq.n	80073d8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	2101      	movs	r1, #1
 80072ec:	fa01 f303 	lsl.w	r3, r1, r3
 80072f0:	6979      	ldr	r1, [r7, #20]
 80072f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072f6:	4313      	orrs	r3, r2
 80072f8:	634b      	str	r3, [r1, #52]	; 0x34
 80072fa:	e06d      	b.n	80073d8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	440a      	add	r2, r1
 8007312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007316:	0cdb      	lsrs	r3, r3, #19
 8007318:	04db      	lsls	r3, r3, #19
 800731a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	0151      	lsls	r1, r2, #5
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	440a      	add	r2, r1
 8007332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007336:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800733a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800733e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800736e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007386:	6939      	ldr	r1, [r7, #16]
 8007388:	0148      	lsls	r0, r1, #5
 800738a:	6979      	ldr	r1, [r7, #20]
 800738c:	4401      	add	r1, r0
 800738e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007392:	4313      	orrs	r3, r2
 8007394:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d10d      	bne.n	80073b8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	68d9      	ldr	r1, [r3, #12]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b4:	460a      	mov	r2, r1
 80073b6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b089      	sub	sp, #36	; 0x24
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	4611      	mov	r1, r2
 80073f2:	461a      	mov	r2, r3
 80073f4:	460b      	mov	r3, r1
 80073f6:	71fb      	strb	r3, [r7, #7]
 80073f8:	4613      	mov	r3, r2
 80073fa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007404:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007408:	2b00      	cmp	r3, #0
 800740a:	d11a      	bne.n	8007442 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800740c:	88bb      	ldrh	r3, [r7, #4]
 800740e:	3303      	adds	r3, #3
 8007410:	089b      	lsrs	r3, r3, #2
 8007412:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007414:	2300      	movs	r3, #0
 8007416:	61bb      	str	r3, [r7, #24]
 8007418:	e00f      	b.n	800743a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	031a      	lsls	r2, r3, #12
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	4413      	add	r3, r2
 8007422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007426:	461a      	mov	r2, r3
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	3304      	adds	r3, #4
 8007432:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	3301      	adds	r3, #1
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	429a      	cmp	r2, r3
 8007440:	d3eb      	bcc.n	800741a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3724      	adds	r7, #36	; 0x24
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007450:	b480      	push	{r7}
 8007452:	b089      	sub	sp, #36	; 0x24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007466:	88fb      	ldrh	r3, [r7, #6]
 8007468:	3303      	adds	r3, #3
 800746a:	089b      	lsrs	r3, r3, #2
 800746c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	e00b      	b.n	800748c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	3304      	adds	r3, #4
 8007484:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	3301      	adds	r3, #1
 800748a:	61bb      	str	r3, [r7, #24]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	429a      	cmp	r2, r3
 8007492:	d3ef      	bcc.n	8007474 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007494:	69fb      	ldr	r3, [r7, #28]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3724      	adds	r7, #36	; 0x24
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d12c      	bne.n	8007518 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	db12      	blt.n	80074f6 <USB_EPSetStall+0x54>
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00f      	beq.n	80074f6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	0151      	lsls	r1, r2, #5
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	440a      	add	r2, r1
 80074ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074f4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	0151      	lsls	r1, r2, #5
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	440a      	add	r2, r1
 800750c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	e02b      	b.n	8007570 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	db12      	blt.n	8007550 <USB_EPSetStall+0xae>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00f      	beq.n	8007550 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	440a      	add	r2, r1
 8007546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800754a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800754e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	440a      	add	r2, r1
 8007566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800756a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800756e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800757e:	b480      	push	{r7}
 8007580:	b085      	sub	sp, #20
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d128      	bne.n	80075ec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	0151      	lsls	r1, r2, #5
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	440a      	add	r2, r1
 80075b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	78db      	ldrb	r3, [r3, #3]
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d003      	beq.n	80075ca <USB_EPClearStall+0x4c>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	78db      	ldrb	r3, [r3, #3]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d138      	bne.n	800763c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	0151      	lsls	r1, r2, #5
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	440a      	add	r2, r1
 80075e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e027      	b.n	800763c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	440a      	add	r2, r1
 8007602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007606:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800760a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	78db      	ldrb	r3, [r3, #3]
 8007610:	2b03      	cmp	r3, #3
 8007612:	d003      	beq.n	800761c <USB_EPClearStall+0x9e>
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	78db      	ldrb	r3, [r3, #3]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d10f      	bne.n	800763c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	0151      	lsls	r1, r2, #5
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	440a      	add	r2, r1
 8007632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800763a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007668:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800766c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007684:	4313      	orrs	r3, r2
 8007686:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076b0:	f023 0303 	bic.w	r3, r3, #3
 80076b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076c4:	f023 0302 	bic.w	r3, r3, #2
 80076c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076f2:	f023 0303 	bic.w	r3, r3, #3
 80076f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007706:	f043 0302 	orr.w	r3, r3, #2
 800770a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800771a:	b480      	push	{r7}
 800771c:	b085      	sub	sp, #20
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4013      	ands	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007732:	68fb      	ldr	r3, [r7, #12]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	4013      	ands	r3, r2
 8007762:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	0c1b      	lsrs	r3, r3, #16
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	4013      	ands	r3, r2
 8007796:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	b29b      	uxth	r3, r3
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	4013      	ands	r3, r2
 80077d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077d6:	68bb      	ldr	r3, [r7, #8]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007806:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	fa22 f303 	lsr.w	r3, r2, r3
 8007814:	01db      	lsls	r3, r3, #7
 8007816:	b2db      	uxtb	r3, r3
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	4013      	ands	r3, r2
 8007830:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007832:	68bb      	ldr	r3, [r7, #8]
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	f003 0301 	and.w	r3, r3, #1
}
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007876:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800787a:	f023 0307 	bic.w	r3, r3, #7
 800787e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800788e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007892:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	460b      	mov	r3, r1
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	333c      	adds	r3, #60	; 0x3c
 80078ba:	3304      	adds	r3, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	4a26      	ldr	r2, [pc, #152]	; (800795c <USB_EP0_OutStart+0xb8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d90a      	bls.n	80078de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d8:	d101      	bne.n	80078de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	e037      	b.n	800794e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	461a      	mov	r2, r3
 80078e6:	2300      	movs	r3, #0
 80078e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800790c:	f043 0318 	orr.w	r3, r3, #24
 8007910:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007920:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007924:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007926:	7afb      	ldrb	r3, [r7, #11]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d10f      	bne.n	800794c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007946:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800794a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	4f54300a 	.word	0x4f54300a

08007960 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3301      	adds	r3, #1
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4a13      	ldr	r2, [pc, #76]	; (80079c4 <USB_CoreReset+0x64>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d901      	bls.n	800797e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e01b      	b.n	80079b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	daf2      	bge.n	800796c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f043 0201 	orr.w	r2, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4a09      	ldr	r2, [pc, #36]	; (80079c4 <USB_CoreReset+0x64>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d901      	bls.n	80079a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e006      	b.n	80079b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d0f0      	beq.n	8007996 <USB_CoreReset+0x36>

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	00030d40 	.word	0x00030d40

080079c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80079d8:	f002 fb3c 	bl	800a054 <malloc>
 80079dc:	4603      	mov	r3, r0
 80079de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80079ee:	2302      	movs	r3, #2
 80079f0:	e066      	b.n	8007ac0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	7c1b      	ldrb	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d119      	bne.n	8007a36 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a06:	2202      	movs	r2, #2
 8007a08:	2181      	movs	r1, #129	; 0x81
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f002 f9a9 	bl	8009d62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f002 f99f 	bl	8009d62 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2210      	movs	r2, #16
 8007a30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007a34:	e016      	b.n	8007a64 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a36:	2340      	movs	r3, #64	; 0x40
 8007a38:	2202      	movs	r2, #2
 8007a3a:	2181      	movs	r1, #129	; 0x81
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f002 f990 	bl	8009d62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a48:	2340      	movs	r3, #64	; 0x40
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f002 f987 	bl	8009d62 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2210      	movs	r2, #16
 8007a60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a64:	2308      	movs	r3, #8
 8007a66:	2203      	movs	r2, #3
 8007a68:	2182      	movs	r1, #130	; 0x82
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f002 f979 	bl	8009d62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	7c1b      	ldrb	r3, [r3, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f002 fa4a 	bl	8009f40 <USBD_LL_PrepareReceive>
 8007aac:	e007      	b.n	8007abe <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ab4:	2340      	movs	r3, #64	; 0x40
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f002 fa41 	bl	8009f40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ad8:	2181      	movs	r1, #129	; 0x81
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f002 f967 	bl	8009dae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f002 f960 	bl	8009dae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007af6:	2182      	movs	r1, #130	; 0x82
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f002 f958 	bl	8009dae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f002 fa9b 	bl	800a064 <free>
    pdev->pClassData = NULL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b50:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d03a      	beq.n	8007be0 <USBD_CDC_Setup+0xa0>
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	f040 8097 	bne.w	8007c9e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	88db      	ldrh	r3, [r3, #6]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d029      	beq.n	8007bcc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	b25b      	sxtb	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	da11      	bge.n	8007ba6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007b8e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	88d2      	ldrh	r2, [r2, #6]
 8007b94:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b96:	6939      	ldr	r1, [r7, #16]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	88db      	ldrh	r3, [r3, #6]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f001 fc63 	bl	800946a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007ba4:	e082      	b.n	8007cac <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	785a      	ldrb	r2, [r3, #1]
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	88db      	ldrh	r3, [r3, #6]
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007bbc:	6939      	ldr	r1, [r7, #16]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	88db      	ldrh	r3, [r3, #6]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 fc7c 	bl	80094c2 <USBD_CtlPrepareRx>
    break;
 8007bca:	e06f      	b.n	8007cac <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	7850      	ldrb	r0, [r2, #1]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	4798      	blx	r3
    break;
 8007bde:	e065      	b.n	8007cac <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	785b      	ldrb	r3, [r3, #1]
 8007be4:	2b0b      	cmp	r3, #11
 8007be6:	d84f      	bhi.n	8007c88 <USBD_CDC_Setup+0x148>
 8007be8:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <USBD_CDC_Setup+0xb0>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c21 	.word	0x08007c21
 8007bf4:	08007c97 	.word	0x08007c97
 8007bf8:	08007c89 	.word	0x08007c89
 8007bfc:	08007c89 	.word	0x08007c89
 8007c00:	08007c89 	.word	0x08007c89
 8007c04:	08007c89 	.word	0x08007c89
 8007c08:	08007c89 	.word	0x08007c89
 8007c0c:	08007c89 	.word	0x08007c89
 8007c10:	08007c89 	.word	0x08007c89
 8007c14:	08007c89 	.word	0x08007c89
 8007c18:	08007c49 	.word	0x08007c49
 8007c1c:	08007c71 	.word	0x08007c71
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d107      	bne.n	8007c3a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c2a:	f107 030c 	add.w	r3, r7, #12
 8007c2e:	2202      	movs	r2, #2
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fc19 	bl	800946a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007c38:	e030      	b.n	8007c9c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 fba3 	bl	8009388 <USBD_CtlError>
        ret = USBD_FAIL;
 8007c42:	2303      	movs	r3, #3
 8007c44:	75fb      	strb	r3, [r7, #23]
      break;
 8007c46:	e029      	b.n	8007c9c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d107      	bne.n	8007c62 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c52:	f107 030f 	add.w	r3, r7, #15
 8007c56:	2201      	movs	r2, #1
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 fc05 	bl	800946a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007c60:	e01c      	b.n	8007c9c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 fb8f 	bl	8009388 <USBD_CtlError>
        ret = USBD_FAIL;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6e:	e015      	b.n	8007c9c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d00f      	beq.n	8007c9a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 fb83 	bl	8009388 <USBD_CtlError>
        ret = USBD_FAIL;
 8007c82:	2303      	movs	r3, #3
 8007c84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007c86:	e008      	b.n	8007c9a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 fb7c 	bl	8009388 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c90:	2303      	movs	r3, #3
 8007c92:	75fb      	strb	r3, [r7, #23]
      break;
 8007c94:	e002      	b.n	8007c9c <USBD_CDC_Setup+0x15c>
      break;
 8007c96:	bf00      	nop
 8007c98:	e008      	b.n	8007cac <USBD_CDC_Setup+0x16c>
      break;
 8007c9a:	bf00      	nop
    }
    break;
 8007c9c:	e006      	b.n	8007cac <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 fb71 	bl	8009388 <USBD_CtlError>
    ret = USBD_FAIL;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	75fb      	strb	r3, [r7, #23]
    break;
 8007caa:	bf00      	nop
  }

  return (uint8_t)ret;
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop

08007cb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e049      	b.n	8007d6e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ce0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ce2:	78fa      	ldrb	r2, [r7, #3]
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	440b      	add	r3, r1
 8007cf0:	3318      	adds	r3, #24
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d029      	beq.n	8007d4c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007cf8:	78fa      	ldrb	r2, [r7, #3]
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	3318      	adds	r3, #24
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	78f9      	ldrb	r1, [r7, #3]
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	1a5b      	subs	r3, r3, r1
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4403      	add	r3, r0
 8007d18:	3344      	adds	r3, #68	; 0x44
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d20:	fb03 f301 	mul.w	r3, r3, r1
 8007d24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d110      	bne.n	8007d4c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007d2a:	78fa      	ldrb	r2, [r7, #3]
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	440b      	add	r3, r1
 8007d38:	3318      	adds	r3, #24
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d3e:	78f9      	ldrb	r1, [r7, #3]
 8007d40:	2300      	movs	r3, #0
 8007d42:	2200      	movs	r2, #0
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f002 f8da 	bl	8009efe <USBD_LL_Transmit>
 8007d4a:	e00f      	b.n	8007d6c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e015      	b.n	8007dc4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f002 f8f0 	bl	8009f82 <USBD_LL_GetRxDataSize>
 8007da2:	4602      	mov	r2, r0
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dda:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d015      	beq.n	8007e12 <USBD_CDC_EP0_RxReady+0x46>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007dec:	2bff      	cmp	r3, #255	; 0xff
 8007dee:	d010      	beq.n	8007e12 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007dfe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e06:	b292      	uxth	r2, r2
 8007e08:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	22ff      	movs	r2, #255	; 0xff
 8007e0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2243      	movs	r2, #67	; 0x43
 8007e28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007e2a:	4b03      	ldr	r3, [pc, #12]	; (8007e38 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	20000134 	.word	0x20000134

08007e3c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2243      	movs	r2, #67	; 0x43
 8007e48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007e4a:	4b03      	ldr	r3, [pc, #12]	; (8007e58 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	200000f0 	.word	0x200000f0

08007e5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2243      	movs	r2, #67	; 0x43
 8007e68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007e6a:	4b03      	ldr	r3, [pc, #12]	; (8007e78 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	20000178 	.word	0x20000178

08007e7c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	220a      	movs	r2, #10
 8007e88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e8a:	4b03      	ldr	r3, [pc, #12]	; (8007e98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	200000ac 	.word	0x200000ac

08007e9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e004      	b.n	8007eba <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b087      	sub	sp, #28
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ed8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f08:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f2e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007f30:	2301      	movs	r3, #1
 8007f32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e01a      	b.n	8007f78 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d114      	bne.n	8007f76 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f6a:	2181      	movs	r1, #129	; 0x81
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 ffc6 	bl	8009efe <USBD_LL_Transmit>

    ret = USBD_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e016      	b.n	8007fcc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	7c1b      	ldrb	r3, [r3, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d109      	bne.n	8007fba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 ffc4 	bl	8009f40 <USBD_LL_PrepareReceive>
 8007fb8:	e007      	b.n	8007fca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fc0:	2340      	movs	r3, #64	; 0x40
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 ffbb 	bl	8009f40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	USBD_HID_HandleTypeDef *hhid;

	hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007fe0:	2010      	movs	r0, #16
 8007fe2:	f002 f837 	bl	800a054 <malloc>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d105      	bne.n	8007ffc <USBD_HID_Init+0x28>
	{
		pdev->pClassData = NULL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		return (uint8_t)USBD_EMEM;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e01b      	b.n	8008034 <USBD_HID_Init+0x60>
	}

	pdev->pClassData = (void *)hhid;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	7c1b      	ldrb	r3, [r3, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d103      	bne.n	8008014 <USBD_HID_Init+0x40>
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2207      	movs	r2, #7
 8008010:	875a      	strh	r2, [r3, #58]	; 0x3a
 8008012:	e002      	b.n	800801a <USBD_HID_Init+0x46>
	}
	else   /* LOW and FULL-speed endpoints */
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	220a      	movs	r2, #10
 8008018:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	/* Open EP IN */
	(void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800801a:	2304      	movs	r3, #4
 800801c:	2203      	movs	r2, #3
 800801e:	2181      	movs	r1, #129	; 0x81
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 fe9e 	bl	8009d62 <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	871a      	strh	r2, [r3, #56]	; 0x38

	hhid->state = HID_IDLE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_HID_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	/* Close HID EPs */
	(void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008048:	2181      	movs	r1, #129	; 0x81
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 feaf 	bl	8009dae <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	871a      	strh	r2, [r3, #56]	; 0x38
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	875a      	strh	r2, [r3, #58]	; 0x3a

	/* FRee allocated memory */
	if (pdev->pClassData != NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008062:	2b00      	cmp	r3, #0
 8008064:	d009      	beq.n	800807a <USBD_HID_DeInit+0x3e>
	{
		(void)USBD_free(pdev->pClassData);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800806c:	4618      	mov	r0, r3
 800806e:	f001 fff9 	bl	800a064 <free>
		pdev->pClassData = NULL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t)USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008094:	60fb      	str	r3, [r7, #12]
	USBD_StatusTypeDef ret = USBD_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	817b      	strh	r3, [r7, #10]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d045      	beq.n	8008136 <USBD_HID_Setup+0xb2>
 80080aa:	2b20      	cmp	r3, #32
 80080ac:	f040 80d4 	bne.w	8008258 <USBD_HID_Setup+0x1d4>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	3b02      	subs	r3, #2
 80080b6:	2b09      	cmp	r3, #9
 80080b8:	d835      	bhi.n	8008126 <USBD_HID_Setup+0xa2>
 80080ba:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <USBD_HID_Setup+0x3c>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	08008117 	.word	0x08008117
 80080c4:	080080f7 	.word	0x080080f7
 80080c8:	08008127 	.word	0x08008127
 80080cc:	08008127 	.word	0x08008127
 80080d0:	08008127 	.word	0x08008127
 80080d4:	08008127 	.word	0x08008127
 80080d8:	08008127 	.word	0x08008127
 80080dc:	08008127 	.word	0x08008127
 80080e0:	08008105 	.word	0x08008105
 80080e4:	080080e9 	.word	0x080080e9
		{
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	885b      	ldrh	r3, [r3, #2]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	461a      	mov	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	601a      	str	r2, [r3, #0]
			break;
 80080f4:	e01e      	b.n	8008134 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2201      	movs	r2, #1
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 f9b4 	bl	800946a <USBD_CtlSendData>
			break;
 8008102:	e017      	b.n	8008134 <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	885b      	ldrh	r3, [r3, #2]
 8008108:	0a1b      	lsrs	r3, r3, #8
 800810a:	b29b      	uxth	r3, r3
 800810c:	b2db      	uxtb	r3, r3
 800810e:	461a      	mov	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	605a      	str	r2, [r3, #4]
			break;
 8008114:	e00e      	b.n	8008134 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3304      	adds	r3, #4
 800811a:	2201      	movs	r2, #1
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 f9a3 	bl	800946a <USBD_CtlSendData>
			break;
 8008124:	e006      	b.n	8008134 <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f001 f92d 	bl	8009388 <USBD_CtlError>
			ret = USBD_FAIL;
 800812e:	2303      	movs	r3, #3
 8008130:	75fb      	strb	r3, [r7, #23]
			break;
 8008132:	bf00      	nop
		}
		break;
 8008134:	e097      	b.n	8008266 <USBD_HID_Setup+0x1e2>
		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	785b      	ldrb	r3, [r3, #1]
 800813a:	2b0b      	cmp	r3, #11
 800813c:	f200 8083 	bhi.w	8008246 <USBD_HID_Setup+0x1c2>
 8008140:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <USBD_HID_Setup+0xc4>)
 8008142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008146:	bf00      	nop
 8008148:	08008179 	.word	0x08008179
 800814c:	08008255 	.word	0x08008255
 8008150:	08008247 	.word	0x08008247
 8008154:	08008247 	.word	0x08008247
 8008158:	08008247 	.word	0x08008247
 800815c:	08008247 	.word	0x08008247
 8008160:	080081a1 	.word	0x080081a1
 8008164:	08008247 	.word	0x08008247
 8008168:	08008247 	.word	0x08008247
 800816c:	08008247 	.word	0x08008247
 8008170:	080081f9 	.word	0x080081f9
 8008174:	08008221 	.word	0x08008221
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817e:	2b03      	cmp	r3, #3
 8008180:	d107      	bne.n	8008192 <USBD_HID_Setup+0x10e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008182:	f107 030a 	add.w	r3, r7, #10
 8008186:	2202      	movs	r2, #2
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 f96d 	bl	800946a <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8008190:	e061      	b.n	8008256 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 f8f7 	bl	8009388 <USBD_CtlError>
					ret = USBD_FAIL;
 800819a:	2303      	movs	r3, #3
 800819c:	75fb      	strb	r3, [r7, #23]
				break;
 800819e:	e05a      	b.n	8008256 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_DESCRIPTOR:
				if ((req->wValue >> 8) == HID_REPORT_DESC)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	885b      	ldrh	r3, [r3, #2]
 80081a4:	0a1b      	lsrs	r3, r3, #8
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2b22      	cmp	r3, #34	; 0x22
 80081aa:	d108      	bne.n	80081be <USBD_HID_Setup+0x13a>
				{
					len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	88db      	ldrh	r3, [r3, #6]
 80081b0:	2b3f      	cmp	r3, #63	; 0x3f
 80081b2:	bf28      	it	cs
 80081b4:	233f      	movcs	r3, #63	; 0x3f
 80081b6:	82bb      	strh	r3, [r7, #20]
					pbuf = HID_MOUSE_ReportDesc;
 80081b8:	4b2d      	ldr	r3, [pc, #180]	; (8008270 <USBD_HID_Setup+0x1ec>)
 80081ba:	613b      	str	r3, [r7, #16]
 80081bc:	e015      	b.n	80081ea <USBD_HID_Setup+0x166>
				}
				else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	885b      	ldrh	r3, [r3, #2]
 80081c2:	0a1b      	lsrs	r3, r3, #8
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	2b21      	cmp	r3, #33	; 0x21
 80081c8:	d108      	bne.n	80081dc <USBD_HID_Setup+0x158>
				{
					pbuf = USBD_HID_Desc;
 80081ca:	4b2a      	ldr	r3, [pc, #168]	; (8008274 <USBD_HID_Setup+0x1f0>)
 80081cc:	613b      	str	r3, [r7, #16]
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	88db      	ldrh	r3, [r3, #6]
 80081d2:	2b09      	cmp	r3, #9
 80081d4:	bf28      	it	cs
 80081d6:	2309      	movcs	r3, #9
 80081d8:	82bb      	strh	r3, [r7, #20]
 80081da:	e006      	b.n	80081ea <USBD_HID_Setup+0x166>
				}
				else
				{
					USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 f8d2 	bl	8009388 <USBD_CtlError>
					ret = USBD_FAIL;
 80081e4:	2303      	movs	r3, #3
 80081e6:	75fb      	strb	r3, [r7, #23]
					break;
 80081e8:	e035      	b.n	8008256 <USBD_HID_Setup+0x1d2>
				}
				(void)USBD_CtlSendData(pdev, pbuf, len);
 80081ea:	8abb      	ldrh	r3, [r7, #20]
 80081ec:	461a      	mov	r2, r3
 80081ee:	6939      	ldr	r1, [r7, #16]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 f93a 	bl	800946a <USBD_CtlSendData>
				break;
 80081f6:	e02e      	b.n	8008256 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d107      	bne.n	8008212 <USBD_HID_Setup+0x18e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3308      	adds	r3, #8
 8008206:	2201      	movs	r2, #1
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 f92d 	bl	800946a <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8008210:	e021      	b.n	8008256 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 f8b7 	bl	8009388 <USBD_CtlError>
					ret = USBD_FAIL;
 800821a:	2303      	movs	r3, #3
 800821c:	75fb      	strb	r3, [r7, #23]
				break;
 800821e:	e01a      	b.n	8008256 <USBD_HID_Setup+0x1d2>

			case USB_REQ_SET_INTERFACE:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008226:	2b03      	cmp	r3, #3
 8008228:	d106      	bne.n	8008238 <USBD_HID_Setup+0x1b4>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	885b      	ldrh	r3, [r3, #2]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	609a      	str	r2, [r3, #8]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8008236:	e00e      	b.n	8008256 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 f8a4 	bl	8009388 <USBD_CtlError>
					ret = USBD_FAIL;
 8008240:	2303      	movs	r3, #3
 8008242:	75fb      	strb	r3, [r7, #23]
				break;
 8008244:	e007      	b.n	8008256 <USBD_HID_Setup+0x1d2>

			case USB_REQ_CLEAR_FEATURE:
				break;

			default:
				USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 f89d 	bl	8009388 <USBD_CtlError>
				ret = USBD_FAIL;
 800824e:	2303      	movs	r3, #3
 8008250:	75fb      	strb	r3, [r7, #23]
				break;
 8008252:	e000      	b.n	8008256 <USBD_HID_Setup+0x1d2>
				break;
 8008254:	bf00      	nop
			}
			break;
 8008256:	e006      	b.n	8008266 <USBD_HID_Setup+0x1e2>

			default:
				USBD_CtlError(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 f894 	bl	8009388 <USBD_CtlError>
				ret = USBD_FAIL;
 8008260:	2303      	movs	r3, #3
 8008262:	75fb      	strb	r3, [r7, #23]
				break;
 8008264:	bf00      	nop
	}

	return (uint8_t)ret;
 8008266:	7dfb      	ldrb	r3, [r7, #23]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20000278 	.word	0x20000278
 8008274:	20000260 	.word	0x20000260

08008278 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	4613      	mov	r3, r2
 8008284:	80fb      	strh	r3, [r7, #6]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800828c:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008294:	2b03      	cmp	r3, #3
 8008296:	d10c      	bne.n	80082b2 <USBD_HID_SendReport+0x3a>
	{
		if (hhid->state == HID_IDLE)
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	7b1b      	ldrb	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d108      	bne.n	80082b2 <USBD_HID_SendReport+0x3a>
		{
			hhid->state = HID_BUSY;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2201      	movs	r2, #1
 80082a4:	731a      	strb	r2, [r3, #12]
			(void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80082a6:	88fb      	ldrh	r3, [r7, #6]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	2181      	movs	r1, #129	; 0x81
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f001 fe26 	bl	8009efe <USBD_LL_Transmit>
		}
	}

	return (uint8_t)USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2222      	movs	r2, #34	; 0x22
 80082c8:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgFSDesc;
 80082ca:	4b03      	ldr	r3, [pc, #12]	; (80082d8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	200001f4 	.word	0x200001f4

080082dc <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2222      	movs	r2, #34	; 0x22
 80082e8:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgHSDesc;
 80082ea:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	20000218 	.word	0x20000218

080082fc <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2222      	movs	r2, #34	; 0x22
 8008308:	801a      	strh	r2, [r3, #0]

	return USBD_HID_OtherSpeedCfgDesc;
 800830a:	4b03      	ldr	r3, [pc, #12]	; (8008318 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800830c:	4618      	mov	r0, r3
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	2000023c 	.word	0x2000023c

0800831c <USBD_HID_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
	UNUSED(epnum);
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800832e:	2200      	movs	r2, #0
 8008330:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	220a      	movs	r2, #10
 800834c:	801a      	strh	r2, [r3, #0]

	return USBD_HID_DeviceQualifierDesc;
 800834e:	4b03      	ldr	r3, [pc, #12]	; (800835c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	2000026c 	.word	0x2000026c

08008360 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008374:	2303      	movs	r3, #3
 8008376:	e025      	b.n	80083c4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	79fa      	ldrb	r2, [r7, #7]
 80083b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f001 fc6b 	bl	8009c94 <USBD_LL_Init>
 80083be:	4603      	mov	r3, r0
 80083c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e010      	b.n	8008406 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f4:	f107 020e 	add.w	r2, r7, #14
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	4602      	mov	r2, r0
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 fc88 	bl	8009d2c <USBD_LL_Start>
 800841c:	4603      	mov	r3, r0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008452:	2b00      	cmp	r3, #0
 8008454:	d009      	beq.n	800846a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	4611      	mov	r1, r2
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
 8008466:	4603      	mov	r3, r0
 8008468:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800846a:	7bfb      	ldrb	r3, [r7, #15]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008486:	2b00      	cmp	r3, #0
 8008488:	d007      	beq.n	800849a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	78fa      	ldrb	r2, [r7, #3]
 8008494:	4611      	mov	r1, r2
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
  }

  return USBD_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 ff2c 	bl	8009314 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80084ca:	461a      	mov	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084d8:	f003 031f 	and.w	r3, r3, #31
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d00e      	beq.n	80084fe <USBD_LL_SetupStage+0x5a>
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d302      	bcc.n	80084ea <USBD_LL_SetupStage+0x46>
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d014      	beq.n	8008512 <USBD_LL_SetupStage+0x6e>
 80084e8:	e01d      	b.n	8008526 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa18 	bl	8008928 <USBD_StdDevReq>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]
      break;
 80084fc:	e020      	b.n	8008540 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa7c 	bl	8008a04 <USBD_StdItfReq>
 800850c:	4603      	mov	r3, r0
 800850e:	73fb      	strb	r3, [r7, #15]
      break;
 8008510:	e016      	b.n	8008540 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fab8 	bl	8008a90 <USBD_StdEPReq>
 8008520:	4603      	mov	r3, r0
 8008522:	73fb      	strb	r3, [r7, #15]
      break;
 8008524:	e00c      	b.n	8008540 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800852c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008530:	b2db      	uxtb	r3, r3
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 fc59 	bl	8009dec <USBD_LL_StallEP>
 800853a:	4603      	mov	r3, r0
 800853c:	73fb      	strb	r3, [r7, #15]
      break;
 800853e:	bf00      	nop
  }

  return ret;
 8008540:	7bfb      	ldrb	r3, [r7, #15]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b086      	sub	sp, #24
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	460b      	mov	r3, r1
 8008554:	607a      	str	r2, [r7, #4]
 8008556:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008558:	7afb      	ldrb	r3, [r7, #11]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d137      	bne.n	80085ce <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008564:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800856c:	2b03      	cmp	r3, #3
 800856e:	d14a      	bne.n	8008606 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	429a      	cmp	r2, r3
 800857a:	d913      	bls.n	80085a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	1ad2      	subs	r2, r2, r3
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	4293      	cmp	r3, r2
 8008594:	bf28      	it	cs
 8008596:	4613      	movcs	r3, r2
 8008598:	461a      	mov	r2, r3
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 ffad 	bl	80094fc <USBD_CtlContinueRx>
 80085a2:	e030      	b.n	8008606 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d105      	bne.n	80085c6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 ffa9 	bl	800951e <USBD_CtlSendStatus>
 80085cc:	e01b      	b.n	8008606 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d013      	beq.n	8008602 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d10e      	bne.n	8008602 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	7afa      	ldrb	r2, [r7, #11]
 80085ee:	4611      	mov	r1, r2
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	4798      	blx	r3
 80085f4:	4603      	mov	r3, r0
 80085f6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	e002      	b.n	8008608 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008602:	2303      	movs	r3, #3
 8008604:	e000      	b.n	8008608 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3718      	adds	r7, #24
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	460b      	mov	r3, r1
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800861e:	7afb      	ldrb	r3, [r7, #11]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d16a      	bne.n	80086fa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3314      	adds	r3, #20
 8008628:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008630:	2b02      	cmp	r3, #2
 8008632:	d155      	bne.n	80086e0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	429a      	cmp	r2, r3
 800863e:	d914      	bls.n	800866a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	1ad2      	subs	r2, r2, r3
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	461a      	mov	r2, r3
 8008654:	6879      	ldr	r1, [r7, #4]
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 ff22 	bl	80094a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800865c:	2300      	movs	r3, #0
 800865e:	2200      	movs	r2, #0
 8008660:	2100      	movs	r1, #0
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f001 fc6c 	bl	8009f40 <USBD_LL_PrepareReceive>
 8008668:	e03a      	b.n	80086e0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	429a      	cmp	r2, r3
 8008674:	d11c      	bne.n	80086b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800867e:	429a      	cmp	r2, r3
 8008680:	d316      	bcc.n	80086b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800868c:	429a      	cmp	r2, r3
 800868e:	d20f      	bcs.n	80086b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008690:	2200      	movs	r2, #0
 8008692:	2100      	movs	r1, #0
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 ff03 	bl	80094a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086a2:	2300      	movs	r3, #0
 80086a4:	2200      	movs	r2, #0
 80086a6:	2100      	movs	r1, #0
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f001 fc49 	bl	8009f40 <USBD_LL_PrepareReceive>
 80086ae:	e017      	b.n	80086e0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00a      	beq.n	80086d2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d105      	bne.n	80086d2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086d2:	2180      	movs	r1, #128	; 0x80
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f001 fb89 	bl	8009dec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 ff32 	bl	8009544 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d123      	bne.n	8008732 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7ff fe9b 	bl	8008426 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086f8:	e01b      	b.n	8008732 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d013      	beq.n	800872e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800870c:	2b03      	cmp	r3, #3
 800870e:	d10e      	bne.n	800872e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	7afa      	ldrb	r2, [r7, #11]
 800871a:	4611      	mov	r1, r2
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	4798      	blx	r3
 8008720:	4603      	mov	r3, r0
 8008722:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	e002      	b.n	8008734 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800872e:	2303      	movs	r3, #3
 8008730:	e000      	b.n	8008734 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008768:	2b00      	cmp	r3, #0
 800876a:	d009      	beq.n	8008780 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	6852      	ldr	r2, [r2, #4]
 8008778:	b2d2      	uxtb	r2, r2
 800877a:	4611      	mov	r1, r2
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008780:	2340      	movs	r3, #64	; 0x40
 8008782:	2200      	movs	r2, #0
 8008784:	2100      	movs	r1, #0
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f001 faeb 	bl	8009d62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2240      	movs	r2, #64	; 0x40
 8008798:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800879c:	2340      	movs	r3, #64	; 0x40
 800879e:	2200      	movs	r2, #0
 80087a0:	2180      	movs	r1, #128	; 0x80
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 fadd 	bl	8009d62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2240      	movs	r2, #64	; 0x40
 80087b2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	78fa      	ldrb	r2, [r7, #3]
 80087ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2204      	movs	r2, #4
 80087f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008816:	2b04      	cmp	r3, #4
 8008818:	d105      	bne.n	8008826 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008842:	2b03      	cmp	r3, #3
 8008844:	d10b      	bne.n	800885e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008882:	b480      	push	{r7}
 8008884:	b083      	sub	sp, #12
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	460b      	mov	r3, r1
 800888c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d009      	beq.n	80088e0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	6852      	ldr	r2, [r2, #4]
 80088d8:	b2d2      	uxtb	r2, r2
 80088da:	4611      	mov	r1, r2
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3
  }

  return USBD_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b087      	sub	sp, #28
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	3301      	adds	r3, #1
 8008900:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008908:	8a3b      	ldrh	r3, [r7, #16]
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	b21a      	sxth	r2, r3
 800890e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008912:	4313      	orrs	r3, r2
 8008914:	b21b      	sxth	r3, r3
 8008916:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008918:	89fb      	ldrh	r3, [r7, #14]
}
 800891a:	4618      	mov	r0, r3
 800891c:	371c      	adds	r7, #28
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
	...

08008928 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800893e:	2b20      	cmp	r3, #32
 8008940:	d004      	beq.n	800894c <USBD_StdDevReq+0x24>
 8008942:	2b40      	cmp	r3, #64	; 0x40
 8008944:	d002      	beq.n	800894c <USBD_StdDevReq+0x24>
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <USBD_StdDevReq+0x38>
 800894a:	e050      	b.n	80089ee <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	4798      	blx	r3
 800895a:	4603      	mov	r3, r0
 800895c:	73fb      	strb	r3, [r7, #15]
    break;
 800895e:	e04b      	b.n	80089f8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	2b09      	cmp	r3, #9
 8008966:	d83c      	bhi.n	80089e2 <USBD_StdDevReq+0xba>
 8008968:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <USBD_StdDevReq+0x48>)
 800896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896e:	bf00      	nop
 8008970:	080089c5 	.word	0x080089c5
 8008974:	080089d9 	.word	0x080089d9
 8008978:	080089e3 	.word	0x080089e3
 800897c:	080089cf 	.word	0x080089cf
 8008980:	080089e3 	.word	0x080089e3
 8008984:	080089a3 	.word	0x080089a3
 8008988:	08008999 	.word	0x08008999
 800898c:	080089e3 	.word	0x080089e3
 8008990:	080089bb 	.word	0x080089bb
 8008994:	080089ad 	.word	0x080089ad
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9ce 	bl	8008d3c <USBD_GetDescriptor>
      break;
 80089a0:	e024      	b.n	80089ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fb33 	bl	8009010 <USBD_SetAddress>
      break;
 80089aa:	e01f      	b.n	80089ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fb70 	bl	8009094 <USBD_SetConfig>
 80089b4:	4603      	mov	r3, r0
 80089b6:	73fb      	strb	r3, [r7, #15]
      break;
 80089b8:	e018      	b.n	80089ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fc0d 	bl	80091dc <USBD_GetConfig>
      break;
 80089c2:	e013      	b.n	80089ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fc3c 	bl	8009244 <USBD_GetStatus>
      break;
 80089cc:	e00e      	b.n	80089ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fc6a 	bl	80092aa <USBD_SetFeature>
      break;
 80089d6:	e009      	b.n	80089ec <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fc79 	bl	80092d2 <USBD_ClrFeature>
      break;
 80089e0:	e004      	b.n	80089ec <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fccf 	bl	8009388 <USBD_CtlError>
      break;
 80089ea:	bf00      	nop
    }
    break;
 80089ec:	e004      	b.n	80089f8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fcc9 	bl	8009388 <USBD_CtlError>
    break;
 80089f6:	bf00      	nop
  }

  return ret;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop

08008a04 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a1a:	2b20      	cmp	r3, #32
 8008a1c:	d003      	beq.n	8008a26 <USBD_StdItfReq+0x22>
 8008a1e:	2b40      	cmp	r3, #64	; 0x40
 8008a20:	d001      	beq.n	8008a26 <USBD_StdItfReq+0x22>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d12a      	bne.n	8008a7c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d81d      	bhi.n	8008a6e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	889b      	ldrh	r3, [r3, #4]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d813      	bhi.n	8008a64 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	4798      	blx	r3
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	88db      	ldrh	r3, [r3, #6]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d110      	bne.n	8008a78 <USBD_StdItfReq+0x74>
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10d      	bne.n	8008a78 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fd5e 	bl	800951e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008a62:	e009      	b.n	8008a78 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fc8e 	bl	8009388 <USBD_CtlError>
      break;
 8008a6c:	e004      	b.n	8008a78 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fc89 	bl	8009388 <USBD_CtlError>
      break;
 8008a76:	e000      	b.n	8008a7a <USBD_StdItfReq+0x76>
      break;
 8008a78:	bf00      	nop
    }
    break;
 8008a7a:	e004      	b.n	8008a86 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fc82 	bl	8009388 <USBD_CtlError>
    break;
 8008a84:	bf00      	nop
  }

  return ret;
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	889b      	ldrh	r3, [r3, #4]
 8008aa2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	d004      	beq.n	8008aba <USBD_StdEPReq+0x2a>
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	d002      	beq.n	8008aba <USBD_StdEPReq+0x2a>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00a      	beq.n	8008ace <USBD_StdEPReq+0x3e>
 8008ab8:	e135      	b.n	8008d26 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	4798      	blx	r3
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]
    break;
 8008acc:	e130      	b.n	8008d30 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	785b      	ldrb	r3, [r3, #1]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d03e      	beq.n	8008b54 <USBD_StdEPReq+0xc4>
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d002      	beq.n	8008ae0 <USBD_StdEPReq+0x50>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d077      	beq.n	8008bce <USBD_StdEPReq+0x13e>
 8008ade:	e11c      	b.n	8008d1a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d002      	beq.n	8008af0 <USBD_StdEPReq+0x60>
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d015      	beq.n	8008b1a <USBD_StdEPReq+0x8a>
 8008aee:	e02b      	b.n	8008b48 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00c      	beq.n	8008b10 <USBD_StdEPReq+0x80>
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	2b80      	cmp	r3, #128	; 0x80
 8008afa:	d009      	beq.n	8008b10 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 f973 	bl	8009dec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b06:	2180      	movs	r1, #128	; 0x80
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 f96f 	bl	8009dec <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008b0e:	e020      	b.n	8008b52 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fc38 	bl	8009388 <USBD_CtlError>
        break;
 8008b18:	e01b      	b.n	8008b52 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	885b      	ldrh	r3, [r3, #2]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10e      	bne.n	8008b40 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <USBD_StdEPReq+0xb0>
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	2b80      	cmp	r3, #128	; 0x80
 8008b2c:	d008      	beq.n	8008b40 <USBD_StdEPReq+0xb0>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	88db      	ldrh	r3, [r3, #6]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d104      	bne.n	8008b40 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f956 	bl	8009dec <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fcec 	bl	800951e <USBD_CtlSendStatus>

        break;
 8008b46:	e004      	b.n	8008b52 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fc1c 	bl	8009388 <USBD_CtlError>
        break;
 8008b50:	bf00      	nop
      }
      break;
 8008b52:	e0e7      	b.n	8008d24 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d002      	beq.n	8008b64 <USBD_StdEPReq+0xd4>
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d015      	beq.n	8008b8e <USBD_StdEPReq+0xfe>
 8008b62:	e02d      	b.n	8008bc0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00c      	beq.n	8008b84 <USBD_StdEPReq+0xf4>
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
 8008b6c:	2b80      	cmp	r3, #128	; 0x80
 8008b6e:	d009      	beq.n	8008b84 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 f939 	bl	8009dec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b7a:	2180      	movs	r1, #128	; 0x80
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 f935 	bl	8009dec <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008b82:	e023      	b.n	8008bcc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fbfe 	bl	8009388 <USBD_CtlError>
        break;
 8008b8c:	e01e      	b.n	8008bcc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	885b      	ldrh	r3, [r3, #2]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d119      	bne.n	8008bca <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f001 f940 	bl	8009e2a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fcb7 	bl	800951e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	4798      	blx	r3
        }
        break;
 8008bbe:	e004      	b.n	8008bca <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fbe0 	bl	8009388 <USBD_CtlError>
        break;
 8008bc8:	e000      	b.n	8008bcc <USBD_StdEPReq+0x13c>
        break;
 8008bca:	bf00      	nop
      }
      break;
 8008bcc:	e0aa      	b.n	8008d24 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d002      	beq.n	8008bde <USBD_StdEPReq+0x14e>
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d032      	beq.n	8008c42 <USBD_StdEPReq+0x1b2>
 8008bdc:	e097      	b.n	8008d0e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d007      	beq.n	8008bf4 <USBD_StdEPReq+0x164>
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	2b80      	cmp	r3, #128	; 0x80
 8008be8:	d004      	beq.n	8008bf4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fbcb 	bl	8009388 <USBD_CtlError>
          break;
 8008bf2:	e091      	b.n	8008d18 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	da0b      	bge.n	8008c14 <USBD_StdEPReq+0x184>
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c02:	4613      	mov	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	3310      	adds	r3, #16
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	4413      	add	r3, r2
 8008c10:	3304      	adds	r3, #4
 8008c12:	e00b      	b.n	8008c2c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	4413      	add	r3, r2
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2200      	movs	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2202      	movs	r2, #2
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fc15 	bl	800946a <USBD_CtlSendData>
        break;
 8008c40:	e06a      	b.n	8008d18 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008c42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	da11      	bge.n	8008c6e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	f003 020f 	and.w	r2, r3, #15
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3324      	adds	r3, #36	; 0x24
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d117      	bne.n	8008c94 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fb8e 	bl	8009388 <USBD_CtlError>
            break;
 8008c6c:	e054      	b.n	8008d18 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	f003 020f 	and.w	r2, r3, #15
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d104      	bne.n	8008c94 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fb7b 	bl	8009388 <USBD_CtlError>
            break;
 8008c92:	e041      	b.n	8008d18 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	da0b      	bge.n	8008cb4 <USBD_StdEPReq+0x224>
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
 8008c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	3310      	adds	r3, #16
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	4413      	add	r3, r2
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	e00b      	b.n	8008ccc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cba:	4613      	mov	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	4413      	add	r3, r2
 8008cca:	3304      	adds	r3, #4
 8008ccc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <USBD_StdEPReq+0x24a>
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	2b80      	cmp	r3, #128	; 0x80
 8008cd8:	d103      	bne.n	8008ce2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	e00e      	b.n	8008d00 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 f8be 	bl	8009e68 <USBD_LL_IsStallEP>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	e002      	b.n	8008d00 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2202      	movs	r2, #2
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fbaf 	bl	800946a <USBD_CtlSendData>
          break;
 8008d0c:	e004      	b.n	8008d18 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fb39 	bl	8009388 <USBD_CtlError>
        break;
 8008d16:	bf00      	nop
      }
      break;
 8008d18:	e004      	b.n	8008d24 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fb33 	bl	8009388 <USBD_CtlError>
      break;
 8008d22:	bf00      	nop
    }
    break;
 8008d24:	e004      	b.n	8008d30 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fb2d 	bl	8009388 <USBD_CtlError>
    break;
 8008d2e:	bf00      	nop
  }

  return ret;
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	885b      	ldrh	r3, [r3, #2]
 8008d56:	0a1b      	lsrs	r3, r3, #8
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	2b06      	cmp	r3, #6
 8008d5e:	f200 8128 	bhi.w	8008fb2 <USBD_GetDescriptor+0x276>
 8008d62:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <USBD_GetDescriptor+0x2c>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008d85 	.word	0x08008d85
 8008d6c:	08008d9d 	.word	0x08008d9d
 8008d70:	08008ddd 	.word	0x08008ddd
 8008d74:	08008fb3 	.word	0x08008fb3
 8008d78:	08008fb3 	.word	0x08008fb3
 8008d7c:	08008f53 	.word	0x08008f53
 8008d80:	08008f7f 	.word	0x08008f7f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	7c12      	ldrb	r2, [r2, #16]
 8008d90:	f107 0108 	add.w	r1, r7, #8
 8008d94:	4610      	mov	r0, r2
 8008d96:	4798      	blx	r3
 8008d98:	60f8      	str	r0, [r7, #12]
    break;
 8008d9a:	e112      	b.n	8008fc2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	7c1b      	ldrb	r3, [r3, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10d      	bne.n	8008dc0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dac:	f107 0208 	add.w	r2, r7, #8
 8008db0:	4610      	mov	r0, r2
 8008db2:	4798      	blx	r3
 8008db4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3301      	adds	r3, #1
 8008dba:	2202      	movs	r2, #2
 8008dbc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008dbe:	e100      	b.n	8008fc2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	f107 0208 	add.w	r2, r7, #8
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
 8008dd0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	701a      	strb	r2, [r3, #0]
    break;
 8008dda:	e0f2      	b.n	8008fc2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	885b      	ldrh	r3, [r3, #2]
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	f200 80ac 	bhi.w	8008f40 <USBD_GetDescriptor+0x204>
 8008de8:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <USBD_GetDescriptor+0xb4>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e09 	.word	0x08008e09
 8008df4:	08008e3d 	.word	0x08008e3d
 8008df8:	08008e71 	.word	0x08008e71
 8008dfc:	08008ea5 	.word	0x08008ea5
 8008e00:	08008ed9 	.word	0x08008ed9
 8008e04:	08008f0d 	.word	0x08008f0d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00b      	beq.n	8008e2c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	7c12      	ldrb	r2, [r2, #16]
 8008e20:	f107 0108 	add.w	r1, r7, #8
 8008e24:	4610      	mov	r0, r2
 8008e26:	4798      	blx	r3
 8008e28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e2a:	e091      	b.n	8008f50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 faaa 	bl	8009388 <USBD_CtlError>
        err++;
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	3301      	adds	r3, #1
 8008e38:	72fb      	strb	r3, [r7, #11]
      break;
 8008e3a:	e089      	b.n	8008f50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	7c12      	ldrb	r2, [r2, #16]
 8008e54:	f107 0108 	add.w	r1, r7, #8
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4798      	blx	r3
 8008e5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e5e:	e077      	b.n	8008f50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa90 	bl	8009388 <USBD_CtlError>
        err++;
 8008e68:	7afb      	ldrb	r3, [r7, #11]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	72fb      	strb	r3, [r7, #11]
      break;
 8008e6e:	e06f      	b.n	8008f50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	7c12      	ldrb	r2, [r2, #16]
 8008e88:	f107 0108 	add.w	r1, r7, #8
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e92:	e05d      	b.n	8008f50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fa76 	bl	8009388 <USBD_CtlError>
        err++;
 8008e9c:	7afb      	ldrb	r3, [r7, #11]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ea2:	e055      	b.n	8008f50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00b      	beq.n	8008ec8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	7c12      	ldrb	r2, [r2, #16]
 8008ebc:	f107 0108 	add.w	r1, r7, #8
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	4798      	blx	r3
 8008ec4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ec6:	e043      	b.n	8008f50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fa5c 	bl	8009388 <USBD_CtlError>
        err++;
 8008ed0:	7afb      	ldrb	r3, [r7, #11]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ed6:	e03b      	b.n	8008f50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00b      	beq.n	8008efc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	7c12      	ldrb	r2, [r2, #16]
 8008ef0:	f107 0108 	add.w	r1, r7, #8
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4798      	blx	r3
 8008ef8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008efa:	e029      	b.n	8008f50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa42 	bl	8009388 <USBD_CtlError>
        err++;
 8008f04:	7afb      	ldrb	r3, [r7, #11]
 8008f06:	3301      	adds	r3, #1
 8008f08:	72fb      	strb	r3, [r7, #11]
      break;
 8008f0a:	e021      	b.n	8008f50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00b      	beq.n	8008f30 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	7c12      	ldrb	r2, [r2, #16]
 8008f24:	f107 0108 	add.w	r1, r7, #8
 8008f28:	4610      	mov	r0, r2
 8008f2a:	4798      	blx	r3
 8008f2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f2e:	e00f      	b.n	8008f50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa28 	bl	8009388 <USBD_CtlError>
        err++;
 8008f38:	7afb      	ldrb	r3, [r7, #11]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	72fb      	strb	r3, [r7, #11]
      break;
 8008f3e:	e007      	b.n	8008f50 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fa20 	bl	8009388 <USBD_CtlError>
      err++;
 8008f48:	7afb      	ldrb	r3, [r7, #11]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008f4e:	bf00      	nop
    }
    break;
 8008f50:	e037      	b.n	8008fc2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	7c1b      	ldrb	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d109      	bne.n	8008f6e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f62:	f107 0208 	add.w	r2, r7, #8
 8008f66:	4610      	mov	r0, r2
 8008f68:	4798      	blx	r3
 8008f6a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008f6c:	e029      	b.n	8008fc2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fa09 	bl	8009388 <USBD_CtlError>
      err++;
 8008f76:	7afb      	ldrb	r3, [r7, #11]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	72fb      	strb	r3, [r7, #11]
    break;
 8008f7c:	e021      	b.n	8008fc2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	7c1b      	ldrb	r3, [r3, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10d      	bne.n	8008fa2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8e:	f107 0208 	add.w	r2, r7, #8
 8008f92:	4610      	mov	r0, r2
 8008f94:	4798      	blx	r3
 8008f96:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	2207      	movs	r2, #7
 8008f9e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008fa0:	e00f      	b.n	8008fc2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f9ef 	bl	8009388 <USBD_CtlError>
      err++;
 8008faa:	7afb      	ldrb	r3, [r7, #11]
 8008fac:	3301      	adds	r3, #1
 8008fae:	72fb      	strb	r3, [r7, #11]
    break;
 8008fb0:	e007      	b.n	8008fc2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f9e7 	bl	8009388 <USBD_CtlError>
    err++;
 8008fba:	7afb      	ldrb	r3, [r7, #11]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	72fb      	strb	r3, [r7, #11]
    break;
 8008fc0:	bf00      	nop
  }

  if (err != 0U)
 8008fc2:	7afb      	ldrb	r3, [r7, #11]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d11e      	bne.n	8009006 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	88db      	ldrh	r3, [r3, #6]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d016      	beq.n	8008ffe <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008fd0:	893b      	ldrh	r3, [r7, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00e      	beq.n	8008ff4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	88da      	ldrh	r2, [r3, #6]
 8008fda:	893b      	ldrh	r3, [r7, #8]
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	bf28      	it	cs
 8008fe0:	4613      	movcs	r3, r2
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fe6:	893b      	ldrh	r3, [r7, #8]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	68f9      	ldr	r1, [r7, #12]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fa3c 	bl	800946a <USBD_CtlSendData>
 8008ff2:	e009      	b.n	8009008 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f9c6 	bl	8009388 <USBD_CtlError>
 8008ffc:	e004      	b.n	8009008 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fa8d 	bl	800951e <USBD_CtlSendStatus>
 8009004:	e000      	b.n	8009008 <USBD_GetDescriptor+0x2cc>
    return;
 8009006:	bf00      	nop
    }
  }
}
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop

08009010 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	889b      	ldrh	r3, [r3, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d130      	bne.n	8009084 <USBD_SetAddress+0x74>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	88db      	ldrh	r3, [r3, #6]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d12c      	bne.n	8009084 <USBD_SetAddress+0x74>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	885b      	ldrh	r3, [r3, #2]
 800902e:	2b7f      	cmp	r3, #127	; 0x7f
 8009030:	d828      	bhi.n	8009084 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	885b      	ldrh	r3, [r3, #2]
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800903c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009044:	2b03      	cmp	r3, #3
 8009046:	d104      	bne.n	8009052 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f99c 	bl	8009388 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009050:	e01c      	b.n	800908c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	7bfa      	ldrb	r2, [r7, #15]
 8009056:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 ff2e 	bl	8009ec0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fa5a 	bl	800951e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d004      	beq.n	800907a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009078:	e008      	b.n	800908c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009082:	e003      	b.n	800908c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f97e 	bl	8009388 <USBD_CtlError>
  }
}
 800908c:	bf00      	nop
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	885b      	ldrh	r3, [r3, #2]
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	4b4b      	ldr	r3, [pc, #300]	; (80091d8 <USBD_SetConfig+0x144>)
 80090aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090ac:	4b4a      	ldr	r3, [pc, #296]	; (80091d8 <USBD_SetConfig+0x144>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d905      	bls.n	80090c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f966 	bl	8009388 <USBD_CtlError>
    return USBD_FAIL;
 80090bc:	2303      	movs	r3, #3
 80090be:	e087      	b.n	80091d0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d002      	beq.n	80090d0 <USBD_SetConfig+0x3c>
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d025      	beq.n	800911a <USBD_SetConfig+0x86>
 80090ce:	e071      	b.n	80091b4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80090d0:	4b41      	ldr	r3, [pc, #260]	; (80091d8 <USBD_SetConfig+0x144>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d01c      	beq.n	8009112 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80090d8:	4b3f      	ldr	r3, [pc, #252]	; (80091d8 <USBD_SetConfig+0x144>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80090e2:	4b3d      	ldr	r3, [pc, #244]	; (80091d8 <USBD_SetConfig+0x144>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff f9a7 	bl	800843c <USBD_SetClassConfig>
 80090ee:	4603      	mov	r3, r0
 80090f0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d004      	beq.n	8009102 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f944 	bl	8009388 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009100:	e065      	b.n	80091ce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa0b 	bl	800951e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2203      	movs	r2, #3
 800910c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009110:	e05d      	b.n	80091ce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa03 	bl	800951e <USBD_CtlSendStatus>
    break;
 8009118:	e059      	b.n	80091ce <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800911a:	4b2f      	ldr	r3, [pc, #188]	; (80091d8 <USBD_SetConfig+0x144>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d112      	bne.n	8009148 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2202      	movs	r2, #2
 8009126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800912a:	4b2b      	ldr	r3, [pc, #172]	; (80091d8 <USBD_SetConfig+0x144>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009134:	4b28      	ldr	r3, [pc, #160]	; (80091d8 <USBD_SetConfig+0x144>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff f99a 	bl	8008474 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f9ec 	bl	800951e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009146:	e042      	b.n	80091ce <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009148:	4b23      	ldr	r3, [pc, #140]	; (80091d8 <USBD_SetConfig+0x144>)
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	461a      	mov	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	429a      	cmp	r2, r3
 8009154:	d02a      	beq.n	80091ac <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	b2db      	uxtb	r3, r3
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff f988 	bl	8008474 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009164:	4b1c      	ldr	r3, [pc, #112]	; (80091d8 <USBD_SetConfig+0x144>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800916e:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <USBD_SetConfig+0x144>)
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff f961 	bl	800843c <USBD_SetClassConfig>
 800917a:	4603      	mov	r3, r0
 800917c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800917e:	7bfb      	ldrb	r3, [r7, #15]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00f      	beq.n	80091a4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f8fe 	bl	8009388 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff f96d 	bl	8008474 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2202      	movs	r2, #2
 800919e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80091a2:	e014      	b.n	80091ce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f9ba 	bl	800951e <USBD_CtlSendStatus>
    break;
 80091aa:	e010      	b.n	80091ce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f9b6 	bl	800951e <USBD_CtlSendStatus>
    break;
 80091b2:	e00c      	b.n	80091ce <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f8e6 	bl	8009388 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <USBD_SetConfig+0x144>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff f956 	bl	8008474 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	73fb      	strb	r3, [r7, #15]
    break;
 80091cc:	bf00      	nop
  }

  return ret;
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	20000820 	.word	0x20000820

080091dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	88db      	ldrh	r3, [r3, #6]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d004      	beq.n	80091f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f8c9 	bl	8009388 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80091f6:	e021      	b.n	800923c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fe:	2b01      	cmp	r3, #1
 8009200:	db17      	blt.n	8009232 <USBD_GetConfig+0x56>
 8009202:	2b02      	cmp	r3, #2
 8009204:	dd02      	ble.n	800920c <USBD_GetConfig+0x30>
 8009206:	2b03      	cmp	r3, #3
 8009208:	d00b      	beq.n	8009222 <USBD_GetConfig+0x46>
 800920a:	e012      	b.n	8009232 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	3308      	adds	r3, #8
 8009216:	2201      	movs	r2, #1
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f925 	bl	800946a <USBD_CtlSendData>
      break;
 8009220:	e00c      	b.n	800923c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3304      	adds	r3, #4
 8009226:	2201      	movs	r2, #1
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f91d 	bl	800946a <USBD_CtlSendData>
      break;
 8009230:	e004      	b.n	800923c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f8a7 	bl	8009388 <USBD_CtlError>
      break;
 800923a:	bf00      	nop
}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009254:	3b01      	subs	r3, #1
 8009256:	2b02      	cmp	r3, #2
 8009258:	d81e      	bhi.n	8009298 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	88db      	ldrh	r3, [r3, #6]
 800925e:	2b02      	cmp	r3, #2
 8009260:	d004      	beq.n	800926c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009262:	6839      	ldr	r1, [r7, #0]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f88f 	bl	8009388 <USBD_CtlError>
      break;
 800926a:	e01a      	b.n	80092a2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f043 0202 	orr.w	r2, r3, #2
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	330c      	adds	r3, #12
 800928c:	2202      	movs	r2, #2
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f8ea 	bl	800946a <USBD_CtlSendData>
    break;
 8009296:	e004      	b.n	80092a2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f874 	bl	8009388 <USBD_CtlError>
    break;
 80092a0:	bf00      	nop
  }
}
 80092a2:	bf00      	nop
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	885b      	ldrh	r3, [r3, #2]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d106      	bne.n	80092ca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f92a 	bl	800951e <USBD_CtlSendStatus>
  }
}
 80092ca:	bf00      	nop
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e2:	3b01      	subs	r3, #1
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d80b      	bhi.n	8009300 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	885b      	ldrh	r3, [r3, #2]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d10c      	bne.n	800930a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f910 	bl	800951e <USBD_CtlSendStatus>
      }
      break;
 80092fe:	e004      	b.n	800930a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f840 	bl	8009388 <USBD_CtlError>
      break;
 8009308:	e000      	b.n	800930c <USBD_ClrFeature+0x3a>
      break;
 800930a:	bf00      	nop
  }
}
 800930c:	bf00      	nop
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	781a      	ldrb	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3301      	adds	r3, #1
 800932e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	781a      	ldrb	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	3301      	adds	r3, #1
 800933c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7ff fad3 	bl	80088ea <SWAPBYTE>
 8009344:	4603      	mov	r3, r0
 8009346:	461a      	mov	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3301      	adds	r3, #1
 8009350:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3301      	adds	r3, #1
 8009356:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f7ff fac6 	bl	80088ea <SWAPBYTE>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3301      	adds	r3, #1
 8009370:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7ff fab9 	bl	80088ea <SWAPBYTE>
 8009378:	4603      	mov	r3, r0
 800937a:	461a      	mov	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	80da      	strh	r2, [r3, #6]
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009392:	2180      	movs	r1, #128	; 0x80
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fd29 	bl	8009dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800939a:	2100      	movs	r1, #0
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fd25 	bl	8009dec <USBD_LL_StallEP>
}
 80093a2:	bf00      	nop
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b086      	sub	sp, #24
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d036      	beq.n	800942e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093c4:	6938      	ldr	r0, [r7, #16]
 80093c6:	f000 f836 	bl	8009436 <USBD_GetLen>
 80093ca:	4603      	mov	r3, r0
 80093cc:	3301      	adds	r3, #1
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4413      	add	r3, r2
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	7812      	ldrb	r2, [r2, #0]
 80093e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	3301      	adds	r3, #1
 80093e8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	4413      	add	r3, r2
 80093f0:	2203      	movs	r2, #3
 80093f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	3301      	adds	r3, #1
 80093f8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093fa:	e013      	b.n	8009424 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	4413      	add	r3, r2
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	7812      	ldrb	r2, [r2, #0]
 8009406:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	3301      	adds	r3, #1
 800940c:	613b      	str	r3, [r7, #16]
    idx++;
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	3301      	adds	r3, #1
 8009412:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4413      	add	r3, r2
 800941a:	2200      	movs	r2, #0
 800941c:	701a      	strb	r2, [r3, #0]
    idx++;
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	3301      	adds	r3, #1
 8009422:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e7      	bne.n	80093fc <USBD_GetString+0x52>
 800942c:	e000      	b.n	8009430 <USBD_GetString+0x86>
    return;
 800942e:	bf00      	nop
  }
}
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009436:	b480      	push	{r7}
 8009438:	b085      	sub	sp, #20
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009446:	e005      	b.n	8009454 <USBD_GetLen+0x1e>
  {
    len++;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	3301      	adds	r3, #1
 800944c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	3301      	adds	r3, #1
 8009452:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1f5      	bne.n	8009448 <USBD_GetLen+0x12>
  }

  return len;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	60f8      	str	r0, [r7, #12]
 8009472:	60b9      	str	r1, [r7, #8]
 8009474:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2202      	movs	r2, #2
 800947a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	2100      	movs	r1, #0
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 fd34 	bl	8009efe <USBD_LL_Transmit>

  return USBD_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	2100      	movs	r1, #0
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 fd23 	bl	8009efe <USBD_LL_Transmit>

  return USBD_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2203      	movs	r2, #3
 80094d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	2100      	movs	r1, #0
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 fd27 	bl	8009f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	2100      	movs	r1, #0
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fd16 	bl	8009f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2204      	movs	r2, #4
 800952a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800952e:	2300      	movs	r3, #0
 8009530:	2200      	movs	r2, #0
 8009532:	2100      	movs	r1, #0
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fce2 	bl	8009efe <USBD_LL_Transmit>

  return USBD_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2205      	movs	r2, #5
 8009550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009554:	2300      	movs	r3, #0
 8009556:	2200      	movs	r2, #0
 8009558:	2100      	movs	r1, #0
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fcf0 	bl	8009f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <MX_USB_DEVICE_Init>:
/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(uint8_t flag)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if(flag){
 8009576:	79fb      	ldrb	r3, [r7, #7]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d024      	beq.n	80095c6 <MX_USB_DEVICE_Init+0x5a>
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc_SETUP, DEVICE_FS) != USBD_OK)
 800957c:	2200      	movs	r2, #0
 800957e:	4922      	ldr	r1, [pc, #136]	; (8009608 <MX_USB_DEVICE_Init+0x9c>)
 8009580:	4822      	ldr	r0, [pc, #136]	; (800960c <MX_USB_DEVICE_Init+0xa0>)
 8009582:	f7fe feed 	bl	8008360 <USBD_Init>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <MX_USB_DEVICE_Init+0x24>
		{
			Error_Handler();
 800958c:	f7f7 feb4 	bl	80012f8 <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009590:	491f      	ldr	r1, [pc, #124]	; (8009610 <MX_USB_DEVICE_Init+0xa4>)
 8009592:	481e      	ldr	r0, [pc, #120]	; (800960c <MX_USB_DEVICE_Init+0xa0>)
 8009594:	f7fe ff1a 	bl	80083cc <USBD_RegisterClass>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d001      	beq.n	80095a2 <MX_USB_DEVICE_Init+0x36>
		{
			Error_Handler();
 800959e:	f7f7 feab 	bl	80012f8 <Error_Handler>
		}
		if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80095a2:	491c      	ldr	r1, [pc, #112]	; (8009614 <MX_USB_DEVICE_Init+0xa8>)
 80095a4:	4819      	ldr	r0, [pc, #100]	; (800960c <MX_USB_DEVICE_Init+0xa0>)
 80095a6:	f7fe fc79 	bl	8007e9c <USBD_CDC_RegisterInterface>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <MX_USB_DEVICE_Init+0x48>
		{
			Error_Handler();
 80095b0:	f7f7 fea2 	bl	80012f8 <Error_Handler>
		}
		if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095b4:	4815      	ldr	r0, [pc, #84]	; (800960c <MX_USB_DEVICE_Init+0xa0>)
 80095b6:	f7fe ff2a 	bl	800840e <USBD_Start>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d01e      	beq.n	80095fe <MX_USB_DEVICE_Init+0x92>
		{
			Error_Handler();
 80095c0:	f7f7 fe9a 	bl	80012f8 <Error_Handler>
		}
		return;
 80095c4:	e01b      	b.n	80095fe <MX_USB_DEVICE_Init+0x92>
	}

	/* USER CODE END USB_DEVICE_Init_PreTreatment */

	/* Init Device Library, add supported class and start the library. */
	if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095c6:	2200      	movs	r2, #0
 80095c8:	4913      	ldr	r1, [pc, #76]	; (8009618 <MX_USB_DEVICE_Init+0xac>)
 80095ca:	4810      	ldr	r0, [pc, #64]	; (800960c <MX_USB_DEVICE_Init+0xa0>)
 80095cc:	f7fe fec8 	bl	8008360 <USBD_Init>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <MX_USB_DEVICE_Init+0x6e>
	{
		Error_Handler();
 80095d6:	f7f7 fe8f 	bl	80012f8 <Error_Handler>
	}
	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80095da:	4910      	ldr	r1, [pc, #64]	; (800961c <MX_USB_DEVICE_Init+0xb0>)
 80095dc:	480b      	ldr	r0, [pc, #44]	; (800960c <MX_USB_DEVICE_Init+0xa0>)
 80095de:	f7fe fef5 	bl	80083cc <USBD_RegisterClass>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <MX_USB_DEVICE_Init+0x80>
	{
		Error_Handler();
 80095e8:	f7f7 fe86 	bl	80012f8 <Error_Handler>
	}
	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095ec:	4807      	ldr	r0, [pc, #28]	; (800960c <MX_USB_DEVICE_Init+0xa0>)
 80095ee:	f7fe ff0e 	bl	800840e <USBD_Start>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <MX_USB_DEVICE_Init+0x94>
	{
		Error_Handler();
 80095f8:	f7f7 fe7e 	bl	80012f8 <Error_Handler>
 80095fc:	e000      	b.n	8009600 <MX_USB_DEVICE_Init+0x94>
		return;
 80095fe:	bf00      	nop
	}

	/* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

	/* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	200002e8 	.word	0x200002e8
 800960c:	20000bc0 	.word	0x20000bc0
 8009610:	200000b8 	.word	0x200000b8
 8009614:	200002b8 	.word	0x200002b8
 8009618:	200002cc 	.word	0x200002cc
 800961c:	200001bc 	.word	0x200001bc

08009620 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009624:	2200      	movs	r2, #0
 8009626:	4905      	ldr	r1, [pc, #20]	; (800963c <CDC_Init_FS+0x1c>)
 8009628:	4805      	ldr	r0, [pc, #20]	; (8009640 <CDC_Init_FS+0x20>)
 800962a:	f7fe fc4c 	bl	8007ec6 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800962e:	4905      	ldr	r1, [pc, #20]	; (8009644 <CDC_Init_FS+0x24>)
 8009630:	4803      	ldr	r0, [pc, #12]	; (8009640 <CDC_Init_FS+0x20>)
 8009632:	f7fe fc61 	bl	8007ef8 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8009636:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8009638:	4618      	mov	r0, r3
 800963a:	bd80      	pop	{r7, pc}
 800963c:	20000ed0 	.word	0x20000ed0
 8009640:	20000bc0 	.word	0x20000bc0
 8009644:	20000e90 	.word	0x20000e90

08009648 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8009648:	b480      	push	{r7}
 800964a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800964c:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800964e:	4618      	mov	r0, r3
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	6039      	str	r1, [r7, #0]
 8009662:	71fb      	strb	r3, [r7, #7]
 8009664:	4613      	mov	r3, r2
 8009666:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	2b23      	cmp	r3, #35	; 0x23
 800966c:	d84a      	bhi.n	8009704 <CDC_Control_FS+0xac>
 800966e:	a201      	add	r2, pc, #4	; (adr r2, 8009674 <CDC_Control_FS+0x1c>)
 8009670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009674:	08009705 	.word	0x08009705
 8009678:	08009705 	.word	0x08009705
 800967c:	08009705 	.word	0x08009705
 8009680:	08009705 	.word	0x08009705
 8009684:	08009705 	.word	0x08009705
 8009688:	08009705 	.word	0x08009705
 800968c:	08009705 	.word	0x08009705
 8009690:	08009705 	.word	0x08009705
 8009694:	08009705 	.word	0x08009705
 8009698:	08009705 	.word	0x08009705
 800969c:	08009705 	.word	0x08009705
 80096a0:	08009705 	.word	0x08009705
 80096a4:	08009705 	.word	0x08009705
 80096a8:	08009705 	.word	0x08009705
 80096ac:	08009705 	.word	0x08009705
 80096b0:	08009705 	.word	0x08009705
 80096b4:	08009705 	.word	0x08009705
 80096b8:	08009705 	.word	0x08009705
 80096bc:	08009705 	.word	0x08009705
 80096c0:	08009705 	.word	0x08009705
 80096c4:	08009705 	.word	0x08009705
 80096c8:	08009705 	.word	0x08009705
 80096cc:	08009705 	.word	0x08009705
 80096d0:	08009705 	.word	0x08009705
 80096d4:	08009705 	.word	0x08009705
 80096d8:	08009705 	.word	0x08009705
 80096dc:	08009705 	.word	0x08009705
 80096e0:	08009705 	.word	0x08009705
 80096e4:	08009705 	.word	0x08009705
 80096e8:	08009705 	.word	0x08009705
 80096ec:	08009705 	.word	0x08009705
 80096f0:	08009705 	.word	0x08009705
 80096f4:	08009705 	.word	0x08009705
 80096f8:	08009705 	.word	0x08009705
 80096fc:	08009705 	.word	0x08009705
 8009700:	08009705 	.word	0x08009705
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8009704:	bf00      	nop
	}

	return (USBD_OK);
 8009706:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	4810      	ldr	r0, [pc, #64]	; (8009764 <CDC_Receive_FS+0x50>)
 8009722:	f7fe fbe9 	bl	8007ef8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009726:	480f      	ldr	r0, [pc, #60]	; (8009764 <CDC_Receive_FS+0x50>)
 8009728:	f7fe fc2a 	bl	8007f80 <USBD_CDC_ReceivePacket>
	XORCipher(Buf, cipherKey);
 800972c:	490e      	ldr	r1, [pc, #56]	; (8009768 <CDC_Receive_FS+0x54>)
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7f7 f884 	bl	800083c <XORCipher>
	W25qxx_WritePage(Buf, 10, 0, 256);
 8009734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009738:	2200      	movs	r2, #0
 800973a:	210a      	movs	r1, #10
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7f8 fdb1 	bl	80022a4 <W25qxx_WritePage>
	XORCipher(Buf, cipherKey);
 8009742:	4909      	ldr	r1, [pc, #36]	; (8009768 <CDC_Receive_FS+0x54>)
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7f7 f879 	bl	800083c <XORCipher>
	CDC_Transmit_FS(Buf, *Len);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f80a 	bl	800976c <CDC_Transmit_FS>
	return (USBD_OK);
 8009758:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	20000bc0 	.word	0x20000bc0
 8009768:	20000098 	.word	0x20000098

0800976c <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	460b      	mov	r3, r1
 8009776:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800977c:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <CDC_Transmit_FS+0x48>)
 800977e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009782:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800978e:	2301      	movs	r3, #1
 8009790:	e00b      	b.n	80097aa <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009792:	887b      	ldrh	r3, [r7, #2]
 8009794:	461a      	mov	r2, r3
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	4806      	ldr	r0, [pc, #24]	; (80097b4 <CDC_Transmit_FS+0x48>)
 800979a:	f7fe fb94 	bl	8007ec6 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800979e:	4805      	ldr	r0, [pc, #20]	; (80097b4 <CDC_Transmit_FS+0x48>)
 80097a0:	f7fe fbbe 	bl	8007f20 <USBD_CDC_TransmitPacket>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20000bc0 	.word	0x20000bc0

080097b8 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	4613      	mov	r3, r2
 80097c4:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 80097ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	371c      	adds	r7, #28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
	...

080097dc <USBD_FS_DeviceDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_FS_DeviceDesc);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2212      	movs	r2, #18
 80097ec:	801a      	strh	r2, [r3, #0]
	return USBD_FS_DeviceDesc;
 80097ee:	4b03      	ldr	r3, [pc, #12]	; (80097fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	20000304 	.word	0x20000304

08009800 <USBD_FS_DeviceDescriptor_SETUP>:
// wpisywanie hasel descriptor
uint8_t * USBD_FS_DeviceDescriptor_SETUP(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_FS_DeviceDesc_SETUP);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2212      	movs	r2, #18
 8009810:	801a      	strh	r2, [r3, #0]
	return USBD_FS_DeviceDesc_SETUP;
 8009812:	4b03      	ldr	r3, [pc, #12]	; (8009820 <USBD_FS_DeviceDescriptor_SETUP+0x20>)
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	20000318 	.word	0x20000318

08009824 <USBD_FS_LangIDStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	6039      	str	r1, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_LangIDDesc);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2204      	movs	r2, #4
 8009834:	801a      	strh	r2, [r3, #0]
	return USBD_LangIDDesc;
 8009836:	4b03      	ldr	r3, [pc, #12]	; (8009844 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	2000032c 	.word	0x2000032c

08009848 <USBD_FS_ProductStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	6039      	str	r1, [r7, #0]
 8009852:	71fb      	strb	r3, [r7, #7]
	if(speed == 0)
 8009854:	79fb      	ldrb	r3, [r7, #7]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d105      	bne.n	8009866 <USBD_FS_ProductStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	4907      	ldr	r1, [pc, #28]	; (800987c <USBD_FS_ProductStrDescriptor+0x34>)
 800985e:	4808      	ldr	r0, [pc, #32]	; (8009880 <USBD_FS_ProductStrDescriptor+0x38>)
 8009860:	f7ff fda3 	bl	80093aa <USBD_GetString>
 8009864:	e004      	b.n	8009870 <USBD_FS_ProductStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	4904      	ldr	r1, [pc, #16]	; (800987c <USBD_FS_ProductStrDescriptor+0x34>)
 800986a:	4805      	ldr	r0, [pc, #20]	; (8009880 <USBD_FS_ProductStrDescriptor+0x38>)
 800986c:	f7ff fd9d 	bl	80093aa <USBD_GetString>
	}
	return USBD_StrDesc;
 8009870:	4b02      	ldr	r3, [pc, #8]	; (800987c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	20000ef8 	.word	0x20000ef8
 8009880:	0800a990 	.word	0x0800a990

08009884 <USBD_FS_ManufacturerStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	4603      	mov	r3, r0
 800988c:	6039      	str	r1, [r7, #0]
 800988e:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	4904      	ldr	r1, [pc, #16]	; (80098a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009894:	4804      	ldr	r0, [pc, #16]	; (80098a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009896:	f7ff fd88 	bl	80093aa <USBD_GetString>
	return USBD_StrDesc;
 800989a:	4b02      	ldr	r3, [pc, #8]	; (80098a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800989c:	4618      	mov	r0, r3
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20000ef8 	.word	0x20000ef8
 80098a8:	0800a9a8 	.word	0x0800a9a8

080098ac <USBD_FS_SerialStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	6039      	str	r1, [r7, #0]
 80098b6:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = USB_SIZ_STRING_SERIAL;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	221a      	movs	r2, #26
 80098bc:	801a      	strh	r2, [r3, #0]

	/* Update the serial number string descriptor with the data from the unique
	 * ID */
	Get_SerialNum();
 80098be:	f000 f843 	bl	8009948 <Get_SerialNum>
	/* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

	/* USER CODE END USBD_FS_SerialStrDescriptor */
	return (uint8_t *) USBD_StringSerial;
 80098c2:	4b02      	ldr	r3, [pc, #8]	; (80098cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	20000330 	.word	0x20000330

080098d0 <USBD_FS_ConfigStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	6039      	str	r1, [r7, #0]
 80098da:	71fb      	strb	r3, [r7, #7]
	if(speed == USBD_SPEED_HIGH)
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d105      	bne.n	80098ee <USBD_FS_ConfigStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098e2:	683a      	ldr	r2, [r7, #0]
 80098e4:	4907      	ldr	r1, [pc, #28]	; (8009904 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098e6:	4808      	ldr	r0, [pc, #32]	; (8009908 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098e8:	f7ff fd5f 	bl	80093aa <USBD_GetString>
 80098ec:	e004      	b.n	80098f8 <USBD_FS_ConfigStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	4904      	ldr	r1, [pc, #16]	; (8009904 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098f2:	4805      	ldr	r0, [pc, #20]	; (8009908 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098f4:	f7ff fd59 	bl	80093aa <USBD_GetString>
	}
	return USBD_StrDesc;
 80098f8:	4b02      	ldr	r3, [pc, #8]	; (8009904 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20000ef8 	.word	0x20000ef8
 8009908:	0800a9bc 	.word	0x0800a9bc

0800990c <USBD_FS_InterfaceStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	6039      	str	r1, [r7, #0]
 8009916:	71fb      	strb	r3, [r7, #7]
	if(speed == 0)
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d105      	bne.n	800992a <USBD_FS_InterfaceStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	4907      	ldr	r1, [pc, #28]	; (8009940 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009922:	4808      	ldr	r0, [pc, #32]	; (8009944 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009924:	f7ff fd41 	bl	80093aa <USBD_GetString>
 8009928:	e004      	b.n	8009934 <USBD_FS_InterfaceStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	4904      	ldr	r1, [pc, #16]	; (8009940 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800992e:	4805      	ldr	r0, [pc, #20]	; (8009944 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009930:	f7ff fd3b 	bl	80093aa <USBD_GetString>
	}
	return USBD_StrDesc;
 8009934:	4b02      	ldr	r3, [pc, #8]	; (8009940 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20000ef8 	.word	0x20000ef8
 8009944:	0800a9c8 	.word	0x0800a9c8

08009948 <Get_SerialNum>:
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
	uint32_t deviceserial0, deviceserial1, deviceserial2;

	deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800994e:	4b0f      	ldr	r3, [pc, #60]	; (800998c <Get_SerialNum+0x44>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	60fb      	str	r3, [r7, #12]
	deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009954:	4b0e      	ldr	r3, [pc, #56]	; (8009990 <Get_SerialNum+0x48>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60bb      	str	r3, [r7, #8]
	deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800995a:	4b0e      	ldr	r3, [pc, #56]	; (8009994 <Get_SerialNum+0x4c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	607b      	str	r3, [r7, #4]

	deviceserial0 += deviceserial2;
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4413      	add	r3, r2
 8009966:	60fb      	str	r3, [r7, #12]

	if (deviceserial0 != 0)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d009      	beq.n	8009982 <Get_SerialNum+0x3a>
	{
		IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800996e:	2208      	movs	r2, #8
 8009970:	4909      	ldr	r1, [pc, #36]	; (8009998 <Get_SerialNum+0x50>)
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 f814 	bl	80099a0 <IntToUnicode>
		IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009978:	2204      	movs	r2, #4
 800997a:	4908      	ldr	r1, [pc, #32]	; (800999c <Get_SerialNum+0x54>)
 800997c:	68b8      	ldr	r0, [r7, #8]
 800997e:	f000 f80f 	bl	80099a0 <IntToUnicode>
	}
}
 8009982:	bf00      	nop
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	1fff7a10 	.word	0x1fff7a10
 8009990:	1fff7a14 	.word	0x1fff7a14
 8009994:	1fff7a18 	.word	0x1fff7a18
 8009998:	20000332 	.word	0x20000332
 800999c:	20000342 	.word	0x20000342

080099a0 <IntToUnicode>:
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	4613      	mov	r3, r2
 80099ac:	71fb      	strb	r3, [r7, #7]
	uint8_t idx = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	75fb      	strb	r3, [r7, #23]

	for (idx = 0; idx < len; idx++)
 80099b2:	2300      	movs	r3, #0
 80099b4:	75fb      	strb	r3, [r7, #23]
 80099b6:	e027      	b.n	8009a08 <IntToUnicode+0x68>
	{
		if (((value >> 28)) < 0xA)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	0f1b      	lsrs	r3, r3, #28
 80099bc:	2b09      	cmp	r3, #9
 80099be:	d80b      	bhi.n	80099d8 <IntToUnicode+0x38>
		{
			pbuf[2 * idx] = (value >> 28) + '0';
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	0f1b      	lsrs	r3, r3, #28
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	4619      	mov	r1, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	440b      	add	r3, r1
 80099d0:	3230      	adds	r2, #48	; 0x30
 80099d2:	b2d2      	uxtb	r2, r2
 80099d4:	701a      	strb	r2, [r3, #0]
 80099d6:	e00a      	b.n	80099ee <IntToUnicode+0x4e>
		}
		else
		{
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	0f1b      	lsrs	r3, r3, #28
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	4619      	mov	r1, r3
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	440b      	add	r3, r1
 80099e8:	3237      	adds	r2, #55	; 0x37
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	701a      	strb	r2, [r3, #0]
		}

		value = value << 4;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	011b      	lsls	r3, r3, #4
 80099f2:	60fb      	str	r3, [r7, #12]

		pbuf[2 * idx + 1] = 0;
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	005b      	lsls	r3, r3, #1
 80099f8:	3301      	adds	r3, #1
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	4413      	add	r3, r2
 80099fe:	2200      	movs	r2, #0
 8009a00:	701a      	strb	r2, [r3, #0]
	for (idx = 0; idx < len; idx++)
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	3301      	adds	r3, #1
 8009a06:	75fb      	strb	r3, [r7, #23]
 8009a08:	7dfa      	ldrb	r2, [r7, #23]
 8009a0a:	79fb      	ldrb	r3, [r7, #7]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d3d3      	bcc.n	80099b8 <IntToUnicode+0x18>
	}
}
 8009a10:	bf00      	nop
 8009a12:	371c      	adds	r7, #28
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08a      	sub	sp, #40	; 0x28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a24:	f107 0314 	add.w	r3, r7, #20
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	605a      	str	r2, [r3, #4]
 8009a2e:	609a      	str	r2, [r3, #8]
 8009a30:	60da      	str	r2, [r3, #12]
 8009a32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a3c:	d13a      	bne.n	8009ab4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a3e:	2300      	movs	r3, #0
 8009a40:	613b      	str	r3, [r7, #16]
 8009a42:	4b1e      	ldr	r3, [pc, #120]	; (8009abc <HAL_PCD_MspInit+0xa0>)
 8009a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a46:	4a1d      	ldr	r2, [pc, #116]	; (8009abc <HAL_PCD_MspInit+0xa0>)
 8009a48:	f043 0301 	orr.w	r3, r3, #1
 8009a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8009a4e:	4b1b      	ldr	r3, [pc, #108]	; (8009abc <HAL_PCD_MspInit+0xa0>)
 8009a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	613b      	str	r3, [r7, #16]
 8009a58:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a60:	2302      	movs	r3, #2
 8009a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a6c:	230a      	movs	r3, #10
 8009a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a70:	f107 0314 	add.w	r3, r7, #20
 8009a74:	4619      	mov	r1, r3
 8009a76:	4812      	ldr	r0, [pc, #72]	; (8009ac0 <HAL_PCD_MspInit+0xa4>)
 8009a78:	f7f8 ff06 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a7c:	4b0f      	ldr	r3, [pc, #60]	; (8009abc <HAL_PCD_MspInit+0xa0>)
 8009a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a80:	4a0e      	ldr	r2, [pc, #56]	; (8009abc <HAL_PCD_MspInit+0xa0>)
 8009a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a86:	6353      	str	r3, [r2, #52]	; 0x34
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <HAL_PCD_MspInit+0xa0>)
 8009a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a90:	4a0a      	ldr	r2, [pc, #40]	; (8009abc <HAL_PCD_MspInit+0xa0>)
 8009a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a96:	6453      	str	r3, [r2, #68]	; 0x44
 8009a98:	4b08      	ldr	r3, [pc, #32]	; (8009abc <HAL_PCD_MspInit+0xa0>)
 8009a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	2043      	movs	r0, #67	; 0x43
 8009aaa:	f7f8 fe9a 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009aae:	2043      	movs	r0, #67	; 0x43
 8009ab0:	f7f8 feb3 	bl	800281a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ab4:	bf00      	nop
 8009ab6:	3728      	adds	r7, #40	; 0x28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	40023800 	.word	0x40023800
 8009ac0:	40020000 	.word	0x40020000

08009ac4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f7fe fce2 	bl	80084a4 <USBD_LL_SetupStage>
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009afa:	78fa      	ldrb	r2, [r7, #3]
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	4613      	mov	r3, r2
 8009b00:	00db      	lsls	r3, r3, #3
 8009b02:	1a9b      	subs	r3, r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	440b      	add	r3, r1
 8009b08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	78fb      	ldrb	r3, [r7, #3]
 8009b10:	4619      	mov	r1, r3
 8009b12:	f7fe fd1a 	bl	800854a <USBD_LL_DataOutStage>
}
 8009b16:	bf00      	nop
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b082      	sub	sp, #8
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	460b      	mov	r3, r1
 8009b28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009b30:	78fa      	ldrb	r2, [r7, #3]
 8009b32:	6879      	ldr	r1, [r7, #4]
 8009b34:	4613      	mov	r3, r2
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	1a9b      	subs	r3, r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	440b      	add	r3, r1
 8009b3e:	3348      	adds	r3, #72	; 0x48
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	78fb      	ldrb	r3, [r7, #3]
 8009b44:	4619      	mov	r1, r3
 8009b46:	f7fe fd63 	bl	8008610 <USBD_LL_DataInStage>
}
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fe fe67 	bl	8008834 <USBD_LL_SOF>
}
 8009b66:	bf00      	nop
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b76:	2301      	movs	r3, #1
 8009b78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d001      	beq.n	8009b86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b82:	f7f7 fbb9 	bl	80012f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b8c:	7bfa      	ldrb	r2, [r7, #15]
 8009b8e:	4611      	mov	r1, r2
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe fe14 	bl	80087be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe fdcd 	bl	800873c <USBD_LL_Reset>
}
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
	...

08009bac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fe0f 	bl	80087de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	6812      	ldr	r2, [r2, #0]
 8009bce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bd2:	f043 0301 	orr.w	r3, r3, #1
 8009bd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d005      	beq.n	8009bec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009be0:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <HAL_PCD_SuspendCallback+0x48>)
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	4a03      	ldr	r2, [pc, #12]	; (8009bf4 <HAL_PCD_SuspendCallback+0x48>)
 8009be6:	f043 0306 	orr.w	r3, r3, #6
 8009bea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	e000ed00 	.word	0xe000ed00

08009bf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fe fdfe 	bl	8008808 <USBD_LL_Resume>
}
 8009c0c:	bf00      	nop
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c26:	78fa      	ldrb	r2, [r7, #3]
 8009c28:	4611      	mov	r1, r2
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fe fe29 	bl	8008882 <USBD_LL_IsoOUTIncomplete>
}
 8009c30:	bf00      	nop
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c4a:	78fa      	ldrb	r2, [r7, #3]
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fe0a 	bl	8008868 <USBD_LL_IsoINIncomplete>
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fe16 	bl	800889c <USBD_LL_DevConnected>
}
 8009c70:	bf00      	nop
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fe13 	bl	80088b2 <USBD_LL_DevDisconnected>
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d13c      	bne.n	8009d1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ca4:	4a20      	ldr	r2, [pc, #128]	; (8009d28 <USBD_LL_Init+0x94>)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a1e      	ldr	r2, [pc, #120]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009cb4:	4b1c      	ldr	r3, [pc, #112]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009cba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009cbc:	4b1a      	ldr	r3, [pc, #104]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cbe:	2204      	movs	r2, #4
 8009cc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009cc2:	4b19      	ldr	r3, [pc, #100]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009cc8:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009cce:	4b16      	ldr	r3, [pc, #88]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009cd4:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009cda:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ce0:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <USBD_LL_Init+0x94>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ce6:	4b10      	ldr	r3, [pc, #64]	; (8009d28 <USBD_LL_Init+0x94>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009cec:	4b0e      	ldr	r3, [pc, #56]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009cf2:	480d      	ldr	r0, [pc, #52]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cf4:	f7f9 fd01 	bl	80036fa <HAL_PCD_Init>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009cfe:	f7f7 fafb 	bl	80012f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d02:	2180      	movs	r1, #128	; 0x80
 8009d04:	4808      	ldr	r0, [pc, #32]	; (8009d28 <USBD_LL_Init+0x94>)
 8009d06:	f7fa fe5e 	bl	80049c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d0a:	2240      	movs	r2, #64	; 0x40
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	4806      	ldr	r0, [pc, #24]	; (8009d28 <USBD_LL_Init+0x94>)
 8009d10:	f7fa fe12 	bl	8004938 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d14:	2280      	movs	r2, #128	; 0x80
 8009d16:	2101      	movs	r1, #1
 8009d18:	4803      	ldr	r0, [pc, #12]	; (8009d28 <USBD_LL_Init+0x94>)
 8009d1a:	f7fa fe0d 	bl	8004938 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	200010f8 	.word	0x200010f8

08009d2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7f9 fdf6 	bl	8003934 <HAL_PCD_Start>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 f92a 	bl	8009fa8 <USBD_Get_USB_Status>
 8009d54:	4603      	mov	r3, r0
 8009d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	4608      	mov	r0, r1
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	461a      	mov	r2, r3
 8009d70:	4603      	mov	r3, r0
 8009d72:	70fb      	strb	r3, [r7, #3]
 8009d74:	460b      	mov	r3, r1
 8009d76:	70bb      	strb	r3, [r7, #2]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d8a:	78bb      	ldrb	r3, [r7, #2]
 8009d8c:	883a      	ldrh	r2, [r7, #0]
 8009d8e:	78f9      	ldrb	r1, [r7, #3]
 8009d90:	f7fa f9da 	bl	8004148 <HAL_PCD_EP_Open>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 f904 	bl	8009fa8 <USBD_Get_USB_Status>
 8009da0:	4603      	mov	r3, r0
 8009da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fa fa23 	bl	8004218 <HAL_PCD_EP_Close>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 f8e5 	bl	8009fa8 <USBD_Get_USB_Status>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fa fafb 	bl	8004406 <HAL_PCD_EP_SetStall>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 f8c6 	bl	8009fa8 <USBD_Get_USB_Status>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e44:	78fa      	ldrb	r2, [r7, #3]
 8009e46:	4611      	mov	r1, r2
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fa fb40 	bl	80044ce <HAL_PCD_EP_ClrStall>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 f8a7 	bl	8009fa8 <USBD_Get_USB_Status>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	da0b      	bge.n	8009e9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e84:	78fb      	ldrb	r3, [r7, #3]
 8009e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e8a:	68f9      	ldr	r1, [r7, #12]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	1a9b      	subs	r3, r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	440b      	add	r3, r1
 8009e96:	333e      	adds	r3, #62	; 0x3e
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	e00b      	b.n	8009eb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e9c:	78fb      	ldrb	r3, [r7, #3]
 8009e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ea2:	68f9      	ldr	r1, [r7, #12]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	1a9b      	subs	r3, r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	440b      	add	r3, r1
 8009eae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009eb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009eda:	78fa      	ldrb	r2, [r7, #3]
 8009edc:	4611      	mov	r1, r2
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fa f90d 	bl	80040fe <HAL_PCD_SetAddress>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f85c 	bl	8009fa8 <USBD_Get_USB_Status>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b086      	sub	sp, #24
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f1c:	7af9      	ldrb	r1, [r7, #11]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	f7fa fa26 	bl	8004372 <HAL_PCD_EP_Transmit>
 8009f26:	4603      	mov	r3, r0
 8009f28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 f83b 	bl	8009fa8 <USBD_Get_USB_Status>
 8009f32:	4603      	mov	r3, r0
 8009f34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f36:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	607a      	str	r2, [r7, #4]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f5e:	7af9      	ldrb	r1, [r7, #11]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	f7fa f9a2 	bl	80042ac <HAL_PCD_EP_Receive>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 f81a 	bl	8009fa8 <USBD_Get_USB_Status>
 8009f74:	4603      	mov	r3, r0
 8009f76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f78:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f94:	78fa      	ldrb	r2, [r7, #3]
 8009f96:	4611      	mov	r1, r2
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fa f9d2 	bl	8004342 <HAL_PCD_EP_GetRxCount>
 8009f9e:	4603      	mov	r3, r0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d817      	bhi.n	8009fec <USBD_Get_USB_Status+0x44>
 8009fbc:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <USBD_Get_USB_Status+0x1c>)
 8009fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc2:	bf00      	nop
 8009fc4:	08009fd5 	.word	0x08009fd5
 8009fc8:	08009fdb 	.word	0x08009fdb
 8009fcc:	08009fe1 	.word	0x08009fe1
 8009fd0:	08009fe7 	.word	0x08009fe7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fd8:	e00b      	b.n	8009ff2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009fde:	e008      	b.n	8009ff2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fe4:	e005      	b.n	8009ff2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fea:	e002      	b.n	8009ff2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009fec:	2303      	movs	r3, #3
 8009fee:	73fb      	strb	r3, [r7, #15]
    break;
 8009ff0:	bf00      	nop
  }
  return usb_status;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <__errno>:
 800a000:	4b01      	ldr	r3, [pc, #4]	; (800a008 <__errno+0x8>)
 800a002:	6818      	ldr	r0, [r3, #0]
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	2000034c 	.word	0x2000034c

0800a00c <__libc_init_array>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	4e0d      	ldr	r6, [pc, #52]	; (800a044 <__libc_init_array+0x38>)
 800a010:	4c0d      	ldr	r4, [pc, #52]	; (800a048 <__libc_init_array+0x3c>)
 800a012:	1ba4      	subs	r4, r4, r6
 800a014:	10a4      	asrs	r4, r4, #2
 800a016:	2500      	movs	r5, #0
 800a018:	42a5      	cmp	r5, r4
 800a01a:	d109      	bne.n	800a030 <__libc_init_array+0x24>
 800a01c:	4e0b      	ldr	r6, [pc, #44]	; (800a04c <__libc_init_array+0x40>)
 800a01e:	4c0c      	ldr	r4, [pc, #48]	; (800a050 <__libc_init_array+0x44>)
 800a020:	f000 fc38 	bl	800a894 <_init>
 800a024:	1ba4      	subs	r4, r4, r6
 800a026:	10a4      	asrs	r4, r4, #2
 800a028:	2500      	movs	r5, #0
 800a02a:	42a5      	cmp	r5, r4
 800a02c:	d105      	bne.n	800a03a <__libc_init_array+0x2e>
 800a02e:	bd70      	pop	{r4, r5, r6, pc}
 800a030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a034:	4798      	blx	r3
 800a036:	3501      	adds	r5, #1
 800a038:	e7ee      	b.n	800a018 <__libc_init_array+0xc>
 800a03a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a03e:	4798      	blx	r3
 800a040:	3501      	adds	r5, #1
 800a042:	e7f2      	b.n	800a02a <__libc_init_array+0x1e>
 800a044:	0800b788 	.word	0x0800b788
 800a048:	0800b788 	.word	0x0800b788
 800a04c:	0800b788 	.word	0x0800b788
 800a050:	0800b78c 	.word	0x0800b78c

0800a054 <malloc>:
 800a054:	4b02      	ldr	r3, [pc, #8]	; (800a060 <malloc+0xc>)
 800a056:	4601      	mov	r1, r0
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f000 b86d 	b.w	800a138 <_malloc_r>
 800a05e:	bf00      	nop
 800a060:	2000034c 	.word	0x2000034c

0800a064 <free>:
 800a064:	4b02      	ldr	r3, [pc, #8]	; (800a070 <free+0xc>)
 800a066:	4601      	mov	r1, r0
 800a068:	6818      	ldr	r0, [r3, #0]
 800a06a:	f000 b817 	b.w	800a09c <_free_r>
 800a06e:	bf00      	nop
 800a070:	2000034c 	.word	0x2000034c

0800a074 <memcpy>:
 800a074:	b510      	push	{r4, lr}
 800a076:	1e43      	subs	r3, r0, #1
 800a078:	440a      	add	r2, r1
 800a07a:	4291      	cmp	r1, r2
 800a07c:	d100      	bne.n	800a080 <memcpy+0xc>
 800a07e:	bd10      	pop	{r4, pc}
 800a080:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a084:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a088:	e7f7      	b.n	800a07a <memcpy+0x6>

0800a08a <memset>:
 800a08a:	4402      	add	r2, r0
 800a08c:	4603      	mov	r3, r0
 800a08e:	4293      	cmp	r3, r2
 800a090:	d100      	bne.n	800a094 <memset+0xa>
 800a092:	4770      	bx	lr
 800a094:	f803 1b01 	strb.w	r1, [r3], #1
 800a098:	e7f9      	b.n	800a08e <memset+0x4>
	...

0800a09c <_free_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4605      	mov	r5, r0
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	d045      	beq.n	800a130 <_free_r+0x94>
 800a0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a8:	1f0c      	subs	r4, r1, #4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bfb8      	it	lt
 800a0ae:	18e4      	addlt	r4, r4, r3
 800a0b0:	f000 f8cc 	bl	800a24c <__malloc_lock>
 800a0b4:	4a1f      	ldr	r2, [pc, #124]	; (800a134 <_free_r+0x98>)
 800a0b6:	6813      	ldr	r3, [r2, #0]
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	b933      	cbnz	r3, 800a0ca <_free_r+0x2e>
 800a0bc:	6063      	str	r3, [r4, #4]
 800a0be:	6014      	str	r4, [r2, #0]
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0c6:	f000 b8c2 	b.w	800a24e <__malloc_unlock>
 800a0ca:	42a3      	cmp	r3, r4
 800a0cc:	d90c      	bls.n	800a0e8 <_free_r+0x4c>
 800a0ce:	6821      	ldr	r1, [r4, #0]
 800a0d0:	1862      	adds	r2, r4, r1
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	bf04      	itt	eq
 800a0d6:	681a      	ldreq	r2, [r3, #0]
 800a0d8:	685b      	ldreq	r3, [r3, #4]
 800a0da:	6063      	str	r3, [r4, #4]
 800a0dc:	bf04      	itt	eq
 800a0de:	1852      	addeq	r2, r2, r1
 800a0e0:	6022      	streq	r2, [r4, #0]
 800a0e2:	6004      	str	r4, [r0, #0]
 800a0e4:	e7ec      	b.n	800a0c0 <_free_r+0x24>
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	b10a      	cbz	r2, 800a0f0 <_free_r+0x54>
 800a0ec:	42a2      	cmp	r2, r4
 800a0ee:	d9fa      	bls.n	800a0e6 <_free_r+0x4a>
 800a0f0:	6819      	ldr	r1, [r3, #0]
 800a0f2:	1858      	adds	r0, r3, r1
 800a0f4:	42a0      	cmp	r0, r4
 800a0f6:	d10b      	bne.n	800a110 <_free_r+0x74>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	4401      	add	r1, r0
 800a0fc:	1858      	adds	r0, r3, r1
 800a0fe:	4282      	cmp	r2, r0
 800a100:	6019      	str	r1, [r3, #0]
 800a102:	d1dd      	bne.n	800a0c0 <_free_r+0x24>
 800a104:	6810      	ldr	r0, [r2, #0]
 800a106:	6852      	ldr	r2, [r2, #4]
 800a108:	605a      	str	r2, [r3, #4]
 800a10a:	4401      	add	r1, r0
 800a10c:	6019      	str	r1, [r3, #0]
 800a10e:	e7d7      	b.n	800a0c0 <_free_r+0x24>
 800a110:	d902      	bls.n	800a118 <_free_r+0x7c>
 800a112:	230c      	movs	r3, #12
 800a114:	602b      	str	r3, [r5, #0]
 800a116:	e7d3      	b.n	800a0c0 <_free_r+0x24>
 800a118:	6820      	ldr	r0, [r4, #0]
 800a11a:	1821      	adds	r1, r4, r0
 800a11c:	428a      	cmp	r2, r1
 800a11e:	bf04      	itt	eq
 800a120:	6811      	ldreq	r1, [r2, #0]
 800a122:	6852      	ldreq	r2, [r2, #4]
 800a124:	6062      	str	r2, [r4, #4]
 800a126:	bf04      	itt	eq
 800a128:	1809      	addeq	r1, r1, r0
 800a12a:	6021      	streq	r1, [r4, #0]
 800a12c:	605c      	str	r4, [r3, #4]
 800a12e:	e7c7      	b.n	800a0c0 <_free_r+0x24>
 800a130:	bd38      	pop	{r3, r4, r5, pc}
 800a132:	bf00      	nop
 800a134:	20000824 	.word	0x20000824

0800a138 <_malloc_r>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	1ccd      	adds	r5, r1, #3
 800a13c:	f025 0503 	bic.w	r5, r5, #3
 800a140:	3508      	adds	r5, #8
 800a142:	2d0c      	cmp	r5, #12
 800a144:	bf38      	it	cc
 800a146:	250c      	movcc	r5, #12
 800a148:	2d00      	cmp	r5, #0
 800a14a:	4606      	mov	r6, r0
 800a14c:	db01      	blt.n	800a152 <_malloc_r+0x1a>
 800a14e:	42a9      	cmp	r1, r5
 800a150:	d903      	bls.n	800a15a <_malloc_r+0x22>
 800a152:	230c      	movs	r3, #12
 800a154:	6033      	str	r3, [r6, #0]
 800a156:	2000      	movs	r0, #0
 800a158:	bd70      	pop	{r4, r5, r6, pc}
 800a15a:	f000 f877 	bl	800a24c <__malloc_lock>
 800a15e:	4a21      	ldr	r2, [pc, #132]	; (800a1e4 <_malloc_r+0xac>)
 800a160:	6814      	ldr	r4, [r2, #0]
 800a162:	4621      	mov	r1, r4
 800a164:	b991      	cbnz	r1, 800a18c <_malloc_r+0x54>
 800a166:	4c20      	ldr	r4, [pc, #128]	; (800a1e8 <_malloc_r+0xb0>)
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	b91b      	cbnz	r3, 800a174 <_malloc_r+0x3c>
 800a16c:	4630      	mov	r0, r6
 800a16e:	f000 f83d 	bl	800a1ec <_sbrk_r>
 800a172:	6020      	str	r0, [r4, #0]
 800a174:	4629      	mov	r1, r5
 800a176:	4630      	mov	r0, r6
 800a178:	f000 f838 	bl	800a1ec <_sbrk_r>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d124      	bne.n	800a1ca <_malloc_r+0x92>
 800a180:	230c      	movs	r3, #12
 800a182:	6033      	str	r3, [r6, #0]
 800a184:	4630      	mov	r0, r6
 800a186:	f000 f862 	bl	800a24e <__malloc_unlock>
 800a18a:	e7e4      	b.n	800a156 <_malloc_r+0x1e>
 800a18c:	680b      	ldr	r3, [r1, #0]
 800a18e:	1b5b      	subs	r3, r3, r5
 800a190:	d418      	bmi.n	800a1c4 <_malloc_r+0x8c>
 800a192:	2b0b      	cmp	r3, #11
 800a194:	d90f      	bls.n	800a1b6 <_malloc_r+0x7e>
 800a196:	600b      	str	r3, [r1, #0]
 800a198:	50cd      	str	r5, [r1, r3]
 800a19a:	18cc      	adds	r4, r1, r3
 800a19c:	4630      	mov	r0, r6
 800a19e:	f000 f856 	bl	800a24e <__malloc_unlock>
 800a1a2:	f104 000b 	add.w	r0, r4, #11
 800a1a6:	1d23      	adds	r3, r4, #4
 800a1a8:	f020 0007 	bic.w	r0, r0, #7
 800a1ac:	1ac3      	subs	r3, r0, r3
 800a1ae:	d0d3      	beq.n	800a158 <_malloc_r+0x20>
 800a1b0:	425a      	negs	r2, r3
 800a1b2:	50e2      	str	r2, [r4, r3]
 800a1b4:	e7d0      	b.n	800a158 <_malloc_r+0x20>
 800a1b6:	428c      	cmp	r4, r1
 800a1b8:	684b      	ldr	r3, [r1, #4]
 800a1ba:	bf16      	itet	ne
 800a1bc:	6063      	strne	r3, [r4, #4]
 800a1be:	6013      	streq	r3, [r2, #0]
 800a1c0:	460c      	movne	r4, r1
 800a1c2:	e7eb      	b.n	800a19c <_malloc_r+0x64>
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	6849      	ldr	r1, [r1, #4]
 800a1c8:	e7cc      	b.n	800a164 <_malloc_r+0x2c>
 800a1ca:	1cc4      	adds	r4, r0, #3
 800a1cc:	f024 0403 	bic.w	r4, r4, #3
 800a1d0:	42a0      	cmp	r0, r4
 800a1d2:	d005      	beq.n	800a1e0 <_malloc_r+0xa8>
 800a1d4:	1a21      	subs	r1, r4, r0
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f000 f808 	bl	800a1ec <_sbrk_r>
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d0cf      	beq.n	800a180 <_malloc_r+0x48>
 800a1e0:	6025      	str	r5, [r4, #0]
 800a1e2:	e7db      	b.n	800a19c <_malloc_r+0x64>
 800a1e4:	20000824 	.word	0x20000824
 800a1e8:	20000828 	.word	0x20000828

0800a1ec <_sbrk_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4c06      	ldr	r4, [pc, #24]	; (800a208 <_sbrk_r+0x1c>)
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	6023      	str	r3, [r4, #0]
 800a1f8:	f7f7 fd88 	bl	8001d0c <_sbrk>
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d102      	bne.n	800a206 <_sbrk_r+0x1a>
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	b103      	cbz	r3, 800a206 <_sbrk_r+0x1a>
 800a204:	602b      	str	r3, [r5, #0]
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	20001500 	.word	0x20001500

0800a20c <siprintf>:
 800a20c:	b40e      	push	{r1, r2, r3}
 800a20e:	b500      	push	{lr}
 800a210:	b09c      	sub	sp, #112	; 0x70
 800a212:	ab1d      	add	r3, sp, #116	; 0x74
 800a214:	9002      	str	r0, [sp, #8]
 800a216:	9006      	str	r0, [sp, #24]
 800a218:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a21c:	4809      	ldr	r0, [pc, #36]	; (800a244 <siprintf+0x38>)
 800a21e:	9107      	str	r1, [sp, #28]
 800a220:	9104      	str	r1, [sp, #16]
 800a222:	4909      	ldr	r1, [pc, #36]	; (800a248 <siprintf+0x3c>)
 800a224:	f853 2b04 	ldr.w	r2, [r3], #4
 800a228:	9105      	str	r1, [sp, #20]
 800a22a:	6800      	ldr	r0, [r0, #0]
 800a22c:	9301      	str	r3, [sp, #4]
 800a22e:	a902      	add	r1, sp, #8
 800a230:	f000 f868 	bl	800a304 <_svfiprintf_r>
 800a234:	9b02      	ldr	r3, [sp, #8]
 800a236:	2200      	movs	r2, #0
 800a238:	701a      	strb	r2, [r3, #0]
 800a23a:	b01c      	add	sp, #112	; 0x70
 800a23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a240:	b003      	add	sp, #12
 800a242:	4770      	bx	lr
 800a244:	2000034c 	.word	0x2000034c
 800a248:	ffff0208 	.word	0xffff0208

0800a24c <__malloc_lock>:
 800a24c:	4770      	bx	lr

0800a24e <__malloc_unlock>:
 800a24e:	4770      	bx	lr

0800a250 <__ssputs_r>:
 800a250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a254:	688e      	ldr	r6, [r1, #8]
 800a256:	429e      	cmp	r6, r3
 800a258:	4682      	mov	sl, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	4690      	mov	r8, r2
 800a25e:	4699      	mov	r9, r3
 800a260:	d837      	bhi.n	800a2d2 <__ssputs_r+0x82>
 800a262:	898a      	ldrh	r2, [r1, #12]
 800a264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a268:	d031      	beq.n	800a2ce <__ssputs_r+0x7e>
 800a26a:	6825      	ldr	r5, [r4, #0]
 800a26c:	6909      	ldr	r1, [r1, #16]
 800a26e:	1a6f      	subs	r7, r5, r1
 800a270:	6965      	ldr	r5, [r4, #20]
 800a272:	2302      	movs	r3, #2
 800a274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a278:	fb95 f5f3 	sdiv	r5, r5, r3
 800a27c:	f109 0301 	add.w	r3, r9, #1
 800a280:	443b      	add	r3, r7
 800a282:	429d      	cmp	r5, r3
 800a284:	bf38      	it	cc
 800a286:	461d      	movcc	r5, r3
 800a288:	0553      	lsls	r3, r2, #21
 800a28a:	d530      	bpl.n	800a2ee <__ssputs_r+0x9e>
 800a28c:	4629      	mov	r1, r5
 800a28e:	f7ff ff53 	bl	800a138 <_malloc_r>
 800a292:	4606      	mov	r6, r0
 800a294:	b950      	cbnz	r0, 800a2ac <__ssputs_r+0x5c>
 800a296:	230c      	movs	r3, #12
 800a298:	f8ca 3000 	str.w	r3, [sl]
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a2:	81a3      	strh	r3, [r4, #12]
 800a2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ac:	463a      	mov	r2, r7
 800a2ae:	6921      	ldr	r1, [r4, #16]
 800a2b0:	f7ff fee0 	bl	800a074 <memcpy>
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2be:	81a3      	strh	r3, [r4, #12]
 800a2c0:	6126      	str	r6, [r4, #16]
 800a2c2:	6165      	str	r5, [r4, #20]
 800a2c4:	443e      	add	r6, r7
 800a2c6:	1bed      	subs	r5, r5, r7
 800a2c8:	6026      	str	r6, [r4, #0]
 800a2ca:	60a5      	str	r5, [r4, #8]
 800a2cc:	464e      	mov	r6, r9
 800a2ce:	454e      	cmp	r6, r9
 800a2d0:	d900      	bls.n	800a2d4 <__ssputs_r+0x84>
 800a2d2:	464e      	mov	r6, r9
 800a2d4:	4632      	mov	r2, r6
 800a2d6:	4641      	mov	r1, r8
 800a2d8:	6820      	ldr	r0, [r4, #0]
 800a2da:	f000 fa93 	bl	800a804 <memmove>
 800a2de:	68a3      	ldr	r3, [r4, #8]
 800a2e0:	1b9b      	subs	r3, r3, r6
 800a2e2:	60a3      	str	r3, [r4, #8]
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	441e      	add	r6, r3
 800a2e8:	6026      	str	r6, [r4, #0]
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	e7dc      	b.n	800a2a8 <__ssputs_r+0x58>
 800a2ee:	462a      	mov	r2, r5
 800a2f0:	f000 faa1 	bl	800a836 <_realloc_r>
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d1e2      	bne.n	800a2c0 <__ssputs_r+0x70>
 800a2fa:	6921      	ldr	r1, [r4, #16]
 800a2fc:	4650      	mov	r0, sl
 800a2fe:	f7ff fecd 	bl	800a09c <_free_r>
 800a302:	e7c8      	b.n	800a296 <__ssputs_r+0x46>

0800a304 <_svfiprintf_r>:
 800a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	461d      	mov	r5, r3
 800a30a:	898b      	ldrh	r3, [r1, #12]
 800a30c:	061f      	lsls	r7, r3, #24
 800a30e:	b09d      	sub	sp, #116	; 0x74
 800a310:	4680      	mov	r8, r0
 800a312:	460c      	mov	r4, r1
 800a314:	4616      	mov	r6, r2
 800a316:	d50f      	bpl.n	800a338 <_svfiprintf_r+0x34>
 800a318:	690b      	ldr	r3, [r1, #16]
 800a31a:	b96b      	cbnz	r3, 800a338 <_svfiprintf_r+0x34>
 800a31c:	2140      	movs	r1, #64	; 0x40
 800a31e:	f7ff ff0b 	bl	800a138 <_malloc_r>
 800a322:	6020      	str	r0, [r4, #0]
 800a324:	6120      	str	r0, [r4, #16]
 800a326:	b928      	cbnz	r0, 800a334 <_svfiprintf_r+0x30>
 800a328:	230c      	movs	r3, #12
 800a32a:	f8c8 3000 	str.w	r3, [r8]
 800a32e:	f04f 30ff 	mov.w	r0, #4294967295
 800a332:	e0c8      	b.n	800a4c6 <_svfiprintf_r+0x1c2>
 800a334:	2340      	movs	r3, #64	; 0x40
 800a336:	6163      	str	r3, [r4, #20]
 800a338:	2300      	movs	r3, #0
 800a33a:	9309      	str	r3, [sp, #36]	; 0x24
 800a33c:	2320      	movs	r3, #32
 800a33e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a342:	2330      	movs	r3, #48	; 0x30
 800a344:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a348:	9503      	str	r5, [sp, #12]
 800a34a:	f04f 0b01 	mov.w	fp, #1
 800a34e:	4637      	mov	r7, r6
 800a350:	463d      	mov	r5, r7
 800a352:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a356:	b10b      	cbz	r3, 800a35c <_svfiprintf_r+0x58>
 800a358:	2b25      	cmp	r3, #37	; 0x25
 800a35a:	d13e      	bne.n	800a3da <_svfiprintf_r+0xd6>
 800a35c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a360:	d00b      	beq.n	800a37a <_svfiprintf_r+0x76>
 800a362:	4653      	mov	r3, sl
 800a364:	4632      	mov	r2, r6
 800a366:	4621      	mov	r1, r4
 800a368:	4640      	mov	r0, r8
 800a36a:	f7ff ff71 	bl	800a250 <__ssputs_r>
 800a36e:	3001      	adds	r0, #1
 800a370:	f000 80a4 	beq.w	800a4bc <_svfiprintf_r+0x1b8>
 800a374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a376:	4453      	add	r3, sl
 800a378:	9309      	str	r3, [sp, #36]	; 0x24
 800a37a:	783b      	ldrb	r3, [r7, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 809d 	beq.w	800a4bc <_svfiprintf_r+0x1b8>
 800a382:	2300      	movs	r3, #0
 800a384:	f04f 32ff 	mov.w	r2, #4294967295
 800a388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a38c:	9304      	str	r3, [sp, #16]
 800a38e:	9307      	str	r3, [sp, #28]
 800a390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a394:	931a      	str	r3, [sp, #104]	; 0x68
 800a396:	462f      	mov	r7, r5
 800a398:	2205      	movs	r2, #5
 800a39a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a39e:	4850      	ldr	r0, [pc, #320]	; (800a4e0 <_svfiprintf_r+0x1dc>)
 800a3a0:	f7f5 ff26 	bl	80001f0 <memchr>
 800a3a4:	9b04      	ldr	r3, [sp, #16]
 800a3a6:	b9d0      	cbnz	r0, 800a3de <_svfiprintf_r+0xda>
 800a3a8:	06d9      	lsls	r1, r3, #27
 800a3aa:	bf44      	itt	mi
 800a3ac:	2220      	movmi	r2, #32
 800a3ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a3b2:	071a      	lsls	r2, r3, #28
 800a3b4:	bf44      	itt	mi
 800a3b6:	222b      	movmi	r2, #43	; 0x2b
 800a3b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a3bc:	782a      	ldrb	r2, [r5, #0]
 800a3be:	2a2a      	cmp	r2, #42	; 0x2a
 800a3c0:	d015      	beq.n	800a3ee <_svfiprintf_r+0xea>
 800a3c2:	9a07      	ldr	r2, [sp, #28]
 800a3c4:	462f      	mov	r7, r5
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	250a      	movs	r5, #10
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3d0:	3b30      	subs	r3, #48	; 0x30
 800a3d2:	2b09      	cmp	r3, #9
 800a3d4:	d94d      	bls.n	800a472 <_svfiprintf_r+0x16e>
 800a3d6:	b1b8      	cbz	r0, 800a408 <_svfiprintf_r+0x104>
 800a3d8:	e00f      	b.n	800a3fa <_svfiprintf_r+0xf6>
 800a3da:	462f      	mov	r7, r5
 800a3dc:	e7b8      	b.n	800a350 <_svfiprintf_r+0x4c>
 800a3de:	4a40      	ldr	r2, [pc, #256]	; (800a4e0 <_svfiprintf_r+0x1dc>)
 800a3e0:	1a80      	subs	r0, r0, r2
 800a3e2:	fa0b f000 	lsl.w	r0, fp, r0
 800a3e6:	4318      	orrs	r0, r3
 800a3e8:	9004      	str	r0, [sp, #16]
 800a3ea:	463d      	mov	r5, r7
 800a3ec:	e7d3      	b.n	800a396 <_svfiprintf_r+0x92>
 800a3ee:	9a03      	ldr	r2, [sp, #12]
 800a3f0:	1d11      	adds	r1, r2, #4
 800a3f2:	6812      	ldr	r2, [r2, #0]
 800a3f4:	9103      	str	r1, [sp, #12]
 800a3f6:	2a00      	cmp	r2, #0
 800a3f8:	db01      	blt.n	800a3fe <_svfiprintf_r+0xfa>
 800a3fa:	9207      	str	r2, [sp, #28]
 800a3fc:	e004      	b.n	800a408 <_svfiprintf_r+0x104>
 800a3fe:	4252      	negs	r2, r2
 800a400:	f043 0302 	orr.w	r3, r3, #2
 800a404:	9207      	str	r2, [sp, #28]
 800a406:	9304      	str	r3, [sp, #16]
 800a408:	783b      	ldrb	r3, [r7, #0]
 800a40a:	2b2e      	cmp	r3, #46	; 0x2e
 800a40c:	d10c      	bne.n	800a428 <_svfiprintf_r+0x124>
 800a40e:	787b      	ldrb	r3, [r7, #1]
 800a410:	2b2a      	cmp	r3, #42	; 0x2a
 800a412:	d133      	bne.n	800a47c <_svfiprintf_r+0x178>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	1d1a      	adds	r2, r3, #4
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	9203      	str	r2, [sp, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	bfb8      	it	lt
 800a420:	f04f 33ff 	movlt.w	r3, #4294967295
 800a424:	3702      	adds	r7, #2
 800a426:	9305      	str	r3, [sp, #20]
 800a428:	4d2e      	ldr	r5, [pc, #184]	; (800a4e4 <_svfiprintf_r+0x1e0>)
 800a42a:	7839      	ldrb	r1, [r7, #0]
 800a42c:	2203      	movs	r2, #3
 800a42e:	4628      	mov	r0, r5
 800a430:	f7f5 fede 	bl	80001f0 <memchr>
 800a434:	b138      	cbz	r0, 800a446 <_svfiprintf_r+0x142>
 800a436:	2340      	movs	r3, #64	; 0x40
 800a438:	1b40      	subs	r0, r0, r5
 800a43a:	fa03 f000 	lsl.w	r0, r3, r0
 800a43e:	9b04      	ldr	r3, [sp, #16]
 800a440:	4303      	orrs	r3, r0
 800a442:	3701      	adds	r7, #1
 800a444:	9304      	str	r3, [sp, #16]
 800a446:	7839      	ldrb	r1, [r7, #0]
 800a448:	4827      	ldr	r0, [pc, #156]	; (800a4e8 <_svfiprintf_r+0x1e4>)
 800a44a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a44e:	2206      	movs	r2, #6
 800a450:	1c7e      	adds	r6, r7, #1
 800a452:	f7f5 fecd 	bl	80001f0 <memchr>
 800a456:	2800      	cmp	r0, #0
 800a458:	d038      	beq.n	800a4cc <_svfiprintf_r+0x1c8>
 800a45a:	4b24      	ldr	r3, [pc, #144]	; (800a4ec <_svfiprintf_r+0x1e8>)
 800a45c:	bb13      	cbnz	r3, 800a4a4 <_svfiprintf_r+0x1a0>
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	3307      	adds	r3, #7
 800a462:	f023 0307 	bic.w	r3, r3, #7
 800a466:	3308      	adds	r3, #8
 800a468:	9303      	str	r3, [sp, #12]
 800a46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46c:	444b      	add	r3, r9
 800a46e:	9309      	str	r3, [sp, #36]	; 0x24
 800a470:	e76d      	b.n	800a34e <_svfiprintf_r+0x4a>
 800a472:	fb05 3202 	mla	r2, r5, r2, r3
 800a476:	2001      	movs	r0, #1
 800a478:	460f      	mov	r7, r1
 800a47a:	e7a6      	b.n	800a3ca <_svfiprintf_r+0xc6>
 800a47c:	2300      	movs	r3, #0
 800a47e:	3701      	adds	r7, #1
 800a480:	9305      	str	r3, [sp, #20]
 800a482:	4619      	mov	r1, r3
 800a484:	250a      	movs	r5, #10
 800a486:	4638      	mov	r0, r7
 800a488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a48c:	3a30      	subs	r2, #48	; 0x30
 800a48e:	2a09      	cmp	r2, #9
 800a490:	d903      	bls.n	800a49a <_svfiprintf_r+0x196>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0c8      	beq.n	800a428 <_svfiprintf_r+0x124>
 800a496:	9105      	str	r1, [sp, #20]
 800a498:	e7c6      	b.n	800a428 <_svfiprintf_r+0x124>
 800a49a:	fb05 2101 	mla	r1, r5, r1, r2
 800a49e:	2301      	movs	r3, #1
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	e7f0      	b.n	800a486 <_svfiprintf_r+0x182>
 800a4a4:	ab03      	add	r3, sp, #12
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4b11      	ldr	r3, [pc, #68]	; (800a4f0 <_svfiprintf_r+0x1ec>)
 800a4ac:	a904      	add	r1, sp, #16
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	f3af 8000 	nop.w
 800a4b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a4b8:	4681      	mov	r9, r0
 800a4ba:	d1d6      	bne.n	800a46a <_svfiprintf_r+0x166>
 800a4bc:	89a3      	ldrh	r3, [r4, #12]
 800a4be:	065b      	lsls	r3, r3, #25
 800a4c0:	f53f af35 	bmi.w	800a32e <_svfiprintf_r+0x2a>
 800a4c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4c6:	b01d      	add	sp, #116	; 0x74
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4cc:	ab03      	add	r3, sp, #12
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	4622      	mov	r2, r4
 800a4d2:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <_svfiprintf_r+0x1ec>)
 800a4d4:	a904      	add	r1, sp, #16
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	f000 f882 	bl	800a5e0 <_printf_i>
 800a4dc:	e7ea      	b.n	800a4b4 <_svfiprintf_r+0x1b0>
 800a4de:	bf00      	nop
 800a4e0:	0800b74c 	.word	0x0800b74c
 800a4e4:	0800b752 	.word	0x0800b752
 800a4e8:	0800b756 	.word	0x0800b756
 800a4ec:	00000000 	.word	0x00000000
 800a4f0:	0800a251 	.word	0x0800a251

0800a4f4 <_printf_common>:
 800a4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f8:	4691      	mov	r9, r2
 800a4fa:	461f      	mov	r7, r3
 800a4fc:	688a      	ldr	r2, [r1, #8]
 800a4fe:	690b      	ldr	r3, [r1, #16]
 800a500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a504:	4293      	cmp	r3, r2
 800a506:	bfb8      	it	lt
 800a508:	4613      	movlt	r3, r2
 800a50a:	f8c9 3000 	str.w	r3, [r9]
 800a50e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a512:	4606      	mov	r6, r0
 800a514:	460c      	mov	r4, r1
 800a516:	b112      	cbz	r2, 800a51e <_printf_common+0x2a>
 800a518:	3301      	adds	r3, #1
 800a51a:	f8c9 3000 	str.w	r3, [r9]
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	0699      	lsls	r1, r3, #26
 800a522:	bf42      	ittt	mi
 800a524:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a528:	3302      	addmi	r3, #2
 800a52a:	f8c9 3000 	strmi.w	r3, [r9]
 800a52e:	6825      	ldr	r5, [r4, #0]
 800a530:	f015 0506 	ands.w	r5, r5, #6
 800a534:	d107      	bne.n	800a546 <_printf_common+0x52>
 800a536:	f104 0a19 	add.w	sl, r4, #25
 800a53a:	68e3      	ldr	r3, [r4, #12]
 800a53c:	f8d9 2000 	ldr.w	r2, [r9]
 800a540:	1a9b      	subs	r3, r3, r2
 800a542:	42ab      	cmp	r3, r5
 800a544:	dc28      	bgt.n	800a598 <_printf_common+0xa4>
 800a546:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a54a:	6822      	ldr	r2, [r4, #0]
 800a54c:	3300      	adds	r3, #0
 800a54e:	bf18      	it	ne
 800a550:	2301      	movne	r3, #1
 800a552:	0692      	lsls	r2, r2, #26
 800a554:	d42d      	bmi.n	800a5b2 <_printf_common+0xbe>
 800a556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a55a:	4639      	mov	r1, r7
 800a55c:	4630      	mov	r0, r6
 800a55e:	47c0      	blx	r8
 800a560:	3001      	adds	r0, #1
 800a562:	d020      	beq.n	800a5a6 <_printf_common+0xb2>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	68e5      	ldr	r5, [r4, #12]
 800a568:	f8d9 2000 	ldr.w	r2, [r9]
 800a56c:	f003 0306 	and.w	r3, r3, #6
 800a570:	2b04      	cmp	r3, #4
 800a572:	bf08      	it	eq
 800a574:	1aad      	subeq	r5, r5, r2
 800a576:	68a3      	ldr	r3, [r4, #8]
 800a578:	6922      	ldr	r2, [r4, #16]
 800a57a:	bf0c      	ite	eq
 800a57c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a580:	2500      	movne	r5, #0
 800a582:	4293      	cmp	r3, r2
 800a584:	bfc4      	itt	gt
 800a586:	1a9b      	subgt	r3, r3, r2
 800a588:	18ed      	addgt	r5, r5, r3
 800a58a:	f04f 0900 	mov.w	r9, #0
 800a58e:	341a      	adds	r4, #26
 800a590:	454d      	cmp	r5, r9
 800a592:	d11a      	bne.n	800a5ca <_printf_common+0xd6>
 800a594:	2000      	movs	r0, #0
 800a596:	e008      	b.n	800a5aa <_printf_common+0xb6>
 800a598:	2301      	movs	r3, #1
 800a59a:	4652      	mov	r2, sl
 800a59c:	4639      	mov	r1, r7
 800a59e:	4630      	mov	r0, r6
 800a5a0:	47c0      	blx	r8
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	d103      	bne.n	800a5ae <_printf_common+0xba>
 800a5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ae:	3501      	adds	r5, #1
 800a5b0:	e7c3      	b.n	800a53a <_printf_common+0x46>
 800a5b2:	18e1      	adds	r1, r4, r3
 800a5b4:	1c5a      	adds	r2, r3, #1
 800a5b6:	2030      	movs	r0, #48	; 0x30
 800a5b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5bc:	4422      	add	r2, r4
 800a5be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5c6:	3302      	adds	r3, #2
 800a5c8:	e7c5      	b.n	800a556 <_printf_common+0x62>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	47c0      	blx	r8
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d0e6      	beq.n	800a5a6 <_printf_common+0xb2>
 800a5d8:	f109 0901 	add.w	r9, r9, #1
 800a5dc:	e7d8      	b.n	800a590 <_printf_common+0x9c>
	...

0800a5e0 <_printf_i>:
 800a5e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	7e09      	ldrb	r1, [r1, #24]
 800a5ec:	b085      	sub	sp, #20
 800a5ee:	296e      	cmp	r1, #110	; 0x6e
 800a5f0:	4617      	mov	r7, r2
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	4698      	mov	r8, r3
 800a5f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5f8:	f000 80b3 	beq.w	800a762 <_printf_i+0x182>
 800a5fc:	d822      	bhi.n	800a644 <_printf_i+0x64>
 800a5fe:	2963      	cmp	r1, #99	; 0x63
 800a600:	d036      	beq.n	800a670 <_printf_i+0x90>
 800a602:	d80a      	bhi.n	800a61a <_printf_i+0x3a>
 800a604:	2900      	cmp	r1, #0
 800a606:	f000 80b9 	beq.w	800a77c <_printf_i+0x19c>
 800a60a:	2958      	cmp	r1, #88	; 0x58
 800a60c:	f000 8083 	beq.w	800a716 <_printf_i+0x136>
 800a610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a614:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a618:	e032      	b.n	800a680 <_printf_i+0xa0>
 800a61a:	2964      	cmp	r1, #100	; 0x64
 800a61c:	d001      	beq.n	800a622 <_printf_i+0x42>
 800a61e:	2969      	cmp	r1, #105	; 0x69
 800a620:	d1f6      	bne.n	800a610 <_printf_i+0x30>
 800a622:	6820      	ldr	r0, [r4, #0]
 800a624:	6813      	ldr	r3, [r2, #0]
 800a626:	0605      	lsls	r5, r0, #24
 800a628:	f103 0104 	add.w	r1, r3, #4
 800a62c:	d52a      	bpl.n	800a684 <_printf_i+0xa4>
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6011      	str	r1, [r2, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	da03      	bge.n	800a63e <_printf_i+0x5e>
 800a636:	222d      	movs	r2, #45	; 0x2d
 800a638:	425b      	negs	r3, r3
 800a63a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a63e:	486f      	ldr	r0, [pc, #444]	; (800a7fc <_printf_i+0x21c>)
 800a640:	220a      	movs	r2, #10
 800a642:	e039      	b.n	800a6b8 <_printf_i+0xd8>
 800a644:	2973      	cmp	r1, #115	; 0x73
 800a646:	f000 809d 	beq.w	800a784 <_printf_i+0x1a4>
 800a64a:	d808      	bhi.n	800a65e <_printf_i+0x7e>
 800a64c:	296f      	cmp	r1, #111	; 0x6f
 800a64e:	d020      	beq.n	800a692 <_printf_i+0xb2>
 800a650:	2970      	cmp	r1, #112	; 0x70
 800a652:	d1dd      	bne.n	800a610 <_printf_i+0x30>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	f043 0320 	orr.w	r3, r3, #32
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	e003      	b.n	800a666 <_printf_i+0x86>
 800a65e:	2975      	cmp	r1, #117	; 0x75
 800a660:	d017      	beq.n	800a692 <_printf_i+0xb2>
 800a662:	2978      	cmp	r1, #120	; 0x78
 800a664:	d1d4      	bne.n	800a610 <_printf_i+0x30>
 800a666:	2378      	movs	r3, #120	; 0x78
 800a668:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a66c:	4864      	ldr	r0, [pc, #400]	; (800a800 <_printf_i+0x220>)
 800a66e:	e055      	b.n	800a71c <_printf_i+0x13c>
 800a670:	6813      	ldr	r3, [r2, #0]
 800a672:	1d19      	adds	r1, r3, #4
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	6011      	str	r1, [r2, #0]
 800a678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a67c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a680:	2301      	movs	r3, #1
 800a682:	e08c      	b.n	800a79e <_printf_i+0x1be>
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6011      	str	r1, [r2, #0]
 800a688:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a68c:	bf18      	it	ne
 800a68e:	b21b      	sxthne	r3, r3
 800a690:	e7cf      	b.n	800a632 <_printf_i+0x52>
 800a692:	6813      	ldr	r3, [r2, #0]
 800a694:	6825      	ldr	r5, [r4, #0]
 800a696:	1d18      	adds	r0, r3, #4
 800a698:	6010      	str	r0, [r2, #0]
 800a69a:	0628      	lsls	r0, r5, #24
 800a69c:	d501      	bpl.n	800a6a2 <_printf_i+0xc2>
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	e002      	b.n	800a6a8 <_printf_i+0xc8>
 800a6a2:	0668      	lsls	r0, r5, #25
 800a6a4:	d5fb      	bpl.n	800a69e <_printf_i+0xbe>
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	4854      	ldr	r0, [pc, #336]	; (800a7fc <_printf_i+0x21c>)
 800a6aa:	296f      	cmp	r1, #111	; 0x6f
 800a6ac:	bf14      	ite	ne
 800a6ae:	220a      	movne	r2, #10
 800a6b0:	2208      	moveq	r2, #8
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6b8:	6865      	ldr	r5, [r4, #4]
 800a6ba:	60a5      	str	r5, [r4, #8]
 800a6bc:	2d00      	cmp	r5, #0
 800a6be:	f2c0 8095 	blt.w	800a7ec <_printf_i+0x20c>
 800a6c2:	6821      	ldr	r1, [r4, #0]
 800a6c4:	f021 0104 	bic.w	r1, r1, #4
 800a6c8:	6021      	str	r1, [r4, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d13d      	bne.n	800a74a <_printf_i+0x16a>
 800a6ce:	2d00      	cmp	r5, #0
 800a6d0:	f040 808e 	bne.w	800a7f0 <_printf_i+0x210>
 800a6d4:	4665      	mov	r5, ip
 800a6d6:	2a08      	cmp	r2, #8
 800a6d8:	d10b      	bne.n	800a6f2 <_printf_i+0x112>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	07db      	lsls	r3, r3, #31
 800a6de:	d508      	bpl.n	800a6f2 <_printf_i+0x112>
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	bfde      	ittt	le
 800a6e8:	2330      	movle	r3, #48	; 0x30
 800a6ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6f2:	ebac 0305 	sub.w	r3, ip, r5
 800a6f6:	6123      	str	r3, [r4, #16]
 800a6f8:	f8cd 8000 	str.w	r8, [sp]
 800a6fc:	463b      	mov	r3, r7
 800a6fe:	aa03      	add	r2, sp, #12
 800a700:	4621      	mov	r1, r4
 800a702:	4630      	mov	r0, r6
 800a704:	f7ff fef6 	bl	800a4f4 <_printf_common>
 800a708:	3001      	adds	r0, #1
 800a70a:	d14d      	bne.n	800a7a8 <_printf_i+0x1c8>
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	b005      	add	sp, #20
 800a712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a716:	4839      	ldr	r0, [pc, #228]	; (800a7fc <_printf_i+0x21c>)
 800a718:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a71c:	6813      	ldr	r3, [r2, #0]
 800a71e:	6821      	ldr	r1, [r4, #0]
 800a720:	1d1d      	adds	r5, r3, #4
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6015      	str	r5, [r2, #0]
 800a726:	060a      	lsls	r2, r1, #24
 800a728:	d50b      	bpl.n	800a742 <_printf_i+0x162>
 800a72a:	07ca      	lsls	r2, r1, #31
 800a72c:	bf44      	itt	mi
 800a72e:	f041 0120 	orrmi.w	r1, r1, #32
 800a732:	6021      	strmi	r1, [r4, #0]
 800a734:	b91b      	cbnz	r3, 800a73e <_printf_i+0x15e>
 800a736:	6822      	ldr	r2, [r4, #0]
 800a738:	f022 0220 	bic.w	r2, r2, #32
 800a73c:	6022      	str	r2, [r4, #0]
 800a73e:	2210      	movs	r2, #16
 800a740:	e7b7      	b.n	800a6b2 <_printf_i+0xd2>
 800a742:	064d      	lsls	r5, r1, #25
 800a744:	bf48      	it	mi
 800a746:	b29b      	uxthmi	r3, r3
 800a748:	e7ef      	b.n	800a72a <_printf_i+0x14a>
 800a74a:	4665      	mov	r5, ip
 800a74c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a750:	fb02 3311 	mls	r3, r2, r1, r3
 800a754:	5cc3      	ldrb	r3, [r0, r3]
 800a756:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a75a:	460b      	mov	r3, r1
 800a75c:	2900      	cmp	r1, #0
 800a75e:	d1f5      	bne.n	800a74c <_printf_i+0x16c>
 800a760:	e7b9      	b.n	800a6d6 <_printf_i+0xf6>
 800a762:	6813      	ldr	r3, [r2, #0]
 800a764:	6825      	ldr	r5, [r4, #0]
 800a766:	6961      	ldr	r1, [r4, #20]
 800a768:	1d18      	adds	r0, r3, #4
 800a76a:	6010      	str	r0, [r2, #0]
 800a76c:	0628      	lsls	r0, r5, #24
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	d501      	bpl.n	800a776 <_printf_i+0x196>
 800a772:	6019      	str	r1, [r3, #0]
 800a774:	e002      	b.n	800a77c <_printf_i+0x19c>
 800a776:	066a      	lsls	r2, r5, #25
 800a778:	d5fb      	bpl.n	800a772 <_printf_i+0x192>
 800a77a:	8019      	strh	r1, [r3, #0]
 800a77c:	2300      	movs	r3, #0
 800a77e:	6123      	str	r3, [r4, #16]
 800a780:	4665      	mov	r5, ip
 800a782:	e7b9      	b.n	800a6f8 <_printf_i+0x118>
 800a784:	6813      	ldr	r3, [r2, #0]
 800a786:	1d19      	adds	r1, r3, #4
 800a788:	6011      	str	r1, [r2, #0]
 800a78a:	681d      	ldr	r5, [r3, #0]
 800a78c:	6862      	ldr	r2, [r4, #4]
 800a78e:	2100      	movs	r1, #0
 800a790:	4628      	mov	r0, r5
 800a792:	f7f5 fd2d 	bl	80001f0 <memchr>
 800a796:	b108      	cbz	r0, 800a79c <_printf_i+0x1bc>
 800a798:	1b40      	subs	r0, r0, r5
 800a79a:	6060      	str	r0, [r4, #4]
 800a79c:	6863      	ldr	r3, [r4, #4]
 800a79e:	6123      	str	r3, [r4, #16]
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7a6:	e7a7      	b.n	800a6f8 <_printf_i+0x118>
 800a7a8:	6923      	ldr	r3, [r4, #16]
 800a7aa:	462a      	mov	r2, r5
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	47c0      	blx	r8
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	d0aa      	beq.n	800a70c <_printf_i+0x12c>
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	079b      	lsls	r3, r3, #30
 800a7ba:	d413      	bmi.n	800a7e4 <_printf_i+0x204>
 800a7bc:	68e0      	ldr	r0, [r4, #12]
 800a7be:	9b03      	ldr	r3, [sp, #12]
 800a7c0:	4298      	cmp	r0, r3
 800a7c2:	bfb8      	it	lt
 800a7c4:	4618      	movlt	r0, r3
 800a7c6:	e7a3      	b.n	800a710 <_printf_i+0x130>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	464a      	mov	r2, r9
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	47c0      	blx	r8
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	d09a      	beq.n	800a70c <_printf_i+0x12c>
 800a7d6:	3501      	adds	r5, #1
 800a7d8:	68e3      	ldr	r3, [r4, #12]
 800a7da:	9a03      	ldr	r2, [sp, #12]
 800a7dc:	1a9b      	subs	r3, r3, r2
 800a7de:	42ab      	cmp	r3, r5
 800a7e0:	dcf2      	bgt.n	800a7c8 <_printf_i+0x1e8>
 800a7e2:	e7eb      	b.n	800a7bc <_printf_i+0x1dc>
 800a7e4:	2500      	movs	r5, #0
 800a7e6:	f104 0919 	add.w	r9, r4, #25
 800a7ea:	e7f5      	b.n	800a7d8 <_printf_i+0x1f8>
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1ac      	bne.n	800a74a <_printf_i+0x16a>
 800a7f0:	7803      	ldrb	r3, [r0, #0]
 800a7f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7fa:	e76c      	b.n	800a6d6 <_printf_i+0xf6>
 800a7fc:	0800b75d 	.word	0x0800b75d
 800a800:	0800b76e 	.word	0x0800b76e

0800a804 <memmove>:
 800a804:	4288      	cmp	r0, r1
 800a806:	b510      	push	{r4, lr}
 800a808:	eb01 0302 	add.w	r3, r1, r2
 800a80c:	d807      	bhi.n	800a81e <memmove+0x1a>
 800a80e:	1e42      	subs	r2, r0, #1
 800a810:	4299      	cmp	r1, r3
 800a812:	d00a      	beq.n	800a82a <memmove+0x26>
 800a814:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a818:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a81c:	e7f8      	b.n	800a810 <memmove+0xc>
 800a81e:	4283      	cmp	r3, r0
 800a820:	d9f5      	bls.n	800a80e <memmove+0xa>
 800a822:	1881      	adds	r1, r0, r2
 800a824:	1ad2      	subs	r2, r2, r3
 800a826:	42d3      	cmn	r3, r2
 800a828:	d100      	bne.n	800a82c <memmove+0x28>
 800a82a:	bd10      	pop	{r4, pc}
 800a82c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a830:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a834:	e7f7      	b.n	800a826 <memmove+0x22>

0800a836 <_realloc_r>:
 800a836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a838:	4607      	mov	r7, r0
 800a83a:	4614      	mov	r4, r2
 800a83c:	460e      	mov	r6, r1
 800a83e:	b921      	cbnz	r1, 800a84a <_realloc_r+0x14>
 800a840:	4611      	mov	r1, r2
 800a842:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a846:	f7ff bc77 	b.w	800a138 <_malloc_r>
 800a84a:	b922      	cbnz	r2, 800a856 <_realloc_r+0x20>
 800a84c:	f7ff fc26 	bl	800a09c <_free_r>
 800a850:	4625      	mov	r5, r4
 800a852:	4628      	mov	r0, r5
 800a854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a856:	f000 f814 	bl	800a882 <_malloc_usable_size_r>
 800a85a:	42a0      	cmp	r0, r4
 800a85c:	d20f      	bcs.n	800a87e <_realloc_r+0x48>
 800a85e:	4621      	mov	r1, r4
 800a860:	4638      	mov	r0, r7
 800a862:	f7ff fc69 	bl	800a138 <_malloc_r>
 800a866:	4605      	mov	r5, r0
 800a868:	2800      	cmp	r0, #0
 800a86a:	d0f2      	beq.n	800a852 <_realloc_r+0x1c>
 800a86c:	4631      	mov	r1, r6
 800a86e:	4622      	mov	r2, r4
 800a870:	f7ff fc00 	bl	800a074 <memcpy>
 800a874:	4631      	mov	r1, r6
 800a876:	4638      	mov	r0, r7
 800a878:	f7ff fc10 	bl	800a09c <_free_r>
 800a87c:	e7e9      	b.n	800a852 <_realloc_r+0x1c>
 800a87e:	4635      	mov	r5, r6
 800a880:	e7e7      	b.n	800a852 <_realloc_r+0x1c>

0800a882 <_malloc_usable_size_r>:
 800a882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a886:	1f18      	subs	r0, r3, #4
 800a888:	2b00      	cmp	r3, #0
 800a88a:	bfbc      	itt	lt
 800a88c:	580b      	ldrlt	r3, [r1, r0]
 800a88e:	18c0      	addlt	r0, r0, r3
 800a890:	4770      	bx	lr
	...

0800a894 <_init>:
 800a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a896:	bf00      	nop
 800a898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89a:	bc08      	pop	{r3}
 800a89c:	469e      	mov	lr, r3
 800a89e:	4770      	bx	lr

0800a8a0 <_fini>:
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	bf00      	nop
 800a8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a6:	bc08      	pop	{r3}
 800a8a8:	469e      	mov	lr, r3
 800a8aa:	4770      	bx	lr
