
SR_MHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007914  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  08007aac  08007aac  00017aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008880  08008880  000201c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008880  08008880  00018880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008888  08008888  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008888  08008888  00018888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  08008890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e04  200001c4  08008a54  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc8  08008a54  00020fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c301  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bd5  00000000  00000000  0003c4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  000400d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001420  00000000  00000000  000416a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a8e0  00000000  00000000  00042ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001451b  00000000  00000000  0005d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009300d  00000000  00000000  000718bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001048c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c34  00000000  00000000  00104944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001c4 	.word	0x200001c4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007a94 	.word	0x08007a94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001c8 	.word	0x200001c8
 80001d4:	08007a94 	.word	0x08007a94

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
 80004f2:	4b3e      	ldr	r3, [pc, #248]	; (80005ec <MX_GPIO_Init+0x114>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a3d      	ldr	r2, [pc, #244]	; (80005ec <MX_GPIO_Init+0x114>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b3b      	ldr	r3, [pc, #236]	; (80005ec <MX_GPIO_Init+0x114>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	4b37      	ldr	r3, [pc, #220]	; (80005ec <MX_GPIO_Init+0x114>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a36      	ldr	r2, [pc, #216]	; (80005ec <MX_GPIO_Init+0x114>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b34      	ldr	r3, [pc, #208]	; (80005ec <MX_GPIO_Init+0x114>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	4b30      	ldr	r3, [pc, #192]	; (80005ec <MX_GPIO_Init+0x114>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a2f      	ldr	r2, [pc, #188]	; (80005ec <MX_GPIO_Init+0x114>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <MX_GPIO_Init+0x114>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b29      	ldr	r3, [pc, #164]	; (80005ec <MX_GPIO_Init+0x114>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a28      	ldr	r2, [pc, #160]	; (80005ec <MX_GPIO_Init+0x114>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <MX_GPIO_Init+0x114>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000564:	4822      	ldr	r0, [pc, #136]	; (80005f0 <MX_GPIO_Init+0x118>)
 8000566:	f001 fad5 	bl	8001b14 <HAL_GPIO_WritePin>
                          |CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000570:	4820      	ldr	r0, [pc, #128]	; (80005f4 <MX_GPIO_Init+0x11c>)
 8000572:	f001 facf 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin;
 8000576:	231c      	movs	r3, #28
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800057a:	2300      	movs	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4819      	ldr	r0, [pc, #100]	; (80005f0 <MX_GPIO_Init+0x118>)
 800058a:	f001 f941 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800058e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000592:	617b      	str	r3, [r7, #20]
                          |CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	4812      	ldr	r0, [pc, #72]	; (80005f0 <MX_GPIO_Init+0x118>)
 80005a8:	f001 f932 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_BUT_Pin;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	480d      	ldr	r0, [pc, #52]	; (80005f4 <MX_GPIO_Init+0x11c>)
 80005c0:	f001 f926 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 80005c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_GPIO_Init+0x11c>)
 80005de:	f001 f917 	bl	8001810 <HAL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020400 	.word	0x40020400

080005f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2C1_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_I2C1_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_I2C1_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_I2C1_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_I2C1_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_I2C1_Init+0x50>)
 8000636:	f001 fa87 	bl	8001b48 <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f946 	bl	80008d0 <Error_Handler>
  }

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200005fc 	.word	0x200005fc
 800064c:	40005400 	.word	0x40005400
 8000650:	00061a80 	.word	0x00061a80

08000654 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a19      	ldr	r2, [pc, #100]	; (80006d8 <HAL_I2C_MspInit+0x84>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d12b      	bne.n	80006ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_I2C_MspInit+0x88>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <HAL_I2C_MspInit+0x88>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_I2C_MspInit+0x88>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000692:	23c0      	movs	r3, #192	; 0xc0
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000696:	2312      	movs	r3, #18
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800069a:	2301      	movs	r3, #1
 800069c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006a2:	2304      	movs	r3, #4
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <HAL_I2C_MspInit+0x8c>)
 80006ae:	f001 f8af 	bl	8001810 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c0:	6413      	str	r3, [r2, #64]	; 0x40
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40005400 	.word	0x40005400
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020400 	.word	0x40020400

080006e4 <OLED_page_test_sc>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void OLED_page_test_sc(){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af02      	add	r7, sp, #8
	// OLED screen test
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 fa68 	bl	8000bc0 <SSD1306_Fill>
	SSD1306_GotoXY (4,6); // goto 10, 10
 80006f0:	2106      	movs	r1, #6
 80006f2:	2004      	movs	r0, #4
 80006f4:	f000 fadc 	bl	8000cb0 <SSD1306_GotoXY>
	SSD1306_Puts ("--MHS--", &Font_11x18, 1); // print Hello
 80006f8:	2201      	movs	r2, #1
 80006fa:	4931      	ldr	r1, [pc, #196]	; (80007c0 <OLED_page_test_sc+0xdc>)
 80006fc:	4831      	ldr	r0, [pc, #196]	; (80007c4 <OLED_page_test_sc+0xe0>)
 80006fe:	f000 fb6d 	bl	8000ddc <SSD1306_Puts>
	SSD1306_GotoXY (4,25); // goto 10, 10
 8000702:	2119      	movs	r1, #25
 8000704:	2004      	movs	r0, #4
 8000706:	f000 fad3 	bl	8000cb0 <SSD1306_GotoXY>
	SSD1306_Puts ("PAGE", &Font_11x18, 1); // print Hello
 800070a:	2201      	movs	r2, #1
 800070c:	492c      	ldr	r1, [pc, #176]	; (80007c0 <OLED_page_test_sc+0xdc>)
 800070e:	482e      	ldr	r0, [pc, #184]	; (80007c8 <OLED_page_test_sc+0xe4>)
 8000710:	f000 fb64 	bl	8000ddc <SSD1306_Puts>
	SSD1306_GotoXY (4,44); // goto 10, 10
 8000714:	212c      	movs	r1, #44	; 0x2c
 8000716:	2004      	movs	r0, #4
 8000718:	f000 faca 	bl	8000cb0 <SSD1306_GotoXY>
	SSD1306_Puts ("NUMBER:", &Font_11x18, 1); // print Hello
 800071c:	2201      	movs	r2, #1
 800071e:	4928      	ldr	r1, [pc, #160]	; (80007c0 <OLED_page_test_sc+0xdc>)
 8000720:	482a      	ldr	r0, [pc, #168]	; (80007cc <OLED_page_test_sc+0xe8>)
 8000722:	f000 fb5b 	bl	8000ddc <SSD1306_Puts>
	SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000726:	2301      	movs	r3, #1
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	2101      	movs	r1, #1
 8000730:	2000      	movs	r0, #0
 8000732:	f000 fb78 	bl	8000e26 <SSD1306_DrawLine>
	SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000736:	2301      	movs	r3, #1
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fb70 	bl	8000e26 <SSD1306_DrawLine>
	SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000746:	2301      	movs	r3, #1
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2340      	movs	r3, #64	; 0x40
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	2100      	movs	r1, #0
 8000750:	2080      	movs	r0, #128	; 0x80
 8000752:	f000 fb68 	bl	8000e26 <SSD1306_DrawLine>
	SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000756:	2301      	movs	r3, #1
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2340      	movs	r3, #64	; 0x40
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fb60 	bl	8000e26 <SSD1306_DrawLine>
	SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 8000766:	2301      	movs	r3, #1
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	233e      	movs	r3, #62	; 0x3e
 800076c:	221b      	movs	r2, #27
 800076e:	2102      	movs	r1, #2
 8000770:	2064      	movs	r0, #100	; 0x64
 8000772:	f000 fc53 	bl	800101c <SSD1306_DrawRectangle>
	SSD1306_GotoXY (110,25); // goto 10, 10
 8000776:	2119      	movs	r1, #25
 8000778:	206e      	movs	r0, #110	; 0x6e
 800077a:	f000 fa99 	bl	8000cb0 <SSD1306_GotoXY>
	SSD1306_Putc ((char)(i+1+'0'), &Font_11x18, 1); // print Hello
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <OLED_page_test_sc+0xec>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	3331      	adds	r3, #49	; 0x31
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2201      	movs	r2, #1
 800078a:	490d      	ldr	r1, [pc, #52]	; (80007c0 <OLED_page_test_sc+0xdc>)
 800078c:	4618      	mov	r0, r3
 800078e:	f000 faa5 	bl	8000cdc <SSD1306_Putc>
	SSD1306_UpdateScreen(); // update screen
 8000792:	f000 f9e7 	bl	8000b64 <SSD1306_UpdateScreen>
	if(i==8)
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <OLED_page_test_sc+0xec>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b08      	cmp	r3, #8
 800079c:	d103      	bne.n	80007a6 <OLED_page_test_sc+0xc2>
		i=0;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <OLED_page_test_sc+0xec>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	e004      	b.n	80007b0 <OLED_page_test_sc+0xcc>
	else
		i++;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <OLED_page_test_sc+0xec>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <OLED_page_test_sc+0xec>)
 80007ae:	6013      	str	r3, [r2, #0]
	HAL_Delay(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f000 fef8 	bl	80015a8 <HAL_Delay>
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000
 80007c4:	08007aac 	.word	0x08007aac
 80007c8:	08007ab4 	.word	0x08007ab4
 80007cc:	08007abc 	.word	0x08007abc
 80007d0:	200001e0 	.word	0x200001e0

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f000 fe74 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f810 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f7ff fe7a 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007e4:	f7ff ff08 	bl	80005f8 <MX_I2C1_Init>
  MX_SPI3_Init();
 80007e8:	f000 f87a 	bl	80008e0 <MX_SPI3_Init>
  MX_TIM2_Init();
 80007ec:	f000 fda6 	bl	800133c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80007f0:	f006 fc40 	bl	8007074 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80007f4:	f000 f8f2 	bl	80009dc <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  OLED_page_test_sc();
 80007f8:	f7ff ff74 	bl	80006e4 <OLED_page_test_sc>
 80007fc:	e7fc      	b.n	80007f8 <main+0x24>
	...

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f007 f87e 	bl	8007910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <SystemClock_Config+0xc8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <SystemClock_Config+0xc8>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <SystemClock_Config+0xc8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <SystemClock_Config+0xcc>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a20      	ldr	r2, [pc, #128]	; (80008cc <SystemClock_Config+0xcc>)
 800084a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <SystemClock_Config+0xcc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000870:	2319      	movs	r3, #25
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000874:	23c0      	movs	r3, #192	; 0xc0
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f003 f837 	bl	80038f8 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000890:	f000 f81e 	bl	80008d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2103      	movs	r1, #3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fa91 	bl	8003dd8 <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008bc:	f000 f808 	bl	80008d0 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3750      	adds	r7, #80	; 0x50
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
	...

080008e0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_SPI3_Init+0x64>)
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <MX_SPI3_Init+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_SPI3_Init+0x64>)
 80008ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_SPI3_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_SPI3_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_SPI3_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_SPI3_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_SPI3_Init+0x64>)
 800090c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000910:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_SPI3_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_SPI3_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_SPI3_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_SPI3_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_SPI3_Init+0x64>)
 800092c:	220a      	movs	r2, #10
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_SPI3_Init+0x64>)
 8000932:	f003 fc09 	bl	8004148 <HAL_SPI_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800093c:	f7ff ffc8 	bl	80008d0 <Error_Handler>
  }

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000650 	.word	0x20000650
 8000948:	40003c00 	.word	0x40003c00

0800094c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_SPI_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12b      	bne.n	80009c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009a6:	2338      	movs	r3, #56	; 0x38
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b6:	2306      	movs	r3, #6
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <HAL_SPI_MspInit+0x8c>)
 80009c2:	f000 ff25 	bl	8001810 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40003c00 	.word	0x40003c00
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020400 	.word	0x40020400

080009dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80009e2:	f000 fb85 	bl	80010f0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80009e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80009ea:	2201      	movs	r2, #1
 80009ec:	2178      	movs	r1, #120	; 0x78
 80009ee:	485b      	ldr	r0, [pc, #364]	; (8000b5c <SSD1306_Init+0x180>)
 80009f0:	f001 fae0 	bl	8001fb4 <HAL_I2C_IsDeviceReady>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e0a9      	b.n	8000b52 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80009fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000a02:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a04:	e002      	b.n	8000a0c <SSD1306_Init+0x30>
		p--;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1f9      	bne.n	8000a06 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a12:	22ae      	movs	r2, #174	; 0xae
 8000a14:	2100      	movs	r1, #0
 8000a16:	2078      	movs	r0, #120	; 0x78
 8000a18:	f000 fbc6 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2078      	movs	r0, #120	; 0x78
 8000a22:	f000 fbc1 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a26:	2210      	movs	r2, #16
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2078      	movs	r0, #120	; 0x78
 8000a2c:	f000 fbbc 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a30:	22b0      	movs	r2, #176	; 0xb0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2078      	movs	r0, #120	; 0x78
 8000a36:	f000 fbb7 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a3a:	22c8      	movs	r2, #200	; 0xc8
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2078      	movs	r0, #120	; 0x78
 8000a40:	f000 fbb2 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2078      	movs	r0, #120	; 0x78
 8000a4a:	f000 fbad 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a4e:	2210      	movs	r2, #16
 8000a50:	2100      	movs	r1, #0
 8000a52:	2078      	movs	r0, #120	; 0x78
 8000a54:	f000 fba8 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a58:	2240      	movs	r2, #64	; 0x40
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2078      	movs	r0, #120	; 0x78
 8000a5e:	f000 fba3 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a62:	2281      	movs	r2, #129	; 0x81
 8000a64:	2100      	movs	r1, #0
 8000a66:	2078      	movs	r0, #120	; 0x78
 8000a68:	f000 fb9e 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a6c:	22ff      	movs	r2, #255	; 0xff
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2078      	movs	r0, #120	; 0x78
 8000a72:	f000 fb99 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a76:	22a1      	movs	r2, #161	; 0xa1
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2078      	movs	r0, #120	; 0x78
 8000a7c:	f000 fb94 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a80:	22a6      	movs	r2, #166	; 0xa6
 8000a82:	2100      	movs	r1, #0
 8000a84:	2078      	movs	r0, #120	; 0x78
 8000a86:	f000 fb8f 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000a8a:	22a8      	movs	r2, #168	; 0xa8
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2078      	movs	r0, #120	; 0x78
 8000a90:	f000 fb8a 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000a94:	223f      	movs	r2, #63	; 0x3f
 8000a96:	2100      	movs	r1, #0
 8000a98:	2078      	movs	r0, #120	; 0x78
 8000a9a:	f000 fb85 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a9e:	22a4      	movs	r2, #164	; 0xa4
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2078      	movs	r0, #120	; 0x78
 8000aa4:	f000 fb80 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000aa8:	22d3      	movs	r2, #211	; 0xd3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2078      	movs	r0, #120	; 0x78
 8000aae:	f000 fb7b 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2078      	movs	r0, #120	; 0x78
 8000ab8:	f000 fb76 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000abc:	22d5      	movs	r2, #213	; 0xd5
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2078      	movs	r0, #120	; 0x78
 8000ac2:	f000 fb71 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ac6:	22f0      	movs	r2, #240	; 0xf0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2078      	movs	r0, #120	; 0x78
 8000acc:	f000 fb6c 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000ad0:	22d9      	movs	r2, #217	; 0xd9
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2078      	movs	r0, #120	; 0x78
 8000ad6:	f000 fb67 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000ada:	2222      	movs	r2, #34	; 0x22
 8000adc:	2100      	movs	r1, #0
 8000ade:	2078      	movs	r0, #120	; 0x78
 8000ae0:	f000 fb62 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ae4:	22da      	movs	r2, #218	; 0xda
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2078      	movs	r0, #120	; 0x78
 8000aea:	f000 fb5d 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000aee:	2212      	movs	r2, #18
 8000af0:	2100      	movs	r1, #0
 8000af2:	2078      	movs	r0, #120	; 0x78
 8000af4:	f000 fb58 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000af8:	22db      	movs	r2, #219	; 0xdb
 8000afa:	2100      	movs	r1, #0
 8000afc:	2078      	movs	r0, #120	; 0x78
 8000afe:	f000 fb53 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000b02:	2220      	movs	r2, #32
 8000b04:	2100      	movs	r1, #0
 8000b06:	2078      	movs	r0, #120	; 0x78
 8000b08:	f000 fb4e 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b0c:	228d      	movs	r2, #141	; 0x8d
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2078      	movs	r0, #120	; 0x78
 8000b12:	f000 fb49 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b16:	2214      	movs	r2, #20
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2078      	movs	r0, #120	; 0x78
 8000b1c:	f000 fb44 	bl	80011a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b20:	22af      	movs	r2, #175	; 0xaf
 8000b22:	2100      	movs	r1, #0
 8000b24:	2078      	movs	r0, #120	; 0x78
 8000b26:	f000 fb3f 	bl	80011a8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b2a:	222e      	movs	r2, #46	; 0x2e
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2078      	movs	r0, #120	; 0x78
 8000b30:	f000 fb3a 	bl	80011a8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 f843 	bl	8000bc0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000b3a:	f000 f813 	bl	8000b64 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <SSD1306_Init+0x184>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <SSD1306_Init+0x184>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SSD1306_Init+0x184>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000b50:	2301      	movs	r3, #1
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200005fc 	.word	0x200005fc
 8000b60:	200005e4 	.word	0x200005e4

08000b64 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	e01d      	b.n	8000bac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	3b50      	subs	r3, #80	; 0x50
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2078      	movs	r0, #120	; 0x78
 8000b7c:	f000 fb14 	bl	80011a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2078      	movs	r0, #120	; 0x78
 8000b86:	f000 fb0f 	bl	80011a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000b8a:	2210      	movs	r2, #16
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2078      	movs	r0, #120	; 0x78
 8000b90:	f000 fb0a 	bl	80011a8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	01db      	lsls	r3, r3, #7
 8000b98:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <SSD1306_UpdateScreen+0x58>)
 8000b9a:	441a      	add	r2, r3
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	2140      	movs	r1, #64	; 0x40
 8000ba0:	2078      	movs	r0, #120	; 0x78
 8000ba2:	f000 fab9 	bl	8001118 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b07      	cmp	r3, #7
 8000bb0:	d9de      	bls.n	8000b70 <SSD1306_UpdateScreen+0xc>
	}
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001e4 	.word	0x200001e4

08000bc0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <SSD1306_Fill+0x14>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e000      	b.n	8000bd6 <SSD1306_Fill+0x16>
 8000bd4:	23ff      	movs	r3, #255	; 0xff
 8000bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <SSD1306_Fill+0x2c>)
 8000bde:	f006 fe97 	bl	8007910 <memset>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200001e4 	.word	0x200001e4

08000bf0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	70fb      	strb	r3, [r7, #3]
	if (
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	2b7f      	cmp	r3, #127	; 0x7f
 8000c06:	d848      	bhi.n	8000c9a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000c08:	88bb      	ldrh	r3, [r7, #4]
 8000c0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c0c:	d845      	bhi.n	8000c9a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <SSD1306_DrawPixel+0xb8>)
 8000c10:	791b      	ldrb	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d006      	beq.n	8000c24 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bf0c      	ite	eq
 8000c1c:	2301      	moveq	r3, #1
 8000c1e:	2300      	movne	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d11a      	bne.n	8000c60 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c2a:	88fa      	ldrh	r2, [r7, #6]
 8000c2c:	88bb      	ldrh	r3, [r7, #4]
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	b298      	uxth	r0, r3
 8000c32:	4603      	mov	r3, r0
 8000c34:	01db      	lsls	r3, r3, #7
 8000c36:	4413      	add	r3, r2
 8000c38:	4a1c      	ldr	r2, [pc, #112]	; (8000cac <SSD1306_DrawPixel+0xbc>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	b25a      	sxtb	r2, r3
 8000c3e:	88bb      	ldrh	r3, [r7, #4]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	2101      	movs	r1, #1
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b259      	sxtb	r1, r3
 8000c50:	88fa      	ldrh	r2, [r7, #6]
 8000c52:	4603      	mov	r3, r0
 8000c54:	01db      	lsls	r3, r3, #7
 8000c56:	4413      	add	r3, r2
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	4a14      	ldr	r2, [pc, #80]	; (8000cac <SSD1306_DrawPixel+0xbc>)
 8000c5c:	54d1      	strb	r1, [r2, r3]
 8000c5e:	e01d      	b.n	8000c9c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c60:	88fa      	ldrh	r2, [r7, #6]
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	08db      	lsrs	r3, r3, #3
 8000c66:	b298      	uxth	r0, r3
 8000c68:	4603      	mov	r3, r0
 8000c6a:	01db      	lsls	r3, r3, #7
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <SSD1306_DrawPixel+0xbc>)
 8000c70:	5cd3      	ldrb	r3, [r2, r3]
 8000c72:	b25a      	sxtb	r2, r3
 8000c74:	88bb      	ldrh	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	4013      	ands	r3, r2
 8000c88:	b259      	sxtb	r1, r3
 8000c8a:	88fa      	ldrh	r2, [r7, #6]
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	01db      	lsls	r3, r3, #7
 8000c90:	4413      	add	r3, r2
 8000c92:	b2c9      	uxtb	r1, r1
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SSD1306_DrawPixel+0xbc>)
 8000c96:	54d1      	strb	r1, [r2, r3]
 8000c98:	e000      	b.n	8000c9c <SSD1306_DrawPixel+0xac>
		return;
 8000c9a:	bf00      	nop
	}
}
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200005e4 	.word	0x200005e4
 8000cac:	200001e4 	.word	0x200001e4

08000cb0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	460a      	mov	r2, r1
 8000cba:	80fb      	strh	r3, [r7, #6]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000cc0:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <SSD1306_GotoXY+0x28>)
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <SSD1306_GotoXY+0x28>)
 8000cc8:	88bb      	ldrh	r3, [r7, #4]
 8000cca:	8053      	strh	r3, [r2, #2]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	200005e4 	.word	0x200005e4

08000cdc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000cec:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <SSD1306_Putc+0xfc>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
	if (
 8000cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cfa:	dc07      	bgt.n	8000d0c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000cfc:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <SSD1306_Putc+0xfc>)
 8000cfe:	885b      	ldrh	r3, [r3, #2]
 8000d00:	461a      	mov	r2, r3
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	785b      	ldrb	r3, [r3, #1]
 8000d06:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d08:	2b3f      	cmp	r3, #63	; 0x3f
 8000d0a:	dd01      	ble.n	8000d10 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e05e      	b.n	8000dce <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e04b      	b.n	8000dae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	3b20      	subs	r3, #32
 8000d1e:	6839      	ldr	r1, [r7, #0]
 8000d20:	7849      	ldrb	r1, [r1, #1]
 8000d22:	fb01 f303 	mul.w	r3, r1, r3
 8000d26:	4619      	mov	r1, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	440b      	add	r3, r1
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	e030      	b.n	8000d9c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d010      	beq.n	8000d6c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <SSD1306_Putc+0xfc>)
 8000d4c:	881a      	ldrh	r2, [r3, #0]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	4413      	add	r3, r2
 8000d54:	b298      	uxth	r0, r3
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <SSD1306_Putc+0xfc>)
 8000d58:	885a      	ldrh	r2, [r3, #2]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	4413      	add	r3, r2
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	79ba      	ldrb	r2, [r7, #6]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f7ff ff43 	bl	8000bf0 <SSD1306_DrawPixel>
 8000d6a:	e014      	b.n	8000d96 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <SSD1306_Putc+0xfc>)
 8000d6e:	881a      	ldrh	r2, [r3, #0]
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b298      	uxth	r0, r3
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <SSD1306_Putc+0xfc>)
 8000d7a:	885a      	ldrh	r2, [r3, #2]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	b299      	uxth	r1, r3
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf0c      	ite	eq
 8000d8a:	2301      	moveq	r3, #1
 8000d8c:	2300      	movne	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	f7ff ff2d 	bl	8000bf0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d3c8      	bcc.n	8000d3a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3301      	adds	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	785b      	ldrb	r3, [r3, #1]
 8000db2:	461a      	mov	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d3ad      	bcc.n	8000d16 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <SSD1306_Putc+0xfc>)
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <SSD1306_Putc+0xfc>)
 8000dca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200005e4 	.word	0x200005e4

08000ddc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	4613      	mov	r3, r2
 8000de8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000dea:	e012      	b.n	8000e12 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	79fa      	ldrb	r2, [r7, #7]
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff71 	bl	8000cdc <SSD1306_Putc>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d002      	beq.n	8000e0c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	e008      	b.n	8000e1e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1e8      	bne.n	8000dec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	781b      	ldrb	r3, [r3, #0]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000e26:	b590      	push	{r4, r7, lr}
 8000e28:	b087      	sub	sp, #28
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	4608      	mov	r0, r1
 8000e30:	4611      	mov	r1, r2
 8000e32:	461a      	mov	r2, r3
 8000e34:	4623      	mov	r3, r4
 8000e36:	80fb      	strh	r3, [r7, #6]
 8000e38:	4603      	mov	r3, r0
 8000e3a:	80bb      	strh	r3, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	2b7f      	cmp	r3, #127	; 0x7f
 8000e48:	d901      	bls.n	8000e4e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000e4a:	237f      	movs	r3, #127	; 0x7f
 8000e4c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	2b7f      	cmp	r3, #127	; 0x7f
 8000e52:	d901      	bls.n	8000e58 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000e54:	237f      	movs	r3, #127	; 0x7f
 8000e56:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e5c:	d901      	bls.n	8000e62 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000e5e:	233f      	movs	r3, #63	; 0x3f
 8000e60:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000e62:	883b      	ldrh	r3, [r7, #0]
 8000e64:	2b3f      	cmp	r3, #63	; 0x3f
 8000e66:	d901      	bls.n	8000e6c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000e68:	233f      	movs	r3, #63	; 0x3f
 8000e6a:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000e6c:	88fa      	ldrh	r2, [r7, #6]
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d205      	bcs.n	8000e80 <SSD1306_DrawLine+0x5a>
 8000e74:	887a      	ldrh	r2, [r7, #2]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	e004      	b.n	8000e8a <SSD1306_DrawLine+0x64>
 8000e80:	88fa      	ldrh	r2, [r7, #6]
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000e8c:	88ba      	ldrh	r2, [r7, #4]
 8000e8e:	883b      	ldrh	r3, [r7, #0]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d205      	bcs.n	8000ea0 <SSD1306_DrawLine+0x7a>
 8000e94:	883a      	ldrh	r2, [r7, #0]
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	e004      	b.n	8000eaa <SSD1306_DrawLine+0x84>
 8000ea0:	88ba      	ldrh	r2, [r7, #4]
 8000ea2:	883b      	ldrh	r3, [r7, #0]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d201      	bcs.n	8000eb8 <SSD1306_DrawLine+0x92>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e001      	b.n	8000ebc <SSD1306_DrawLine+0x96>
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8000ebe:	88ba      	ldrh	r2, [r7, #4]
 8000ec0:	883b      	ldrh	r3, [r7, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d201      	bcs.n	8000eca <SSD1306_DrawLine+0xa4>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e001      	b.n	8000ece <SSD1306_DrawLine+0xa8>
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000ed0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000ed4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dd06      	ble.n	8000eea <SSD1306_DrawLine+0xc4>
 8000edc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ee0:	0fda      	lsrs	r2, r3, #31
 8000ee2:	4413      	add	r3, r2
 8000ee4:	105b      	asrs	r3, r3, #1
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	e006      	b.n	8000ef8 <SSD1306_DrawLine+0xd2>
 8000eea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000eee:	425b      	negs	r3, r3
 8000ef0:	0fda      	lsrs	r2, r3, #31
 8000ef2:	4413      	add	r3, r2
 8000ef4:	105b      	asrs	r3, r3, #1
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000efa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d129      	bne.n	8000f56 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000f02:	883a      	ldrh	r2, [r7, #0]
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d205      	bcs.n	8000f16 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000f0a:	883b      	ldrh	r3, [r7, #0]
 8000f0c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000f12:	893b      	ldrh	r3, [r7, #8]
 8000f14:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d205      	bcs.n	8000f2a <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000f26:	893b      	ldrh	r3, [r7, #8]
 8000f28:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	82bb      	strh	r3, [r7, #20]
 8000f2e:	e00c      	b.n	8000f4a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000f30:	8ab9      	ldrh	r1, [r7, #20]
 8000f32:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fe59 	bl	8000bf0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000f3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	3301      	adds	r3, #1
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	82bb      	strh	r3, [r7, #20]
 8000f4a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000f4e:	883b      	ldrh	r3, [r7, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dded      	ble.n	8000f30 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8000f54:	e05f      	b.n	8001016 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8000f56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d129      	bne.n	8000fb2 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000f5e:	883a      	ldrh	r2, [r7, #0]
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d205      	bcs.n	8000f72 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000f66:	883b      	ldrh	r3, [r7, #0]
 8000f68:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000f6a:	88bb      	ldrh	r3, [r7, #4]
 8000f6c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000f6e:	893b      	ldrh	r3, [r7, #8]
 8000f70:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d205      	bcs.n	8000f86 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000f82:	893b      	ldrh	r3, [r7, #8]
 8000f84:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	82bb      	strh	r3, [r7, #20]
 8000f8a:	e00c      	b.n	8000fa6 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000f8c:	8abb      	ldrh	r3, [r7, #20]
 8000f8e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f92:	88b9      	ldrh	r1, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fe2b 	bl	8000bf0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000f9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	82bb      	strh	r3, [r7, #20]
 8000fa6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dded      	ble.n	8000f8c <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8000fb0:	e031      	b.n	8001016 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000fb2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000fb6:	88b9      	ldrh	r1, [r7, #4]
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fe18 	bl	8000bf0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000fc0:	88fa      	ldrh	r2, [r7, #6]
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d103      	bne.n	8000fd0 <SSD1306_DrawLine+0x1aa>
 8000fc8:	88ba      	ldrh	r2, [r7, #4]
 8000fca:	883b      	ldrh	r3, [r7, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d021      	beq.n	8001014 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8000fd0:	8afb      	ldrh	r3, [r7, #22]
 8000fd2:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000fd4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000fd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fdc:	425b      	negs	r3, r3
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	dd08      	ble.n	8000ff4 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000fe2:	8afa      	ldrh	r2, [r7, #22]
 8000fe4:	8a3b      	ldrh	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000fec:	89fa      	ldrh	r2, [r7, #14]
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8000ff4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ff8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dad8      	bge.n	8000fb2 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001000:	8afa      	ldrh	r2, [r7, #22]
 8001002:	8a7b      	ldrh	r3, [r7, #18]
 8001004:	4413      	add	r3, r2
 8001006:	b29b      	uxth	r3, r3
 8001008:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800100a:	89ba      	ldrh	r2, [r7, #12]
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001012:	e7ce      	b.n	8000fb2 <SSD1306_DrawLine+0x18c>
			break;
 8001014:	bf00      	nop
		} 
	}
}
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}

0800101c <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b085      	sub	sp, #20
 8001020:	af02      	add	r7, sp, #8
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	4611      	mov	r1, r2
 8001028:	461a      	mov	r2, r3
 800102a:	4623      	mov	r3, r4
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	4603      	mov	r3, r0
 8001030:	80bb      	strh	r3, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	807b      	strh	r3, [r7, #2]
 8001036:	4613      	mov	r3, r2
 8001038:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	2b7f      	cmp	r3, #127	; 0x7f
 800103e:	d853      	bhi.n	80010e8 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	2b3f      	cmp	r3, #63	; 0x3f
 8001044:	d850      	bhi.n	80010e8 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	4413      	add	r3, r2
 800104c:	2b7f      	cmp	r3, #127	; 0x7f
 800104e:	dd03      	ble.n	8001058 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001056:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001058:	88ba      	ldrh	r2, [r7, #4]
 800105a:	883b      	ldrh	r3, [r7, #0]
 800105c:	4413      	add	r3, r2
 800105e:	2b3f      	cmp	r3, #63	; 0x3f
 8001060:	dd03      	ble.n	800106a <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001068:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 800106a:	88fa      	ldrh	r2, [r7, #6]
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	4413      	add	r3, r2
 8001070:	b29a      	uxth	r2, r3
 8001072:	88bc      	ldrh	r4, [r7, #4]
 8001074:	88b9      	ldrh	r1, [r7, #4]
 8001076:	88f8      	ldrh	r0, [r7, #6]
 8001078:	7e3b      	ldrb	r3, [r7, #24]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	4623      	mov	r3, r4
 800107e:	f7ff fed2 	bl	8000e26 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001082:	88ba      	ldrh	r2, [r7, #4]
 8001084:	883b      	ldrh	r3, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	b299      	uxth	r1, r3
 800108a:	88fa      	ldrh	r2, [r7, #6]
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	4413      	add	r3, r2
 8001090:	b29c      	uxth	r4, r3
 8001092:	88ba      	ldrh	r2, [r7, #4]
 8001094:	883b      	ldrh	r3, [r7, #0]
 8001096:	4413      	add	r3, r2
 8001098:	b29a      	uxth	r2, r3
 800109a:	88f8      	ldrh	r0, [r7, #6]
 800109c:	7e3b      	ldrb	r3, [r7, #24]
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	4613      	mov	r3, r2
 80010a2:	4622      	mov	r2, r4
 80010a4:	f7ff febf 	bl	8000e26 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80010a8:	88ba      	ldrh	r2, [r7, #4]
 80010aa:	883b      	ldrh	r3, [r7, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	b29c      	uxth	r4, r3
 80010b0:	88fa      	ldrh	r2, [r7, #6]
 80010b2:	88b9      	ldrh	r1, [r7, #4]
 80010b4:	88f8      	ldrh	r0, [r7, #6]
 80010b6:	7e3b      	ldrb	r3, [r7, #24]
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	4623      	mov	r3, r4
 80010bc:	f7ff feb3 	bl	8000e26 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80010c0:	88fa      	ldrh	r2, [r7, #6]
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	4413      	add	r3, r2
 80010c6:	b298      	uxth	r0, r3
 80010c8:	88fa      	ldrh	r2, [r7, #6]
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	4413      	add	r3, r2
 80010ce:	b29c      	uxth	r4, r3
 80010d0:	88ba      	ldrh	r2, [r7, #4]
 80010d2:	883b      	ldrh	r3, [r7, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	88b9      	ldrh	r1, [r7, #4]
 80010da:	7e3b      	ldrb	r3, [r7, #24]
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	4613      	mov	r3, r2
 80010e0:	4622      	mov	r2, r4
 80010e2:	f7ff fea0 	bl	8000e26 <SSD1306_DrawLine>
 80010e6:	e000      	b.n	80010ea <SSD1306_DrawRectangle+0xce>
		return;
 80010e8:	bf00      	nop
}
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}

080010f0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <ssd1306_I2C_Init+0x24>)
 80010f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010fa:	e002      	b.n	8001102 <ssd1306_I2C_Init+0x12>
		p--;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f9      	bne.n	80010fc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	0003d090 	.word	0x0003d090

08001118 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b0c7      	sub	sp, #284	; 0x11c
 800111c:	af02      	add	r7, sp, #8
 800111e:	4604      	mov	r4, r0
 8001120:	4608      	mov	r0, r1
 8001122:	4639      	mov	r1, r7
 8001124:	600a      	str	r2, [r1, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	4622      	mov	r2, r4
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	1dbb      	adds	r3, r7, #6
 8001130:	4602      	mov	r2, r0
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	460a      	mov	r2, r1
 8001138:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	1dba      	adds	r2, r7, #6
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001144:	2300      	movs	r3, #0
 8001146:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800114a:	e010      	b.n	800116e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800114c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001150:	463a      	mov	r2, r7
 8001152:	6812      	ldr	r2, [r2, #0]
 8001154:	441a      	add	r2, r3
 8001156:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800115a:	3301      	adds	r3, #1
 800115c:	7811      	ldrb	r1, [r2, #0]
 800115e:	f107 020c 	add.w	r2, r7, #12
 8001162:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001164:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001168:	3301      	adds	r3, #1
 800116a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800116e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001172:	b29b      	uxth	r3, r3
 8001174:	1d3a      	adds	r2, r7, #4
 8001176:	8812      	ldrh	r2, [r2, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8e7      	bhi.n	800114c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b299      	uxth	r1, r3
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b298      	uxth	r0, r3
 800118a:	f107 020c 	add.w	r2, r7, #12
 800118e:	230a      	movs	r3, #10
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	4603      	mov	r3, r0
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <ssd1306_I2C_WriteMulti+0x8c>)
 8001196:	f000 fe0f 	bl	8001db8 <HAL_I2C_Master_Transmit>
}
 800119a:	bf00      	nop
 800119c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}
 80011a4:	200005fc 	.word	0x200005fc

080011a8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	460b      	mov	r3, r1
 80011b4:	71bb      	strb	r3, [r7, #6]
 80011b6:	4613      	mov	r3, r2
 80011b8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	b299      	uxth	r1, r3
 80011c6:	f107 020c 	add.w	r2, r7, #12
 80011ca:	230a      	movs	r3, #10
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2302      	movs	r3, #2
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <ssd1306_I2C_Write+0x38>)
 80011d2:	f000 fdf1 	bl	8001db8 <HAL_I2C_Master_Transmit>
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200005fc 	.word	0x200005fc

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_MspInit+0x4c>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_MspInit+0x4c>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 f96e 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <OTG_FS_IRQHandler+0x10>)
 8001296:	f001 fb14 	bl	80028c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000bbc 	.word	0x20000bbc

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f006 fae2 	bl	800789c <__errno>
 80012d8:	4602      	mov	r2, r0
 80012da:	230c      	movs	r3, #12
 80012dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20020000 	.word	0x20020000
 8001304:	00000400 	.word	0x00000400
 8001308:	200005ec 	.word	0x200005ec
 800130c:	20000fc8 	.word	0x20000fc8

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <SystemInit+0x28>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a07      	ldr	r2, [pc, #28]	; (8001338 <SystemInit+0x28>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SystemInit+0x28>)
 8001326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800132a:	609a      	str	r2, [r3, #8]
#endif
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	; 0x30
 8001340:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	2224      	movs	r2, #36	; 0x24
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f006 fae0 	bl	8007910 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <MX_TIM2_Init+0xa4>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_TIM2_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_TIM2_Init+0xa4>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_TIM2_Init+0xa4>)
 800136e:	f04f 32ff 	mov.w	r2, #4294967295
 8001372:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_TIM2_Init+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_TIM2_Init+0xa4>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001380:	2303      	movs	r3, #3
 8001382:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001388:	2301      	movs	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001390:	230a      	movs	r3, #10
 8001392:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001398:	2301      	movs	r3, #1
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80013a0:	230a      	movs	r3, #10
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <MX_TIM2_Init+0xa4>)
 80013ac:	f002 ff30 	bl	8004210 <HAL_TIM_Encoder_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013b6:	f7ff fa8b 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_TIM2_Init+0xa4>)
 80013c8:	f003 f834 	bl	8004434 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80013d2:	f7ff fa7d 	bl	80008d0 <Error_Handler>
  }

}
 80013d6:	bf00      	nop
 80013d8:	3730      	adds	r7, #48	; 0x30
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200006a8 	.word	0x200006a8

080013e4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001404:	d12b      	bne.n	800145e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_TIM_Encoder_MspInit+0x84>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_TIM_Encoder_MspInit+0x84>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_TIM_Encoder_MspInit+0x84>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_TIM_Encoder_MspInit+0x84>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <HAL_TIM_Encoder_MspInit+0x84>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_TIM_Encoder_MspInit+0x84>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800143e:	2303      	movs	r3, #3
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800144e:	2301      	movs	r3, #1
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <HAL_TIM_Encoder_MspInit+0x88>)
 800145a:	f000 f9d9 	bl	8001810 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001474:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001476:	e003      	b.n	8001480 <LoopCopyDataInit>

08001478 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800147a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800147c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800147e:	3104      	adds	r1, #4

08001480 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001484:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001486:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001488:	d3f6      	bcc.n	8001478 <CopyDataInit>
  ldr  r2, =_sbss
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800148c:	e002      	b.n	8001494 <LoopFillZerobss>

0800148e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800148e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001490:	f842 3b04 	str.w	r3, [r2], #4

08001494 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001496:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001498:	d3f9      	bcc.n	800148e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800149a:	f7ff ff39 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149e:	f006 fa03 	bl	80078a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a2:	f7ff f997 	bl	80007d4 <main>
  bx  lr    
 80014a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014ac:	08008890 	.word	0x08008890
  ldr  r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014b4:	200001c4 	.word	0x200001c4
  ldr  r2, =_sbss
 80014b8:	200001c4 	.word	0x200001c4
  ldr  r3, = _ebss
 80014bc:	20000fc8 	.word	0x20000fc8

080014c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_Init+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_Init+0x40>)
 80014ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_Init+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_Init+0x40>)
 80014da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_Init+0x40>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_Init+0x40>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 f94d 	bl	800178c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 f808 	bl	8001508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f8:	f7ff fe74 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023c00 	.word	0x40023c00

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x54>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x58>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f965 	bl	80017f6 <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00e      	b.n	8001554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d80a      	bhi.n	8001552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f92d 	bl	80017a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_InitTick+0x5c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000008 	.word	0x20000008
 8001560:	20000010 	.word	0x20000010
 8001564:	2000000c 	.word	0x2000000c

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000010 	.word	0x20000010
 800158c:	200006e8 	.word	0x200006e8

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200006e8 	.word	0x200006e8

080015a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff ffee 	bl	8001590 <HAL_GetTick>
 80015b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c0:	d005      	beq.n	80015ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_Delay+0x40>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ce:	bf00      	nop
 80015d0:	f7ff ffde 	bl	8001590 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8f7      	bhi.n	80015d0 <HAL_Delay+0x28>
  {
  }
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000010 	.word	0x20000010

080015ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161e:	4a04      	ldr	r2, [pc, #16]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	60d3      	str	r3, [r2, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <__NVIC_GetPriorityGrouping+0x18>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 0307 	and.w	r3, r3, #7
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db0b      	blt.n	800167a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	f003 021f 	and.w	r2, r3, #31
 8001668:	4907      	ldr	r1, [pc, #28]	; (8001688 <__NVIC_EnableIRQ+0x38>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2001      	movs	r0, #1
 8001672:	fa00 f202 	lsl.w	r2, r0, r2
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100

0800168c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	db0a      	blt.n	80016b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	490c      	ldr	r1, [pc, #48]	; (80016d8 <__NVIC_SetPriority+0x4c>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	0112      	lsls	r2, r2, #4
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b4:	e00a      	b.n	80016cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <__NVIC_SetPriority+0x50>)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	3b04      	subs	r3, #4
 80016c4:	0112      	lsls	r2, r2, #4
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	440b      	add	r3, r1
 80016ca:	761a      	strb	r2, [r3, #24]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f1c3 0307 	rsb	r3, r3, #7
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	bf28      	it	cs
 80016fe:	2304      	movcs	r3, #4
 8001700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3304      	adds	r3, #4
 8001706:	2b06      	cmp	r3, #6
 8001708:	d902      	bls.n	8001710 <NVIC_EncodePriority+0x30>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3b03      	subs	r3, #3
 800170e:	e000      	b.n	8001712 <NVIC_EncodePriority+0x32>
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	f04f 32ff 	mov.w	r2, #4294967295
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	401a      	ands	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001728:	f04f 31ff 	mov.w	r1, #4294967295
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43d9      	mvns	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	4313      	orrs	r3, r2
         );
}
 800173a:	4618      	mov	r0, r3
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001758:	d301      	bcc.n	800175e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175a:	2301      	movs	r3, #1
 800175c:	e00f      	b.n	800177e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <SysTick_Config+0x40>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001766:	210f      	movs	r1, #15
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f7ff ff8e 	bl	800168c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <SysTick_Config+0x40>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SysTick_Config+0x40>)
 8001778:	2207      	movs	r2, #7
 800177a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	e000e010 	.word	0xe000e010

0800178c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ff29 	bl	80015ec <__NVIC_SetPriorityGrouping>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b4:	f7ff ff3e 	bl	8001634 <__NVIC_GetPriorityGrouping>
 80017b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	6978      	ldr	r0, [r7, #20]
 80017c0:	f7ff ff8e 	bl	80016e0 <NVIC_EncodePriority>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff5d 	bl	800168c <__NVIC_SetPriority>
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff31 	bl	8001650 <__NVIC_EnableIRQ>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ffa2 	bl	8001748 <SysTick_Config>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	e159      	b.n	8001ae0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800182c:	2201      	movs	r2, #1
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	429a      	cmp	r2, r3
 8001846:	f040 8148 	bne.w	8001ada <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d00b      	beq.n	800186a <HAL_GPIO_Init+0x5a>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d007      	beq.n	800186a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800185e:	2b11      	cmp	r3, #17
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b12      	cmp	r3, #18
 8001868:	d130      	bne.n	80018cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 0201 	and.w	r2, r3, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0xfc>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b12      	cmp	r3, #18
 800190a:	d123      	bne.n	8001954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	08da      	lsrs	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3208      	adds	r2, #8
 800194e:	69b9      	ldr	r1, [r7, #24]
 8001950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0203 	and.w	r2, r3, #3
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a2 	beq.w	8001ada <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <HAL_GPIO_Init+0x2e4>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	4a55      	ldr	r2, [pc, #340]	; (8001af4 <HAL_GPIO_Init+0x2e4>)
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
 80019a6:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_GPIO_Init+0x2e4>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019b2:	4a51      	ldr	r2, [pc, #324]	; (8001af8 <HAL_GPIO_Init+0x2e8>)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	220f      	movs	r2, #15
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a48      	ldr	r2, [pc, #288]	; (8001afc <HAL_GPIO_Init+0x2ec>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0x202>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a47      	ldr	r2, [pc, #284]	; (8001b00 <HAL_GPIO_Init+0x2f0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0x1fe>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a46      	ldr	r2, [pc, #280]	; (8001b04 <HAL_GPIO_Init+0x2f4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00d      	beq.n	8001a0a <HAL_GPIO_Init+0x1fa>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a45      	ldr	r2, [pc, #276]	; (8001b08 <HAL_GPIO_Init+0x2f8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x1f6>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a44      	ldr	r2, [pc, #272]	; (8001b0c <HAL_GPIO_Init+0x2fc>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_GPIO_Init+0x1f2>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e008      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a02:	2307      	movs	r3, #7
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a06:	2303      	movs	r3, #3
 8001a08:	e004      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e002      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a12:	2300      	movs	r3, #0
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f002 0203 	and.w	r2, r2, #3
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	4093      	lsls	r3, r2
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a24:	4934      	ldr	r1, [pc, #208]	; (8001af8 <HAL_GPIO_Init+0x2e8>)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <HAL_GPIO_Init+0x300>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a56:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <HAL_GPIO_Init+0x300>)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <HAL_GPIO_Init+0x300>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a80:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <HAL_GPIO_Init+0x300>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_GPIO_Init+0x300>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aaa:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_GPIO_Init+0x300>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_GPIO_Init+0x300>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_GPIO_Init+0x300>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	2b0f      	cmp	r3, #15
 8001ae4:	f67f aea2 	bls.w	800182c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3724      	adds	r7, #36	; 0x24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40013c00 	.word	0x40013c00

08001b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
 8001b20:	4613      	mov	r3, r2
 8001b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b30:	e003      	b.n	8001b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	041a      	lsls	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	619a      	str	r2, [r3, #24]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e11f      	b.n	8001d9a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7fe fd70 	bl	8000654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bac:	f002 fab8 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8001bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4a7b      	ldr	r2, [pc, #492]	; (8001da4 <HAL_I2C_Init+0x25c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d807      	bhi.n	8001bcc <HAL_I2C_Init+0x84>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_I2C_Init+0x260>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e006      	b.n	8001bda <HAL_I2C_Init+0x92>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a77      	ldr	r2, [pc, #476]	; (8001dac <HAL_I2C_Init+0x264>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	bf94      	ite	ls
 8001bd4:	2301      	movls	r3, #1
 8001bd6:	2300      	movhi	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0db      	b.n	8001d9a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4a72      	ldr	r2, [pc, #456]	; (8001db0 <HAL_I2C_Init+0x268>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0c9b      	lsrs	r3, r3, #18
 8001bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a64      	ldr	r2, [pc, #400]	; (8001da4 <HAL_I2C_Init+0x25c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d802      	bhi.n	8001c1c <HAL_I2C_Init+0xd4>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	e009      	b.n	8001c30 <HAL_I2C_Init+0xe8>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	4a63      	ldr	r2, [pc, #396]	; (8001db4 <HAL_I2C_Init+0x26c>)
 8001c28:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	3301      	adds	r3, #1
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4956      	ldr	r1, [pc, #344]	; (8001da4 <HAL_I2C_Init+0x25c>)
 8001c4c:	428b      	cmp	r3, r1
 8001c4e:	d80d      	bhi.n	8001c6c <HAL_I2C_Init+0x124>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1e59      	subs	r1, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	bf38      	it	cc
 8001c68:	2304      	movcc	r3, #4
 8001c6a:	e04f      	b.n	8001d0c <HAL_I2C_Init+0x1c4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d111      	bne.n	8001c98 <HAL_I2C_Init+0x150>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1e58      	subs	r0, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	e012      	b.n	8001cbe <HAL_I2C_Init+0x176>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	0099      	lsls	r1, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Init+0x17e>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e022      	b.n	8001d0c <HAL_I2C_Init+0x1c4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10e      	bne.n	8001cec <HAL_I2C_Init+0x1a4>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1e58      	subs	r0, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6859      	ldr	r1, [r3, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	440b      	add	r3, r1
 8001cdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cea:	e00f      	b.n	8001d0c <HAL_I2C_Init+0x1c4>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1e58      	subs	r0, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	0099      	lsls	r1, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	6809      	ldr	r1, [r1, #0]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6911      	ldr	r1, [r2, #16]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68d2      	ldr	r2, [r2, #12]
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	000186a0 	.word	0x000186a0
 8001da8:	001e847f 	.word	0x001e847f
 8001dac:	003d08ff 	.word	0x003d08ff
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	10624dd3 	.word	0x10624dd3

08001db8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	817b      	strh	r3, [r7, #10]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff fbe0 	bl	8001590 <HAL_GetTick>
 8001dd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	f040 80e0 	bne.w	8001fa0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2319      	movs	r3, #25
 8001de6:	2201      	movs	r2, #1
 8001de8:	4970      	ldr	r1, [pc, #448]	; (8001fac <HAL_I2C_Master_Transmit+0x1f4>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fa92 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
 8001df8:	e0d3      	b.n	8001fa2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_I2C_Master_Transmit+0x50>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e0cc      	b.n	8001fa2 <HAL_I2C_Master_Transmit+0x1ea>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d007      	beq.n	8001e2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2221      	movs	r2, #33	; 0x21
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2210      	movs	r2, #16
 8001e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	893a      	ldrh	r2, [r7, #8]
 8001e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4a50      	ldr	r2, [pc, #320]	; (8001fb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e70:	8979      	ldrh	r1, [r7, #10]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	6a3a      	ldr	r2, [r7, #32]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f9ca 	bl	8002210 <I2C_MasterRequestWrite>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e08d      	b.n	8001fa2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e9c:	e066      	b.n	8001f6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	6a39      	ldr	r1, [r7, #32]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fb0c 	bl	80024c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d107      	bne.n	8001ec6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e06b      	b.n	8001fa2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d11b      	bne.n	8001f40 <HAL_I2C_Master_Transmit+0x188>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d017      	beq.n	8001f40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	6a39      	ldr	r1, [r7, #32]
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 fafc 	bl	8002542 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00d      	beq.n	8001f6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d107      	bne.n	8001f68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e01a      	b.n	8001fa2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d194      	bne.n	8001e9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	00100002 	.word	0x00100002
 8001fb0:	ffff0000 	.word	0xffff0000

08001fb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff fae4 	bl	8001590 <HAL_GetTick>
 8001fc8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	f040 8111 	bne.w	80021fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2319      	movs	r3, #25
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4988      	ldr	r1, [pc, #544]	; (8002208 <HAL_I2C_IsDeviceReady+0x254>)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f994 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e104      	b.n	8002200 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_I2C_IsDeviceReady+0x50>
 8002000:	2302      	movs	r3, #2
 8002002:	e0fd      	b.n	8002200 <HAL_I2C_IsDeviceReady+0x24c>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d007      	beq.n	800202a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002038:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2224      	movs	r2, #36	; 0x24
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4a70      	ldr	r2, [pc, #448]	; (800220c <HAL_I2C_IsDeviceReady+0x258>)
 800204c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f952 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00d      	beq.n	8002092 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002084:	d103      	bne.n	800208e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e0b6      	b.n	8002200 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002092:	897b      	ldrh	r3, [r7, #10]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80020a2:	f7ff fa75 	bl	8001590 <HAL_GetTick>
 80020a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020cc:	bf0c      	ite	eq
 80020ce:	2301      	moveq	r3, #1
 80020d0:	2300      	movne	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020d6:	e025      	b.n	8002124 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020d8:	f7ff fa5a 	bl	8001590 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d302      	bcc.n	80020ee <HAL_I2C_IsDeviceReady+0x13a>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	22a0      	movs	r2, #160	; 0xa0
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b02      	cmp	r3, #2
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2ba0      	cmp	r3, #160	; 0xa0
 800212e:	d005      	beq.n	800213c <HAL_I2C_IsDeviceReady+0x188>
 8002130:	7dfb      	ldrb	r3, [r7, #23]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_I2C_IsDeviceReady+0x188>
 8002136:	7dbb      	ldrb	r3, [r7, #22]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0cd      	beq.n	80020d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b02      	cmp	r3, #2
 8002150:	d129      	bne.n	80021a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002160:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2319      	movs	r3, #25
 800217e:	2201      	movs	r2, #1
 8002180:	4921      	ldr	r1, [pc, #132]	; (8002208 <HAL_I2C_IsDeviceReady+0x254>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f8c6 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e036      	b.n	8002200 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e02c      	b.n	8002200 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2319      	movs	r3, #25
 80021c6:	2201      	movs	r2, #1
 80021c8:	490f      	ldr	r1, [pc, #60]	; (8002208 <HAL_I2C_IsDeviceReady+0x254>)
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f8a2 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e012      	b.n	8002200 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	3301      	adds	r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	f4ff af32 	bcc.w	800204e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80021fe:	2302      	movs	r3, #2
  }
}
 8002200:	4618      	mov	r0, r3
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	00100002 	.word	0x00100002
 800220c:	ffff0000 	.word	0xffff0000

08002210 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	460b      	mov	r3, r1
 800221e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b08      	cmp	r3, #8
 800222a:	d006      	beq.n	800223a <I2C_MasterRequestWrite+0x2a>
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d003      	beq.n	800223a <I2C_MasterRequestWrite+0x2a>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002238:	d108      	bne.n	800224c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e00b      	b.n	8002264 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	2b12      	cmp	r3, #18
 8002252:	d107      	bne.n	8002264 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002262:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f84f 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00d      	beq.n	8002298 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800228a:	d103      	bne.n	8002294 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e035      	b.n	8002304 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022a0:	d108      	bne.n	80022b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022a2:	897b      	ldrh	r3, [r7, #10]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	e01b      	b.n	80022ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022b4:	897b      	ldrh	r3, [r7, #10]
 80022b6:	11db      	asrs	r3, r3, #7
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f003 0306 	and.w	r3, r3, #6
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f063 030f 	orn	r3, r3, #15
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	490e      	ldr	r1, [pc, #56]	; (800230c <I2C_MasterRequestWrite+0xfc>)
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f875 	bl	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e010      	b.n	8002304 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022e2:	897b      	ldrh	r3, [r7, #10]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <I2C_MasterRequestWrite+0x100>)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f865 	bl	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	00010008 	.word	0x00010008
 8002310:	00010002 	.word	0x00010002

08002314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002324:	e025      	b.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d021      	beq.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232e:	f7ff f92f 	bl	8001590 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d302      	bcc.n	8002344 <I2C_WaitOnFlagUntilTimeout+0x30>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d116      	bne.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f043 0220 	orr.w	r2, r3, #32
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e023      	b.n	80023ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10d      	bne.n	8002398 <I2C_WaitOnFlagUntilTimeout+0x84>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4013      	ands	r3, r2
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	e00c      	b.n	80023b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4013      	ands	r3, r2
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	bf0c      	ite	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	2300      	movne	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d0b6      	beq.n	8002326 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023d0:	e051      	b.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e0:	d123      	bne.n	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f043 0204 	orr.w	r2, r3, #4
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e046      	b.n	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d021      	beq.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7ff f8ad 	bl	8001590 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d116      	bne.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f043 0220 	orr.w	r2, r3, #32
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e020      	b.n	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d10c      	bne.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4013      	ands	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	e00b      	b.n	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	43da      	mvns	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4013      	ands	r3, r2
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf14      	ite	ne
 80024ac:	2301      	movne	r3, #1
 80024ae:	2300      	moveq	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d18d      	bne.n	80023d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024cc:	e02d      	b.n	800252a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f878 	bl	80025c4 <I2C_IsAcknowledgeFailed>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e02d      	b.n	800253a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d021      	beq.n	800252a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e6:	f7ff f853 	bl	8001590 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d302      	bcc.n	80024fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d116      	bne.n	800252a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e007      	b.n	800253a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	2b80      	cmp	r3, #128	; 0x80
 8002536:	d1ca      	bne.n	80024ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800254e:	e02d      	b.n	80025ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f837 	bl	80025c4 <I2C_IsAcknowledgeFailed>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e02d      	b.n	80025bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002566:	d021      	beq.n	80025ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002568:	f7ff f812 	bl	8001590 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	429a      	cmp	r2, r3
 8002576:	d302      	bcc.n	800257e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d116      	bne.n	80025ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f043 0220 	orr.w	r2, r3, #32
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e007      	b.n	80025bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d1ca      	bne.n	8002550 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025da:	d11b      	bne.n	8002614 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f043 0204 	orr.w	r2, r3, #4
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002622:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002624:	b08f      	sub	sp, #60	; 0x3c
 8002626:	af0a      	add	r7, sp, #40	; 0x28
 8002628:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e10f      	b.n	8002854 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f004 fe44 	bl	80072dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2203      	movs	r2, #3
 8002658:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f002 f861 	bl	800473a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	687e      	ldr	r6, [r7, #4]
 8002680:	466d      	mov	r5, sp
 8002682:	f106 0410 	add.w	r4, r6, #16
 8002686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800268a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800268c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800268e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002692:	e885 0003 	stmia.w	r5, {r0, r1}
 8002696:	1d33      	adds	r3, r6, #4
 8002698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800269a:	6838      	ldr	r0, [r7, #0]
 800269c:	f001 ff38 	bl	8004510 <USB_CoreInit>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0d0      	b.n	8002854 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 f84f 	bl	800475c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e04a      	b.n	800275a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	333d      	adds	r3, #61	; 0x3d
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	333c      	adds	r3, #60	; 0x3c
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	b298      	uxth	r0, r3
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	3342      	adds	r3, #66	; 0x42
 8002700:	4602      	mov	r2, r0
 8002702:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	333f      	adds	r3, #63	; 0x3f
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	3344      	adds	r3, #68	; 0x44
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3348      	adds	r3, #72	; 0x48
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	3350      	adds	r3, #80	; 0x50
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	3301      	adds	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	429a      	cmp	r2, r3
 8002762:	d3af      	bcc.n	80026c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002764:	2300      	movs	r3, #0
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e044      	b.n	80027f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027d8:	7bfa      	ldrb	r2, [r7, #15]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	3301      	adds	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d3b5      	bcc.n	800276a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	687e      	ldr	r6, [r7, #4]
 8002806:	466d      	mov	r5, sp
 8002808:	f106 0410 	add.w	r4, r6, #16
 800280c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002814:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002818:	e885 0003 	stmia.w	r5, {r0, r1}
 800281c:	1d33      	adds	r3, r6, #4
 800281e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002820:	6838      	ldr	r0, [r7, #0]
 8002822:	f001 ffc5 	bl	80047b0 <USB_DevInit>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e00d      	b.n	8002854 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f003 f80d 	bl	800586c <USB_DevDisconnect>

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800285c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_PCD_Start+0x1c>
 8002874:	2302      	movs	r3, #2
 8002876:	e020      	b.n	80028ba <HAL_PCD_Start+0x5e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	2b01      	cmp	r3, #1
 8002886:	d109      	bne.n	800289c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800288c:	2b01      	cmp	r3, #1
 800288e:	d005      	beq.n	800289c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 ff39 	bl	8004718 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 ffbd 	bl	800582a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028c2:	b590      	push	{r4, r7, lr}
 80028c4:	b08d      	sub	sp, #52	; 0x34
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 f87b 	bl	80059d4 <USB_GetMode>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 839d 	bne.w	8003020 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f002 ffdf 	bl	80058ae <USB_ReadInterrupts>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8393 	beq.w	800301e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 ffd6 	bl	80058ae <USB_ReadInterrupts>
 8002902:	4603      	mov	r3, r0
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b02      	cmp	r3, #2
 800290a:	d107      	bne.n	800291c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f002 0202 	and.w	r2, r2, #2
 800291a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f002 ffc4 	bl	80058ae <USB_ReadInterrupts>
 8002926:	4603      	mov	r3, r0
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b10      	cmp	r3, #16
 800292e:	d161      	bne.n	80029f4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0210 	bic.w	r2, r2, #16
 800293e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f003 020f 	and.w	r2, r3, #15
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	3304      	adds	r3, #4
 800295e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	0c5b      	lsrs	r3, r3, #17
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	2b02      	cmp	r3, #2
 800296a:	d124      	bne.n	80029b6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d035      	beq.n	80029e4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002986:	b29b      	uxth	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	6a38      	ldr	r0, [r7, #32]
 800298c:	f002 fe2a 	bl	80055e4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800299c:	441a      	add	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ae:	441a      	add	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	619a      	str	r2, [r3, #24]
 80029b4:	e016      	b.n	80029e4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	0c5b      	lsrs	r3, r3, #17
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d110      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029c8:	2208      	movs	r2, #8
 80029ca:	4619      	mov	r1, r3
 80029cc:	6a38      	ldr	r0, [r7, #32]
 80029ce:	f002 fe09 	bl	80055e4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029de:	441a      	add	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0210 	orr.w	r2, r2, #16
 80029f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f002 ff58 	bl	80058ae <USB_ReadInterrupts>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a08:	d16e      	bne.n	8002ae8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f002 ff5e 	bl	80058d4 <USB_ReadDevAllOutEpInterrupt>
 8002a18:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a1a:	e062      	b.n	8002ae2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d057      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 ff83 	bl	800593c <USB_ReadDevOutEPInterrupt>
 8002a36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00c      	beq.n	8002a5c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2301      	movs	r3, #1
 8002a52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fd98 	bl	800358c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00c      	beq.n	8002a80 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a72:	461a      	mov	r2, r3
 8002a74:	2308      	movs	r3, #8
 8002a76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fe92 	bl	80037a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a96:	461a      	mov	r2, r3
 8002a98:	2310      	movs	r3, #16
 8002a9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	3301      	adds	r3, #1
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d199      	bne.n	8002a1c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f002 fede 	bl	80058ae <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002afc:	f040 80c0 	bne.w	8002c80 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f002 feff 	bl	8005908 <USB_ReadDevAllInEpInterrupt>
 8002b0a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b10:	e0b2      	b.n	8002c78 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80a7 	beq.w	8002c6c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f002 ff25 	bl	8005978 <USB_ReadDevInEPInterrupt>
 8002b2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d057      	beq.n	8002bea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	2201      	movs	r2, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69f9      	ldr	r1, [r7, #28]
 8002b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d132      	bne.n	8002bde <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	3348      	adds	r3, #72	; 0x48
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4403      	add	r3, r0
 8002b98:	3344      	adds	r3, #68	; 0x44
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4419      	add	r1, r3
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4403      	add	r3, r0
 8002bac:	3348      	adds	r3, #72	; 0x48
 8002bae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d113      	bne.n	8002bde <HAL_PCD_IRQHandler+0x31c>
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3350      	adds	r3, #80	; 0x50
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d108      	bne.n	8002bde <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2101      	movs	r1, #1
 8002bda:	f002 ff2d 	bl	8005a38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f004 fbfa 	bl	80073de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c00:	461a      	mov	r2, r3
 8002c02:	2308      	movs	r3, #8
 8002c04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2310      	movs	r3, #16
 8002c20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2340      	movs	r3, #64	; 0x40
 8002c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c54:	461a      	mov	r2, r3
 8002c56:	2302      	movs	r3, #2
 8002c58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fc03 	bl	8003472 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	3301      	adds	r3, #1
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f47f af49 	bne.w	8002b12 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f002 fe12 	bl	80058ae <USB_ReadInterrupts>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c94:	d122      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d108      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fe0e 	bl	80038e0 <HAL_PCDEx_LPM_Callback>
 8002cc4:	e002      	b.n	8002ccc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f004 fbf6 	bl	80074b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002cda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 fde4 	bl	80058ae <USB_ReadInterrupts>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf0:	d112      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f004 fbb2 	bl	800746c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d16:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 fdc6 	bl	80058ae <USB_ReadInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2c:	f040 80c7 	bne.w	8002ebe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2110      	movs	r1, #16
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fe94 	bl	8004a78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d54:	e056      	b.n	8002e04 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d62:	461a      	mov	r2, r3
 8002d64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7a:	0151      	lsls	r1, r2, #5
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	440a      	add	r2, r1
 8002d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d88:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9a:	0151      	lsls	r1, r2, #5
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	440a      	add	r2, r1
 8002da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002da8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db6:	461a      	mov	r2, r3
 8002db8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dbc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dce:	0151      	lsls	r1, r2, #5
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	440a      	add	r2, r1
 8002dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ddc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dee:	0151      	lsls	r1, r2, #5
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	440a      	add	r2, r1
 8002df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002df8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002dfc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	3301      	adds	r3, #1
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d3a3      	bcc.n	8002d56 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e1c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e3a:	f043 030b 	orr.w	r3, r3, #11
 8002e3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e50:	f043 030b 	orr.w	r3, r3, #11
 8002e54:	6453      	str	r3, [r2, #68]	; 0x44
 8002e56:	e015      	b.n	8002e84 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e6a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e6e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e7e:	f043 030b 	orr.w	r3, r3, #11
 8002e82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f002 fdc5 	bl	8005a38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f002 fcf3 	bl	80058ae <USB_ReadInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	d124      	bne.n	8002f1e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 fd89 	bl	80059f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 fe29 	bl	8004b3a <USB_GetDevSpeed>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681c      	ldr	r4, [r3, #0]
 8002ef4:	f001 f908 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	4620      	mov	r0, r4
 8002f04:	f001 fb66 	bl	80045d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f004 fa90 	bl	800742e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 fcc3 	bl	80058ae <USB_ReadInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d10a      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f004 fa6d 	bl	8007412 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f002 0208 	and.w	r2, r2, #8
 8002f46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f002 fcae 	bl	80058ae <USB_ReadInterrupts>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f5c:	d10f      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	4619      	mov	r1, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f004 fac5 	bl	80074f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 fc93 	bl	80058ae <USB_ReadInterrupts>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f92:	d10f      	bne.n	8002fb4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f004 fa98 	bl	80074d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f002 fc78 	bl	80058ae <USB_ReadInterrupts>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f004 faa6 	bl	800751c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 fc62 	bl	80058ae <USB_ReadInterrupts>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d115      	bne.n	8003020 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f004 fa96 	bl	8007538 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	e000      	b.n	8003020 <HAL_PCD_IRQHandler+0x75e>
      return;
 800301e:	bf00      	nop
    }
  }
}
 8003020:	3734      	adds	r7, #52	; 0x34
 8003022:	46bd      	mov	sp, r7
 8003024:	bd90      	pop	{r4, r7, pc}

08003026 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_PCD_SetAddress+0x1a>
 800303c:	2302      	movs	r3, #2
 800303e:	e013      	b.n	8003068 <HAL_PCD_SetAddress+0x42>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f002 fbc0 	bl	80057de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	4608      	mov	r0, r1
 800307a:	4611      	mov	r1, r2
 800307c:	461a      	mov	r2, r3
 800307e:	4603      	mov	r3, r0
 8003080:	70fb      	strb	r3, [r7, #3]
 8003082:	460b      	mov	r3, r1
 8003084:	803b      	strh	r3, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800308e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003092:	2b00      	cmp	r3, #0
 8003094:	da0f      	bge.n	80030b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 020f 	and.w	r2, r3, #15
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	3338      	adds	r3, #56	; 0x38
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	3304      	adds	r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	705a      	strb	r2, [r3, #1]
 80030b4:	e00f      	b.n	80030d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030e2:	883a      	ldrh	r2, [r7, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	78ba      	ldrb	r2, [r7, #2]
 80030ec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	785b      	ldrb	r3, [r3, #1]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d004      	beq.n	8003100 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003100:	78bb      	ldrb	r3, [r7, #2]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d102      	bne.n	800310c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_PCD_EP_Open+0xaa>
 8003116:	2302      	movs	r3, #2
 8003118:	e00e      	b.n	8003138 <HAL_PCD_EP_Open+0xc8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68f9      	ldr	r1, [r7, #12]
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fd2b 	bl	8004b84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003136:	7afb      	ldrb	r3, [r7, #11]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800314c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003150:	2b00      	cmp	r3, #0
 8003152:	da0f      	bge.n	8003174 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3338      	adds	r3, #56	; 0x38
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	705a      	strb	r2, [r3, #1]
 8003172:	e00f      	b.n	8003194 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	f003 020f 	and.w	r2, r3, #15
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	3304      	adds	r3, #4
 800318c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_PCD_EP_Close+0x6e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e00e      	b.n	80031cc <HAL_PCD_EP_Close+0x8c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68f9      	ldr	r1, [r7, #12]
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 fd69 	bl	8004c94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	460b      	mov	r3, r1
 80031e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	7afb      	ldrb	r3, [r7, #11]
 80031e6:	f003 020f 	and.w	r2, r3, #15
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	3304      	adds	r3, #4
 80031fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2200      	movs	r2, #0
 8003214:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003216:	7afb      	ldrb	r3, [r7, #11]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	b2da      	uxtb	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d102      	bne.n	8003230 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	6979      	ldr	r1, [r7, #20]
 8003248:	f002 f844 	bl	80052d4 <USB_EP0StartXfer>
 800324c:	e008      	b.n	8003260 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	6979      	ldr	r1, [r7, #20]
 800325c:	f001 fdf6 	bl	8004e4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	460b      	mov	r3, r1
 8003278:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327a:	7afb      	ldrb	r3, [r7, #11]
 800327c:	f003 020f 	and.w	r2, r3, #15
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	3338      	adds	r3, #56	; 0x38
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4413      	add	r3, r2
 800328e:	3304      	adds	r3, #4
 8003290:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2201      	movs	r2, #1
 80032a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032aa:	7afb      	ldrb	r3, [r7, #11]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d102      	bne.n	80032c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032c4:	7afb      	ldrb	r3, [r7, #11]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	6979      	ldr	r1, [r7, #20]
 80032dc:	f001 fffa 	bl	80052d4 <USB_EP0StartXfer>
 80032e0:	e008      	b.n	80032f4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	6979      	ldr	r1, [r7, #20]
 80032f0:	f001 fdac 	bl	8004e4c <USB_EPStartXfer>
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	f003 020f 	and.w	r2, r3, #15
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	d901      	bls.n	800331c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e050      	b.n	80033be <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800331c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003320:	2b00      	cmp	r3, #0
 8003322:	da0f      	bge.n	8003344 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	f003 020f 	and.w	r2, r3, #15
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	3338      	adds	r3, #56	; 0x38
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	3304      	adds	r3, #4
 800333a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	705a      	strb	r2, [r3, #1]
 8003342:	e00d      	b.n	8003360 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	3304      	adds	r3, #4
 8003358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	b2da      	uxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_PCD_EP_SetStall+0x82>
 800337c:	2302      	movs	r3, #2
 800337e:	e01e      	b.n	80033be <HAL_PCD_EP_SetStall+0xc0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68f9      	ldr	r1, [r7, #12]
 800338e:	4618      	mov	r0, r3
 8003390:	f002 f951 	bl	8005636 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	b2d9      	uxtb	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033ae:	461a      	mov	r2, r3
 80033b0:	f002 fb42 	bl	8005a38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	f003 020f 	and.w	r2, r3, #15
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d901      	bls.n	80033e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e042      	b.n	800346a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	da0f      	bge.n	800340c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	f003 020f 	and.w	r2, r3, #15
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	3338      	adds	r3, #56	; 0x38
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	705a      	strb	r2, [r3, #1]
 800340a:	e00f      	b.n	800342c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	f003 020f 	and.w	r2, r3, #15
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	3304      	adds	r3, #4
 8003424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_PCD_EP_ClrStall+0x86>
 8003448:	2302      	movs	r3, #2
 800344a:	e00e      	b.n	800346a <HAL_PCD_EP_ClrStall+0xa4>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68f9      	ldr	r1, [r7, #12]
 800345a:	4618      	mov	r0, r3
 800345c:	f002 f959 	bl	8005712 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b08a      	sub	sp, #40	; 0x28
 8003476:	af02      	add	r7, sp, #8
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	3338      	adds	r3, #56	; 0x38
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	3304      	adds	r3, #4
 8003498:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d901      	bls.n	80034aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e06c      	b.n	8003584 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d902      	bls.n	80034c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3303      	adds	r3, #3
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034ce:	e02b      	b.n	8003528 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d902      	bls.n	80034ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	3303      	adds	r3, #3
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	68d9      	ldr	r1, [r3, #12]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003504:	b2db      	uxtb	r3, r3
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	4603      	mov	r3, r0
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f002 f835 	bl	800557a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	441a      	add	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	441a      	add	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	b29b      	uxth	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	429a      	cmp	r2, r3
 800353c:	d809      	bhi.n	8003552 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003546:	429a      	cmp	r2, r3
 8003548:	d203      	bcs.n	8003552 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1be      	bne.n	80034d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	429a      	cmp	r2, r3
 800355c:	d811      	bhi.n	8003582 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	2201      	movs	r2, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	43db      	mvns	r3, r3
 8003578:	6939      	ldr	r1, [r7, #16]
 800357a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800357e:	4013      	ands	r3, r2
 8003580:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3720      	adds	r7, #32
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	333c      	adds	r3, #60	; 0x3c
 80035a4:	3304      	adds	r3, #4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	f040 80a0 	bne.w	8003704 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d015      	beq.n	80035fa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a72      	ldr	r2, [pc, #456]	; (800379c <PCD_EP_OutXfrComplete_int+0x210>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	f240 80dd 	bls.w	8003792 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 80d7 	beq.w	8003792 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f0:	461a      	mov	r2, r3
 80035f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035f6:	6093      	str	r3, [r2, #8]
 80035f8:	e0cb      	b.n	8003792 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003610:	461a      	mov	r2, r3
 8003612:	2320      	movs	r3, #32
 8003614:	6093      	str	r3, [r2, #8]
 8003616:	e0bc      	b.n	8003792 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 80b7 	bne.w	8003792 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a5d      	ldr	r2, [pc, #372]	; (800379c <PCD_EP_OutXfrComplete_int+0x210>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d90f      	bls.n	800364c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003642:	461a      	mov	r2, r3
 8003644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003648:	6093      	str	r3, [r2, #8]
 800364a:	e0a2      	b.n	8003792 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800365e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	0159      	lsls	r1, r3, #5
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	440b      	add	r3, r1
 8003668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003672:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4403      	add	r3, r0
 8003682:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003686:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4403      	add	r3, r0
 80036aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4419      	add	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4403      	add	r3, r0
 80036c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036c4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d114      	bne.n	80036f6 <PCD_EP_OutXfrComplete_int+0x16a>
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d108      	bne.n	80036f6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036ee:	461a      	mov	r2, r3
 80036f0:	2101      	movs	r1, #1
 80036f2:	f002 f9a1 	bl	8005a38 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f003 fe53 	bl	80073a8 <HAL_PCD_DataOutStageCallback>
 8003702:	e046      	b.n	8003792 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d124      	bne.n	8003756 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003722:	461a      	mov	r2, r3
 8003724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003728:	6093      	str	r3, [r2, #8]
 800372a:	e032      	b.n	8003792 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003742:	461a      	mov	r2, r3
 8003744:	2320      	movs	r3, #32
 8003746:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f003 fe2a 	bl	80073a8 <HAL_PCD_DataOutStageCallback>
 8003754:	e01d      	b.n	8003792 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d114      	bne.n	8003786 <PCD_EP_OutXfrComplete_int+0x1fa>
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d108      	bne.n	8003786 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800377e:	461a      	mov	r2, r3
 8003780:	2100      	movs	r1, #0
 8003782:	f002 f959 	bl	8005a38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f003 fe0b 	bl	80073a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	4f54300a 	.word	0x4f54300a
 80037a0:	4f54310a 	.word	0x4f54310a

080037a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	333c      	adds	r3, #60	; 0x3c
 80037bc:	3304      	adds	r3, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <PCD_EP_OutSetupPacket_int+0x88>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d90e      	bls.n	80037f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f0:	461a      	mov	r2, r3
 80037f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f003 fdc3 	bl	8007384 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a0a      	ldr	r2, [pc, #40]	; (800382c <PCD_EP_OutSetupPacket_int+0x88>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d90c      	bls.n	8003820 <PCD_EP_OutSetupPacket_int+0x7c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d108      	bne.n	8003820 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003818:	461a      	mov	r2, r3
 800381a:	2101      	movs	r1, #1
 800381c:	f002 f90c 	bl	8005a38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	4f54300a 	.word	0x4f54300a

08003830 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
 800383c:	4613      	mov	r3, r2
 800383e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d107      	bne.n	800385e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800384e:	883b      	ldrh	r3, [r7, #0]
 8003850:	0419      	lsls	r1, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	430a      	orrs	r2, r1
 800385a:	629a      	str	r2, [r3, #40]	; 0x28
 800385c:	e028      	b.n	80038b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	4413      	add	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	e00d      	b.n	800388e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	3340      	adds	r3, #64	; 0x40
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4413      	add	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	3301      	adds	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	3b01      	subs	r3, #1
 8003894:	429a      	cmp	r2, r3
 8003896:	d3ec      	bcc.n	8003872 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003898:	883b      	ldrh	r3, [r7, #0]
 800389a:	0418      	lsls	r0, r3, #16
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	4302      	orrs	r2, r0
 80038a8:	3340      	adds	r3, #64	; 0x40
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e25b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d075      	beq.n	8003a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003916:	4ba3      	ldr	r3, [pc, #652]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b04      	cmp	r3, #4
 8003920:	d00c      	beq.n	800393c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003922:	4ba0      	ldr	r3, [pc, #640]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800392a:	2b08      	cmp	r3, #8
 800392c:	d112      	bne.n	8003954 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392e:	4b9d      	ldr	r3, [pc, #628]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393a:	d10b      	bne.n	8003954 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	4b99      	ldr	r3, [pc, #612]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d05b      	beq.n	8003a00 <HAL_RCC_OscConfig+0x108>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d157      	bne.n	8003a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e236      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d106      	bne.n	800396c <HAL_RCC_OscConfig+0x74>
 800395e:	4b91      	ldr	r3, [pc, #580]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a90      	ldr	r2, [pc, #576]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e01d      	b.n	80039a8 <HAL_RCC_OscConfig+0xb0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x98>
 8003976:	4b8b      	ldr	r3, [pc, #556]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a8a      	ldr	r2, [pc, #552]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b88      	ldr	r3, [pc, #544]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a87      	ldr	r2, [pc, #540]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e00b      	b.n	80039a8 <HAL_RCC_OscConfig+0xb0>
 8003990:	4b84      	ldr	r3, [pc, #528]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a83      	ldr	r2, [pc, #524]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b81      	ldr	r3, [pc, #516]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a80      	ldr	r2, [pc, #512]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fd fdee 	bl	8001590 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fd fdea 	bl	8001590 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e1fb      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0xc0>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fd fdda 	bl	8001590 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fd fdd6 	bl	8001590 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e1e7      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	4b6c      	ldr	r3, [pc, #432]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0xe8>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d063      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d11c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a26:	4b5f      	ldr	r3, [pc, #380]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	4b5c      	ldr	r3, [pc, #368]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x152>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e1bb      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4a:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4952      	ldr	r1, [pc, #328]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	e03a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a68:	4b4f      	ldr	r3, [pc, #316]	; (8003ba8 <HAL_RCC_OscConfig+0x2b0>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fd fd8f 	bl	8001590 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a76:	f7fd fd8b 	bl	8001590 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e19c      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	4b46      	ldr	r3, [pc, #280]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4940      	ldr	r1, [pc, #256]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aaa:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_RCC_OscConfig+0x2b0>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fd fd6e 	bl	8001590 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab8:	f7fd fd6a 	bl	8001590 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e17b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d030      	beq.n	8003b44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aea:	4b30      	ldr	r3, [pc, #192]	; (8003bac <HAL_RCC_OscConfig+0x2b4>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fd fd4e 	bl	8001590 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fd fd4a 	bl	8001590 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e15b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x200>
 8003b16:	e015      	b.n	8003b44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b18:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HAL_RCC_OscConfig+0x2b4>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1e:	f7fd fd37 	bl	8001590 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b26:	f7fd fd33 	bl	8001590 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e144      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80a0 	beq.w	8003c92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b70:	6413      	str	r3, [r2, #64]	; 0x40
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_OscConfig+0x2b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d121      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_RCC_OscConfig+0x2b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <HAL_RCC_OscConfig+0x2b8>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fd fcf9 	bl	8001590 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e011      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2ce>
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	42470000 	.word	0x42470000
 8003bac:	42470e80 	.word	0x42470e80
 8003bb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb4:	f7fd fcec 	bl	8001590 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e0fd      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc6:	4b81      	ldr	r3, [pc, #516]	; (8003dcc <HAL_RCC_OscConfig+0x4d4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2f0>
 8003bda:	4b7d      	ldr	r3, [pc, #500]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a7c      	ldr	r2, [pc, #496]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	e01c      	b.n	8003c22 <HAL_RCC_OscConfig+0x32a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x312>
 8003bf0:	4b77      	ldr	r3, [pc, #476]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	4a76      	ldr	r2, [pc, #472]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003bf6:	f043 0304 	orr.w	r3, r3, #4
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfc:	4b74      	ldr	r3, [pc, #464]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a73      	ldr	r2, [pc, #460]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
 8003c08:	e00b      	b.n	8003c22 <HAL_RCC_OscConfig+0x32a>
 8003c0a:	4b71      	ldr	r3, [pc, #452]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a70      	ldr	r2, [pc, #448]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
 8003c16:	4b6e      	ldr	r3, [pc, #440]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a6d      	ldr	r2, [pc, #436]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d015      	beq.n	8003c56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fd fcb1 	bl	8001590 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fd fcad 	bl	8001590 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e0bc      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	4b61      	ldr	r3, [pc, #388]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ee      	beq.n	8003c32 <HAL_RCC_OscConfig+0x33a>
 8003c54:	e014      	b.n	8003c80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c56:	f7fd fc9b 	bl	8001590 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fd fc97 	bl	8001590 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e0a6      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c74:	4b56      	ldr	r3, [pc, #344]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ee      	bne.n	8003c5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d105      	bne.n	8003c92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c86:	4b52      	ldr	r3, [pc, #328]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a51      	ldr	r2, [pc, #324]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8092 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c9c:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d05c      	beq.n	8003d62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d141      	bne.n	8003d34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b48      	ldr	r3, [pc, #288]	; (8003dd4 <HAL_RCC_OscConfig+0x4dc>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fd fc6b 	bl	8001590 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fd fc67 	bl	8001590 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e078      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	019b      	lsls	r3, r3, #6
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	4933      	ldr	r1, [pc, #204]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d06:	4b33      	ldr	r3, [pc, #204]	; (8003dd4 <HAL_RCC_OscConfig+0x4dc>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fc40 	bl	8001590 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fd fc3c 	bl	8001590 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e04d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x41c>
 8003d32:	e045      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d34:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <HAL_RCC_OscConfig+0x4dc>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fd fc29 	bl	8001590 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fd fc25 	bl	8001590 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e036      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d54:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x44a>
 8003d60:	e02e      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e029      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d6e:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <HAL_RCC_OscConfig+0x4d8>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d11c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d115      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d96:	4013      	ands	r3, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d10d      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d106      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	42470060 	.word	0x42470060

08003dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0cc      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dec:	4b68      	ldr	r3, [pc, #416]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d90c      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b65      	ldr	r3, [pc, #404]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0b8      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e2c:	4b59      	ldr	r3, [pc, #356]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a58      	ldr	r2, [pc, #352]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e44:	4b53      	ldr	r3, [pc, #332]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a52      	ldr	r2, [pc, #328]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4b50      	ldr	r3, [pc, #320]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	494d      	ldr	r1, [pc, #308]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d044      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	4b47      	ldr	r3, [pc, #284]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d119      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e07f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d107      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e96:	4b3f      	ldr	r3, [pc, #252]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e06f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e067      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb6:	4b37      	ldr	r3, [pc, #220]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 0203 	bic.w	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4934      	ldr	r1, [pc, #208]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec8:	f7fd fb62 	bl	8001590 <HAL_GetTick>
 8003ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed0:	f7fd fb5e 	bl	8001590 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e04f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee6:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 020c 	and.w	r2, r3, #12
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d1eb      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d20c      	bcs.n	8003f20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f06:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b20      	ldr	r3, [pc, #128]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e032      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4916      	ldr	r1, [pc, #88]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	490e      	ldr	r1, [pc, #56]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f5e:	f000 f821 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f62:	4601      	mov	r1, r0
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
 8003f72:	fa21 f303 	lsr.w	r3, r1, r3
 8003f76:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f7a:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd fac2 	bl	8001508 <HAL_InitTick>

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023c00 	.word	0x40023c00
 8003f94:	40023800 	.word	0x40023800
 8003f98:	08008868 	.word	0x08008868
 8003f9c:	20000008 	.word	0x20000008
 8003fa0:	2000000c 	.word	0x2000000c

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fba:	4b50      	ldr	r3, [pc, #320]	; (80040fc <HAL_RCC_GetSysClockFreq+0x158>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d007      	beq.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x32>
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d008      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x38>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 808d 	bne.w	80040ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fd0:	4b4b      	ldr	r3, [pc, #300]	; (8004100 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003fd2:	60bb      	str	r3, [r7, #8]
       break;
 8003fd4:	e08c      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fd6:	4b4b      	ldr	r3, [pc, #300]	; (8004104 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fd8:	60bb      	str	r3, [r7, #8]
      break;
 8003fda:	e089      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fdc:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_RCC_GetSysClockFreq+0x158>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fe6:	4b45      	ldr	r3, [pc, #276]	; (80040fc <HAL_RCC_GetSysClockFreq+0x158>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d023      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff2:	4b42      	ldr	r3, [pc, #264]	; (80040fc <HAL_RCC_GetSysClockFreq+0x158>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	099b      	lsrs	r3, r3, #6
 8003ff8:	f04f 0400 	mov.w	r4, #0
 8003ffc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	ea03 0501 	and.w	r5, r3, r1
 8004008:	ea04 0602 	and.w	r6, r4, r2
 800400c:	4a3d      	ldr	r2, [pc, #244]	; (8004104 <HAL_RCC_GetSysClockFreq+0x160>)
 800400e:	fb02 f106 	mul.w	r1, r2, r6
 8004012:	2200      	movs	r2, #0
 8004014:	fb02 f205 	mul.w	r2, r2, r5
 8004018:	440a      	add	r2, r1
 800401a:	493a      	ldr	r1, [pc, #232]	; (8004104 <HAL_RCC_GetSysClockFreq+0x160>)
 800401c:	fba5 0101 	umull	r0, r1, r5, r1
 8004020:	1853      	adds	r3, r2, r1
 8004022:	4619      	mov	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f04f 0400 	mov.w	r4, #0
 800402a:	461a      	mov	r2, r3
 800402c:	4623      	mov	r3, r4
 800402e:	f7fc f8d3 	bl	80001d8 <__aeabi_uldivmod>
 8004032:	4603      	mov	r3, r0
 8004034:	460c      	mov	r4, r1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e049      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403a:	4b30      	ldr	r3, [pc, #192]	; (80040fc <HAL_RCC_GetSysClockFreq+0x158>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	099b      	lsrs	r3, r3, #6
 8004040:	f04f 0400 	mov.w	r4, #0
 8004044:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	ea03 0501 	and.w	r5, r3, r1
 8004050:	ea04 0602 	and.w	r6, r4, r2
 8004054:	4629      	mov	r1, r5
 8004056:	4632      	mov	r2, r6
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	f04f 0400 	mov.w	r4, #0
 8004060:	0154      	lsls	r4, r2, #5
 8004062:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004066:	014b      	lsls	r3, r1, #5
 8004068:	4619      	mov	r1, r3
 800406a:	4622      	mov	r2, r4
 800406c:	1b49      	subs	r1, r1, r5
 800406e:	eb62 0206 	sbc.w	r2, r2, r6
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	f04f 0400 	mov.w	r4, #0
 800407a:	0194      	lsls	r4, r2, #6
 800407c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004080:	018b      	lsls	r3, r1, #6
 8004082:	1a5b      	subs	r3, r3, r1
 8004084:	eb64 0402 	sbc.w	r4, r4, r2
 8004088:	f04f 0100 	mov.w	r1, #0
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	00e2      	lsls	r2, r4, #3
 8004092:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004096:	00d9      	lsls	r1, r3, #3
 8004098:	460b      	mov	r3, r1
 800409a:	4614      	mov	r4, r2
 800409c:	195b      	adds	r3, r3, r5
 800409e:	eb44 0406 	adc.w	r4, r4, r6
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	02a2      	lsls	r2, r4, #10
 80040ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040b0:	0299      	lsls	r1, r3, #10
 80040b2:	460b      	mov	r3, r1
 80040b4:	4614      	mov	r4, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	4621      	mov	r1, r4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f04f 0400 	mov.w	r4, #0
 80040c0:	461a      	mov	r2, r3
 80040c2:	4623      	mov	r3, r4
 80040c4:	f7fc f888 	bl	80001d8 <__aeabi_uldivmod>
 80040c8:	4603      	mov	r3, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_GetSysClockFreq+0x158>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	0c1b      	lsrs	r3, r3, #16
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	3301      	adds	r3, #1
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	60bb      	str	r3, [r7, #8]
      break;
 80040e8:	e002      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCC_GetSysClockFreq+0x15c>)
 80040ec:	60bb      	str	r3, [r7, #8]
      break;
 80040ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f0:	68bb      	ldr	r3, [r7, #8]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	00f42400 	.word	0x00f42400
 8004104:	017d7840 	.word	0x017d7840

08004108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_RCC_GetHCLKFreq+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000008 	.word	0x20000008

08004120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004124:	f7ff fff0 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004128:	4601      	mov	r1, r0
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0a9b      	lsrs	r3, r3, #10
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4a03      	ldr	r2, [pc, #12]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004136:	5cd3      	ldrb	r3, [r2, r3]
 8004138:	fa21 f303 	lsr.w	r3, r1, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40023800 	.word	0x40023800
 8004144:	08008878 	.word	0x08008878

08004148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e056      	b.n	8004208 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fc fbe9 	bl	800094c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004190:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	ea42 0103 	orr.w	r1, r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	0c1b      	lsrs	r3, r3, #16
 80041d8:	f003 0104 	and.w	r1, r3, #4
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69da      	ldr	r2, [r3, #28]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e083      	b.n	800432c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7fd f8d3 	bl	80013e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004254:	f023 0307 	bic.w	r3, r3, #7
 8004258:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f000 f865 	bl	8004334 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004292:	f023 0303 	bic.w	r3, r3, #3
 8004296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	4313      	orrs	r3, r2
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042b0:	f023 030c 	bic.w	r3, r3, #12
 80042b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	011a      	lsls	r2, r3, #4
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	031b      	lsls	r3, r3, #12
 80042e0:	4313      	orrs	r3, r2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4313      	orrs	r3, r2
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a34      	ldr	r2, [pc, #208]	; (8004418 <TIM_Base_SetConfig+0xe4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00f      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004352:	d00b      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a31      	ldr	r2, [pc, #196]	; (800441c <TIM_Base_SetConfig+0xe8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a30      	ldr	r2, [pc, #192]	; (8004420 <TIM_Base_SetConfig+0xec>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <TIM_Base_SetConfig+0xf0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a25      	ldr	r2, [pc, #148]	; (8004418 <TIM_Base_SetConfig+0xe4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01b      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438c:	d017      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a22      	ldr	r2, [pc, #136]	; (800441c <TIM_Base_SetConfig+0xe8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a21      	ldr	r2, [pc, #132]	; (8004420 <TIM_Base_SetConfig+0xec>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00f      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a20      	ldr	r2, [pc, #128]	; (8004424 <TIM_Base_SetConfig+0xf0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <TIM_Base_SetConfig+0xf4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	; (800442c <TIM_Base_SetConfig+0xf8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <TIM_Base_SetConfig+0xfc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a08      	ldr	r2, [pc, #32]	; (8004418 <TIM_Base_SetConfig+0xe4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d103      	bne.n	8004404 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	615a      	str	r2, [r3, #20]
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40014000 	.word	0x40014000
 800442c:	40014400 	.word	0x40014400
 8004430:	40014800 	.word	0x40014800

08004434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004448:	2302      	movs	r3, #2
 800444a:	e050      	b.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d018      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004498:	d013      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a16      	ldr	r2, [pc, #88]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a15      	ldr	r2, [pc, #84]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a13      	ldr	r2, [pc, #76]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d10c      	bne.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40014000 	.word	0x40014000

08004510 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004510:	b084      	sub	sp, #16
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	f107 001c 	add.w	r0, r7, #28
 800451e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	2b01      	cmp	r3, #1
 8004526:	d122      	bne.n	800456e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800453c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d105      	bne.n	8004562 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f001 fac6 	bl	8005af4 <USB_CoreReset>
 8004568:	4603      	mov	r3, r0
 800456a:	73fb      	strb	r3, [r7, #15]
 800456c:	e01a      	b.n	80045a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f001 faba 	bl	8005af4 <USB_CoreReset>
 8004580:	4603      	mov	r3, r0
 8004582:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
 8004596:	e005      	b.n	80045a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d10b      	bne.n	80045c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f043 0206 	orr.w	r2, r3, #6
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f043 0220 	orr.w	r2, r3, #32
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ce:	b004      	add	sp, #16
 80045d0:	4770      	bx	lr
	...

080045d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	4613      	mov	r3, r2
 80045e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d165      	bne.n	80046b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a41      	ldr	r2, [pc, #260]	; (80046f0 <USB_SetTurnaroundTime+0x11c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d906      	bls.n	80045fe <USB_SetTurnaroundTime+0x2a>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4a40      	ldr	r2, [pc, #256]	; (80046f4 <USB_SetTurnaroundTime+0x120>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d802      	bhi.n	80045fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045f8:	230f      	movs	r3, #15
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e062      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4a3c      	ldr	r2, [pc, #240]	; (80046f4 <USB_SetTurnaroundTime+0x120>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d906      	bls.n	8004614 <USB_SetTurnaroundTime+0x40>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4a3b      	ldr	r2, [pc, #236]	; (80046f8 <USB_SetTurnaroundTime+0x124>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d802      	bhi.n	8004614 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800460e:	230e      	movs	r3, #14
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e057      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4a38      	ldr	r2, [pc, #224]	; (80046f8 <USB_SetTurnaroundTime+0x124>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d906      	bls.n	800462a <USB_SetTurnaroundTime+0x56>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4a37      	ldr	r2, [pc, #220]	; (80046fc <USB_SetTurnaroundTime+0x128>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d802      	bhi.n	800462a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004624:	230d      	movs	r3, #13
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e04c      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4a33      	ldr	r2, [pc, #204]	; (80046fc <USB_SetTurnaroundTime+0x128>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d906      	bls.n	8004640 <USB_SetTurnaroundTime+0x6c>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a32      	ldr	r2, [pc, #200]	; (8004700 <USB_SetTurnaroundTime+0x12c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d802      	bhi.n	8004640 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800463a:	230c      	movs	r3, #12
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e041      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4a2f      	ldr	r2, [pc, #188]	; (8004700 <USB_SetTurnaroundTime+0x12c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d906      	bls.n	8004656 <USB_SetTurnaroundTime+0x82>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4a2e      	ldr	r2, [pc, #184]	; (8004704 <USB_SetTurnaroundTime+0x130>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d802      	bhi.n	8004656 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004650:	230b      	movs	r3, #11
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e036      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4a2a      	ldr	r2, [pc, #168]	; (8004704 <USB_SetTurnaroundTime+0x130>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d906      	bls.n	800466c <USB_SetTurnaroundTime+0x98>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a29      	ldr	r2, [pc, #164]	; (8004708 <USB_SetTurnaroundTime+0x134>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d802      	bhi.n	800466c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004666:	230a      	movs	r3, #10
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e02b      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4a26      	ldr	r2, [pc, #152]	; (8004708 <USB_SetTurnaroundTime+0x134>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d906      	bls.n	8004682 <USB_SetTurnaroundTime+0xae>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a25      	ldr	r2, [pc, #148]	; (800470c <USB_SetTurnaroundTime+0x138>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d802      	bhi.n	8004682 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800467c:	2309      	movs	r3, #9
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e020      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4a21      	ldr	r2, [pc, #132]	; (800470c <USB_SetTurnaroundTime+0x138>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d906      	bls.n	8004698 <USB_SetTurnaroundTime+0xc4>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4a20      	ldr	r2, [pc, #128]	; (8004710 <USB_SetTurnaroundTime+0x13c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d802      	bhi.n	8004698 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004692:	2308      	movs	r3, #8
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e015      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <USB_SetTurnaroundTime+0x13c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d906      	bls.n	80046ae <USB_SetTurnaroundTime+0xda>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <USB_SetTurnaroundTime+0x140>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d802      	bhi.n	80046ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046a8:	2307      	movs	r3, #7
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e00a      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046ae:	2306      	movs	r3, #6
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	e007      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d102      	bne.n	80046c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046ba:	2309      	movs	r3, #9
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e001      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046c0:	2309      	movs	r3, #9
 80046c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	029b      	lsls	r3, r3, #10
 80046d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046dc:	431a      	orrs	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	00d8acbf 	.word	0x00d8acbf
 80046f4:	00e4e1bf 	.word	0x00e4e1bf
 80046f8:	00f423ff 	.word	0x00f423ff
 80046fc:	0106737f 	.word	0x0106737f
 8004700:	011a499f 	.word	0x011a499f
 8004704:	01312cff 	.word	0x01312cff
 8004708:	014ca43f 	.word	0x014ca43f
 800470c:	016e35ff 	.word	0x016e35ff
 8004710:	01a6ab1f 	.word	0x01a6ab1f
 8004714:	01e847ff 	.word	0x01e847ff

08004718 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f043 0201 	orr.w	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f023 0201 	bic.w	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d106      	bne.n	8004788 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	e00b      	b.n	80047a0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	e001      	b.n	80047a0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e003      	b.n	80047a8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047a0:	2032      	movs	r0, #50	; 0x32
 80047a2:	f7fc ff01 	bl	80015a8 <HAL_Delay>

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047b0:	b084      	sub	sp, #16
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	e009      	b.n	80047e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3340      	adds	r3, #64	; 0x40
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	2200      	movs	r2, #0
 80047dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	3301      	adds	r3, #1
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b0e      	cmp	r3, #14
 80047e8:	d9f2      	bls.n	80047d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11c      	bne.n	800482a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047fe:	f043 0302 	orr.w	r3, r3, #2
 8004802:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
 8004828:	e00b      	b.n	8004842 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004848:	461a      	mov	r2, r3
 800484a:	2300      	movs	r3, #0
 800484c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004854:	4619      	mov	r1, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485c:	461a      	mov	r2, r3
 800485e:	680b      	ldr	r3, [r1, #0]
 8004860:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	2b01      	cmp	r3, #1
 8004866:	d10c      	bne.n	8004882 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800486e:	2100      	movs	r1, #0
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f949 	bl	8004b08 <USB_SetDevSpeed>
 8004876:	e008      	b.n	800488a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004878:	2101      	movs	r1, #1
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f944 	bl	8004b08 <USB_SetDevSpeed>
 8004880:	e003      	b.n	800488a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004882:	2103      	movs	r1, #3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f93f 	bl	8004b08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800488a:	2110      	movs	r1, #16
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f8f3 	bl	8004a78 <USB_FlushTxFifo>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f911 	bl	8004ac4 <USB_FlushRxFifo>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b2:	461a      	mov	r2, r3
 80048b4:	2300      	movs	r3, #0
 80048b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048be:	461a      	mov	r2, r3
 80048c0:	2300      	movs	r3, #0
 80048c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	461a      	mov	r2, r3
 80048cc:	2300      	movs	r3, #0
 80048ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	e043      	b.n	800495e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ec:	d118      	bne.n	8004920 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004900:	461a      	mov	r2, r3
 8004902:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	e013      	b.n	8004932 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004916:	461a      	mov	r2, r3
 8004918:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e008      	b.n	8004932 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	461a      	mov	r2, r3
 800492e:	2300      	movs	r3, #0
 8004930:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	461a      	mov	r2, r3
 8004940:	2300      	movs	r3, #0
 8004942:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004950:	461a      	mov	r2, r3
 8004952:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004956:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	3301      	adds	r3, #1
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	429a      	cmp	r2, r3
 8004964:	d3b7      	bcc.n	80048d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	e043      	b.n	80049f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800497e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004982:	d118      	bne.n	80049b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	461a      	mov	r2, r3
 8004998:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e013      	b.n	80049c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	461a      	mov	r2, r3
 80049ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e008      	b.n	80049c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c2:	461a      	mov	r2, r3
 80049c4:	2300      	movs	r3, #0
 80049c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	461a      	mov	r2, r3
 80049d6:	2300      	movs	r3, #0
 80049d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e6:	461a      	mov	r2, r3
 80049e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3301      	adds	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d3b7      	bcc.n	800496c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f043 0210 	orr.w	r2, r3, #16
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699a      	ldr	r2, [r3, #24]
 8004a34:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <USB_DevInit+0x2c4>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f043 0208 	orr.w	r2, r3, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d107      	bne.n	8004a64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a5c:	f043 0304 	orr.w	r3, r3, #4
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a70:	b004      	add	sp, #16
 8004a72:	4770      	bx	lr
 8004a74:	803c3800 	.word	0x803c3800

08004a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	019b      	lsls	r3, r3, #6
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3301      	adds	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <USB_FlushTxFifo+0x48>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d901      	bls.n	8004aa4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e006      	b.n	8004ab2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d0f0      	beq.n	8004a92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	00030d40 	.word	0x00030d40

08004ac4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2210      	movs	r2, #16
 8004ad4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <USB_FlushRxFifo+0x40>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d901      	bls.n	8004ae8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e006      	b.n	8004af6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d0f0      	beq.n	8004ad6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	00030d40 	.word	0x00030d40

08004b08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b087      	sub	sp, #28
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0306 	and.w	r3, r3, #6
 8004b52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	75fb      	strb	r3, [r7, #23]
 8004b5e:	e00a      	b.n	8004b76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d002      	beq.n	8004b6c <USB_GetDevSpeed+0x32>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b06      	cmp	r3, #6
 8004b6a:	d102      	bne.n	8004b72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	75fb      	strb	r3, [r7, #23]
 8004b70:	e001      	b.n	8004b76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b72:	230f      	movs	r3, #15
 8004b74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	785b      	ldrb	r3, [r3, #1]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d13a      	bne.n	8004c16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	68f9      	ldr	r1, [r7, #12]
 8004bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d155      	bne.n	8004c84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	78db      	ldrb	r3, [r3, #3]
 8004bf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	059b      	lsls	r3, r3, #22
 8004bfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	e036      	b.n	8004c84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2c:	041b      	lsls	r3, r3, #16
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11a      	bne.n	8004c84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	78db      	ldrb	r3, [r3, #3]
 8004c68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	785b      	ldrb	r3, [r3, #1]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d161      	bne.n	8004d74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cc6:	d11f      	bne.n	8004d08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ce6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	2101      	movs	r1, #1
 8004d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	43db      	mvns	r3, r3
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d28:	4013      	ands	r3, r2
 8004d2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	0159      	lsls	r1, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	440b      	add	r3, r1
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4b35      	ldr	r3, [pc, #212]	; (8004e44 <USB_DeactivateEndpoint+0x1b0>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]
 8004d72:	e060      	b.n	8004e36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d8a:	d11f      	bne.n	8004dcc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004daa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	2101      	movs	r1, #1
 8004dde:	fa01 f303 	lsl.w	r3, r1, r3
 8004de2:	041b      	lsls	r3, r3, #16
 8004de4:	43db      	mvns	r3, r3
 8004de6:	68f9      	ldr	r1, [r7, #12]
 8004de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dec:	4013      	ands	r3, r2
 8004dee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	2101      	movs	r1, #1
 8004e02:	fa01 f303 	lsl.w	r3, r1, r3
 8004e06:	041b      	lsls	r3, r3, #16
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	68f9      	ldr	r1, [r7, #12]
 8004e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e10:	4013      	ands	r3, r2
 8004e12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	0159      	lsls	r1, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	440b      	add	r3, r1
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <USB_DeactivateEndpoint+0x1b4>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	ec337800 	.word	0xec337800
 8004e48:	eff37800 	.word	0xeff37800

08004e4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f040 815c 	bne.w	8005126 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d132      	bne.n	8004edc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	0cdb      	lsrs	r3, r3, #19
 8004ed6:	04db      	lsls	r3, r3, #19
 8004ed8:	6113      	str	r3, [r2, #16]
 8004eda:	e074      	b.n	8004fc6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef6:	0cdb      	lsrs	r3, r3, #19
 8004ef8:	04db      	lsls	r3, r3, #19
 8004efa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	6959      	ldr	r1, [r3, #20]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	440b      	add	r3, r1
 8004f38:	1e59      	subs	r1, r3, #1
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f42:	04d9      	lsls	r1, r3, #19
 8004f44:	4b9d      	ldr	r3, [pc, #628]	; (80051bc <USB_EPStartXfer+0x370>)
 8004f46:	400b      	ands	r3, r1
 8004f48:	69b9      	ldr	r1, [r7, #24]
 8004f4a:	0148      	lsls	r0, r1, #5
 8004f4c:	69f9      	ldr	r1, [r7, #28]
 8004f4e:	4401      	add	r1, r0
 8004f50:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f54:	4313      	orrs	r3, r2
 8004f56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f6e:	69b9      	ldr	r1, [r7, #24]
 8004f70:	0148      	lsls	r0, r1, #5
 8004f72:	69f9      	ldr	r1, [r7, #28]
 8004f74:	4401      	add	r1, r0
 8004f76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	78db      	ldrb	r3, [r3, #3]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d11f      	bne.n	8004fc6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004fa4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fc4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d14b      	bne.n	8005064 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	78db      	ldrb	r3, [r3, #3]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d128      	bne.n	8005042 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d110      	bne.n	8005022 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	440a      	add	r2, r1
 8005016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	e00f      	b.n	8005042 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	0151      	lsls	r1, r2, #5
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	440a      	add	r2, r1
 8005038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005040:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	0151      	lsls	r1, r2, #5
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	440a      	add	r2, r1
 8005058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e12f      	b.n	80052c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005082:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	78db      	ldrb	r3, [r3, #3]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d015      	beq.n	80050b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8117 	beq.w	80052c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	2101      	movs	r1, #1
 80050a8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ac:	69f9      	ldr	r1, [r7, #28]
 80050ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b2:	4313      	orrs	r3, r2
 80050b4:	634b      	str	r3, [r1, #52]	; 0x34
 80050b6:	e105      	b.n	80052c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d110      	bne.n	80050ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	e00f      	b.n	800510a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005108:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	68d9      	ldr	r1, [r3, #12]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781a      	ldrb	r2, [r3, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	b298      	uxth	r0, r3
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	4603      	mov	r3, r0
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fa2b 	bl	800557a <USB_WritePacket>
 8005124:	e0ce      	b.n	80052c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005140:	0cdb      	lsrs	r3, r3, #19
 8005142:	04db      	lsls	r3, r3, #19
 8005144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	0151      	lsls	r1, r2, #5
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	440a      	add	r2, r1
 800515c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005160:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005164:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005168:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d126      	bne.n	80051c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005188:	69b9      	ldr	r1, [r7, #24]
 800518a:	0148      	lsls	r0, r1, #5
 800518c:	69f9      	ldr	r1, [r7, #28]
 800518e:	4401      	add	r1, r0
 8005190:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005194:	4313      	orrs	r3, r2
 8005196:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051b6:	6113      	str	r3, [r2, #16]
 80051b8:	e036      	b.n	8005228 <USB_EPStartXfer+0x3dc>
 80051ba:	bf00      	nop
 80051bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	695a      	ldr	r2, [r3, #20]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4413      	add	r3, r2
 80051ca:	1e5a      	subs	r2, r3, #1
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	8afb      	ldrh	r3, [r7, #22]
 80051e6:	04d9      	lsls	r1, r3, #19
 80051e8:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <USB_EPStartXfer+0x484>)
 80051ea:	400b      	ands	r3, r1
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	0148      	lsls	r0, r1, #5
 80051f0:	69f9      	ldr	r1, [r7, #28]
 80051f2:	4401      	add	r1, r0
 80051f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051f8:	4313      	orrs	r3, r2
 80051fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	8af9      	ldrh	r1, [r7, #22]
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	0148      	lsls	r0, r1, #5
 800521c:	69f9      	ldr	r1, [r7, #28]
 800521e:	4401      	add	r1, r0
 8005220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005224:	4313      	orrs	r3, r2
 8005226:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d10d      	bne.n	800524a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	68d9      	ldr	r1, [r3, #12]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	460a      	mov	r2, r1
 8005248:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	78db      	ldrb	r3, [r3, #3]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d128      	bne.n	80052a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d110      	bne.n	8005284 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e00f      	b.n	80052a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	1ff80000 	.word	0x1ff80000

080052d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	4613      	mov	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	f040 80cd 	bne.w	8005490 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d132      	bne.n	8005364 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005318:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800531c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005320:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005340:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535c:	0cdb      	lsrs	r3, r3, #19
 800535e:	04db      	lsls	r3, r3, #19
 8005360:	6113      	str	r3, [r2, #16]
 8005362:	e04e      	b.n	8005402 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537e:	0cdb      	lsrs	r3, r3, #19
 8005380:	04db      	lsls	r3, r3, #19
 8005382:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f2:	6939      	ldr	r1, [r7, #16]
 80053f4:	0148      	lsls	r0, r1, #5
 80053f6:	6979      	ldr	r1, [r7, #20]
 80053f8:	4401      	add	r1, r0
 80053fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d11e      	bne.n	8005446 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	461a      	mov	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	e092      	b.n	800556c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	440a      	add	r2, r1
 800545c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005460:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005464:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d07e      	beq.n	800556c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	2101      	movs	r1, #1
 8005480:	fa01 f303 	lsl.w	r3, r1, r3
 8005484:	6979      	ldr	r1, [r7, #20]
 8005486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800548a:	4313      	orrs	r3, r2
 800548c:	634b      	str	r3, [r1, #52]	; 0x34
 800548e:	e06d      	b.n	800556c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054aa:	0cdb      	lsrs	r3, r3, #19
 80054ac:	04db      	lsls	r3, r3, #19
 80054ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005502:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800551a:	6939      	ldr	r1, [r7, #16]
 800551c:	0148      	lsls	r0, r1, #5
 800551e:	6979      	ldr	r1, [r7, #20]
 8005520:	4401      	add	r1, r0
 8005522:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005526:	4313      	orrs	r3, r2
 8005528:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10d      	bne.n	800554c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d009      	beq.n	800554c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	68d9      	ldr	r1, [r3, #12]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	460a      	mov	r2, r1
 800554a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800556a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800557a:	b480      	push	{r7}
 800557c:	b089      	sub	sp, #36	; 0x24
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	4611      	mov	r1, r2
 8005586:	461a      	mov	r2, r3
 8005588:	460b      	mov	r3, r1
 800558a:	71fb      	strb	r3, [r7, #7]
 800558c:	4613      	mov	r3, r2
 800558e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005598:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d11a      	bne.n	80055d6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055a0:	88bb      	ldrh	r3, [r7, #4]
 80055a2:	3303      	adds	r3, #3
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055a8:	2300      	movs	r3, #0
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	e00f      	b.n	80055ce <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	031a      	lsls	r2, r3, #12
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ba:	461a      	mov	r2, r3
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3304      	adds	r3, #4
 80055c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	3301      	adds	r3, #1
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d3eb      	bcc.n	80055ae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3724      	adds	r7, #36	; 0x24
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b089      	sub	sp, #36	; 0x24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	3303      	adds	r3, #3
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	e00b      	b.n	8005620 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	601a      	str	r2, [r3, #0]
    pDest++;
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	3304      	adds	r3, #4
 8005618:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	3301      	adds	r3, #1
 800561e:	61bb      	str	r3, [r7, #24]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	429a      	cmp	r2, r3
 8005626:	d3ef      	bcc.n	8005608 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005628:	69fb      	ldr	r3, [r7, #28]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3724      	adds	r7, #36	; 0x24
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	785b      	ldrb	r3, [r3, #1]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d12c      	bne.n	80056ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	db12      	blt.n	800568a <USB_EPSetStall+0x54>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00f      	beq.n	800568a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005684:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005688:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	0151      	lsls	r1, r2, #5
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	440a      	add	r2, r1
 80056a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	e02b      	b.n	8005704 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	db12      	blt.n	80056e4 <USB_EPSetStall+0xae>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00f      	beq.n	80056e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	0151      	lsls	r1, r2, #5
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	440a      	add	r2, r1
 80056da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	0151      	lsls	r1, r2, #5
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	440a      	add	r2, r1
 80056fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005702:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d128      	bne.n	8005780 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005748:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800574c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	78db      	ldrb	r3, [r3, #3]
 8005752:	2b03      	cmp	r3, #3
 8005754:	d003      	beq.n	800575e <USB_EPClearStall+0x4c>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	78db      	ldrb	r3, [r3, #3]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d138      	bne.n	80057d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e027      	b.n	80057d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800579e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	78db      	ldrb	r3, [r3, #3]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d003      	beq.n	80057b0 <USB_EPClearStall+0x9e>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	78db      	ldrb	r3, [r3, #3]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d10f      	bne.n	80057d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80057de:	b480      	push	{r7}
 80057e0:	b085      	sub	sp, #20
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005800:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005812:	68f9      	ldr	r1, [r7, #12]
 8005814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005844:	f023 0303 	bic.w	r3, r3, #3
 8005848:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005858:	f023 0302 	bic.w	r3, r3, #2
 800585c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005886:	f023 0303 	bic.w	r3, r3, #3
 800588a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800589a:	f043 0302 	orr.w	r3, r3, #2
 800589e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4013      	ands	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058c6:	68fb      	ldr	r3, [r7, #12]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	4013      	ands	r3, r2
 80058f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	0c1b      	lsrs	r3, r3, #16
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	4013      	ands	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	b29b      	uxth	r3, r3
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800596a:	68bb      	ldr	r3, [r7, #8]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	fa22 f303 	lsr.w	r3, r2, r3
 80059a8:	01db      	lsls	r3, r3, #7
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4013      	ands	r3, r2
 80059c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059c6:	68bb      	ldr	r3, [r7, #8]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0301 	and.w	r3, r3, #1
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a0e:	f023 0307 	bic.w	r3, r3, #7
 8005a12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
	...

08005a38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	460b      	mov	r3, r1
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	333c      	adds	r3, #60	; 0x3c
 8005a4e:	3304      	adds	r3, #4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <USB_EP0_OutStart+0xb8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d90a      	bls.n	8005a72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a6c:	d101      	bne.n	8005a72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e037      	b.n	8005ae2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	461a      	mov	r2, r3
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa0:	f043 0318 	orr.w	r3, r3, #24
 8005aa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ab8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005aba:	7afb      	ldrb	r3, [r7, #11]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d10f      	bne.n	8005ae0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ada:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ade:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	4f54300a 	.word	0x4f54300a

08005af4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3301      	adds	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4a13      	ldr	r2, [pc, #76]	; (8005b58 <USB_CoreReset+0x64>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e01b      	b.n	8005b4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	daf2      	bge.n	8005b00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f043 0201 	orr.w	r2, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a09      	ldr	r2, [pc, #36]	; (8005b58 <USB_CoreReset+0x64>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e006      	b.n	8005b4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d0f0      	beq.n	8005b2a <USB_CoreReset+0x36>

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	00030d40 	.word	0x00030d40

08005b5c <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	USBD_HID_HandleTypeDef *hhid;

	hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005b68:	2010      	movs	r0, #16
 8005b6a:	f001 fec1 	bl	80078f0 <malloc>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <USBD_HID_Init+0x28>
	{
		pdev->pClassData = NULL;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		return (uint8_t)USBD_EMEM;
 8005b80:	2302      	movs	r3, #2
 8005b82:	e01b      	b.n	8005bbc <USBD_HID_Init+0x60>
	}

	pdev->pClassData = (void *)hhid;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	7c1b      	ldrb	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <USBD_HID_Init+0x40>
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2207      	movs	r2, #7
 8005b98:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005b9a:	e002      	b.n	8005ba2 <USBD_HID_Init+0x46>
	}
	else   /* LOW and FULL-speed endpoints */
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	220a      	movs	r2, #10
 8005ba0:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	/* Open EP IN */
	(void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005ba2:	2304      	movs	r3, #4
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	2181      	movs	r1, #129	; 0x81
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f001 fd3a 	bl	8007622 <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	871a      	strh	r2, [r3, #56]	; 0x38

	hhid->state = HID_IDLE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <USBD_HID_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	/* Close HID EPs */
	(void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005bd0:	2181      	movs	r1, #129	; 0x81
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f001 fd4b 	bl	800766e <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	871a      	strh	r2, [r3, #56]	; 0x38
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	875a      	strh	r2, [r3, #58]	; 0x3a

	/* FRee allocated memory */
	if (pdev->pClassData != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <USBD_HID_DeInit+0x3e>
	{
		(void)USBD_free(pdev->pClassData);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fe83 	bl	8007900 <free>
		pdev->pClassData = NULL;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t)USBD_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c1c:	60fb      	str	r3, [r7, #12]
	USBD_StatusTypeDef ret = USBD_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	817b      	strh	r3, [r7, #10]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d045      	beq.n	8005cbe <USBD_HID_Setup+0xb2>
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	f040 80d4 	bne.w	8005de0 <USBD_HID_Setup+0x1d4>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	3b02      	subs	r3, #2
 8005c3e:	2b09      	cmp	r3, #9
 8005c40:	d835      	bhi.n	8005cae <USBD_HID_Setup+0xa2>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <USBD_HID_Setup+0x3c>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c9f 	.word	0x08005c9f
 8005c4c:	08005c7f 	.word	0x08005c7f
 8005c50:	08005caf 	.word	0x08005caf
 8005c54:	08005caf 	.word	0x08005caf
 8005c58:	08005caf 	.word	0x08005caf
 8005c5c:	08005caf 	.word	0x08005caf
 8005c60:	08005caf 	.word	0x08005caf
 8005c64:	08005caf 	.word	0x08005caf
 8005c68:	08005c8d 	.word	0x08005c8d
 8005c6c:	08005c71 	.word	0x08005c71
		{
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	885b      	ldrh	r3, [r3, #2]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	461a      	mov	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	601a      	str	r2, [r3, #0]
			break;
 8005c7c:	e01e      	b.n	8005cbc <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 f992 	bl	8006fae <USBD_CtlSendData>
			break;
 8005c8a:	e017      	b.n	8005cbc <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	885b      	ldrh	r3, [r3, #2]
 8005c90:	0a1b      	lsrs	r3, r3, #8
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	605a      	str	r2, [r3, #4]
			break;
 8005c9c:	e00e      	b.n	8005cbc <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f001 f981 	bl	8006fae <USBD_CtlSendData>
			break;
 8005cac:	e006      	b.n	8005cbc <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 f90b 	bl	8006ecc <USBD_CtlError>
			ret = USBD_FAIL;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	75fb      	strb	r3, [r7, #23]
			break;
 8005cba:	bf00      	nop
		}
		break;
 8005cbc:	e097      	b.n	8005dee <USBD_HID_Setup+0x1e2>
		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	2b0b      	cmp	r3, #11
 8005cc4:	f200 8083 	bhi.w	8005dce <USBD_HID_Setup+0x1c2>
 8005cc8:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <USBD_HID_Setup+0xc4>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005d01 	.word	0x08005d01
 8005cd4:	08005ddd 	.word	0x08005ddd
 8005cd8:	08005dcf 	.word	0x08005dcf
 8005cdc:	08005dcf 	.word	0x08005dcf
 8005ce0:	08005dcf 	.word	0x08005dcf
 8005ce4:	08005dcf 	.word	0x08005dcf
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005dcf 	.word	0x08005dcf
 8005cf0:	08005dcf 	.word	0x08005dcf
 8005cf4:	08005dcf 	.word	0x08005dcf
 8005cf8:	08005d81 	.word	0x08005d81
 8005cfc:	08005da9 	.word	0x08005da9
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d107      	bne.n	8005d1a <USBD_HID_Setup+0x10e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d0a:	f107 030a 	add.w	r3, r7, #10
 8005d0e:	2202      	movs	r2, #2
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f001 f94b 	bl	8006fae <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8005d18:	e061      	b.n	8005dde <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f001 f8d5 	bl	8006ecc <USBD_CtlError>
					ret = USBD_FAIL;
 8005d22:	2303      	movs	r3, #3
 8005d24:	75fb      	strb	r3, [r7, #23]
				break;
 8005d26:	e05a      	b.n	8005dde <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_DESCRIPTOR:
				if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	885b      	ldrh	r3, [r3, #2]
 8005d2c:	0a1b      	lsrs	r3, r3, #8
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b22      	cmp	r3, #34	; 0x22
 8005d32:	d108      	bne.n	8005d46 <USBD_HID_Setup+0x13a>
				{
					len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	88db      	ldrh	r3, [r3, #6]
 8005d38:	2b3f      	cmp	r3, #63	; 0x3f
 8005d3a:	bf28      	it	cs
 8005d3c:	233f      	movcs	r3, #63	; 0x3f
 8005d3e:	82bb      	strh	r3, [r7, #20]
					pbuf = HID_MOUSE_ReportDesc;
 8005d40:	4b2d      	ldr	r3, [pc, #180]	; (8005df8 <USBD_HID_Setup+0x1ec>)
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	e015      	b.n	8005d72 <USBD_HID_Setup+0x166>
				}
				else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	885b      	ldrh	r3, [r3, #2]
 8005d4a:	0a1b      	lsrs	r3, r3, #8
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b21      	cmp	r3, #33	; 0x21
 8005d50:	d108      	bne.n	8005d64 <USBD_HID_Setup+0x158>
				{
					pbuf = USBD_HID_Desc;
 8005d52:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <USBD_HID_Setup+0x1f0>)
 8005d54:	613b      	str	r3, [r7, #16]
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	88db      	ldrh	r3, [r3, #6]
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	bf28      	it	cs
 8005d5e:	2309      	movcs	r3, #9
 8005d60:	82bb      	strh	r3, [r7, #20]
 8005d62:	e006      	b.n	8005d72 <USBD_HID_Setup+0x166>
				}
				else
				{
					USBD_CtlError(pdev, req);
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f001 f8b0 	bl	8006ecc <USBD_CtlError>
					ret = USBD_FAIL;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	75fb      	strb	r3, [r7, #23]
					break;
 8005d70:	e035      	b.n	8005dde <USBD_HID_Setup+0x1d2>
				}
				(void)USBD_CtlSendData(pdev, pbuf, len);
 8005d72:	8abb      	ldrh	r3, [r7, #20]
 8005d74:	461a      	mov	r2, r3
 8005d76:	6939      	ldr	r1, [r7, #16]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f001 f918 	bl	8006fae <USBD_CtlSendData>
				break;
 8005d7e:	e02e      	b.n	8005dde <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d107      	bne.n	8005d9a <USBD_HID_Setup+0x18e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	2201      	movs	r2, #1
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f001 f90b 	bl	8006fae <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8005d98:	e021      	b.n	8005dde <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 f895 	bl	8006ecc <USBD_CtlError>
					ret = USBD_FAIL;
 8005da2:	2303      	movs	r3, #3
 8005da4:	75fb      	strb	r3, [r7, #23]
				break;
 8005da6:	e01a      	b.n	8005dde <USBD_HID_Setup+0x1d2>

			case USB_REQ_SET_INTERFACE:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d106      	bne.n	8005dc0 <USBD_HID_Setup+0x1b4>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	885b      	ldrh	r3, [r3, #2]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	461a      	mov	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	609a      	str	r2, [r3, #8]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8005dbe:	e00e      	b.n	8005dde <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f001 f882 	bl	8006ecc <USBD_CtlError>
					ret = USBD_FAIL;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	75fb      	strb	r3, [r7, #23]
				break;
 8005dcc:	e007      	b.n	8005dde <USBD_HID_Setup+0x1d2>

			case USB_REQ_CLEAR_FEATURE:
				break;

			default:
				USBD_CtlError(pdev, req);
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 f87b 	bl	8006ecc <USBD_CtlError>
				ret = USBD_FAIL;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	75fb      	strb	r3, [r7, #23]
				break;
 8005dda:	e000      	b.n	8005dde <USBD_HID_Setup+0x1d2>
				break;
 8005ddc:	bf00      	nop
			}
			break;
 8005dde:	e006      	b.n	8005dee <USBD_HID_Setup+0x1e2>

			default:
				USBD_CtlError(pdev, req);
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 f872 	bl	8006ecc <USBD_CtlError>
				ret = USBD_FAIL;
 8005de8:	2303      	movs	r3, #3
 8005dea:	75fb      	strb	r3, [r7, #23]
				break;
 8005dec:	bf00      	nop
	}

	return (uint8_t)ret;
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	200000d0 	.word	0x200000d0
 8005dfc:	200000b8 	.word	0x200000b8

08005e00 <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2222      	movs	r2, #34	; 0x22
 8005e0c:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgFSDesc;
 8005e0e:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	2000004c 	.word	0x2000004c

08005e20 <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2222      	movs	r2, #34	; 0x22
 8005e2c:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgHSDesc;
 8005e2e:	4b03      	ldr	r3, [pc, #12]	; (8005e3c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20000070 	.word	0x20000070

08005e40 <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2222      	movs	r2, #34	; 0x22
 8005e4c:	801a      	strh	r2, [r3, #0]

	return USBD_HID_OtherSpeedCfgDesc;
 8005e4e:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	20000094 	.word	0x20000094

08005e60 <USBD_HID_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
	UNUSED(epnum);
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e72:	2200      	movs	r2, #0
 8005e74:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	220a      	movs	r2, #10
 8005e90:	801a      	strh	r2, [r3, #0]

	return USBD_HID_DeviceQualifierDesc;
 8005e92:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	200000c4 	.word	0x200000c4

08005ea4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e025      	b.n	8005f08 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	79fa      	ldrb	r2, [r7, #7]
 8005efa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f001 fb29 	bl	8007554 <USBD_LL_Init>
 8005f02:	4603      	mov	r3, r0
 8005f04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e010      	b.n	8005f4a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	f107 020e 	add.w	r2, r7, #14
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4798      	blx	r3
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 fb46 	bl	80075ec <USBD_LL_Start>
 8005f60:	4603      	mov	r3, r0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	78fa      	ldrb	r2, [r7, #3]
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	4798      	blx	r3
 8005faa:	4603      	mov	r3, r0
 8005fac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	78fa      	ldrb	r2, [r7, #3]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
  }

  return USBD_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 ff2c 	bl	8006e58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	2b01      	cmp	r3, #1
 8006022:	d00e      	beq.n	8006042 <USBD_LL_SetupStage+0x5a>
 8006024:	2b01      	cmp	r3, #1
 8006026:	d302      	bcc.n	800602e <USBD_LL_SetupStage+0x46>
 8006028:	2b02      	cmp	r3, #2
 800602a:	d014      	beq.n	8006056 <USBD_LL_SetupStage+0x6e>
 800602c:	e01d      	b.n	800606a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa18 	bl	800646c <USBD_StdDevReq>
 800603c:	4603      	mov	r3, r0
 800603e:	73fb      	strb	r3, [r7, #15]
      break;
 8006040:	e020      	b.n	8006084 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa7c 	bl	8006548 <USBD_StdItfReq>
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
      break;
 8006054:	e016      	b.n	8006084 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fab8 	bl	80065d4 <USBD_StdEPReq>
 8006064:	4603      	mov	r3, r0
 8006066:	73fb      	strb	r3, [r7, #15]
      break;
 8006068:	e00c      	b.n	8006084 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006070:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006074:	b2db      	uxtb	r3, r3
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 fb17 	bl	80076ac <USBD_LL_StallEP>
 800607e:	4603      	mov	r3, r0
 8006080:	73fb      	strb	r3, [r7, #15]
      break;
 8006082:	bf00      	nop
  }

  return ret;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b086      	sub	sp, #24
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	460b      	mov	r3, r1
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800609c:	7afb      	ldrb	r3, [r7, #11]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d137      	bne.n	8006112 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d14a      	bne.n	800614a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d913      	bls.n	80060e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	1ad2      	subs	r2, r2, r3
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	4293      	cmp	r3, r2
 80060d8:	bf28      	it	cs
 80060da:	4613      	movcs	r3, r2
 80060dc:	461a      	mov	r2, r3
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 ff90 	bl	8007006 <USBD_CtlContinueRx>
 80060e6:	e030      	b.n	800614a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d105      	bne.n	800610a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 ff8c 	bl	8007028 <USBD_CtlSendStatus>
 8006110:	e01b      	b.n	800614a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d013      	beq.n	8006146 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006124:	2b03      	cmp	r3, #3
 8006126:	d10e      	bne.n	8006146 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	7afa      	ldrb	r2, [r7, #11]
 8006132:	4611      	mov	r1, r2
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	4798      	blx	r3
 8006138:	4603      	mov	r3, r0
 800613a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800613c:	7dfb      	ldrb	r3, [r7, #23]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	e002      	b.n	800614c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006146:	2303      	movs	r3, #3
 8006148:	e000      	b.n	800614c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	460b      	mov	r3, r1
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d16a      	bne.n	800623e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3314      	adds	r3, #20
 800616c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006174:	2b02      	cmp	r3, #2
 8006176:	d155      	bne.n	8006224 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	429a      	cmp	r2, r3
 8006182:	d914      	bls.n	80061ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	1ad2      	subs	r2, r2, r3
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	461a      	mov	r2, r3
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 ff22 	bl	8006fe4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061a0:	2300      	movs	r3, #0
 80061a2:	2200      	movs	r2, #0
 80061a4:	2100      	movs	r1, #0
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f001 fb2a 	bl	8007800 <USBD_LL_PrepareReceive>
 80061ac:	e03a      	b.n	8006224 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d11c      	bne.n	80061f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d316      	bcc.n	80061f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d20f      	bcs.n	80061f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061d4:	2200      	movs	r2, #0
 80061d6:	2100      	movs	r1, #0
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 ff03 	bl	8006fe4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061e6:	2300      	movs	r3, #0
 80061e8:	2200      	movs	r2, #0
 80061ea:	2100      	movs	r1, #0
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f001 fb07 	bl	8007800 <USBD_LL_PrepareReceive>
 80061f2:	e017      	b.n	8006224 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006206:	2b03      	cmp	r3, #3
 8006208:	d105      	bne.n	8006216 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006216:	2180      	movs	r1, #128	; 0x80
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f001 fa47 	bl	80076ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 ff15 	bl	800704e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800622a:	2b01      	cmp	r3, #1
 800622c:	d123      	bne.n	8006276 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f7ff fe9b 	bl	8005f6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800623c:	e01b      	b.n	8006276 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d013      	beq.n	8006272 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006250:	2b03      	cmp	r3, #3
 8006252:	d10e      	bne.n	8006272 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	7afa      	ldrb	r2, [r7, #11]
 800625e:	4611      	mov	r1, r2
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	4798      	blx	r3
 8006264:	4603      	mov	r3, r0
 8006266:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	e002      	b.n	8006278 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006272:	2303      	movs	r3, #3
 8006274:	e000      	b.n	8006278 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6852      	ldr	r2, [r2, #4]
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	4611      	mov	r1, r2
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062c4:	2340      	movs	r3, #64	; 0x40
 80062c6:	2200      	movs	r2, #0
 80062c8:	2100      	movs	r1, #0
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 f9a9 	bl	8007622 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2240      	movs	r2, #64	; 0x40
 80062dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062e0:	2340      	movs	r3, #64	; 0x40
 80062e2:	2200      	movs	r2, #0
 80062e4:	2180      	movs	r1, #128	; 0x80
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 f99b 	bl	8007622 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2240      	movs	r2, #64	; 0x40
 80062f6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	78fa      	ldrb	r2, [r7, #3]
 8006312:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2204      	movs	r2, #4
 800633a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800635a:	2b04      	cmp	r3, #4
 800635c:	d105      	bne.n	800636a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006386:	2b03      	cmp	r3, #3
 8006388:	d10b      	bne.n	80063a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640c:	2b00      	cmp	r3, #0
 800640e:	d009      	beq.n	8006424 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6852      	ldr	r2, [r2, #4]
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	4611      	mov	r1, r2
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
  }

  return USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800642e:	b480      	push	{r7}
 8006430:	b087      	sub	sp, #28
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3301      	adds	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800644c:	8a3b      	ldrh	r3, [r7, #16]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	b21a      	sxth	r2, r3
 8006452:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006456:	4313      	orrs	r3, r2
 8006458:	b21b      	sxth	r3, r3
 800645a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800645c:	89fb      	ldrh	r3, [r7, #14]
}
 800645e:	4618      	mov	r0, r3
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006482:	2b20      	cmp	r3, #32
 8006484:	d004      	beq.n	8006490 <USBD_StdDevReq+0x24>
 8006486:	2b40      	cmp	r3, #64	; 0x40
 8006488:	d002      	beq.n	8006490 <USBD_StdDevReq+0x24>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <USBD_StdDevReq+0x38>
 800648e:	e050      	b.n	8006532 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
 800649e:	4603      	mov	r3, r0
 80064a0:	73fb      	strb	r3, [r7, #15]
    break;
 80064a2:	e04b      	b.n	800653c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2b09      	cmp	r3, #9
 80064aa:	d83c      	bhi.n	8006526 <USBD_StdDevReq+0xba>
 80064ac:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <USBD_StdDevReq+0x48>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	08006509 	.word	0x08006509
 80064b8:	0800651d 	.word	0x0800651d
 80064bc:	08006527 	.word	0x08006527
 80064c0:	08006513 	.word	0x08006513
 80064c4:	08006527 	.word	0x08006527
 80064c8:	080064e7 	.word	0x080064e7
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	08006527 	.word	0x08006527
 80064d4:	080064ff 	.word	0x080064ff
 80064d8:	080064f1 	.word	0x080064f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f9ce 	bl	8006880 <USBD_GetDescriptor>
      break;
 80064e4:	e024      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fb33 	bl	8006b54 <USBD_SetAddress>
      break;
 80064ee:	e01f      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fb70 	bl	8006bd8 <USBD_SetConfig>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
      break;
 80064fc:	e018      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fc0d 	bl	8006d20 <USBD_GetConfig>
      break;
 8006506:	e013      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fc3c 	bl	8006d88 <USBD_GetStatus>
      break;
 8006510:	e00e      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fc6a 	bl	8006dee <USBD_SetFeature>
      break;
 800651a:	e009      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fc79 	bl	8006e16 <USBD_ClrFeature>
      break;
 8006524:	e004      	b.n	8006530 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fccf 	bl	8006ecc <USBD_CtlError>
      break;
 800652e:	bf00      	nop
    }
    break;
 8006530:	e004      	b.n	800653c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fcc9 	bl	8006ecc <USBD_CtlError>
    break;
 800653a:	bf00      	nop
  }

  return ret;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop

08006548 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800655e:	2b20      	cmp	r3, #32
 8006560:	d003      	beq.n	800656a <USBD_StdItfReq+0x22>
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d001      	beq.n	800656a <USBD_StdItfReq+0x22>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d12a      	bne.n	80065c0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006570:	3b01      	subs	r3, #1
 8006572:	2b02      	cmp	r3, #2
 8006574:	d81d      	bhi.n	80065b2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	889b      	ldrh	r3, [r3, #4]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	d813      	bhi.n	80065a8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	88db      	ldrh	r3, [r3, #6]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d110      	bne.n	80065bc <USBD_StdItfReq+0x74>
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10d      	bne.n	80065bc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fd41 	bl	8007028 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80065a6:	e009      	b.n	80065bc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fc8e 	bl	8006ecc <USBD_CtlError>
      break;
 80065b0:	e004      	b.n	80065bc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fc89 	bl	8006ecc <USBD_CtlError>
      break;
 80065ba:	e000      	b.n	80065be <USBD_StdItfReq+0x76>
      break;
 80065bc:	bf00      	nop
    }
    break;
 80065be:	e004      	b.n	80065ca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fc82 	bl	8006ecc <USBD_CtlError>
    break;
 80065c8:	bf00      	nop
  }

  return ret;
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	889b      	ldrh	r3, [r3, #4]
 80065e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d004      	beq.n	80065fe <USBD_StdEPReq+0x2a>
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d002      	beq.n	80065fe <USBD_StdEPReq+0x2a>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <USBD_StdEPReq+0x3e>
 80065fc:	e135      	b.n	800686a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]
    break;
 8006610:	e130      	b.n	8006874 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d03e      	beq.n	8006698 <USBD_StdEPReq+0xc4>
 800661a:	2b03      	cmp	r3, #3
 800661c:	d002      	beq.n	8006624 <USBD_StdEPReq+0x50>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d077      	beq.n	8006712 <USBD_StdEPReq+0x13e>
 8006622:	e11c      	b.n	800685e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662a:	2b02      	cmp	r3, #2
 800662c:	d002      	beq.n	8006634 <USBD_StdEPReq+0x60>
 800662e:	2b03      	cmp	r3, #3
 8006630:	d015      	beq.n	800665e <USBD_StdEPReq+0x8a>
 8006632:	e02b      	b.n	800668c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006634:	7bbb      	ldrb	r3, [r7, #14]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <USBD_StdEPReq+0x80>
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b80      	cmp	r3, #128	; 0x80
 800663e:	d009      	beq.n	8006654 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 f831 	bl	80076ac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 f82d 	bl	80076ac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006652:	e020      	b.n	8006696 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fc38 	bl	8006ecc <USBD_CtlError>
        break;
 800665c:	e01b      	b.n	8006696 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	885b      	ldrh	r3, [r3, #2]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10e      	bne.n	8006684 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <USBD_StdEPReq+0xb0>
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	2b80      	cmp	r3, #128	; 0x80
 8006670:	d008      	beq.n	8006684 <USBD_StdEPReq+0xb0>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	88db      	ldrh	r3, [r3, #6]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800667a:	7bbb      	ldrb	r3, [r7, #14]
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 f814 	bl	80076ac <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fccf 	bl	8007028 <USBD_CtlSendStatus>

        break;
 800668a:	e004      	b.n	8006696 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fc1c 	bl	8006ecc <USBD_CtlError>
        break;
 8006694:	bf00      	nop
      }
      break;
 8006696:	e0e7      	b.n	8006868 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d002      	beq.n	80066a8 <USBD_StdEPReq+0xd4>
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d015      	beq.n	80066d2 <USBD_StdEPReq+0xfe>
 80066a6:	e02d      	b.n	8006704 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <USBD_StdEPReq+0xf4>
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	2b80      	cmp	r3, #128	; 0x80
 80066b2:	d009      	beq.n	80066c8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fff7 	bl	80076ac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066be:	2180      	movs	r1, #128	; 0x80
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fff3 	bl	80076ac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80066c6:	e023      	b.n	8006710 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fbfe 	bl	8006ecc <USBD_CtlError>
        break;
 80066d0:	e01e      	b.n	8006710 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	885b      	ldrh	r3, [r3, #2]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d119      	bne.n	800670e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fffe 	bl	80076ea <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fc9a 	bl	8007028 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
        }
        break;
 8006702:	e004      	b.n	800670e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fbe0 	bl	8006ecc <USBD_CtlError>
        break;
 800670c:	e000      	b.n	8006710 <USBD_StdEPReq+0x13c>
        break;
 800670e:	bf00      	nop
      }
      break;
 8006710:	e0aa      	b.n	8006868 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006718:	2b02      	cmp	r3, #2
 800671a:	d002      	beq.n	8006722 <USBD_StdEPReq+0x14e>
 800671c:	2b03      	cmp	r3, #3
 800671e:	d032      	beq.n	8006786 <USBD_StdEPReq+0x1b2>
 8006720:	e097      	b.n	8006852 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006722:	7bbb      	ldrb	r3, [r7, #14]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d007      	beq.n	8006738 <USBD_StdEPReq+0x164>
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	2b80      	cmp	r3, #128	; 0x80
 800672c:	d004      	beq.n	8006738 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fbcb 	bl	8006ecc <USBD_CtlError>
          break;
 8006736:	e091      	b.n	800685c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800673c:	2b00      	cmp	r3, #0
 800673e:	da0b      	bge.n	8006758 <USBD_StdEPReq+0x184>
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	3310      	adds	r3, #16
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	4413      	add	r3, r2
 8006754:	3304      	adds	r3, #4
 8006756:	e00b      	b.n	8006770 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	3304      	adds	r3, #4
 8006770:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2202      	movs	r2, #2
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fc15 	bl	8006fae <USBD_CtlSendData>
        break;
 8006784:	e06a      	b.n	800685c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800678a:	2b00      	cmp	r3, #0
 800678c:	da11      	bge.n	80067b2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	f003 020f 	and.w	r2, r3, #15
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d117      	bne.n	80067d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fb8e 	bl	8006ecc <USBD_CtlError>
            break;
 80067b0:	e054      	b.n	800685c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d104      	bne.n	80067d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fb7b 	bl	8006ecc <USBD_CtlError>
            break;
 80067d6:	e041      	b.n	800685c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	da0b      	bge.n	80067f8 <USBD_StdEPReq+0x224>
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
 80067e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067e6:	4613      	mov	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	3310      	adds	r3, #16
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	4413      	add	r3, r2
 80067f4:	3304      	adds	r3, #4
 80067f6:	e00b      	b.n	8006810 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	4413      	add	r3, r2
 800680e:	3304      	adds	r3, #4
 8006810:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <USBD_StdEPReq+0x24a>
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	2b80      	cmp	r3, #128	; 0x80
 800681c:	d103      	bne.n	8006826 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	e00e      	b.n	8006844 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 ff7c 	bl	8007728 <USBD_LL_IsStallEP>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2201      	movs	r2, #1
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	e002      	b.n	8006844 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2202      	movs	r2, #2
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fbaf 	bl	8006fae <USBD_CtlSendData>
          break;
 8006850:	e004      	b.n	800685c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fb39 	bl	8006ecc <USBD_CtlError>
        break;
 800685a:	bf00      	nop
      }
      break;
 800685c:	e004      	b.n	8006868 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fb33 	bl	8006ecc <USBD_CtlError>
      break;
 8006866:	bf00      	nop
    }
    break;
 8006868:	e004      	b.n	8006874 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fb2d 	bl	8006ecc <USBD_CtlError>
    break;
 8006872:	bf00      	nop
  }

  return ret;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	885b      	ldrh	r3, [r3, #2]
 800689a:	0a1b      	lsrs	r3, r3, #8
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	2b06      	cmp	r3, #6
 80068a2:	f200 8128 	bhi.w	8006af6 <USBD_GetDescriptor+0x276>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <USBD_GetDescriptor+0x2c>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068c9 	.word	0x080068c9
 80068b0:	080068e1 	.word	0x080068e1
 80068b4:	08006921 	.word	0x08006921
 80068b8:	08006af7 	.word	0x08006af7
 80068bc:	08006af7 	.word	0x08006af7
 80068c0:	08006a97 	.word	0x08006a97
 80068c4:	08006ac3 	.word	0x08006ac3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	7c12      	ldrb	r2, [r2, #16]
 80068d4:	f107 0108 	add.w	r1, r7, #8
 80068d8:	4610      	mov	r0, r2
 80068da:	4798      	blx	r3
 80068dc:	60f8      	str	r0, [r7, #12]
    break;
 80068de:	e112      	b.n	8006b06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7c1b      	ldrb	r3, [r3, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10d      	bne.n	8006904 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	f107 0208 	add.w	r2, r7, #8
 80068f4:	4610      	mov	r0, r2
 80068f6:	4798      	blx	r3
 80068f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3301      	adds	r3, #1
 80068fe:	2202      	movs	r2, #2
 8006900:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006902:	e100      	b.n	8006b06 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	f107 0208 	add.w	r2, r7, #8
 8006910:	4610      	mov	r0, r2
 8006912:	4798      	blx	r3
 8006914:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	2202      	movs	r2, #2
 800691c:	701a      	strb	r2, [r3, #0]
    break;
 800691e:	e0f2      	b.n	8006b06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	885b      	ldrh	r3, [r3, #2]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b05      	cmp	r3, #5
 8006928:	f200 80ac 	bhi.w	8006a84 <USBD_GetDescriptor+0x204>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <USBD_GetDescriptor+0xb4>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	0800694d 	.word	0x0800694d
 8006938:	08006981 	.word	0x08006981
 800693c:	080069b5 	.word	0x080069b5
 8006940:	080069e9 	.word	0x080069e9
 8006944:	08006a1d 	.word	0x08006a1d
 8006948:	08006a51 	.word	0x08006a51
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00b      	beq.n	8006970 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	7c12      	ldrb	r2, [r2, #16]
 8006964:	f107 0108 	add.w	r1, r7, #8
 8006968:	4610      	mov	r0, r2
 800696a:	4798      	blx	r3
 800696c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800696e:	e091      	b.n	8006a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 faaa 	bl	8006ecc <USBD_CtlError>
        err++;
 8006978:	7afb      	ldrb	r3, [r7, #11]
 800697a:	3301      	adds	r3, #1
 800697c:	72fb      	strb	r3, [r7, #11]
      break;
 800697e:	e089      	b.n	8006a94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	7c12      	ldrb	r2, [r2, #16]
 8006998:	f107 0108 	add.w	r1, r7, #8
 800699c:	4610      	mov	r0, r2
 800699e:	4798      	blx	r3
 80069a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069a2:	e077      	b.n	8006a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa90 	bl	8006ecc <USBD_CtlError>
        err++;
 80069ac:	7afb      	ldrb	r3, [r7, #11]
 80069ae:	3301      	adds	r3, #1
 80069b0:	72fb      	strb	r3, [r7, #11]
      break;
 80069b2:	e06f      	b.n	8006a94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	7c12      	ldrb	r2, [r2, #16]
 80069cc:	f107 0108 	add.w	r1, r7, #8
 80069d0:	4610      	mov	r0, r2
 80069d2:	4798      	blx	r3
 80069d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069d6:	e05d      	b.n	8006a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fa76 	bl	8006ecc <USBD_CtlError>
        err++;
 80069e0:	7afb      	ldrb	r3, [r7, #11]
 80069e2:	3301      	adds	r3, #1
 80069e4:	72fb      	strb	r3, [r7, #11]
      break;
 80069e6:	e055      	b.n	8006a94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00b      	beq.n	8006a0c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	7c12      	ldrb	r2, [r2, #16]
 8006a00:	f107 0108 	add.w	r1, r7, #8
 8006a04:	4610      	mov	r0, r2
 8006a06:	4798      	blx	r3
 8006a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a0a:	e043      	b.n	8006a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa5c 	bl	8006ecc <USBD_CtlError>
        err++;
 8006a14:	7afb      	ldrb	r3, [r7, #11]
 8006a16:	3301      	adds	r3, #1
 8006a18:	72fb      	strb	r3, [r7, #11]
      break;
 8006a1a:	e03b      	b.n	8006a94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00b      	beq.n	8006a40 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	7c12      	ldrb	r2, [r2, #16]
 8006a34:	f107 0108 	add.w	r1, r7, #8
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
 8006a3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a3e:	e029      	b.n	8006a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa42 	bl	8006ecc <USBD_CtlError>
        err++;
 8006a48:	7afb      	ldrb	r3, [r7, #11]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	72fb      	strb	r3, [r7, #11]
      break;
 8006a4e:	e021      	b.n	8006a94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00b      	beq.n	8006a74 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	7c12      	ldrb	r2, [r2, #16]
 8006a68:	f107 0108 	add.w	r1, r7, #8
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4798      	blx	r3
 8006a70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a72:	e00f      	b.n	8006a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fa28 	bl	8006ecc <USBD_CtlError>
        err++;
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	72fb      	strb	r3, [r7, #11]
      break;
 8006a82:	e007      	b.n	8006a94 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa20 	bl	8006ecc <USBD_CtlError>
      err++;
 8006a8c:	7afb      	ldrb	r3, [r7, #11]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006a92:	bf00      	nop
    }
    break;
 8006a94:	e037      	b.n	8006b06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	7c1b      	ldrb	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa6:	f107 0208 	add.w	r2, r7, #8
 8006aaa:	4610      	mov	r0, r2
 8006aac:	4798      	blx	r3
 8006aae:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006ab0:	e029      	b.n	8006b06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fa09 	bl	8006ecc <USBD_CtlError>
      err++;
 8006aba:	7afb      	ldrb	r3, [r7, #11]
 8006abc:	3301      	adds	r3, #1
 8006abe:	72fb      	strb	r3, [r7, #11]
    break;
 8006ac0:	e021      	b.n	8006b06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	7c1b      	ldrb	r3, [r3, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10d      	bne.n	8006ae6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	f107 0208 	add.w	r2, r7, #8
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	4798      	blx	r3
 8006ada:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006ae4:	e00f      	b.n	8006b06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f9ef 	bl	8006ecc <USBD_CtlError>
      err++;
 8006aee:	7afb      	ldrb	r3, [r7, #11]
 8006af0:	3301      	adds	r3, #1
 8006af2:	72fb      	strb	r3, [r7, #11]
    break;
 8006af4:	e007      	b.n	8006b06 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f9e7 	bl	8006ecc <USBD_CtlError>
    err++;
 8006afe:	7afb      	ldrb	r3, [r7, #11]
 8006b00:	3301      	adds	r3, #1
 8006b02:	72fb      	strb	r3, [r7, #11]
    break;
 8006b04:	bf00      	nop
  }

  if (err != 0U)
 8006b06:	7afb      	ldrb	r3, [r7, #11]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d11e      	bne.n	8006b4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	88db      	ldrh	r3, [r3, #6]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d016      	beq.n	8006b42 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006b14:	893b      	ldrh	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00e      	beq.n	8006b38 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	88da      	ldrh	r2, [r3, #6]
 8006b1e:	893b      	ldrh	r3, [r7, #8]
 8006b20:	4293      	cmp	r3, r2
 8006b22:	bf28      	it	cs
 8006b24:	4613      	movcs	r3, r2
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b2a:	893b      	ldrh	r3, [r7, #8]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	68f9      	ldr	r1, [r7, #12]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fa3c 	bl	8006fae <USBD_CtlSendData>
 8006b36:	e009      	b.n	8006b4c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f9c6 	bl	8006ecc <USBD_CtlError>
 8006b40:	e004      	b.n	8006b4c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa70 	bl	8007028 <USBD_CtlSendStatus>
 8006b48:	e000      	b.n	8006b4c <USBD_GetDescriptor+0x2cc>
    return;
 8006b4a:	bf00      	nop
    }
  }
}
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop

08006b54 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	889b      	ldrh	r3, [r3, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d130      	bne.n	8006bc8 <USBD_SetAddress+0x74>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	88db      	ldrh	r3, [r3, #6]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d12c      	bne.n	8006bc8 <USBD_SetAddress+0x74>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	885b      	ldrh	r3, [r3, #2]
 8006b72:	2b7f      	cmp	r3, #127	; 0x7f
 8006b74:	d828      	bhi.n	8006bc8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	885b      	ldrh	r3, [r3, #2]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d104      	bne.n	8006b96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f99c 	bl	8006ecc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b94:	e01c      	b.n	8006bd0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	7bfa      	ldrb	r2, [r7, #15]
 8006b9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fdec 	bl	8007780 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fa3d 	bl	8007028 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bbc:	e008      	b.n	8006bd0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc6:	e003      	b.n	8006bd0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f97e 	bl	8006ecc <USBD_CtlError>
  }
}
 8006bd0:	bf00      	nop
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	885b      	ldrh	r3, [r3, #2]
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	4b4b      	ldr	r3, [pc, #300]	; (8006d1c <USBD_SetConfig+0x144>)
 8006bee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bf0:	4b4a      	ldr	r3, [pc, #296]	; (8006d1c <USBD_SetConfig+0x144>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d905      	bls.n	8006c04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f966 	bl	8006ecc <USBD_CtlError>
    return USBD_FAIL;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e087      	b.n	8006d14 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d002      	beq.n	8006c14 <USBD_SetConfig+0x3c>
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d025      	beq.n	8006c5e <USBD_SetConfig+0x86>
 8006c12:	e071      	b.n	8006cf8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006c14:	4b41      	ldr	r3, [pc, #260]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01c      	beq.n	8006c56 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006c1c:	4b3f      	ldr	r3, [pc, #252]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c26:	4b3d      	ldr	r3, [pc, #244]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff f9a7 	bl	8005f80 <USBD_SetClassConfig>
 8006c32:	4603      	mov	r3, r0
 8006c34:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d004      	beq.n	8006c46 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f944 	bl	8006ecc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006c44:	e065      	b.n	8006d12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f9ee 	bl	8007028 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2203      	movs	r2, #3
 8006c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006c54:	e05d      	b.n	8006d12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f9e6 	bl	8007028 <USBD_CtlSendStatus>
    break;
 8006c5c:	e059      	b.n	8006d12 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006c5e:	4b2f      	ldr	r3, [pc, #188]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d112      	bne.n	8006c8c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006c6e:	4b2b      	ldr	r3, [pc, #172]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c78:	4b28      	ldr	r3, [pc, #160]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7ff f99a 	bl	8005fb8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f9cf 	bl	8007028 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006c8a:	e042      	b.n	8006d12 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006c8c:	4b23      	ldr	r3, [pc, #140]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d02a      	beq.n	8006cf0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff f988 	bl	8005fb8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006ca8:	4b1c      	ldr	r3, [pc, #112]	; (8006d1c <USBD_SetConfig+0x144>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cb2:	4b1a      	ldr	r3, [pc, #104]	; (8006d1c <USBD_SetConfig+0x144>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff f961 	bl	8005f80 <USBD_SetClassConfig>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00f      	beq.n	8006ce8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f8fe 	bl	8006ecc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff f96d 	bl	8005fb8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006ce6:	e014      	b.n	8006d12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f99d 	bl	8007028 <USBD_CtlSendStatus>
    break;
 8006cee:	e010      	b.n	8006d12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f999 	bl	8007028 <USBD_CtlSendStatus>
    break;
 8006cf6:	e00c      	b.n	8006d12 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f8e6 	bl	8006ecc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <USBD_SetConfig+0x144>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff f956 	bl	8005fb8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d10:	bf00      	nop
  }

  return ret;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	200005f0 	.word	0x200005f0

08006d20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	88db      	ldrh	r3, [r3, #6]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d004      	beq.n	8006d3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f8c9 	bl	8006ecc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006d3a:	e021      	b.n	8006d80 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	db17      	blt.n	8006d76 <USBD_GetConfig+0x56>
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	dd02      	ble.n	8006d50 <USBD_GetConfig+0x30>
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d00b      	beq.n	8006d66 <USBD_GetConfig+0x46>
 8006d4e:	e012      	b.n	8006d76 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f925 	bl	8006fae <USBD_CtlSendData>
      break;
 8006d64:	e00c      	b.n	8006d80 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f91d 	bl	8006fae <USBD_CtlSendData>
      break;
 8006d74:	e004      	b.n	8006d80 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f8a7 	bl	8006ecc <USBD_CtlError>
      break;
 8006d7e:	bf00      	nop
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d81e      	bhi.n	8006ddc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	88db      	ldrh	r3, [r3, #6]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d004      	beq.n	8006db0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f88f 	bl	8006ecc <USBD_CtlError>
      break;
 8006dae:	e01a      	b.n	8006de6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f043 0202 	orr.w	r2, r3, #2
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	330c      	adds	r3, #12
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f8ea 	bl	8006fae <USBD_CtlSendData>
    break;
 8006dda:	e004      	b.n	8006de6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f874 	bl	8006ecc <USBD_CtlError>
    break;
 8006de4:	bf00      	nop
  }
}
 8006de6:	bf00      	nop
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	885b      	ldrh	r3, [r3, #2]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d106      	bne.n	8006e0e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f90d 	bl	8007028 <USBD_CtlSendStatus>
  }
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e26:	3b01      	subs	r3, #1
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d80b      	bhi.n	8006e44 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	885b      	ldrh	r3, [r3, #2]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d10c      	bne.n	8006e4e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f8f3 	bl	8007028 <USBD_CtlSendStatus>
      }
      break;
 8006e42:	e004      	b.n	8006e4e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f840 	bl	8006ecc <USBD_CtlError>
      break;
 8006e4c:	e000      	b.n	8006e50 <USBD_ClrFeature+0x3a>
      break;
 8006e4e:	bf00      	nop
  }
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	781a      	ldrb	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff fad3 	bl	800642e <SWAPBYTE>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff fac6 	bl	800642e <SWAPBYTE>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f7ff fab9 	bl	800642e <SWAPBYTE>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	80da      	strh	r2, [r3, #6]
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ed6:	2180      	movs	r1, #128	; 0x80
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fbe7 	bl	80076ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ede:	2100      	movs	r1, #0
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fbe3 	bl	80076ac <USBD_LL_StallEP>
}
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d036      	beq.n	8006f72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f08:	6938      	ldr	r0, [r7, #16]
 8006f0a:	f000 f836 	bl	8006f7a <USBD_GetLen>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	3301      	adds	r3, #1
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	4413      	add	r3, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	4413      	add	r3, r2
 8006f34:	2203      	movs	r2, #3
 8006f36:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f3e:	e013      	b.n	8006f68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	4413      	add	r3, r2
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	7812      	ldrb	r2, [r2, #0]
 8006f4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	613b      	str	r3, [r7, #16]
    idx++;
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	3301      	adds	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	3301      	adds	r3, #1
 8006f66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e7      	bne.n	8006f40 <USBD_GetString+0x52>
 8006f70:	e000      	b.n	8006f74 <USBD_GetString+0x86>
    return;
 8006f72:	bf00      	nop
  }
}
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f8a:	e005      	b.n	8006f98 <USBD_GetLen+0x1e>
  {
    len++;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3301      	adds	r3, #1
 8006f96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f5      	bne.n	8006f8c <USBD_GetLen+0x12>
  }

  return len;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 fbf2 	bl	80077be <USBD_LL_Transmit>

  return USBD_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 fbe1 	bl	80077be <USBD_LL_Transmit>

  return USBD_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	2100      	movs	r1, #0
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fbf1 	bl	8007800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2204      	movs	r2, #4
 8007034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007038:	2300      	movs	r3, #0
 800703a:	2200      	movs	r2, #0
 800703c:	2100      	movs	r1, #0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fbbd 	bl	80077be <USBD_LL_Transmit>

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2205      	movs	r2, #5
 800705a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800705e:	2300      	movs	r3, #0
 8007060:	2200      	movs	r2, #0
 8007062:	2100      	movs	r1, #0
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fbcb 	bl	8007800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007078:	2200      	movs	r2, #0
 800707a:	490e      	ldr	r1, [pc, #56]	; (80070b4 <MX_USB_DEVICE_Init+0x40>)
 800707c:	480e      	ldr	r0, [pc, #56]	; (80070b8 <MX_USB_DEVICE_Init+0x44>)
 800707e:	f7fe ff11 	bl	8005ea4 <USBD_Init>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007088:	f7f9 fc22 	bl	80008d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800708c:	490b      	ldr	r1, [pc, #44]	; (80070bc <MX_USB_DEVICE_Init+0x48>)
 800708e:	480a      	ldr	r0, [pc, #40]	; (80070b8 <MX_USB_DEVICE_Init+0x44>)
 8007090:	f7fe ff3e 	bl	8005f10 <USBD_RegisterClass>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800709a:	f7f9 fc19 	bl	80008d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800709e:	4806      	ldr	r0, [pc, #24]	; (80070b8 <MX_USB_DEVICE_Init+0x44>)
 80070a0:	f7fe ff57 	bl	8005f52 <USBD_Start>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80070aa:	f7f9 fc11 	bl	80008d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070ae:	bf00      	nop
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000110 	.word	0x20000110
 80070b8:	200006ec 	.word	0x200006ec
 80070bc:	20000014 	.word	0x20000014

080070c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2212      	movs	r2, #18
 80070d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070d2:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	2000012c 	.word	0x2000012c

080070e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	6039      	str	r1, [r7, #0]
 80070ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2204      	movs	r2, #4
 80070f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070f6:	4b03      	ldr	r3, [pc, #12]	; (8007104 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	20000140 	.word	0x20000140

08007108 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	4907      	ldr	r1, [pc, #28]	; (800713c <USBD_FS_ProductStrDescriptor+0x34>)
 800711e:	4808      	ldr	r0, [pc, #32]	; (8007140 <USBD_FS_ProductStrDescriptor+0x38>)
 8007120:	f7ff fee5 	bl	8006eee <USBD_GetString>
 8007124:	e004      	b.n	8007130 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	4904      	ldr	r1, [pc, #16]	; (800713c <USBD_FS_ProductStrDescriptor+0x34>)
 800712a:	4805      	ldr	r0, [pc, #20]	; (8007140 <USBD_FS_ProductStrDescriptor+0x38>)
 800712c:	f7ff fedf 	bl	8006eee <USBD_GetString>
  }
  return USBD_StrDesc;
 8007130:	4b02      	ldr	r3, [pc, #8]	; (800713c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	200009bc 	.word	0x200009bc
 8007140:	08007ac4 	.word	0x08007ac4

08007144 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	6039      	str	r1, [r7, #0]
 800714e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	4904      	ldr	r1, [pc, #16]	; (8007164 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007154:	4804      	ldr	r0, [pc, #16]	; (8007168 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007156:	f7ff feca 	bl	8006eee <USBD_GetString>
  return USBD_StrDesc;
 800715a:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	200009bc 	.word	0x200009bc
 8007168:	08007adc 	.word	0x08007adc

0800716c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	6039      	str	r1, [r7, #0]
 8007176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	221a      	movs	r2, #26
 800717c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800717e:	f000 f843 	bl	8007208 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007182:	4b02      	ldr	r3, [pc, #8]	; (800718c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000144 	.word	0x20000144

08007190 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	6039      	str	r1, [r7, #0]
 800719a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d105      	bne.n	80071ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	4907      	ldr	r1, [pc, #28]	; (80071c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071a6:	4808      	ldr	r0, [pc, #32]	; (80071c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071a8:	f7ff fea1 	bl	8006eee <USBD_GetString>
 80071ac:	e004      	b.n	80071b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	4904      	ldr	r1, [pc, #16]	; (80071c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071b2:	4805      	ldr	r0, [pc, #20]	; (80071c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071b4:	f7ff fe9b 	bl	8006eee <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b8:	4b02      	ldr	r3, [pc, #8]	; (80071c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	200009bc 	.word	0x200009bc
 80071c8:	08007af0 	.word	0x08007af0

080071cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	4907      	ldr	r1, [pc, #28]	; (8007200 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071e2:	4808      	ldr	r0, [pc, #32]	; (8007204 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071e4:	f7ff fe83 	bl	8006eee <USBD_GetString>
 80071e8:	e004      	b.n	80071f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	4904      	ldr	r1, [pc, #16]	; (8007200 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071ee:	4805      	ldr	r0, [pc, #20]	; (8007204 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071f0:	f7ff fe7d 	bl	8006eee <USBD_GetString>
  }
  return USBD_StrDesc;
 80071f4:	4b02      	ldr	r3, [pc, #8]	; (8007200 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	200009bc 	.word	0x200009bc
 8007204:	08007afc 	.word	0x08007afc

08007208 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800720e:	4b0f      	ldr	r3, [pc, #60]	; (800724c <Get_SerialNum+0x44>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007214:	4b0e      	ldr	r3, [pc, #56]	; (8007250 <Get_SerialNum+0x48>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800721a:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <Get_SerialNum+0x4c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800722e:	2208      	movs	r2, #8
 8007230:	4909      	ldr	r1, [pc, #36]	; (8007258 <Get_SerialNum+0x50>)
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 f814 	bl	8007260 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007238:	2204      	movs	r2, #4
 800723a:	4908      	ldr	r1, [pc, #32]	; (800725c <Get_SerialNum+0x54>)
 800723c:	68b8      	ldr	r0, [r7, #8]
 800723e:	f000 f80f 	bl	8007260 <IntToUnicode>
  }
}
 8007242:	bf00      	nop
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	1fff7a10 	.word	0x1fff7a10
 8007250:	1fff7a14 	.word	0x1fff7a14
 8007254:	1fff7a18 	.word	0x1fff7a18
 8007258:	20000146 	.word	0x20000146
 800725c:	20000156 	.word	0x20000156

08007260 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007272:	2300      	movs	r3, #0
 8007274:	75fb      	strb	r3, [r7, #23]
 8007276:	e027      	b.n	80072c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	0f1b      	lsrs	r3, r3, #28
 800727c:	2b09      	cmp	r3, #9
 800727e:	d80b      	bhi.n	8007298 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	0f1b      	lsrs	r3, r3, #28
 8007284:	b2da      	uxtb	r2, r3
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	4619      	mov	r1, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	440b      	add	r3, r1
 8007290:	3230      	adds	r2, #48	; 0x30
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e00a      	b.n	80072ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	0f1b      	lsrs	r3, r3, #28
 800729c:	b2da      	uxtb	r2, r3
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	4619      	mov	r1, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	440b      	add	r3, r1
 80072a8:	3237      	adds	r2, #55	; 0x37
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	3301      	adds	r3, #1
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	4413      	add	r3, r2
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	3301      	adds	r3, #1
 80072c6:	75fb      	strb	r3, [r7, #23]
 80072c8:	7dfa      	ldrb	r2, [r7, #23]
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d3d3      	bcc.n	8007278 <IntToUnicode+0x18>
  }
}
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	; 0x28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e4:	f107 0314 	add.w	r3, r7, #20
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072fc:	d13a      	bne.n	8007374 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	4b1e      	ldr	r3, [pc, #120]	; (800737c <HAL_PCD_MspInit+0xa0>)
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007306:	4a1d      	ldr	r2, [pc, #116]	; (800737c <HAL_PCD_MspInit+0xa0>)
 8007308:	f043 0301 	orr.w	r3, r3, #1
 800730c:	6313      	str	r3, [r2, #48]	; 0x30
 800730e:	4b1b      	ldr	r3, [pc, #108]	; (800737c <HAL_PCD_MspInit+0xa0>)
 8007310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800731a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800731e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007320:	2302      	movs	r3, #2
 8007322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007324:	2300      	movs	r3, #0
 8007326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007328:	2303      	movs	r3, #3
 800732a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800732c:	230a      	movs	r3, #10
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007330:	f107 0314 	add.w	r3, r7, #20
 8007334:	4619      	mov	r1, r3
 8007336:	4812      	ldr	r0, [pc, #72]	; (8007380 <HAL_PCD_MspInit+0xa4>)
 8007338:	f7fa fa6a 	bl	8001810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800733c:	4b0f      	ldr	r3, [pc, #60]	; (800737c <HAL_PCD_MspInit+0xa0>)
 800733e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007340:	4a0e      	ldr	r2, [pc, #56]	; (800737c <HAL_PCD_MspInit+0xa0>)
 8007342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007346:	6353      	str	r3, [r2, #52]	; 0x34
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <HAL_PCD_MspInit+0xa0>)
 800734e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007350:	4a0a      	ldr	r2, [pc, #40]	; (800737c <HAL_PCD_MspInit+0xa0>)
 8007352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007356:	6453      	str	r3, [r2, #68]	; 0x44
 8007358:	4b08      	ldr	r3, [pc, #32]	; (800737c <HAL_PCD_MspInit+0xa0>)
 800735a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007364:	2200      	movs	r2, #0
 8007366:	2100      	movs	r1, #0
 8007368:	2043      	movs	r0, #67	; 0x43
 800736a:	f7fa fa1a 	bl	80017a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800736e:	2043      	movs	r0, #67	; 0x43
 8007370:	f7fa fa33 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007374:	bf00      	nop
 8007376:	3728      	adds	r7, #40	; 0x28
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	40023800 	.word	0x40023800
 8007380:	40020000 	.word	0x40020000

08007384 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f7fe fe24 	bl	8005fe8 <USBD_LL_SetupStage>
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80073ba:	78fa      	ldrb	r2, [r7, #3]
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	1a9b      	subs	r3, r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	4619      	mov	r1, r3
 80073d2:	f7fe fe5c 	bl	800608e <USBD_LL_DataOutStage>
}
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80073f0:	78fa      	ldrb	r2, [r7, #3]
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	3348      	adds	r3, #72	; 0x48
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	4619      	mov	r1, r3
 8007406:	f7fe fea5 	bl	8006154 <USBD_LL_DataInStage>
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe ffa9 	bl	8006378 <USBD_LL_SOF>
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007436:	2301      	movs	r3, #1
 8007438:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d001      	beq.n	8007446 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007442:	f7f9 fa45 	bl	80008d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800744c:	7bfa      	ldrb	r2, [r7, #15]
 800744e:	4611      	mov	r1, r2
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe ff56 	bl	8006302 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800745c:	4618      	mov	r0, r3
 800745e:	f7fe ff0f 	bl	8006280 <USBD_LL_Reset>
}
 8007462:	bf00      	nop
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe ff51 	bl	8006322 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6812      	ldr	r2, [r2, #0]
 800748e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007492:	f043 0301 	orr.w	r3, r3, #1
 8007496:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074a0:	4b04      	ldr	r3, [pc, #16]	; (80074b4 <HAL_PCD_SuspendCallback+0x48>)
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	4a03      	ldr	r2, [pc, #12]	; (80074b4 <HAL_PCD_SuspendCallback+0x48>)
 80074a6:	f043 0306 	orr.w	r3, r3, #6
 80074aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074ac:	bf00      	nop
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	e000ed00 	.word	0xe000ed00

080074b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe ff40 	bl	800634c <USBD_LL_Resume>
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074e6:	78fa      	ldrb	r2, [r7, #3]
 80074e8:	4611      	mov	r1, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe ff6b 	bl	80063c6 <USBD_LL_IsoOUTIncomplete>
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800750a:	78fa      	ldrb	r2, [r7, #3]
 800750c:	4611      	mov	r1, r2
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe ff4c 	bl	80063ac <USBD_LL_IsoINIncomplete>
}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe ff58 	bl	80063e0 <USBD_LL_DevConnected>
}
 8007530:	bf00      	nop
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe ff55 	bl	80063f6 <USBD_LL_DevDisconnected>
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d13c      	bne.n	80075de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007564:	4a20      	ldr	r2, [pc, #128]	; (80075e8 <USBD_LL_Init+0x94>)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a1e      	ldr	r2, [pc, #120]	; (80075e8 <USBD_LL_Init+0x94>)
 8007570:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007574:	4b1c      	ldr	r3, [pc, #112]	; (80075e8 <USBD_LL_Init+0x94>)
 8007576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800757a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800757c:	4b1a      	ldr	r3, [pc, #104]	; (80075e8 <USBD_LL_Init+0x94>)
 800757e:	2204      	movs	r2, #4
 8007580:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007582:	4b19      	ldr	r3, [pc, #100]	; (80075e8 <USBD_LL_Init+0x94>)
 8007584:	2202      	movs	r2, #2
 8007586:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007588:	4b17      	ldr	r3, [pc, #92]	; (80075e8 <USBD_LL_Init+0x94>)
 800758a:	2200      	movs	r2, #0
 800758c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800758e:	4b16      	ldr	r3, [pc, #88]	; (80075e8 <USBD_LL_Init+0x94>)
 8007590:	2202      	movs	r2, #2
 8007592:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007594:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <USBD_LL_Init+0x94>)
 8007596:	2200      	movs	r2, #0
 8007598:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800759a:	4b13      	ldr	r3, [pc, #76]	; (80075e8 <USBD_LL_Init+0x94>)
 800759c:	2200      	movs	r2, #0
 800759e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075a0:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <USBD_LL_Init+0x94>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80075a6:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <USBD_LL_Init+0x94>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075ac:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <USBD_LL_Init+0x94>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075b2:	480d      	ldr	r0, [pc, #52]	; (80075e8 <USBD_LL_Init+0x94>)
 80075b4:	f7fb f835 	bl	8002622 <HAL_PCD_Init>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075be:	f7f9 f987 	bl	80008d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075c2:	2180      	movs	r1, #128	; 0x80
 80075c4:	4808      	ldr	r0, [pc, #32]	; (80075e8 <USBD_LL_Init+0x94>)
 80075c6:	f7fc f97a 	bl	80038be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075ca:	2240      	movs	r2, #64	; 0x40
 80075cc:	2100      	movs	r1, #0
 80075ce:	4806      	ldr	r0, [pc, #24]	; (80075e8 <USBD_LL_Init+0x94>)
 80075d0:	f7fc f92e 	bl	8003830 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075d4:	2280      	movs	r2, #128	; 0x80
 80075d6:	2101      	movs	r1, #1
 80075d8:	4803      	ldr	r0, [pc, #12]	; (80075e8 <USBD_LL_Init+0x94>)
 80075da:	f7fc f929 	bl	8003830 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000bbc 	.word	0x20000bbc

080075ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007602:	4618      	mov	r0, r3
 8007604:	f7fb f92a 	bl	800285c <HAL_PCD_Start>
 8007608:	4603      	mov	r3, r0
 800760a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 f918 	bl	8007844 <USBD_Get_USB_Status>
 8007614:	4603      	mov	r3, r0
 8007616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007618:	7bbb      	ldrb	r3, [r7, #14]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	4608      	mov	r0, r1
 800762c:	4611      	mov	r1, r2
 800762e:	461a      	mov	r2, r3
 8007630:	4603      	mov	r3, r0
 8007632:	70fb      	strb	r3, [r7, #3]
 8007634:	460b      	mov	r3, r1
 8007636:	70bb      	strb	r3, [r7, #2]
 8007638:	4613      	mov	r3, r2
 800763a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800764a:	78bb      	ldrb	r3, [r7, #2]
 800764c:	883a      	ldrh	r2, [r7, #0]
 800764e:	78f9      	ldrb	r1, [r7, #3]
 8007650:	f7fb fd0e 	bl	8003070 <HAL_PCD_EP_Open>
 8007654:	4603      	mov	r3, r0
 8007656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f8f2 	bl	8007844 <USBD_Get_USB_Status>
 8007660:	4603      	mov	r3, r0
 8007662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007664:	7bbb      	ldrb	r3, [r7, #14]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007688:	78fa      	ldrb	r2, [r7, #3]
 800768a:	4611      	mov	r1, r2
 800768c:	4618      	mov	r0, r3
 800768e:	f7fb fd57 	bl	8003140 <HAL_PCD_EP_Close>
 8007692:	4603      	mov	r3, r0
 8007694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	4618      	mov	r0, r3
 800769a:	f000 f8d3 	bl	8007844 <USBD_Get_USB_Status>
 800769e:	4603      	mov	r3, r0
 80076a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076c6:	78fa      	ldrb	r2, [r7, #3]
 80076c8:	4611      	mov	r1, r2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fb fe17 	bl	80032fe <HAL_PCD_EP_SetStall>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 f8b4 	bl	8007844 <USBD_Get_USB_Status>
 80076dc:	4603      	mov	r3, r0
 80076de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	460b      	mov	r3, r1
 80076f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007704:	78fa      	ldrb	r2, [r7, #3]
 8007706:	4611      	mov	r1, r2
 8007708:	4618      	mov	r0, r3
 800770a:	f7fb fe5c 	bl	80033c6 <HAL_PCD_EP_ClrStall>
 800770e:	4603      	mov	r3, r0
 8007710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 f895 	bl	8007844 <USBD_Get_USB_Status>
 800771a:	4603      	mov	r3, r0
 800771c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800771e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800773a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800773c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007740:	2b00      	cmp	r3, #0
 8007742:	da0b      	bge.n	800775c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800774a:	68f9      	ldr	r1, [r7, #12]
 800774c:	4613      	mov	r3, r2
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	440b      	add	r3, r1
 8007756:	333e      	adds	r3, #62	; 0x3e
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	e00b      	b.n	8007774 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	4613      	mov	r3, r2
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007772:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800779a:	78fa      	ldrb	r2, [r7, #3]
 800779c:	4611      	mov	r1, r2
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fb fc41 	bl	8003026 <HAL_PCD_SetAddress>
 80077a4:	4603      	mov	r3, r0
 80077a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 f84a 	bl	8007844 <USBD_Get_USB_Status>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b086      	sub	sp, #24
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
 80077ca:	460b      	mov	r3, r1
 80077cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80077dc:	7af9      	ldrb	r1, [r7, #11]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	f7fb fd42 	bl	800326a <HAL_PCD_EP_Transmit>
 80077e6:	4603      	mov	r3, r0
 80077e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 f829 	bl	8007844 <USBD_Get_USB_Status>
 80077f2:	4603      	mov	r3, r0
 80077f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	607a      	str	r2, [r7, #4]
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	460b      	mov	r3, r1
 800780e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800781e:	7af9      	ldrb	r1, [r7, #11]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	f7fb fcd6 	bl	80031d4 <HAL_PCD_EP_Receive>
 8007828:	4603      	mov	r3, r0
 800782a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f808 	bl	8007844 <USBD_Get_USB_Status>
 8007834:	4603      	mov	r3, r0
 8007836:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007838:	7dbb      	ldrb	r3, [r7, #22]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	2b03      	cmp	r3, #3
 8007856:	d817      	bhi.n	8007888 <USBD_Get_USB_Status+0x44>
 8007858:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <USBD_Get_USB_Status+0x1c>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	08007871 	.word	0x08007871
 8007864:	08007877 	.word	0x08007877
 8007868:	0800787d 	.word	0x0800787d
 800786c:	08007883 	.word	0x08007883
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	73fb      	strb	r3, [r7, #15]
    break;
 8007874:	e00b      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007876:	2303      	movs	r3, #3
 8007878:	73fb      	strb	r3, [r7, #15]
    break;
 800787a:	e008      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800787c:	2301      	movs	r3, #1
 800787e:	73fb      	strb	r3, [r7, #15]
    break;
 8007880:	e005      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007882:	2303      	movs	r3, #3
 8007884:	73fb      	strb	r3, [r7, #15]
    break;
 8007886:	e002      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007888:	2303      	movs	r3, #3
 800788a:	73fb      	strb	r3, [r7, #15]
    break;
 800788c:	bf00      	nop
  }
  return usb_status;
 800788e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <__errno>:
 800789c:	4b01      	ldr	r3, [pc, #4]	; (80078a4 <__errno+0x8>)
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	20000160 	.word	0x20000160

080078a8 <__libc_init_array>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	4e0d      	ldr	r6, [pc, #52]	; (80078e0 <__libc_init_array+0x38>)
 80078ac:	4c0d      	ldr	r4, [pc, #52]	; (80078e4 <__libc_init_array+0x3c>)
 80078ae:	1ba4      	subs	r4, r4, r6
 80078b0:	10a4      	asrs	r4, r4, #2
 80078b2:	2500      	movs	r5, #0
 80078b4:	42a5      	cmp	r5, r4
 80078b6:	d109      	bne.n	80078cc <__libc_init_array+0x24>
 80078b8:	4e0b      	ldr	r6, [pc, #44]	; (80078e8 <__libc_init_array+0x40>)
 80078ba:	4c0c      	ldr	r4, [pc, #48]	; (80078ec <__libc_init_array+0x44>)
 80078bc:	f000 f8ea 	bl	8007a94 <_init>
 80078c0:	1ba4      	subs	r4, r4, r6
 80078c2:	10a4      	asrs	r4, r4, #2
 80078c4:	2500      	movs	r5, #0
 80078c6:	42a5      	cmp	r5, r4
 80078c8:	d105      	bne.n	80078d6 <__libc_init_array+0x2e>
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078d0:	4798      	blx	r3
 80078d2:	3501      	adds	r5, #1
 80078d4:	e7ee      	b.n	80078b4 <__libc_init_array+0xc>
 80078d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078da:	4798      	blx	r3
 80078dc:	3501      	adds	r5, #1
 80078de:	e7f2      	b.n	80078c6 <__libc_init_array+0x1e>
 80078e0:	08008888 	.word	0x08008888
 80078e4:	08008888 	.word	0x08008888
 80078e8:	08008888 	.word	0x08008888
 80078ec:	0800888c 	.word	0x0800888c

080078f0 <malloc>:
 80078f0:	4b02      	ldr	r3, [pc, #8]	; (80078fc <malloc+0xc>)
 80078f2:	4601      	mov	r1, r0
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	f000 b861 	b.w	80079bc <_malloc_r>
 80078fa:	bf00      	nop
 80078fc:	20000160 	.word	0x20000160

08007900 <free>:
 8007900:	4b02      	ldr	r3, [pc, #8]	; (800790c <free+0xc>)
 8007902:	4601      	mov	r1, r0
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	f000 b80b 	b.w	8007920 <_free_r>
 800790a:	bf00      	nop
 800790c:	20000160 	.word	0x20000160

08007910 <memset>:
 8007910:	4402      	add	r2, r0
 8007912:	4603      	mov	r3, r0
 8007914:	4293      	cmp	r3, r2
 8007916:	d100      	bne.n	800791a <memset+0xa>
 8007918:	4770      	bx	lr
 800791a:	f803 1b01 	strb.w	r1, [r3], #1
 800791e:	e7f9      	b.n	8007914 <memset+0x4>

08007920 <_free_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4605      	mov	r5, r0
 8007924:	2900      	cmp	r1, #0
 8007926:	d045      	beq.n	80079b4 <_free_r+0x94>
 8007928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800792c:	1f0c      	subs	r4, r1, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	bfb8      	it	lt
 8007932:	18e4      	addlt	r4, r4, r3
 8007934:	f000 f8ac 	bl	8007a90 <__malloc_lock>
 8007938:	4a1f      	ldr	r2, [pc, #124]	; (80079b8 <_free_r+0x98>)
 800793a:	6813      	ldr	r3, [r2, #0]
 800793c:	4610      	mov	r0, r2
 800793e:	b933      	cbnz	r3, 800794e <_free_r+0x2e>
 8007940:	6063      	str	r3, [r4, #4]
 8007942:	6014      	str	r4, [r2, #0]
 8007944:	4628      	mov	r0, r5
 8007946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800794a:	f000 b8a2 	b.w	8007a92 <__malloc_unlock>
 800794e:	42a3      	cmp	r3, r4
 8007950:	d90c      	bls.n	800796c <_free_r+0x4c>
 8007952:	6821      	ldr	r1, [r4, #0]
 8007954:	1862      	adds	r2, r4, r1
 8007956:	4293      	cmp	r3, r2
 8007958:	bf04      	itt	eq
 800795a:	681a      	ldreq	r2, [r3, #0]
 800795c:	685b      	ldreq	r3, [r3, #4]
 800795e:	6063      	str	r3, [r4, #4]
 8007960:	bf04      	itt	eq
 8007962:	1852      	addeq	r2, r2, r1
 8007964:	6022      	streq	r2, [r4, #0]
 8007966:	6004      	str	r4, [r0, #0]
 8007968:	e7ec      	b.n	8007944 <_free_r+0x24>
 800796a:	4613      	mov	r3, r2
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	b10a      	cbz	r2, 8007974 <_free_r+0x54>
 8007970:	42a2      	cmp	r2, r4
 8007972:	d9fa      	bls.n	800796a <_free_r+0x4a>
 8007974:	6819      	ldr	r1, [r3, #0]
 8007976:	1858      	adds	r0, r3, r1
 8007978:	42a0      	cmp	r0, r4
 800797a:	d10b      	bne.n	8007994 <_free_r+0x74>
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	4401      	add	r1, r0
 8007980:	1858      	adds	r0, r3, r1
 8007982:	4282      	cmp	r2, r0
 8007984:	6019      	str	r1, [r3, #0]
 8007986:	d1dd      	bne.n	8007944 <_free_r+0x24>
 8007988:	6810      	ldr	r0, [r2, #0]
 800798a:	6852      	ldr	r2, [r2, #4]
 800798c:	605a      	str	r2, [r3, #4]
 800798e:	4401      	add	r1, r0
 8007990:	6019      	str	r1, [r3, #0]
 8007992:	e7d7      	b.n	8007944 <_free_r+0x24>
 8007994:	d902      	bls.n	800799c <_free_r+0x7c>
 8007996:	230c      	movs	r3, #12
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	e7d3      	b.n	8007944 <_free_r+0x24>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	1821      	adds	r1, r4, r0
 80079a0:	428a      	cmp	r2, r1
 80079a2:	bf04      	itt	eq
 80079a4:	6811      	ldreq	r1, [r2, #0]
 80079a6:	6852      	ldreq	r2, [r2, #4]
 80079a8:	6062      	str	r2, [r4, #4]
 80079aa:	bf04      	itt	eq
 80079ac:	1809      	addeq	r1, r1, r0
 80079ae:	6021      	streq	r1, [r4, #0]
 80079b0:	605c      	str	r4, [r3, #4]
 80079b2:	e7c7      	b.n	8007944 <_free_r+0x24>
 80079b4:	bd38      	pop	{r3, r4, r5, pc}
 80079b6:	bf00      	nop
 80079b8:	200005f4 	.word	0x200005f4

080079bc <_malloc_r>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	1ccd      	adds	r5, r1, #3
 80079c0:	f025 0503 	bic.w	r5, r5, #3
 80079c4:	3508      	adds	r5, #8
 80079c6:	2d0c      	cmp	r5, #12
 80079c8:	bf38      	it	cc
 80079ca:	250c      	movcc	r5, #12
 80079cc:	2d00      	cmp	r5, #0
 80079ce:	4606      	mov	r6, r0
 80079d0:	db01      	blt.n	80079d6 <_malloc_r+0x1a>
 80079d2:	42a9      	cmp	r1, r5
 80079d4:	d903      	bls.n	80079de <_malloc_r+0x22>
 80079d6:	230c      	movs	r3, #12
 80079d8:	6033      	str	r3, [r6, #0]
 80079da:	2000      	movs	r0, #0
 80079dc:	bd70      	pop	{r4, r5, r6, pc}
 80079de:	f000 f857 	bl	8007a90 <__malloc_lock>
 80079e2:	4a21      	ldr	r2, [pc, #132]	; (8007a68 <_malloc_r+0xac>)
 80079e4:	6814      	ldr	r4, [r2, #0]
 80079e6:	4621      	mov	r1, r4
 80079e8:	b991      	cbnz	r1, 8007a10 <_malloc_r+0x54>
 80079ea:	4c20      	ldr	r4, [pc, #128]	; (8007a6c <_malloc_r+0xb0>)
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	b91b      	cbnz	r3, 80079f8 <_malloc_r+0x3c>
 80079f0:	4630      	mov	r0, r6
 80079f2:	f000 f83d 	bl	8007a70 <_sbrk_r>
 80079f6:	6020      	str	r0, [r4, #0]
 80079f8:	4629      	mov	r1, r5
 80079fa:	4630      	mov	r0, r6
 80079fc:	f000 f838 	bl	8007a70 <_sbrk_r>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d124      	bne.n	8007a4e <_malloc_r+0x92>
 8007a04:	230c      	movs	r3, #12
 8007a06:	6033      	str	r3, [r6, #0]
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f000 f842 	bl	8007a92 <__malloc_unlock>
 8007a0e:	e7e4      	b.n	80079da <_malloc_r+0x1e>
 8007a10:	680b      	ldr	r3, [r1, #0]
 8007a12:	1b5b      	subs	r3, r3, r5
 8007a14:	d418      	bmi.n	8007a48 <_malloc_r+0x8c>
 8007a16:	2b0b      	cmp	r3, #11
 8007a18:	d90f      	bls.n	8007a3a <_malloc_r+0x7e>
 8007a1a:	600b      	str	r3, [r1, #0]
 8007a1c:	50cd      	str	r5, [r1, r3]
 8007a1e:	18cc      	adds	r4, r1, r3
 8007a20:	4630      	mov	r0, r6
 8007a22:	f000 f836 	bl	8007a92 <__malloc_unlock>
 8007a26:	f104 000b 	add.w	r0, r4, #11
 8007a2a:	1d23      	adds	r3, r4, #4
 8007a2c:	f020 0007 	bic.w	r0, r0, #7
 8007a30:	1ac3      	subs	r3, r0, r3
 8007a32:	d0d3      	beq.n	80079dc <_malloc_r+0x20>
 8007a34:	425a      	negs	r2, r3
 8007a36:	50e2      	str	r2, [r4, r3]
 8007a38:	e7d0      	b.n	80079dc <_malloc_r+0x20>
 8007a3a:	428c      	cmp	r4, r1
 8007a3c:	684b      	ldr	r3, [r1, #4]
 8007a3e:	bf16      	itet	ne
 8007a40:	6063      	strne	r3, [r4, #4]
 8007a42:	6013      	streq	r3, [r2, #0]
 8007a44:	460c      	movne	r4, r1
 8007a46:	e7eb      	b.n	8007a20 <_malloc_r+0x64>
 8007a48:	460c      	mov	r4, r1
 8007a4a:	6849      	ldr	r1, [r1, #4]
 8007a4c:	e7cc      	b.n	80079e8 <_malloc_r+0x2c>
 8007a4e:	1cc4      	adds	r4, r0, #3
 8007a50:	f024 0403 	bic.w	r4, r4, #3
 8007a54:	42a0      	cmp	r0, r4
 8007a56:	d005      	beq.n	8007a64 <_malloc_r+0xa8>
 8007a58:	1a21      	subs	r1, r4, r0
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f000 f808 	bl	8007a70 <_sbrk_r>
 8007a60:	3001      	adds	r0, #1
 8007a62:	d0cf      	beq.n	8007a04 <_malloc_r+0x48>
 8007a64:	6025      	str	r5, [r4, #0]
 8007a66:	e7db      	b.n	8007a20 <_malloc_r+0x64>
 8007a68:	200005f4 	.word	0x200005f4
 8007a6c:	200005f8 	.word	0x200005f8

08007a70 <_sbrk_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4c06      	ldr	r4, [pc, #24]	; (8007a8c <_sbrk_r+0x1c>)
 8007a74:	2300      	movs	r3, #0
 8007a76:	4605      	mov	r5, r0
 8007a78:	4608      	mov	r0, r1
 8007a7a:	6023      	str	r3, [r4, #0]
 8007a7c:	f7f9 fc12 	bl	80012a4 <_sbrk>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_sbrk_r+0x1a>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_sbrk_r+0x1a>
 8007a88:	602b      	str	r3, [r5, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	20000fc4 	.word	0x20000fc4

08007a90 <__malloc_lock>:
 8007a90:	4770      	bx	lr

08007a92 <__malloc_unlock>:
 8007a92:	4770      	bx	lr

08007a94 <_init>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	bf00      	nop
 8007a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9a:	bc08      	pop	{r3}
 8007a9c:	469e      	mov	lr, r3
 8007a9e:	4770      	bx	lr

08007aa0 <_fini>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	bf00      	nop
 8007aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa6:	bc08      	pop	{r3}
 8007aa8:	469e      	mov	lr, r3
 8007aaa:	4770      	bx	lr
