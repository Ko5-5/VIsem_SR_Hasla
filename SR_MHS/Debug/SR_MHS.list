
SR_MHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a974  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800ab14  0800ab14  0001ab14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baf0  0800baf0  0002051c  2**0
                  CONTENTS
  4 .ARM          00000008  0800baf0  0800baf0  0001baf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baf8  0800baf8  0002051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baf8  0800baf8  0001baf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bafc  0800bafc  0001bafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000051c  20000000  0800bb00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd0  2000051c  0800c01c  0002051c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014ec  0800c01c  000214ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002051c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021308  00000000  00000000  0002054c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004545  00000000  00000000  00041854  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001808  00000000  00000000  00045da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001670  00000000  00000000  000475a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007223  00000000  00000000  00048c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016e15  00000000  00000000  0004fe3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009409d  00000000  00000000  00066c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000faced  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b20  00000000  00000000  000fad68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000051c 	.word	0x2000051c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aafc 	.word	0x0800aafc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000520 	.word	0x20000520
 80001dc:	0800aafc 	.word	0x0800aafc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b4a      	ldr	r3, [pc, #296]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a49      	ldr	r2, [pc, #292]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b47      	ldr	r3, [pc, #284]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b43      	ldr	r3, [pc, #268]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a42      	ldr	r2, [pc, #264]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b40      	ldr	r3, [pc, #256]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a3b      	ldr	r2, [pc, #236]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <MX_GPIO_Init+0x144>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a34      	ldr	r2, [pc, #208]	; (80006d4 <MX_GPIO_Init+0x144>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_GPIO_Init+0x144>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800061c:	482e      	ldr	r0, [pc, #184]	; (80006d8 <MX_GPIO_Init+0x148>)
 800061e:	f002 fa2d 	bl	8002a7c <HAL_GPIO_WritePin>
                          |CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	482c      	ldr	r0, [pc, #176]	; (80006dc <MX_GPIO_Init+0x14c>)
 800062a:	f002 fa27 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin;
 800062e:	231c      	movs	r3, #28
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <MX_GPIO_Init+0x150>)
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4825      	ldr	r0, [pc, #148]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000642:	f002 f881 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 8000646:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800064a:	617b      	str	r3, [r7, #20]
                          |CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	481e      	ldr	r0, [pc, #120]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000660:	f002 f872 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_BUT_Pin;
 8000664:	2302      	movs	r3, #2
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4819      	ldr	r0, [pc, #100]	; (80006dc <MX_GPIO_Init+0x14c>)
 8000678:	f002 f866 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 800067c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_GPIO_Init+0x14c>)
 8000696:	f002 f857 	bl	8002748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2008      	movs	r0, #8
 80006a0:	f002 f81b 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80006a4:	2008      	movs	r0, #8
 80006a6:	f002 f834 	bl	8002712 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2009      	movs	r0, #9
 80006b0:	f002 f813 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006b4:	2009      	movs	r0, #9
 80006b6:	f002 f82c 	bl	8002712 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	200a      	movs	r0, #10
 80006c0:	f002 f80b 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006c4:	200a      	movs	r0, #10
 80006c6:	f002 f824 	bl	8002712 <HAL_NVIC_EnableIRQ>

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020000 	.word	0x40020000
 80006dc:	40020400 	.word	0x40020400
 80006e0:	10110000 	.word	0x10110000

080006e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C1_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C1_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C1_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C1_Init+0x50>)
 8000722:	f002 f9dd 	bl	8002ae0 <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 fd60 	bl	80011f0 <Error_Handler>
  }

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000099c 	.word	0x2000099c
 8000738:	40005400 	.word	0x40005400
 800073c:	00061a80 	.word	0x00061a80

08000740 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <HAL_I2C_MspInit+0x84>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d12b      	bne.n	80007ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800077e:	23c0      	movs	r3, #192	; 0xc0
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000782:	2312      	movs	r3, #18
 8000784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000786:	2301      	movs	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800078e:	2304      	movs	r3, #4
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <HAL_I2C_MspInit+0x8c>)
 800079a:	f001 ffd5 	bl	8002748 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40005400 	.word	0x40005400
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020400 	.word	0x40020400

080007d0 <XORCipher>:

/*! \brief Funkcja szyfrująca hasło przy pomocy operacji binarnego XOR
 * 	Funkcja szyfrująca hasło przy pomocy operacji binarnego XOR, dostaje tablice char oraz klucz do szyfrowania
 */
void XORCipher(uint8_t* string, uint8_t* key)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < strlen(string); i++)
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e018      	b.n	8000812 <XORCipher+0x42>
	{
		string[i] = string[i] ^ key[i % 8];
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	7819      	ldrb	r1, [r3, #0]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	425a      	negs	r2, r3
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	f002 0207 	and.w	r2, r2, #7
 80007f4:	bf58      	it	pl
 80007f6:	4253      	negpl	r3, r2
 80007f8:	461a      	mov	r2, r3
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	4403      	add	r3, r0
 8000806:	404a      	eors	r2, r1
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < strlen(string); i++)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fce4 	bl	80001e0 <strlen>
 8000818:	4602      	mov	r2, r0
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	429a      	cmp	r2, r3
 800081e:	d8df      	bhi.n	80007e0 <XORCipher+0x10>
	}
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <OLED_write_sc>:

/*! \brief Funkcja wyświetlająca ekran trybu wpisywania
 * 	Funkcja wyświetlająca ekran trybu wpisywania na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_write_sc(){
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 800082e:	f001 fe4b 	bl	80024c8 <HAL_GetTick>
 8000832:	4602      	mov	r2, r0
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <OLED_write_sc+0x8c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800083e:	d936      	bls.n	80008ae <OLED_write_sc+0x86>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000840:	2000      	movs	r0, #0
 8000842:	f000 fe4d 	bl	80014e0 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 8000846:	2106      	movs	r1, #6
 8000848:	2004      	movs	r0, #4
 800084a:	f000 fec1 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Puts ("-- WRITE --", &Font_11x18, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	4919      	ldr	r1, [pc, #100]	; (80008b8 <OLED_write_sc+0x90>)
 8000852:	481a      	ldr	r0, [pc, #104]	; (80008bc <OLED_write_sc+0x94>)
 8000854:	f000 ff52 	bl	80016fc <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000858:	2119      	movs	r1, #25
 800085a:	2004      	movs	r0, #4
 800085c:	f000 feb8 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Puts ("-- MODE  --", &Font_11x18, 1);
 8000860:	2201      	movs	r2, #1
 8000862:	4915      	ldr	r1, [pc, #84]	; (80008b8 <OLED_write_sc+0x90>)
 8000864:	4816      	ldr	r0, [pc, #88]	; (80008c0 <OLED_write_sc+0x98>)
 8000866:	f000 ff49 	bl	80016fc <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 800086a:	2301      	movs	r3, #1
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2301      	movs	r3, #1
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	2101      	movs	r1, #1
 8000874:	2000      	movs	r0, #0
 8000876:	f000 ff66 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 800087a:	2301      	movs	r3, #1
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2000      	movs	r0, #0
 8000886:	f000 ff5e 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 800088a:	2301      	movs	r3, #1
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2340      	movs	r3, #64	; 0x40
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	2100      	movs	r1, #0
 8000894:	2080      	movs	r0, #128	; 0x80
 8000896:	f000 ff56 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 800089a:	2301      	movs	r3, #1
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 ff4e 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 80008aa:	f000 fdeb 	bl	8001484 <SSD1306_UpdateScreen>
	}
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000574 	.word	0x20000574
 80008b8:	20000000 	.word	0x20000000
 80008bc:	0800ab14 	.word	0x0800ab14
 80008c0:	0800ab20 	.word	0x0800ab20

080008c4 <OLED_page_sc>:

/*! \brief Funkcja wyświetlająca ekran wyboru strony
 * 	Funkcja wyświetlająca ekran wyboru strony na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_page_sc(){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 80008ca:	f001 fdfd 	bl	80024c8 <HAL_GetTick>
 80008ce:	4602      	mov	r2, r0
 80008d0:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <OLED_page_sc+0xcc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008da:	d955      	bls.n	8000988 <OLED_page_sc+0xc4>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 fdff 	bl	80014e0 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 80008e2:	2106      	movs	r1, #6
 80008e4:	2004      	movs	r0, #4
 80008e6:	f000 fe73 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Puts ("--MHS--", &Font_11x18, 1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	4929      	ldr	r1, [pc, #164]	; (8000994 <OLED_page_sc+0xd0>)
 80008ee:	482a      	ldr	r0, [pc, #168]	; (8000998 <OLED_page_sc+0xd4>)
 80008f0:	f000 ff04 	bl	80016fc <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 80008f4:	2119      	movs	r1, #25
 80008f6:	2004      	movs	r0, #4
 80008f8:	f000 fe6a 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Puts ("PAGE", &Font_11x18, 1);
 80008fc:	2201      	movs	r2, #1
 80008fe:	4925      	ldr	r1, [pc, #148]	; (8000994 <OLED_page_sc+0xd0>)
 8000900:	4826      	ldr	r0, [pc, #152]	; (800099c <OLED_page_sc+0xd8>)
 8000902:	f000 fefb 	bl	80016fc <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 8000906:	212c      	movs	r1, #44	; 0x2c
 8000908:	2004      	movs	r0, #4
 800090a:	f000 fe61 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Puts ("NUMBER:", &Font_11x18, 1);
 800090e:	2201      	movs	r2, #1
 8000910:	4920      	ldr	r1, [pc, #128]	; (8000994 <OLED_page_sc+0xd0>)
 8000912:	4823      	ldr	r0, [pc, #140]	; (80009a0 <OLED_page_sc+0xdc>)
 8000914:	f000 fef2 	bl	80016fc <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000918:	2301      	movs	r3, #1
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2301      	movs	r3, #1
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	2101      	movs	r1, #1
 8000922:	2000      	movs	r0, #0
 8000924:	f000 ff0f 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000928:	2301      	movs	r3, #1
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2000      	movs	r0, #0
 8000934:	f000 ff07 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000938:	2301      	movs	r3, #1
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2340      	movs	r3, #64	; 0x40
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	2100      	movs	r1, #0
 8000942:	2080      	movs	r0, #128	; 0x80
 8000944:	f000 feff 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000948:	2301      	movs	r3, #1
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2340      	movs	r3, #64	; 0x40
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	2140      	movs	r1, #64	; 0x40
 8000952:	2000      	movs	r0, #0
 8000954:	f000 fef7 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 8000958:	2301      	movs	r3, #1
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	233e      	movs	r3, #62	; 0x3e
 800095e:	221b      	movs	r2, #27
 8000960:	2102      	movs	r1, #2
 8000962:	2064      	movs	r0, #100	; 0x64
 8000964:	f000 ffea 	bl	800193c <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 8000968:	2119      	movs	r1, #25
 800096a:	206e      	movs	r0, #110	; 0x6e
 800096c:	f000 fe30 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(pageNumber+'0'), &Font_11x18, 1);
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <OLED_page_sc+0xe0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	3330      	adds	r3, #48	; 0x30
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2201      	movs	r2, #1
 800097c:	4905      	ldr	r1, [pc, #20]	; (8000994 <OLED_page_sc+0xd0>)
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fe3c 	bl	80015fc <SSD1306_Putc>
		SSD1306_UpdateScreen();
 8000984:	f000 fd7e 	bl	8001484 <SSD1306_UpdateScreen>
	}
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000578 	.word	0x20000578
 8000994:	20000000 	.word	0x20000000
 8000998:	0800ab2c 	.word	0x0800ab2c
 800099c:	0800ab34 	.word	0x0800ab34
 80009a0:	0800ab3c 	.word	0x0800ab3c
 80009a4:	20000570 	.word	0x20000570

080009a8 <OLED_login_sc>:

/*! \brief Funkcja wyświetlająca ekran logowania
 * 	Funkcja wyświetlająca ekran logowania na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_login_sc(){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 80009ae:	f001 fd8b 	bl	80024c8 <HAL_GetTick>
 80009b2:	4602      	mov	r2, r0
 80009b4:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <OLED_login_sc+0xc8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009be:	d954      	bls.n	8000a6a <OLED_login_sc+0xc2>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 fd8d 	bl	80014e0 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 80009c6:	2106      	movs	r1, #6
 80009c8:	2004      	movs	r0, #4
 80009ca:	f000 fe01 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Puts ("-ENTER-", &Font_11x18, 1);
 80009ce:	2201      	movs	r2, #1
 80009d0:	4928      	ldr	r1, [pc, #160]	; (8000a74 <OLED_login_sc+0xcc>)
 80009d2:	4829      	ldr	r0, [pc, #164]	; (8000a78 <OLED_login_sc+0xd0>)
 80009d4:	f000 fe92 	bl	80016fc <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 80009d8:	2119      	movs	r1, #25
 80009da:	2004      	movs	r0, #4
 80009dc:	f000 fdf8 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Puts ("PASSWORD", &Font_11x18, 1);
 80009e0:	2201      	movs	r2, #1
 80009e2:	4924      	ldr	r1, [pc, #144]	; (8000a74 <OLED_login_sc+0xcc>)
 80009e4:	4825      	ldr	r0, [pc, #148]	; (8000a7c <OLED_login_sc+0xd4>)
 80009e6:	f000 fe89 	bl	80016fc <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 80009ea:	212c      	movs	r1, #44	; 0x2c
 80009ec:	2004      	movs	r0, #4
 80009ee:	f000 fdef 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Puts ("TRIES:", &Font_11x18, 1);
 80009f2:	2201      	movs	r2, #1
 80009f4:	491f      	ldr	r1, [pc, #124]	; (8000a74 <OLED_login_sc+0xcc>)
 80009f6:	4822      	ldr	r0, [pc, #136]	; (8000a80 <OLED_login_sc+0xd8>)
 80009f8:	f000 fe80 	bl	80016fc <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 80009fc:	2301      	movs	r3, #1
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2301      	movs	r3, #1
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	2101      	movs	r1, #1
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 fe9d 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2340      	movs	r3, #64	; 0x40
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 fe95 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	2100      	movs	r1, #0
 8000a26:	2080      	movs	r0, #128	; 0x80
 8000a28:	f000 fe8d 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2340      	movs	r3, #64	; 0x40
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 fe85 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	233e      	movs	r3, #62	; 0x3e
 8000a42:	221b      	movs	r2, #27
 8000a44:	2102      	movs	r1, #2
 8000a46:	2064      	movs	r0, #100	; 0x64
 8000a48:	f000 ff78 	bl	800193c <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 8000a4c:	2119      	movs	r1, #25
 8000a4e:	206e      	movs	r0, #110	; 0x6e
 8000a50:	f000 fdbe 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(loginTries+'0'), &Font_11x18, 1);
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <OLED_login_sc+0xdc>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	3330      	adds	r3, #48	; 0x30
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4905      	ldr	r1, [pc, #20]	; (8000a74 <OLED_login_sc+0xcc>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fdcb 	bl	80015fc <SSD1306_Putc>
		SSD1306_UpdateScreen();
 8000a66:	f000 fd0d 	bl	8001484 <SSD1306_UpdateScreen>
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000057c 	.word	0x2000057c
 8000a74:	20000000 	.word	0x20000000
 8000a78:	0800ab44 	.word	0x0800ab44
 8000a7c:	0800ab4c 	.word	0x0800ab4c
 8000a80:	0800ab58 	.word	0x0800ab58
 8000a84:	20000092 	.word	0x20000092

08000a88 <OLED_block_sc>:

/*! \brief Funkcja wyświetlająca ekran blokady
 * 	Funkcja wyświetlająca ekran blokady na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_block_sc(){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000a8e:	f001 fd1b 	bl	80024c8 <HAL_GetTick>
 8000a92:	4602      	mov	r2, r0
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <OLED_block_sc+0x8c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a9e:	d936      	bls.n	8000b0e <OLED_block_sc+0x86>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 fd1d 	bl	80014e0 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 8000aa6:	2106      	movs	r1, #6
 8000aa8:	2004      	movs	r0, #4
 8000aaa:	f000 fd91 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Puts ("- DEVICE  -", &Font_11x18, 1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4919      	ldr	r1, [pc, #100]	; (8000b18 <OLED_block_sc+0x90>)
 8000ab2:	481a      	ldr	r0, [pc, #104]	; (8000b1c <OLED_block_sc+0x94>)
 8000ab4:	f000 fe22 	bl	80016fc <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000ab8:	2119      	movs	r1, #25
 8000aba:	2004      	movs	r0, #4
 8000abc:	f000 fd88 	bl	80015d0 <SSD1306_GotoXY>
		SSD1306_Puts ("- BLOCKED -", &Font_11x18, 1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4915      	ldr	r1, [pc, #84]	; (8000b18 <OLED_block_sc+0x90>)
 8000ac4:	4816      	ldr	r0, [pc, #88]	; (8000b20 <OLED_block_sc+0x98>)
 8000ac6:	f000 fe19 	bl	80016fc <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000aca:	2301      	movs	r3, #1
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f000 fe36 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000ada:	2301      	movs	r3, #1
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2340      	movs	r3, #64	; 0x40
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 fe2e 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000aea:	2301      	movs	r3, #1
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2340      	movs	r3, #64	; 0x40
 8000af0:	2280      	movs	r2, #128	; 0x80
 8000af2:	2100      	movs	r1, #0
 8000af4:	2080      	movs	r0, #128	; 0x80
 8000af6:	f000 fe26 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000afa:	2301      	movs	r3, #1
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 fe1e 	bl	8001746 <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 8000b0a:	f000 fcbb 	bl	8001484 <SSD1306_UpdateScreen>
	}
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000580 	.word	0x20000580
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	0800ab60 	.word	0x0800ab60
 8000b20:	0800ab6c 	.word	0x0800ab6c

08000b24 <sendUSB>:

/*! \brief Funkcja przesyłająca hasło do komputera po USB
 * 	Funkcja dostaje tablice znaków char, którą po literze wysyła do komputera poprzez połączenie USB
 */
void sendUSB(uint8_t *pass){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	while(*pass != '\0'){
 8000b2c:	e066      	b.n	8000bfc <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e060      	b.n	8000bf6 <sendUSB+0xd2>
			if(*pass == keys[i].value){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	7819      	ldrb	r1, [r3, #0]
 8000b38:	4834      	ldr	r0, [pc, #208]	; (8000c0c <sendUSB+0xe8>)
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	4403      	add	r3, r0
 8000b44:	3301      	adds	r3, #1
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4299      	cmp	r1, r3
 8000b4a:	d11f      	bne.n	8000b8c <sendUSB+0x68>
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000b4c:	492f      	ldr	r1, [pc, #188]	; (8000c0c <sendUSB+0xe8>)
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <sendUSB+0xec>)
 8000b5c:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b5e:	2208      	movs	r2, #8
 8000b60:	492b      	ldr	r1, [pc, #172]	; (8000c10 <sendUSB+0xec>)
 8000b62:	482c      	ldr	r0, [pc, #176]	; (8000c14 <sendUSB+0xf0>)
 8000b64:	f007 fae8 	bl	8008138 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000b68:	2032      	movs	r0, #50	; 0x32
 8000b6a:	f001 fcb9 	bl	80024e0 <HAL_Delay>
				keyboardhid.KEYCODE1 = 0x00;
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <sendUSB+0xec>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b74:	2208      	movs	r2, #8
 8000b76:	4926      	ldr	r1, [pc, #152]	; (8000c10 <sendUSB+0xec>)
 8000b78:	4826      	ldr	r0, [pc, #152]	; (8000c14 <sendUSB+0xf0>)
 8000b7a:	f007 fadd 	bl	8008138 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000b7e:	2032      	movs	r0, #50	; 0x32
 8000b80:	f001 fcae 	bl	80024e0 <HAL_Delay>
				pass++;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	607b      	str	r3, [r7, #4]
				break;
 8000b8a:	e037      	b.n	8000bfc <sendUSB+0xd8>
			}
			else if(*pass == keys[i].shiftValue){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7819      	ldrb	r1, [r3, #0]
 8000b90:	481e      	ldr	r0, [pc, #120]	; (8000c0c <sendUSB+0xe8>)
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	4403      	add	r3, r0
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	d125      	bne.n	8000bf0 <sendUSB+0xcc>
				keyboardhid.MODIFIER = 0x02;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <sendUSB+0xec>)
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000baa:	4918      	ldr	r1, [pc, #96]	; (8000c0c <sendUSB+0xe8>)
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <sendUSB+0xec>)
 8000bba:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	4914      	ldr	r1, [pc, #80]	; (8000c10 <sendUSB+0xec>)
 8000bc0:	4814      	ldr	r0, [pc, #80]	; (8000c14 <sendUSB+0xf0>)
 8000bc2:	f007 fab9 	bl	8008138 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000bc6:	2032      	movs	r0, #50	; 0x32
 8000bc8:	f001 fc8a 	bl	80024e0 <HAL_Delay>
				keyboardhid.MODIFIER = 0x00;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <sendUSB+0xec>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = 0x00;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <sendUSB+0xec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000bd8:	2208      	movs	r2, #8
 8000bda:	490d      	ldr	r1, [pc, #52]	; (8000c10 <sendUSB+0xec>)
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <sendUSB+0xf0>)
 8000bde:	f007 faab 	bl	8008138 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000be2:	2032      	movs	r0, #50	; 0x32
 8000be4:	f001 fc7c 	bl	80024e0 <HAL_Delay>
				pass++;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3301      	adds	r3, #1
 8000bec:	607b      	str	r3, [r7, #4]
				break;
 8000bee:	e005      	b.n	8000bfc <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8000bfa:	dd9b      	ble.n	8000b34 <sendUSB+0x10>
	while(*pass != '\0'){
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d194      	bne.n	8000b2e <sendUSB+0xa>
			}
		}
	}
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000564 	.word	0x20000564
 8000c14:	20000ba8 	.word	0x20000ba8

08000c18 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	b09b      	sub	sp, #108	; 0x6c
 8000c1c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c1e:	f001 fbed 	bl	80023fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c22:	f000 f94b 	bl	8000ebc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c26:	f7ff fcb3 	bl	8000590 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000c2a:	f7ff fd5b 	bl	80006e4 <MX_I2C1_Init>
	MX_SPI3_Init();
 8000c2e:	f000 fae7 	bl	8001200 <MX_SPI3_Init>
	MX_TIM2_Init();
 8000c32:	f001 f833 	bl	8001c9c <MX_TIM2_Init>
	if(HAL_GPIO_ReadPin(ROT_BUT_GPIO_Port, ROT_BUT_Pin)){
 8000c36:	2102      	movs	r1, #2
 8000c38:	488c      	ldr	r0, [pc, #560]	; (8000e6c <main+0x254>)
 8000c3a:	f001 ff07 	bl	8002a4c <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <main+0x3a>
		MX_USB_DEVICE_Init(0);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f008 fbf1 	bl	800942c <MX_USB_DEVICE_Init>
		deviceFLAG = 0;
 8000c4a:	4b89      	ldr	r3, [pc, #548]	; (8000e70 <main+0x258>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e005      	b.n	8000c5e <main+0x46>
	}else{
		MX_USB_DEVICE_Init(1);
 8000c52:	2001      	movs	r0, #1
 8000c54:	f008 fbea 	bl	800942c <MX_USB_DEVICE_Init>
		deviceFLAG = 1;
 8000c58:	4b85      	ldr	r3, [pc, #532]	; (8000e70 <main+0x258>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE BEGIN 2 */

	//---- Inicjalizacja wyświetlacza OLED ----
	SSD1306_Init();
 8000c5e:	f000 fb4d 	bl	80012fc <SSD1306_Init>

	//---- Inicjalizacja obsługi enkodera ----
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000c62:	213c      	movs	r1, #60	; 0x3c
 8000c64:	4883      	ldr	r0, [pc, #524]	; (8000e74 <main+0x25c>)
 8000c66:	f005 f839 	bl	8005cdc <HAL_TIM_Encoder_Start_IT>

	//---- Inicjalizacja pamięci FLASH ----
	W25qxx_Init();
 8000c6a:	f001 f9cb 	bl	8002004 <W25qxx_Init>
	memcpy(passwordWrite, "0\0", sizeof(passwordWrite));
	XORCipher(passwordWrite, cipherKey);
	W25qxx_WritePage(passwordWrite, 10, 0, 64);
	*/
	//---- Inicjalizacja obsługi macierzy przycisków
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2120      	movs	r1, #32
 8000c72:	4881      	ldr	r0, [pc, #516]	; (8000e78 <main+0x260>)
 8000c74:	f001 ff02 	bl	8002a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2140      	movs	r1, #64	; 0x40
 8000c7c:	487e      	ldr	r0, [pc, #504]	; (8000e78 <main+0x260>)
 8000c7e:	f001 fefd 	bl	8002a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	487c      	ldr	r0, [pc, #496]	; (8000e78 <main+0x260>)
 8000c88:	f001 fef8 	bl	8002a7c <HAL_GPIO_WritePin>

	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c92:	4876      	ldr	r0, [pc, #472]	; (8000e6c <main+0x254>)
 8000c94:	f001 fef2 	bl	8002a7c <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(deviceFLAG){  // Tryb urządzenia Virtual COM do zapisywania przesłanych haseł
 8000c98:	4b75      	ldr	r3, [pc, #468]	; (8000e70 <main+0x258>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d06e      	beq.n	8000d7e <main+0x166>
			OLED_write_sc();
 8000ca0:	f7ff fdc2 	bl	8000828 <OLED_write_sc>
			uint8_t Text[] = "WRITE MODE -> len:nr:password\r\n";
 8000ca4:	4b75      	ldr	r3, [pc, #468]	; (8000e7c <main+0x264>)
 8000ca6:	1d3c      	adds	r4, r7, #4
 8000ca8:	461d      	mov	r5, r3
 8000caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			CDC_Transmit_FS(Text,strlen(Text)); /*when commented the port is recognized*/
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fa91 	bl	80001e0 <strlen>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f008 fcb3 	bl	8009630 <CDC_Transmit_FS>
			if(ReceivedDataFlag == 1){
 8000cca:	4b6d      	ldr	r3, [pc, #436]	; (8000e80 <main+0x268>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d150      	bne.n	8000d74 <main+0x15c>
				ReceivedDataFlag = 0;
 8000cd2:	4b6b      	ldr	r3, [pc, #428]	; (8000e80 <main+0x268>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
				//MessageLength = sprintf(DataToSend, "Odebrano: %s\n\r", ReceivedData);
				//CDC_Transmit_FS(DataToSend, MessageLength);
				uint8_t text[64];
				sscanf(&ReceivedData[0], "%d", &ReceivedPassNr);
 8000cd8:	4a6a      	ldr	r2, [pc, #424]	; (8000e84 <main+0x26c>)
 8000cda:	496b      	ldr	r1, [pc, #428]	; (8000e88 <main+0x270>)
 8000cdc:	486b      	ldr	r0, [pc, #428]	; (8000e8c <main+0x274>)
 8000cde:	f009 f9f7 	bl	800a0d0 <siscanf>
				for(int i = 0; i<strlen(ReceivedData)-2; i++){
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8000ce6:	e00c      	b.n	8000d02 <main+0xea>
					text[i] = ReceivedData[i+2];
 8000ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cea:	3302      	adds	r3, #2
 8000cec:	4a67      	ldr	r2, [pc, #412]	; (8000e8c <main+0x274>)
 8000cee:	5cd1      	ldrb	r1, [r2, r3]
 8000cf0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cf6:	4413      	add	r3, r2
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<strlen(ReceivedData)-2; i++){
 8000cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cfe:	3301      	adds	r3, #1
 8000d00:	667b      	str	r3, [r7, #100]	; 0x64
 8000d02:	4862      	ldr	r0, [pc, #392]	; (8000e8c <main+0x274>)
 8000d04:	f7ff fa6c 	bl	80001e0 <strlen>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	1e9a      	subs	r2, r3, #2
 8000d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d8ea      	bhi.n	8000ce8 <main+0xd0>
				}
				text[strlen(ReceivedData)-2] = '\0';
 8000d12:	485e      	ldr	r0, [pc, #376]	; (8000e8c <main+0x274>)
 8000d14:	f7ff fa64 	bl	80001e0 <strlen>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	3b02      	subs	r3, #2
 8000d1c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000d20:	4413      	add	r3, r2
 8000d22:	2200      	movs	r2, #0
 8000d24:	f803 2c44 	strb.w	r2, [r3, #-68]
				memcpy(passwordWrite, text, sizeof(passwordWrite));
 8000d28:	4b59      	ldr	r3, [pc, #356]	; (8000e90 <main+0x278>)
 8000d2a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000d2e:	469c      	mov	ip, r3
 8000d30:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000d34:	4665      	mov	r5, ip
 8000d36:	4626      	mov	r6, r4
 8000d38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d3a:	6028      	str	r0, [r5, #0]
 8000d3c:	6069      	str	r1, [r5, #4]
 8000d3e:	60aa      	str	r2, [r5, #8]
 8000d40:	60eb      	str	r3, [r5, #12]
 8000d42:	3410      	adds	r4, #16
 8000d44:	f10c 0c10 	add.w	ip, ip, #16
 8000d48:	4574      	cmp	r4, lr
 8000d4a:	d1f3      	bne.n	8000d34 <main+0x11c>
				XORCipher(passwordWrite, cipherKey);
 8000d4c:	4951      	ldr	r1, [pc, #324]	; (8000e94 <main+0x27c>)
 8000d4e:	4850      	ldr	r0, [pc, #320]	; (8000e90 <main+0x278>)
 8000d50:	f7ff fd3e 	bl	80007d0 <XORCipher>
				W25qxx_WritePage(passwordWrite, (uint32_t)ReceivedPassNr, 0, 64);
 8000d54:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <main+0x26c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	484c      	ldr	r0, [pc, #304]	; (8000e90 <main+0x278>)
 8000d60:	f001 fa1c 	bl	800219c <W25qxx_WritePage>
				memset(ReceivedData,0, 64);
 8000d64:	2240      	movs	r2, #64	; 0x40
 8000d66:	2100      	movs	r1, #0
 8000d68:	4848      	ldr	r0, [pc, #288]	; (8000e8c <main+0x274>)
 8000d6a:	f009 f8f0 	bl	8009f4e <memset>
				ReceivedPassNr = 0;
 8000d6e:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <main+0x26c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
			}
			HAL_Delay(1000);
 8000d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d78:	f001 fbb2 	bl	80024e0 <HAL_Delay>
 8000d7c:	e78c      	b.n	8000c98 <main+0x80>
		}else{ // Tryb urządzenia HID do odczytywania haseł
			if(deviceState == 0){ // Urządzenie zablokowane -> wpisywanie hasła urządzenia
 8000d7e:	4b46      	ldr	r3, [pc, #280]	; (8000e98 <main+0x280>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d149      	bne.n	8000e1a <main+0x202>
				OLED_login_sc();
 8000d86:	f7ff fe0f 	bl	80009a8 <OLED_login_sc>
				if(keyFlag){
 8000d8a:	4b44      	ldr	r3, [pc, #272]	; (8000e9c <main+0x284>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d010      	beq.n	8000db6 <main+0x19e>
					loginBuff[loginCounter] = keyPressed;
 8000d94:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <main+0x288>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <main+0x28c>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b2d9      	uxtb	r1, r3
 8000da0:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <main+0x290>)
 8000da2:	5499      	strb	r1, [r3, r2]
					loginCounter++;
 8000da4:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <main+0x288>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b3c      	ldr	r3, [pc, #240]	; (8000ea0 <main+0x288>)
 8000dae:	701a      	strb	r2, [r3, #0]
					keyFlag = 0;
 8000db0:	4b3a      	ldr	r3, [pc, #232]	; (8000e9c <main+0x284>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
				}
				if(loginCounter == 4){
 8000db6:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <main+0x288>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	d124      	bne.n	8000e08 <main+0x1f0>
					if(login[0] == loginBuff[0] && login[1] == loginBuff[1] && login[2] == loginBuff[2] && login[3] == loginBuff[3]){
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <main+0x294>)
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <main+0x290>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d115      	bne.n	8000df6 <main+0x1de>
 8000dca:	4b38      	ldr	r3, [pc, #224]	; (8000eac <main+0x294>)
 8000dcc:	785a      	ldrb	r2, [r3, #1]
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <main+0x290>)
 8000dd0:	785b      	ldrb	r3, [r3, #1]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d10f      	bne.n	8000df6 <main+0x1de>
 8000dd6:	4b35      	ldr	r3, [pc, #212]	; (8000eac <main+0x294>)
 8000dd8:	789a      	ldrb	r2, [r3, #2]
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <main+0x290>)
 8000ddc:	789b      	ldrb	r3, [r3, #2]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d109      	bne.n	8000df6 <main+0x1de>
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <main+0x294>)
 8000de4:	78da      	ldrb	r2, [r3, #3]
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <main+0x290>)
 8000de8:	78db      	ldrb	r3, [r3, #3]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d103      	bne.n	8000df6 <main+0x1de>
						deviceState = 1;
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <main+0x280>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e008      	b.n	8000e08 <main+0x1f0>
					}else{
						loginCounter = 0;
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <main+0x288>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
						loginTries--;
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <main+0x298>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <main+0x298>)
 8000e06:	701a      	strb	r2, [r3, #0]
					}
				}
				if(loginTries == 0){
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <main+0x298>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f47f af43 	bne.w	8000c98 <main+0x80>
					deviceState = 99;
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <main+0x280>)
 8000e14:	2263      	movs	r2, #99	; 0x63
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e73e      	b.n	8000c98 <main+0x80>
				}
			}
			else if(deviceState == 99){ // Urządzenie całkowicie zablokowane
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <main+0x280>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b63      	cmp	r3, #99	; 0x63
 8000e20:	d102      	bne.n	8000e28 <main+0x210>
				OLED_block_sc();
 8000e22:	f7ff fe31 	bl	8000a88 <OLED_block_sc>
 8000e26:	e737      	b.n	8000c98 <main+0x80>
			}
			else{ // Urządzenie odblokowane -> odczyt haseł
				OLED_page_sc();
 8000e28:	f7ff fd4c 	bl	80008c4 <OLED_page_sc>
				if(keyFlag){
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <main+0x284>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f43f af30 	beq.w	8000c98 <main+0x80>
					W25qxx_ReadPage(passwordRead, pageNumber*9+keyPressed, 0, 64);
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <main+0x29c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	4413      	add	r3, r2
 8000e42:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <main+0x28c>)
 8000e44:	7812      	ldrb	r2, [r2, #0]
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	1899      	adds	r1, r3, r2
 8000e4a:	2340      	movs	r3, #64	; 0x40
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	481a      	ldr	r0, [pc, #104]	; (8000eb8 <main+0x2a0>)
 8000e50:	f001 fa2a 	bl	80022a8 <W25qxx_ReadPage>
					XORCipher(passwordRead, cipherKey);
 8000e54:	490f      	ldr	r1, [pc, #60]	; (8000e94 <main+0x27c>)
 8000e56:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <main+0x2a0>)
 8000e58:	f7ff fcba 	bl	80007d0 <XORCipher>
					sendUSB(passwordRead);
 8000e5c:	4816      	ldr	r0, [pc, #88]	; (8000eb8 <main+0x2a0>)
 8000e5e:	f7ff fe61 	bl	8000b24 <sendUSB>
					keyFlag = 0;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <main+0x284>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
		if(deviceFLAG){  // Tryb urządzenia Virtual COM do zapisywania przesłanych haseł
 8000e68:	e716      	b.n	8000c98 <main+0x80>
 8000e6a:	bf00      	nop
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	20000538 	.word	0x20000538
 8000e74:	20000b3c 	.word	0x20000b3c
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	0800ab7c 	.word	0x0800ab7c
 8000e80:	2000056c 	.word	0x2000056c
 8000e84:	20000ae0 	.word	0x20000ae0
 8000e88:	0800ab78 	.word	0x0800ab78
 8000e8c:	20000aa0 	.word	0x20000aa0
 8000e90:	20000a5c 	.word	0x20000a5c
 8000e94:	20000098 	.word	0x20000098
 8000e98:	20000539 	.word	0x20000539
 8000e9c:	20000551 	.word	0x20000551
 8000ea0:	2000053a 	.word	0x2000053a
 8000ea4:	20000550 	.word	0x20000550
 8000ea8:	20000a9c 	.word	0x20000a9c
 8000eac:	20000094 	.word	0x20000094
 8000eb0:	20000092 	.word	0x20000092
 8000eb4:	20000570 	.word	0x20000570
 8000eb8:	20000a1c 	.word	0x20000a1c

08000ebc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	; 0x50
 8000ec0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	2230      	movs	r2, #48	; 0x30
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f009 f83f 	bl	8009f4e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <SystemClock_Config+0xc8>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <SystemClock_Config+0xc8>)
 8000eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <SystemClock_Config+0xc8>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <SystemClock_Config+0xcc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a20      	ldr	r2, [pc, #128]	; (8000f88 <SystemClock_Config+0xcc>)
 8000f06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <SystemClock_Config+0xcc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f22:	2302      	movs	r3, #2
 8000f24:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000f2c:	2319      	movs	r3, #25
 8000f2e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000f30:	23c0      	movs	r3, #192	; 0xc0
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 fcbd 	bl	80048c0 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000f4c:	f000 f950 	bl	80011f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	230f      	movs	r3, #15
 8000f52:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f54:	2302      	movs	r3, #2
 8000f56:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 ff17 	bl	8004da0 <HAL_RCC_ClockConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000f78:	f000 f93a 	bl	80011f0 <Error_Handler>
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	3750      	adds	r7, #80	; 0x50
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40007000 	.word	0x40007000

08000f8c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000f9c:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000fa6:	801a      	strh	r2, [r3, #0]
	if(count - old_count > 5)
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b05      	cmp	r3, #5
 8000fba:	dd0e      	ble.n	8000fda <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(pageNumber > 0)
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <HAL_TIM_IC_CaptureCallback+0x42>
			pageNumber--;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	4a16      	ldr	r2, [pc, #88]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000fcc:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000fd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000fd6:	801a      	strh	r2, [r3, #0]
		if(pageNumber < 9)
			pageNumber++;
		old_count = count;
	}

}
 8000fd8:	e018      	b.n	800100c <HAL_TIM_IC_CaptureCallback+0x80>
	}else if(count - old_count < -5)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	f113 0f05 	cmn.w	r3, #5
 8000fee:	da0d      	bge.n	800100c <HAL_TIM_IC_CaptureCallback+0x80>
		if(pageNumber < 9)
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d804      	bhi.n	8001002 <HAL_TIM_IC_CaptureCallback+0x76>
			pageNumber++;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001000:	6013      	str	r3, [r2, #0]
		old_count = count;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_TIM_IC_CaptureCallback+0x90>)
 8001004:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x94>)
 800100a:	801a      	strh	r2, [r3, #0]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	2000055c 	.word	0x2000055c
 800101c:	20000560 	.word	0x20000560
 8001020:	20000562 	.word	0x20000562
 8001024:	20000570 	.word	0x20000570

08001028 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8001032:	f001 fa49 	bl	80024c8 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	4b66      	ldr	r3, [pc, #408]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800103a:	601a      	str	r2, [r3, #0]
	if(currentMillis - previousMillis > 300)
 800103c:	4b65      	ldr	r3, [pc, #404]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b65      	ldr	r3, [pc, #404]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800104a:	f240 80be 	bls.w	80011ca <HAL_GPIO_EXTI_Callback+0x1a2>
	{
		GPIO_InitStructPrivate.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 800104e:	4b63      	ldr	r3, [pc, #396]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001050:	221c      	movs	r2, #28
 8001052:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001054:	4b61      	ldr	r3, [pc, #388]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 800105a:	4b60      	ldr	r3, [pc, #384]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1b4>)
 800105c:	2202      	movs	r2, #2
 800105e:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8001066:	495d      	ldr	r1, [pc, #372]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001068:	485d      	ldr	r0, [pc, #372]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800106a:	f001 fb6d 	bl	8002748 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2120      	movs	r1, #32
 8001072:	485b      	ldr	r0, [pc, #364]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001074:	f001 fd02 	bl	8002a7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	4858      	ldr	r0, [pc, #352]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800107e:	f001 fcfd 	bl	8002a7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	4856      	ldr	r0, [pc, #344]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001088:	f001 fcf8 	bl	8002a7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 800108c:	2110      	movs	r1, #16
 800108e:	4854      	ldr	r0, [pc, #336]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001090:	f001 fcdc 	bl	8002a4c <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_EXTI_Callback+0x7a>
			keyPressed = 1;
 800109a:	4b52      	ldr	r3, [pc, #328]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e014      	b.n	80010cc <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 80010a2:	2108      	movs	r1, #8
 80010a4:	484e      	ldr	r0, [pc, #312]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010a6:	f001 fcd1 	bl	8002a4c <HAL_GPIO_ReadPin>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_EXTI_Callback+0x90>
			keyPressed = 4;
 80010b0:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e009      	b.n	80010cc <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 80010b8:	2104      	movs	r1, #4
 80010ba:	4849      	ldr	r0, [pc, #292]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010bc:	f001 fcc6 	bl	8002a4c <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <HAL_GPIO_EXTI_Callback+0xa4>
			keyPressed = 7;
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	701a      	strb	r2, [r3, #0]

		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2120      	movs	r1, #32
 80010d0:	4843      	ldr	r0, [pc, #268]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010d2:	f001 fcd3 	bl	8002a7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	4841      	ldr	r0, [pc, #260]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010dc:	f001 fcce 	bl	8002a7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	483e      	ldr	r0, [pc, #248]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010e6:	f001 fcc9 	bl	8002a7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 80010ea:	2110      	movs	r1, #16
 80010ec:	483c      	ldr	r0, [pc, #240]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010ee:	f001 fcad 	bl	8002a4c <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_EXTI_Callback+0xd8>
			keyPressed = 2;
 80010f8:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	e014      	b.n	800112a <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8001100:	2108      	movs	r1, #8
 8001102:	4837      	ldr	r0, [pc, #220]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001104:	f001 fca2 	bl	8002a4c <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_EXTI_Callback+0xee>
			keyPressed = 5;
 800110e:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001110:	2205      	movs	r2, #5
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e009      	b.n	800112a <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8001116:	2104      	movs	r1, #4
 8001118:	4831      	ldr	r0, [pc, #196]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800111a:	f001 fc97 	bl	8002a4c <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <HAL_GPIO_EXTI_Callback+0x102>
			keyPressed = 8;
 8001124:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001126:	2208      	movs	r2, #8
 8001128:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2120      	movs	r1, #32
 800112e:	482c      	ldr	r0, [pc, #176]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001130:	f001 fca4 	bl	8002a7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	4829      	ldr	r0, [pc, #164]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800113a:	f001 fc9f 	bl	8002a7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 800113e:	2201      	movs	r2, #1
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	4827      	ldr	r0, [pc, #156]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001144:	f001 fc9a 	bl	8002a7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8001148:	2110      	movs	r1, #16
 800114a:	4825      	ldr	r0, [pc, #148]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800114c:	f001 fc7e 	bl	8002a4c <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_EXTI_Callback+0x136>
			keyPressed = 3;
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001158:	2203      	movs	r2, #3
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e014      	b.n	8001188 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 800115e:	2108      	movs	r1, #8
 8001160:	481f      	ldr	r0, [pc, #124]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001162:	f001 fc73 	bl	8002a4c <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_EXTI_Callback+0x14c>
			keyPressed = 6;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800116e:	2206      	movs	r2, #6
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e009      	b.n	8001188 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8001174:	2104      	movs	r1, #4
 8001176:	481a      	ldr	r0, [pc, #104]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001178:	f001 fc68 	bl	8002a4c <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <HAL_GPIO_EXTI_Callback+0x160>
			keyPressed = 9;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001184:	2209      	movs	r2, #9
 8001186:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2120      	movs	r1, #32
 800118c:	4814      	ldr	r0, [pc, #80]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800118e:	f001 fc75 	bl	8002a7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2140      	movs	r1, #64	; 0x40
 8001196:	4812      	ldr	r0, [pc, #72]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001198:	f001 fc70 	bl	8002a7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	480f      	ldr	r0, [pc, #60]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80011a2:	f001 fc6b 	bl	8002a7c <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1b4>)
 80011a8:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80011aa:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1b4>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 80011b2:	490a      	ldr	r1, [pc, #40]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1b4>)
 80011b4:	480a      	ldr	r0, [pc, #40]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80011b6:	f001 fac7 	bl	8002748 <HAL_GPIO_Init>


		keyFlag = 1;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_GPIO_EXTI_Callback+0x1c4>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
		previousMillis = HAL_GetTick();
 80011c0:	f001 f982 	bl	80024c8 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80011c8:	601a      	str	r2, [r3, #0]
	}

}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000558 	.word	0x20000558
 80011d8:	20000554 	.word	0x20000554
 80011dc:	2000053c 	.word	0x2000053c
 80011e0:	40020000 	.word	0x40020000
 80011e4:	20000550 	.word	0x20000550
 80011e8:	10110000 	.word	0x10110000
 80011ec:	20000551 	.word	0x20000551

080011f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_SPI3_Init+0x64>)
 8001206:	4a18      	ldr	r2, [pc, #96]	; (8001268 <MX_SPI3_Init+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_SPI3_Init+0x64>)
 800120c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001210:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_SPI3_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_SPI3_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_SPI3_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_SPI3_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_SPI3_Init+0x64>)
 800122c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001230:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_SPI3_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <MX_SPI3_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_SPI3_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <MX_SPI3_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_SPI3_Init+0x64>)
 800124c:	220a      	movs	r2, #10
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_SPI3_Init+0x64>)
 8001252:	f003 ff5d 	bl	8005110 <HAL_SPI_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800125c:	f7ff ffc8 	bl	80011f0 <Error_Handler>
  }

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000ae4 	.word	0x20000ae4
 8001268:	40003c00 	.word	0x40003c00

0800126c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_SPI_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12b      	bne.n	80012e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_SPI_MspInit+0x88>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <HAL_SPI_MspInit+0x88>)
 8001298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_SPI_MspInit+0x88>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_SPI_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <HAL_SPI_MspInit+0x88>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_SPI_MspInit+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012c6:	2338      	movs	r3, #56	; 0x38
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d6:	2306      	movs	r3, #6
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <HAL_SPI_MspInit+0x8c>)
 80012e2:	f001 fa31 	bl	8002748 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	; 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40003c00 	.word	0x40003c00
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001302:	f000 fb85 	bl	8001a10 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001306:	f644 6320 	movw	r3, #20000	; 0x4e20
 800130a:	2201      	movs	r2, #1
 800130c:	2178      	movs	r1, #120	; 0x78
 800130e:	485b      	ldr	r0, [pc, #364]	; (800147c <SSD1306_Init+0x180>)
 8001310:	f001 fe1c 	bl	8002f4c <HAL_I2C_IsDeviceReady>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800131a:	2300      	movs	r3, #0
 800131c:	e0a9      	b.n	8001472 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800131e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001322:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001324:	e002      	b.n	800132c <SSD1306_Init+0x30>
		p--;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3b01      	subs	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f9      	bne.n	8001326 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001332:	22ae      	movs	r2, #174	; 0xae
 8001334:	2100      	movs	r1, #0
 8001336:	2078      	movs	r0, #120	; 0x78
 8001338:	f000 fbc6 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800133c:	2220      	movs	r2, #32
 800133e:	2100      	movs	r1, #0
 8001340:	2078      	movs	r0, #120	; 0x78
 8001342:	f000 fbc1 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001346:	2210      	movs	r2, #16
 8001348:	2100      	movs	r1, #0
 800134a:	2078      	movs	r0, #120	; 0x78
 800134c:	f000 fbbc 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001350:	22b0      	movs	r2, #176	; 0xb0
 8001352:	2100      	movs	r1, #0
 8001354:	2078      	movs	r0, #120	; 0x78
 8001356:	f000 fbb7 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800135a:	22c8      	movs	r2, #200	; 0xc8
 800135c:	2100      	movs	r1, #0
 800135e:	2078      	movs	r0, #120	; 0x78
 8001360:	f000 fbb2 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	2078      	movs	r0, #120	; 0x78
 800136a:	f000 fbad 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800136e:	2210      	movs	r2, #16
 8001370:	2100      	movs	r1, #0
 8001372:	2078      	movs	r0, #120	; 0x78
 8001374:	f000 fba8 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001378:	2240      	movs	r2, #64	; 0x40
 800137a:	2100      	movs	r1, #0
 800137c:	2078      	movs	r0, #120	; 0x78
 800137e:	f000 fba3 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001382:	2281      	movs	r2, #129	; 0x81
 8001384:	2100      	movs	r1, #0
 8001386:	2078      	movs	r0, #120	; 0x78
 8001388:	f000 fb9e 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800138c:	22ff      	movs	r2, #255	; 0xff
 800138e:	2100      	movs	r1, #0
 8001390:	2078      	movs	r0, #120	; 0x78
 8001392:	f000 fb99 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001396:	22a1      	movs	r2, #161	; 0xa1
 8001398:	2100      	movs	r1, #0
 800139a:	2078      	movs	r0, #120	; 0x78
 800139c:	f000 fb94 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80013a0:	22a6      	movs	r2, #166	; 0xa6
 80013a2:	2100      	movs	r1, #0
 80013a4:	2078      	movs	r0, #120	; 0x78
 80013a6:	f000 fb8f 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80013aa:	22a8      	movs	r2, #168	; 0xa8
 80013ac:	2100      	movs	r1, #0
 80013ae:	2078      	movs	r0, #120	; 0x78
 80013b0:	f000 fb8a 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80013b4:	223f      	movs	r2, #63	; 0x3f
 80013b6:	2100      	movs	r1, #0
 80013b8:	2078      	movs	r0, #120	; 0x78
 80013ba:	f000 fb85 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013be:	22a4      	movs	r2, #164	; 0xa4
 80013c0:	2100      	movs	r1, #0
 80013c2:	2078      	movs	r0, #120	; 0x78
 80013c4:	f000 fb80 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80013c8:	22d3      	movs	r2, #211	; 0xd3
 80013ca:	2100      	movs	r1, #0
 80013cc:	2078      	movs	r0, #120	; 0x78
 80013ce:	f000 fb7b 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2078      	movs	r0, #120	; 0x78
 80013d8:	f000 fb76 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80013dc:	22d5      	movs	r2, #213	; 0xd5
 80013de:	2100      	movs	r1, #0
 80013e0:	2078      	movs	r0, #120	; 0x78
 80013e2:	f000 fb71 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80013e6:	22f0      	movs	r2, #240	; 0xf0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2078      	movs	r0, #120	; 0x78
 80013ec:	f000 fb6c 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80013f0:	22d9      	movs	r2, #217	; 0xd9
 80013f2:	2100      	movs	r1, #0
 80013f4:	2078      	movs	r0, #120	; 0x78
 80013f6:	f000 fb67 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80013fa:	2222      	movs	r2, #34	; 0x22
 80013fc:	2100      	movs	r1, #0
 80013fe:	2078      	movs	r0, #120	; 0x78
 8001400:	f000 fb62 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001404:	22da      	movs	r2, #218	; 0xda
 8001406:	2100      	movs	r1, #0
 8001408:	2078      	movs	r0, #120	; 0x78
 800140a:	f000 fb5d 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800140e:	2212      	movs	r2, #18
 8001410:	2100      	movs	r1, #0
 8001412:	2078      	movs	r0, #120	; 0x78
 8001414:	f000 fb58 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001418:	22db      	movs	r2, #219	; 0xdb
 800141a:	2100      	movs	r1, #0
 800141c:	2078      	movs	r0, #120	; 0x78
 800141e:	f000 fb53 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001422:	2220      	movs	r2, #32
 8001424:	2100      	movs	r1, #0
 8001426:	2078      	movs	r0, #120	; 0x78
 8001428:	f000 fb4e 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800142c:	228d      	movs	r2, #141	; 0x8d
 800142e:	2100      	movs	r1, #0
 8001430:	2078      	movs	r0, #120	; 0x78
 8001432:	f000 fb49 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001436:	2214      	movs	r2, #20
 8001438:	2100      	movs	r1, #0
 800143a:	2078      	movs	r0, #120	; 0x78
 800143c:	f000 fb44 	bl	8001ac8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001440:	22af      	movs	r2, #175	; 0xaf
 8001442:	2100      	movs	r1, #0
 8001444:	2078      	movs	r0, #120	; 0x78
 8001446:	f000 fb3f 	bl	8001ac8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800144a:	222e      	movs	r2, #46	; 0x2e
 800144c:	2100      	movs	r1, #0
 800144e:	2078      	movs	r0, #120	; 0x78
 8001450:	f000 fb3a 	bl	8001ac8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001454:	2000      	movs	r0, #0
 8001456:	f000 f843 	bl	80014e0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800145a:	f000 f813 	bl	8001484 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <SSD1306_Init+0x184>)
 8001460:	2200      	movs	r2, #0
 8001462:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <SSD1306_Init+0x184>)
 8001466:	2200      	movs	r2, #0
 8001468:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <SSD1306_Init+0x184>)
 800146c:	2201      	movs	r2, #1
 800146e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000099c 	.word	0x2000099c
 8001480:	20000984 	.word	0x20000984

08001484 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800148a:	2300      	movs	r3, #0
 800148c:	71fb      	strb	r3, [r7, #7]
 800148e:	e01d      	b.n	80014cc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	3b50      	subs	r3, #80	; 0x50
 8001494:	b2db      	uxtb	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	2100      	movs	r1, #0
 800149a:	2078      	movs	r0, #120	; 0x78
 800149c:	f000 fb14 	bl	8001ac8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	2078      	movs	r0, #120	; 0x78
 80014a6:	f000 fb0f 	bl	8001ac8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014aa:	2210      	movs	r2, #16
 80014ac:	2100      	movs	r1, #0
 80014ae:	2078      	movs	r0, #120	; 0x78
 80014b0:	f000 fb0a 	bl	8001ac8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	01db      	lsls	r3, r3, #7
 80014b8:	4a08      	ldr	r2, [pc, #32]	; (80014dc <SSD1306_UpdateScreen+0x58>)
 80014ba:	441a      	add	r2, r3
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	2140      	movs	r1, #64	; 0x40
 80014c0:	2078      	movs	r0, #120	; 0x78
 80014c2:	f000 fab9 	bl	8001a38 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	3301      	adds	r3, #1
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	d9de      	bls.n	8001490 <SSD1306_UpdateScreen+0xc>
	}
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000584 	.word	0x20000584

080014e0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <SSD1306_Fill+0x14>
 80014f0:	2300      	movs	r3, #0
 80014f2:	e000      	b.n	80014f6 <SSD1306_Fill+0x16>
 80014f4:	23ff      	movs	r3, #255	; 0xff
 80014f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fa:	4619      	mov	r1, r3
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <SSD1306_Fill+0x2c>)
 80014fe:	f008 fd26 	bl	8009f4e <memset>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000584 	.word	0x20000584

08001510 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
 800151a:	460b      	mov	r3, r1
 800151c:	80bb      	strh	r3, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	70fb      	strb	r3, [r7, #3]
	if (
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	2b7f      	cmp	r3, #127	; 0x7f
 8001526:	d848      	bhi.n	80015ba <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001528:	88bb      	ldrh	r3, [r7, #4]
 800152a:	2b3f      	cmp	r3, #63	; 0x3f
 800152c:	d845      	bhi.n	80015ba <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <SSD1306_DrawPixel+0xb8>)
 8001530:	791b      	ldrb	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d11a      	bne.n	8001580 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800154a:	88fa      	ldrh	r2, [r7, #6]
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	08db      	lsrs	r3, r3, #3
 8001550:	b298      	uxth	r0, r3
 8001552:	4603      	mov	r3, r0
 8001554:	01db      	lsls	r3, r3, #7
 8001556:	4413      	add	r3, r2
 8001558:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <SSD1306_DrawPixel+0xbc>)
 800155a:	5cd3      	ldrb	r3, [r2, r3]
 800155c:	b25a      	sxtb	r2, r3
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	b25b      	sxtb	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b259      	sxtb	r1, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	4603      	mov	r3, r0
 8001574:	01db      	lsls	r3, r3, #7
 8001576:	4413      	add	r3, r2
 8001578:	b2c9      	uxtb	r1, r1
 800157a:	4a14      	ldr	r2, [pc, #80]	; (80015cc <SSD1306_DrawPixel+0xbc>)
 800157c:	54d1      	strb	r1, [r2, r3]
 800157e:	e01d      	b.n	80015bc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	88bb      	ldrh	r3, [r7, #4]
 8001584:	08db      	lsrs	r3, r3, #3
 8001586:	b298      	uxth	r0, r3
 8001588:	4603      	mov	r3, r0
 800158a:	01db      	lsls	r3, r3, #7
 800158c:	4413      	add	r3, r2
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <SSD1306_DrawPixel+0xbc>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	b25a      	sxtb	r2, r3
 8001594:	88bb      	ldrh	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	2101      	movs	r1, #1
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	4013      	ands	r3, r2
 80015a8:	b259      	sxtb	r1, r3
 80015aa:	88fa      	ldrh	r2, [r7, #6]
 80015ac:	4603      	mov	r3, r0
 80015ae:	01db      	lsls	r3, r3, #7
 80015b0:	4413      	add	r3, r2
 80015b2:	b2c9      	uxtb	r1, r1
 80015b4:	4a05      	ldr	r2, [pc, #20]	; (80015cc <SSD1306_DrawPixel+0xbc>)
 80015b6:	54d1      	strb	r1, [r2, r3]
 80015b8:	e000      	b.n	80015bc <SSD1306_DrawPixel+0xac>
		return;
 80015ba:	bf00      	nop
	}
}
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000984 	.word	0x20000984
 80015cc:	20000584 	.word	0x20000584

080015d0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	80fb      	strh	r3, [r7, #6]
 80015dc:	4613      	mov	r3, r2
 80015de:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80015e0:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <SSD1306_GotoXY+0x28>)
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <SSD1306_GotoXY+0x28>)
 80015e8:	88bb      	ldrh	r3, [r7, #4]
 80015ea:	8053      	strh	r3, [r2, #2]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	20000984 	.word	0x20000984

080015fc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
 8001608:	4613      	mov	r3, r2
 800160a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800160c:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <SSD1306_Putc+0xfc>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
	if (
 8001618:	2b7f      	cmp	r3, #127	; 0x7f
 800161a:	dc07      	bgt.n	800162c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800161c:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <SSD1306_Putc+0xfc>)
 800161e:	885b      	ldrh	r3, [r3, #2]
 8001620:	461a      	mov	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	785b      	ldrb	r3, [r3, #1]
 8001626:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001628:	2b3f      	cmp	r3, #63	; 0x3f
 800162a:	dd01      	ble.n	8001630 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800162c:	2300      	movs	r3, #0
 800162e:	e05e      	b.n	80016ee <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e04b      	b.n	80016ce <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	3b20      	subs	r3, #32
 800163e:	6839      	ldr	r1, [r7, #0]
 8001640:	7849      	ldrb	r1, [r1, #1]
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4619      	mov	r1, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	440b      	add	r3, r1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	e030      	b.n	80016bc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d010      	beq.n	800168c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <SSD1306_Putc+0xfc>)
 800166c:	881a      	ldrh	r2, [r3, #0]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	b29b      	uxth	r3, r3
 8001672:	4413      	add	r3, r2
 8001674:	b298      	uxth	r0, r3
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <SSD1306_Putc+0xfc>)
 8001678:	885a      	ldrh	r2, [r3, #2]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	b29b      	uxth	r3, r3
 800167e:	4413      	add	r3, r2
 8001680:	b29b      	uxth	r3, r3
 8001682:	79ba      	ldrb	r2, [r7, #6]
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff ff43 	bl	8001510 <SSD1306_DrawPixel>
 800168a:	e014      	b.n	80016b6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <SSD1306_Putc+0xfc>)
 800168e:	881a      	ldrh	r2, [r3, #0]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4413      	add	r3, r2
 8001696:	b298      	uxth	r0, r3
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <SSD1306_Putc+0xfc>)
 800169a:	885a      	ldrh	r2, [r3, #2]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	b299      	uxth	r1, r3
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bf0c      	ite	eq
 80016aa:	2301      	moveq	r3, #1
 80016ac:	2300      	movne	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	f7ff ff2d 	bl	8001510 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	3301      	adds	r3, #1
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d3c8      	bcc.n	800165a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	785b      	ldrb	r3, [r3, #1]
 80016d2:	461a      	mov	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d3ad      	bcc.n	8001636 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <SSD1306_Putc+0xfc>)
 80016dc:	881a      	ldrh	r2, [r3, #0]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <SSD1306_Putc+0xfc>)
 80016ea:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000984 	.word	0x20000984

080016fc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	4613      	mov	r3, r2
 8001708:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800170a:	e012      	b.n	8001732 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff71 	bl	80015fc <SSD1306_Putc>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d002      	beq.n	800172c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	e008      	b.n	800173e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3301      	adds	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1e8      	bne.n	800170c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	781b      	ldrb	r3, [r3, #0]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001746:	b590      	push	{r4, r7, lr}
 8001748:	b087      	sub	sp, #28
 800174a:	af00      	add	r7, sp, #0
 800174c:	4604      	mov	r4, r0
 800174e:	4608      	mov	r0, r1
 8001750:	4611      	mov	r1, r2
 8001752:	461a      	mov	r2, r3
 8001754:	4623      	mov	r3, r4
 8001756:	80fb      	strh	r3, [r7, #6]
 8001758:	4603      	mov	r3, r0
 800175a:	80bb      	strh	r3, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
 8001760:	4613      	mov	r3, r2
 8001762:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	2b7f      	cmp	r3, #127	; 0x7f
 8001768:	d901      	bls.n	800176e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800176a:	237f      	movs	r3, #127	; 0x7f
 800176c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	2b7f      	cmp	r3, #127	; 0x7f
 8001772:	d901      	bls.n	8001778 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001774:	237f      	movs	r3, #127	; 0x7f
 8001776:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001778:	88bb      	ldrh	r3, [r7, #4]
 800177a:	2b3f      	cmp	r3, #63	; 0x3f
 800177c:	d901      	bls.n	8001782 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 800177e:	233f      	movs	r3, #63	; 0x3f
 8001780:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001782:	883b      	ldrh	r3, [r7, #0]
 8001784:	2b3f      	cmp	r3, #63	; 0x3f
 8001786:	d901      	bls.n	800178c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001788:	233f      	movs	r3, #63	; 0x3f
 800178a:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800178c:	88fa      	ldrh	r2, [r7, #6]
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	429a      	cmp	r2, r3
 8001792:	d205      	bcs.n	80017a0 <SSD1306_DrawLine+0x5a>
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	b29b      	uxth	r3, r3
 800179c:	b21b      	sxth	r3, r3
 800179e:	e004      	b.n	80017aa <SSD1306_DrawLine+0x64>
 80017a0:	88fa      	ldrh	r2, [r7, #6]
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	883b      	ldrh	r3, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d205      	bcs.n	80017c0 <SSD1306_DrawLine+0x7a>
 80017b4:	883a      	ldrh	r2, [r7, #0]
 80017b6:	88bb      	ldrh	r3, [r7, #4]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	b21b      	sxth	r3, r3
 80017be:	e004      	b.n	80017ca <SSD1306_DrawLine+0x84>
 80017c0:	88ba      	ldrh	r2, [r7, #4]
 80017c2:	883b      	ldrh	r3, [r7, #0]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80017cc:	88fa      	ldrh	r2, [r7, #6]
 80017ce:	887b      	ldrh	r3, [r7, #2]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d201      	bcs.n	80017d8 <SSD1306_DrawLine+0x92>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e001      	b.n	80017dc <SSD1306_DrawLine+0x96>
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
 80017dc:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80017de:	88ba      	ldrh	r2, [r7, #4]
 80017e0:	883b      	ldrh	r3, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d201      	bcs.n	80017ea <SSD1306_DrawLine+0xa4>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e001      	b.n	80017ee <SSD1306_DrawLine+0xa8>
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80017f0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80017f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dd06      	ble.n	800180a <SSD1306_DrawLine+0xc4>
 80017fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001800:	0fda      	lsrs	r2, r3, #31
 8001802:	4413      	add	r3, r2
 8001804:	105b      	asrs	r3, r3, #1
 8001806:	b21b      	sxth	r3, r3
 8001808:	e006      	b.n	8001818 <SSD1306_DrawLine+0xd2>
 800180a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800180e:	425b      	negs	r3, r3
 8001810:	0fda      	lsrs	r2, r3, #31
 8001812:	4413      	add	r3, r2
 8001814:	105b      	asrs	r3, r3, #1
 8001816:	b21b      	sxth	r3, r3
 8001818:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800181a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d129      	bne.n	8001876 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001822:	883a      	ldrh	r2, [r7, #0]
 8001824:	88bb      	ldrh	r3, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	d205      	bcs.n	8001836 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800182a:	883b      	ldrh	r3, [r7, #0]
 800182c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800182e:	88bb      	ldrh	r3, [r7, #4]
 8001830:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001832:	893b      	ldrh	r3, [r7, #8]
 8001834:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	429a      	cmp	r2, r3
 800183c:	d205      	bcs.n	800184a <SSD1306_DrawLine+0x104>
			tmp = x1;
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001846:	893b      	ldrh	r3, [r7, #8]
 8001848:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800184a:	88bb      	ldrh	r3, [r7, #4]
 800184c:	82bb      	strh	r3, [r7, #20]
 800184e:	e00c      	b.n	800186a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001850:	8ab9      	ldrh	r1, [r7, #20]
 8001852:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fe59 	bl	8001510 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800185e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001862:	b29b      	uxth	r3, r3
 8001864:	3301      	adds	r3, #1
 8001866:	b29b      	uxth	r3, r3
 8001868:	82bb      	strh	r3, [r7, #20]
 800186a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800186e:	883b      	ldrh	r3, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	dded      	ble.n	8001850 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001874:	e05f      	b.n	8001936 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001876:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d129      	bne.n	80018d2 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 800187e:	883a      	ldrh	r2, [r7, #0]
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	d205      	bcs.n	8001892 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001886:	883b      	ldrh	r3, [r7, #0]
 8001888:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800188e:	893b      	ldrh	r3, [r7, #8]
 8001890:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	429a      	cmp	r2, r3
 8001898:	d205      	bcs.n	80018a6 <SSD1306_DrawLine+0x160>
			tmp = x1;
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80018a2:	893b      	ldrh	r3, [r7, #8]
 80018a4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	82bb      	strh	r3, [r7, #20]
 80018aa:	e00c      	b.n	80018c6 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80018ac:	8abb      	ldrh	r3, [r7, #20]
 80018ae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80018b2:	88b9      	ldrh	r1, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fe2b 	bl	8001510 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80018ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	82bb      	strh	r3, [r7, #20]
 80018c6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dded      	ble.n	80018ac <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80018d0:	e031      	b.n	8001936 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80018d2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80018d6:	88b9      	ldrh	r1, [r7, #4]
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fe18 	bl	8001510 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80018e0:	88fa      	ldrh	r2, [r7, #6]
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d103      	bne.n	80018f0 <SSD1306_DrawLine+0x1aa>
 80018e8:	88ba      	ldrh	r2, [r7, #4]
 80018ea:	883b      	ldrh	r3, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d021      	beq.n	8001934 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80018f0:	8afb      	ldrh	r3, [r7, #22]
 80018f2:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80018f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80018f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018fc:	425b      	negs	r3, r3
 80018fe:	429a      	cmp	r2, r3
 8001900:	dd08      	ble.n	8001914 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001902:	8afa      	ldrh	r2, [r7, #22]
 8001904:	8a3b      	ldrh	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	b29b      	uxth	r3, r3
 800190a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800190c:	89fa      	ldrh	r2, [r7, #14]
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	4413      	add	r3, r2
 8001912:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001914:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001918:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	dad8      	bge.n	80018d2 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001920:	8afa      	ldrh	r2, [r7, #22]
 8001922:	8a7b      	ldrh	r3, [r7, #18]
 8001924:	4413      	add	r3, r2
 8001926:	b29b      	uxth	r3, r3
 8001928:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800192a:	89ba      	ldrh	r2, [r7, #12]
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001932:	e7ce      	b.n	80018d2 <SSD1306_DrawLine+0x18c>
			break;
 8001934:	bf00      	nop
		} 
	}
}
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}

0800193c <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b085      	sub	sp, #20
 8001940:	af02      	add	r7, sp, #8
 8001942:	4604      	mov	r4, r0
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4623      	mov	r3, r4
 800194c:	80fb      	strh	r3, [r7, #6]
 800194e:	4603      	mov	r3, r0
 8001950:	80bb      	strh	r3, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	807b      	strh	r3, [r7, #2]
 8001956:	4613      	mov	r3, r2
 8001958:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b7f      	cmp	r3, #127	; 0x7f
 800195e:	d853      	bhi.n	8001a08 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	2b3f      	cmp	r3, #63	; 0x3f
 8001964:	d850      	bhi.n	8001a08 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001966:	88fa      	ldrh	r2, [r7, #6]
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	4413      	add	r3, r2
 800196c:	2b7f      	cmp	r3, #127	; 0x7f
 800196e:	dd03      	ble.n	8001978 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001976:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001978:	88ba      	ldrh	r2, [r7, #4]
 800197a:	883b      	ldrh	r3, [r7, #0]
 800197c:	4413      	add	r3, r2
 800197e:	2b3f      	cmp	r3, #63	; 0x3f
 8001980:	dd03      	ble.n	800198a <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001982:	88bb      	ldrh	r3, [r7, #4]
 8001984:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001988:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 800198a:	88fa      	ldrh	r2, [r7, #6]
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	4413      	add	r3, r2
 8001990:	b29a      	uxth	r2, r3
 8001992:	88bc      	ldrh	r4, [r7, #4]
 8001994:	88b9      	ldrh	r1, [r7, #4]
 8001996:	88f8      	ldrh	r0, [r7, #6]
 8001998:	7e3b      	ldrb	r3, [r7, #24]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	4623      	mov	r3, r4
 800199e:	f7ff fed2 	bl	8001746 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 80019a2:	88ba      	ldrh	r2, [r7, #4]
 80019a4:	883b      	ldrh	r3, [r7, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	b299      	uxth	r1, r3
 80019aa:	88fa      	ldrh	r2, [r7, #6]
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	4413      	add	r3, r2
 80019b0:	b29c      	uxth	r4, r3
 80019b2:	88ba      	ldrh	r2, [r7, #4]
 80019b4:	883b      	ldrh	r3, [r7, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	88f8      	ldrh	r0, [r7, #6]
 80019bc:	7e3b      	ldrb	r3, [r7, #24]
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	4622      	mov	r2, r4
 80019c4:	f7ff febf 	bl	8001746 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80019c8:	88ba      	ldrh	r2, [r7, #4]
 80019ca:	883b      	ldrh	r3, [r7, #0]
 80019cc:	4413      	add	r3, r2
 80019ce:	b29c      	uxth	r4, r3
 80019d0:	88fa      	ldrh	r2, [r7, #6]
 80019d2:	88b9      	ldrh	r1, [r7, #4]
 80019d4:	88f8      	ldrh	r0, [r7, #6]
 80019d6:	7e3b      	ldrb	r3, [r7, #24]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	4623      	mov	r3, r4
 80019dc:	f7ff feb3 	bl	8001746 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80019e0:	88fa      	ldrh	r2, [r7, #6]
 80019e2:	887b      	ldrh	r3, [r7, #2]
 80019e4:	4413      	add	r3, r2
 80019e6:	b298      	uxth	r0, r3
 80019e8:	88fa      	ldrh	r2, [r7, #6]
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	4413      	add	r3, r2
 80019ee:	b29c      	uxth	r4, r3
 80019f0:	88ba      	ldrh	r2, [r7, #4]
 80019f2:	883b      	ldrh	r3, [r7, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	88b9      	ldrh	r1, [r7, #4]
 80019fa:	7e3b      	ldrb	r3, [r7, #24]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	4622      	mov	r2, r4
 8001a02:	f7ff fea0 	bl	8001746 <SSD1306_DrawLine>
 8001a06:	e000      	b.n	8001a0a <SSD1306_DrawRectangle+0xce>
		return;
 8001a08:	bf00      	nop
}
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}

08001a10 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <ssd1306_I2C_Init+0x24>)
 8001a18:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a1a:	e002      	b.n	8001a22 <ssd1306_I2C_Init+0x12>
		p--;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f9      	bne.n	8001a1c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	0003d090 	.word	0x0003d090

08001a38 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b0c7      	sub	sp, #284	; 0x11c
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	4604      	mov	r4, r0
 8001a40:	4608      	mov	r0, r1
 8001a42:	4639      	mov	r1, r7
 8001a44:	600a      	str	r2, [r1, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	1dfb      	adds	r3, r7, #7
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	701a      	strb	r2, [r3, #0]
 8001a4e:	1dbb      	adds	r3, r7, #6
 8001a50:	4602      	mov	r2, r0
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	460a      	mov	r2, r1
 8001a58:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	1dba      	adds	r2, r7, #6
 8001a60:	7812      	ldrb	r2, [r2, #0]
 8001a62:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a6a:	e010      	b.n	8001a8e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001a6c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a70:	463a      	mov	r2, r7
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	441a      	add	r2, r3
 8001a76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	7811      	ldrb	r1, [r2, #0]
 8001a7e:	f107 020c 	add.w	r2, r7, #12
 8001a82:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a84:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a8e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	1d3a      	adds	r2, r7, #4
 8001a96:	8812      	ldrh	r2, [r2, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8e7      	bhi.n	8001a6c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a9c:	1dfb      	adds	r3, r7, #7
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	b299      	uxth	r1, r3
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	b298      	uxth	r0, r3
 8001aaa:	f107 020c 	add.w	r2, r7, #12
 8001aae:	230a      	movs	r3, #10
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <ssd1306_I2C_WriteMulti+0x8c>)
 8001ab6:	f001 f94b 	bl	8002d50 <HAL_I2C_Master_Transmit>
}
 8001aba:	bf00      	nop
 8001abc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	2000099c 	.word	0x2000099c

08001ac8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	71bb      	strb	r3, [r7, #6]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ada:	79bb      	ldrb	r3, [r7, #6]
 8001adc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001ade:	797b      	ldrb	r3, [r7, #5]
 8001ae0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	b299      	uxth	r1, r3
 8001ae6:	f107 020c 	add.w	r2, r7, #12
 8001aea:	230a      	movs	r3, #10
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2302      	movs	r3, #2
 8001af0:	4803      	ldr	r0, [pc, #12]	; (8001b00 <ssd1306_I2C_Write+0x38>)
 8001af2:	f001 f92d 	bl	8002d50 <HAL_I2C_Master_Transmit>
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000099c 	.word	0x2000099c

08001b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba8:	f000 fc7a 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001bb4:	2004      	movs	r0, #4
 8001bb6:	f000 ff7b 	bl	8002ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001bc2:	2008      	movs	r0, #8
 8001bc4:	f000 ff74 	bl	8002ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001bd0:	2010      	movs	r0, #16
 8001bd2:	f000 ff6d 	bl	8002ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <TIM2_IRQHandler+0x10>)
 8001be2:	f004 f8d2 	bl	8005d8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000b3c 	.word	0x20000b3c

08001bf0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <OTG_FS_IRQHandler+0x10>)
 8001bf6:	f001 fe30 	bl	800385a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200010e0 	.word	0x200010e0

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f008 f946 	bl	8009ec4 <__errno>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	230c      	movs	r3, #12
 8001c3c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20020000 	.word	0x20020000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	2000098c 	.word	0x2000098c
 8001c6c:	200014f0 	.word	0x200014f0

08001c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <SystemInit+0x28>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7a:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <SystemInit+0x28>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <SystemInit+0x28>)
 8001c86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c8a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	2224      	movs	r2, #36	; 0x24
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f008 f94f 	bl	8009f4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <MX_TIM2_Init+0xa4>)
 8001cba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <MX_TIM2_Init+0xa4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <MX_TIM2_Init+0xa4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <MX_TIM2_Init+0xa4>)
 8001cce:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_TIM2_Init+0xa4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <MX_TIM2_Init+0xa4>)
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001cf0:	230a      	movs	r3, #10
 8001cf2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001d00:	230a      	movs	r3, #10
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480d      	ldr	r0, [pc, #52]	; (8001d40 <MX_TIM2_Init+0xa4>)
 8001d0c:	f003 ff54 	bl	8005bb8 <HAL_TIM_Encoder_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d16:	f7ff fa6b 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <MX_TIM2_Init+0xa4>)
 8001d28:	f004 fa06 	bl	8006138 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d32:	f7ff fa5d 	bl	80011f0 <Error_Handler>
  }

}
 8001d36:	bf00      	nop
 8001d38:	3730      	adds	r7, #48	; 0x30
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000b3c 	.word	0x20000b3c

08001d44 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d64:	d133      	bne.n	8001dce <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dae:	2301      	movs	r3, #1
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4808      	ldr	r0, [pc, #32]	; (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001dba:	f000 fcc5 	bl	8002748 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	201c      	movs	r0, #28
 8001dc4:	f000 fc89 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dc8:	201c      	movs	r0, #28
 8001dca:	f000 fca2 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000

08001de0 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001dea:	f107 020f 	add.w	r2, r7, #15
 8001dee:	1df9      	adds	r1, r7, #7
 8001df0:	2364      	movs	r3, #100	; 0x64
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2301      	movs	r3, #1
 8001df6:	4804      	ldr	r0, [pc, #16]	; (8001e08 <W25qxx_Spi+0x28>)
 8001df8:	f003 fc2b 	bl	8005652 <HAL_SPI_TransmitReceive>
	return ret;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000ae4 	.word	0x20000ae4

08001e0c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e28:	4813      	ldr	r0, [pc, #76]	; (8001e78 <W25qxx_ReadID+0x6c>)
 8001e2a:	f000 fe27 	bl	8002a7c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001e2e:	209f      	movs	r0, #159	; 0x9f
 8001e30:	f7ff ffd6 	bl	8001de0 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e34:	20a5      	movs	r0, #165	; 0xa5
 8001e36:	f7ff ffd3 	bl	8001de0 <W25qxx_Spi>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e3e:	20a5      	movs	r0, #165	; 0xa5
 8001e40:	f7ff ffce 	bl	8001de0 <W25qxx_Spi>
 8001e44:	4603      	mov	r3, r0
 8001e46:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e48:	20a5      	movs	r0, #165	; 0xa5
 8001e4a:	f7ff ffc9 	bl	8001de0 <W25qxx_Spi>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e58:	4807      	ldr	r0, [pc, #28]	; (8001e78 <W25qxx_ReadID+0x6c>)
 8001e5a:	f000 fe0f 	bl	8002a7c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	041a      	lsls	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	4313      	orrs	r3, r2
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40020000 	.word	0x40020000

08001e7c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e88:	4816      	ldr	r0, [pc, #88]	; (8001ee4 <W25qxx_ReadUniqID+0x68>)
 8001e8a:	f000 fdf7 	bl	8002a7c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8001e8e:	204b      	movs	r0, #75	; 0x4b
 8001e90:	f7ff ffa6 	bl	8001de0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	e005      	b.n	8001ea6 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e9a:	20a5      	movs	r0, #165	; 0xa5
 8001e9c:	f7ff ffa0 	bl	8001de0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	71fb      	strb	r3, [r7, #7]
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d9f6      	bls.n	8001e9a <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	71bb      	strb	r3, [r7, #6]
 8001eb0:	e00b      	b.n	8001eca <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001eb2:	79bc      	ldrb	r4, [r7, #6]
 8001eb4:	20a5      	movs	r0, #165	; 0xa5
 8001eb6:	f7ff ff93 	bl	8001de0 <W25qxx_Spi>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <W25qxx_ReadUniqID+0x6c>)
 8001ec0:	4423      	add	r3, r4
 8001ec2:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	71bb      	strb	r3, [r7, #6]
 8001eca:	79bb      	ldrb	r3, [r7, #6]
 8001ecc:	2b07      	cmp	r3, #7
 8001ece:	d9f0      	bls.n	8001eb2 <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed6:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <W25qxx_ReadUniqID+0x68>)
 8001ed8:	f000 fdd0 	bl	8002a7c <HAL_GPIO_WritePin>
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	20000b7c 	.word	0x20000b7c

08001eec <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef6:	4808      	ldr	r0, [pc, #32]	; (8001f18 <W25qxx_WriteEnable+0x2c>)
 8001ef8:	f000 fdc0 	bl	8002a7c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8001efc:	2006      	movs	r0, #6
 8001efe:	f7ff ff6f 	bl	8001de0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f02:	2201      	movs	r2, #1
 8001f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f08:	4803      	ldr	r0, [pc, #12]	; (8001f18 <W25qxx_WriteEnable+0x2c>)
 8001f0a:	f000 fdb7 	bl	8002a7c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f000 fae6 	bl	80024e0 <HAL_Delay>
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40020000 	.word	0x40020000

08001f1c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f30:	481c      	ldr	r0, [pc, #112]	; (8001fa4 <W25qxx_ReadStatusRegister+0x88>)
 8001f32:	f000 fda3 	bl	8002a7c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d10c      	bne.n	8001f56 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8001f3c:	2005      	movs	r0, #5
 8001f3e:	f7ff ff4f 	bl	8001de0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f42:	20a5      	movs	r0, #165	; 0xa5
 8001f44:	f7ff ff4c 	bl	8001de0 <W25qxx_Spi>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001f4c:	4a16      	ldr	r2, [pc, #88]	; (8001fa8 <W25qxx_ReadStatusRegister+0x8c>)
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001f54:	e01b      	b.n	8001f8e <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d10c      	bne.n	8001f76 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8001f5c:	2035      	movs	r0, #53	; 0x35
 8001f5e:	f7ff ff3f 	bl	8001de0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f62:	20a5      	movs	r0, #165	; 0xa5
 8001f64:	f7ff ff3c 	bl	8001de0 <W25qxx_Spi>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <W25qxx_ReadStatusRegister+0x8c>)
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001f74:	e00b      	b.n	8001f8e <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001f76:	2015      	movs	r0, #21
 8001f78:	f7ff ff32 	bl	8001de0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f7c:	20a5      	movs	r0, #165	; 0xa5
 8001f7e:	f7ff ff2f 	bl	8001de0 <W25qxx_Spi>
 8001f82:	4603      	mov	r3, r0
 8001f84:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <W25qxx_ReadStatusRegister+0x8c>)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f94:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <W25qxx_ReadStatusRegister+0x88>)
 8001f96:	f000 fd71 	bl	8002a7c <HAL_GPIO_WritePin>
	return status;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	20000b7c 	.word	0x20000b7c

08001fac <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f000 fa95 	bl	80024e0 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fbc:	480f      	ldr	r0, [pc, #60]	; (8001ffc <W25qxx_WaitForWriteEnd+0x50>)
 8001fbe:	f000 fd5d 	bl	8002a7c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8001fc2:	2005      	movs	r0, #5
 8001fc4:	f7ff ff0c 	bl	8001de0 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fc8:	20a5      	movs	r0, #165	; 0xa5
 8001fca:	f7ff ff09 	bl	8001de0 <W25qxx_Spi>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <W25qxx_WaitForWriteEnd+0x54>)
 8001fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f000 fa81 	bl	80024e0 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <W25qxx_WaitForWriteEnd+0x54>)
 8001fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ed      	bne.n	8001fc8 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001fec:	2201      	movs	r2, #1
 8001fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff2:	4802      	ldr	r0, [pc, #8]	; (8001ffc <W25qxx_WaitForWriteEnd+0x50>)
 8001ff4:	f000 fd42 	bl	8002a7c <HAL_GPIO_WritePin>
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40020000 	.word	0x40020000
 8002000:	20000b7c 	.word	0x20000b7c

08002004 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800200a:	4b62      	ldr	r3, [pc, #392]	; (8002194 <W25qxx_Init+0x190>)
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//while (HAL_GetTick() < 100)
	//	W25qxx_Delay(1);
	W25qxx_Delay(100);
 8002012:	2064      	movs	r0, #100	; 0x64
 8002014:	f000 fa64 	bl	80024e0 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002018:	2201      	movs	r2, #1
 800201a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800201e:	485e      	ldr	r0, [pc, #376]	; (8002198 <W25qxx_Init+0x194>)
 8002020:	f000 fd2c 	bl	8002a7c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8002024:	2064      	movs	r0, #100	; 0x64
 8002026:	f000 fa5b 	bl	80024e0 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800202a:	f7ff feef 	bl	8001e0c <W25qxx_ReadID>
 800202e:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	3b11      	subs	r3, #17
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d86b      	bhi.n	8002112 <W25qxx_Init+0x10e>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <W25qxx_Init+0x3c>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002105 	.word	0x08002105
 8002044:	080020f7 	.word	0x080020f7
 8002048:	080020e9 	.word	0x080020e9
 800204c:	080020db 	.word	0x080020db
 8002050:	080020cd 	.word	0x080020cd
 8002054:	080020bf 	.word	0x080020bf
 8002058:	080020b1 	.word	0x080020b1
 800205c:	080020a1 	.word	0x080020a1
 8002060:	08002091 	.word	0x08002091
 8002064:	08002113 	.word	0x08002113
 8002068:	08002113 	.word	0x08002113
 800206c:	08002113 	.word	0x08002113
 8002070:	08002113 	.word	0x08002113
 8002074:	08002113 	.word	0x08002113
 8002078:	08002113 	.word	0x08002113
 800207c:	08002081 	.word	0x08002081
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002080:	4b44      	ldr	r3, [pc, #272]	; (8002194 <W25qxx_Init+0x190>)
 8002082:	220a      	movs	r2, #10
 8002084:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8002086:	4b43      	ldr	r3, [pc, #268]	; (8002194 <W25qxx_Init+0x190>)
 8002088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800208c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800208e:	e046      	b.n	800211e <W25qxx_Init+0x11a>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8002090:	4b40      	ldr	r3, [pc, #256]	; (8002194 <W25qxx_Init+0x190>)
 8002092:	2209      	movs	r2, #9
 8002094:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8002096:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <W25qxx_Init+0x190>)
 8002098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800209e:	e03e      	b.n	800211e <W25qxx_Init+0x11a>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80020a0:	4b3c      	ldr	r3, [pc, #240]	; (8002194 <W25qxx_Init+0x190>)
 80020a2:	2208      	movs	r2, #8
 80020a4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80020a6:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <W25qxx_Init+0x190>)
 80020a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80020ae:	e036      	b.n	800211e <W25qxx_Init+0x11a>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80020b0:	4b38      	ldr	r3, [pc, #224]	; (8002194 <W25qxx_Init+0x190>)
 80020b2:	2207      	movs	r2, #7
 80020b4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80020b6:	4b37      	ldr	r3, [pc, #220]	; (8002194 <W25qxx_Init+0x190>)
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80020bc:	e02f      	b.n	800211e <W25qxx_Init+0x11a>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80020be:	4b35      	ldr	r3, [pc, #212]	; (8002194 <W25qxx_Init+0x190>)
 80020c0:	2206      	movs	r2, #6
 80020c2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80020c4:	4b33      	ldr	r3, [pc, #204]	; (8002194 <W25qxx_Init+0x190>)
 80020c6:	2240      	movs	r2, #64	; 0x40
 80020c8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80020ca:	e028      	b.n	800211e <W25qxx_Init+0x11a>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80020cc:	4b31      	ldr	r3, [pc, #196]	; (8002194 <W25qxx_Init+0x190>)
 80020ce:	2205      	movs	r2, #5
 80020d0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <W25qxx_Init+0x190>)
 80020d4:	2220      	movs	r2, #32
 80020d6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80020d8:	e021      	b.n	800211e <W25qxx_Init+0x11a>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80020da:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <W25qxx_Init+0x190>)
 80020dc:	2204      	movs	r2, #4
 80020de:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80020e0:	4b2c      	ldr	r3, [pc, #176]	; (8002194 <W25qxx_Init+0x190>)
 80020e2:	2210      	movs	r2, #16
 80020e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 80020e6:	e01a      	b.n	800211e <W25qxx_Init+0x11a>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <W25qxx_Init+0x190>)
 80020ea:	2203      	movs	r2, #3
 80020ec:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <W25qxx_Init+0x190>)
 80020f0:	2208      	movs	r2, #8
 80020f2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80020f4:	e013      	b.n	800211e <W25qxx_Init+0x11a>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80020f6:	4b27      	ldr	r3, [pc, #156]	; (8002194 <W25qxx_Init+0x190>)
 80020f8:	2202      	movs	r2, #2
 80020fa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <W25qxx_Init+0x190>)
 80020fe:	2204      	movs	r2, #4
 8002100:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8002102:	e00c      	b.n	800211e <W25qxx_Init+0x11a>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8002104:	4b23      	ldr	r3, [pc, #140]	; (8002194 <W25qxx_Init+0x190>)
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800210a:	4b22      	ldr	r3, [pc, #136]	; (8002194 <W25qxx_Init+0x190>)
 800210c:	2202      	movs	r2, #2
 800210e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8002110:	e005      	b.n	800211e <W25qxx_Init+0x11a>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <W25qxx_Init+0x190>)
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800211a:	2300      	movs	r3, #0
 800211c:	e036      	b.n	800218c <W25qxx_Init+0x188>
	}
	w25qxx.PageSize = 256;
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <W25qxx_Init+0x190>)
 8002120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002124:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <W25qxx_Init+0x190>)
 8002128:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800212c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <W25qxx_Init+0x190>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	4a17      	ldr	r2, [pc, #92]	; (8002194 <W25qxx_Init+0x190>)
 8002136:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8002138:	4b16      	ldr	r3, [pc, #88]	; (8002194 <W25qxx_Init+0x190>)
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	4a15      	ldr	r2, [pc, #84]	; (8002194 <W25qxx_Init+0x190>)
 800213e:	6912      	ldr	r2, [r2, #16]
 8002140:	fb02 f303 	mul.w	r3, r2, r3
 8002144:	4a13      	ldr	r2, [pc, #76]	; (8002194 <W25qxx_Init+0x190>)
 8002146:	8952      	ldrh	r2, [r2, #10]
 8002148:	fbb3 f3f2 	udiv	r3, r3, r2
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <W25qxx_Init+0x190>)
 800214e:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <W25qxx_Init+0x190>)
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <W25qxx_Init+0x190>)
 8002158:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <W25qxx_Init+0x190>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <W25qxx_Init+0x190>)
 8002160:	6912      	ldr	r2, [r2, #16]
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	0a9b      	lsrs	r3, r3, #10
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <W25qxx_Init+0x190>)
 800216a:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800216c:	f7ff fe86 	bl	8001e7c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff fed3 	bl	8001f1c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002176:	2002      	movs	r0, #2
 8002178:	f7ff fed0 	bl	8001f1c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800217c:	2003      	movs	r0, #3
 800217e:	f7ff fecd 	bl	8001f1c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <W25qxx_Init+0x190>)
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000b7c 	.word	0x20000b7c
 8002198:	40020000 	.word	0x40020000

0800219c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80021aa:	e002      	b.n	80021b2 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80021ac:	2001      	movs	r0, #1
 80021ae:	f000 f997 	bl	80024e0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80021b2:	4b3a      	ldr	r3, [pc, #232]	; (800229c <W25qxx_WritePage+0x100>)
 80021b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d0f7      	beq.n	80021ac <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80021bc:	4b37      	ldr	r3, [pc, #220]	; (800229c <W25qxx_WritePage+0x100>)
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a34      	ldr	r2, [pc, #208]	; (800229c <W25qxx_WritePage+0x100>)
 80021cc:	8952      	ldrh	r2, [r2, #10]
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d802      	bhi.n	80021d8 <W25qxx_WritePage+0x3c>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d105      	bne.n	80021e4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80021d8:	4b30      	ldr	r3, [pc, #192]	; (800229c <W25qxx_WritePage+0x100>)
 80021da:	895b      	ldrh	r3, [r3, #10]
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a2c      	ldr	r2, [pc, #176]	; (800229c <W25qxx_WritePage+0x100>)
 80021ec:	8952      	ldrh	r2, [r2, #10]
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d905      	bls.n	80021fe <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <W25qxx_WritePage+0x100>)
 80021f4:	895b      	ldrh	r3, [r3, #10]
 80021f6:	461a      	mov	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80021fe:	f7ff fed5 	bl	8001fac <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8002202:	f7ff fe73 	bl	8001eec <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	f44f 7100 	mov.w	r1, #512	; 0x200
 800220c:	4824      	ldr	r0, [pc, #144]	; (80022a0 <W25qxx_WritePage+0x104>)
 800220e:	f000 fc35 	bl	8002a7c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <W25qxx_WritePage+0x100>)
 8002214:	895b      	ldrh	r3, [r3, #10]
 8002216:	461a      	mov	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	fb03 f302 	mul.w	r3, r3, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <W25qxx_WritePage+0x100>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b08      	cmp	r3, #8
 800222a:	d909      	bls.n	8002240 <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 800222c:	2012      	movs	r0, #18
 800222e:	f7ff fdd7 	bl	8001de0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	0e1b      	lsrs	r3, r3, #24
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fdd1 	bl	8001de0 <W25qxx_Spi>
 800223e:	e002      	b.n	8002246 <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 8002240:	2002      	movs	r0, #2
 8002242:	f7ff fdcd 	bl	8001de0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	0c1b      	lsrs	r3, r3, #16
 800224a:	b2db      	uxtb	r3, r3
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fdc7 	bl	8001de0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	b2db      	uxtb	r3, r3
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fdc1 	bl	8001de0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fdbc 	bl	8001de0 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b29a      	uxth	r2, r3
 800226c:	2364      	movs	r3, #100	; 0x64
 800226e:	68f9      	ldr	r1, [r7, #12]
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <W25qxx_WritePage+0x108>)
 8002272:	f002 ffb1 	bl	80051d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002276:	2201      	movs	r2, #1
 8002278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800227c:	4808      	ldr	r0, [pc, #32]	; (80022a0 <W25qxx_WritePage+0x104>)
 800227e:	f000 fbfd 	bl	8002a7c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002282:	f7ff fe93 	bl	8001fac <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002286:	2001      	movs	r0, #1
 8002288:	f000 f92a 	bl	80024e0 <HAL_Delay>
	w25qxx.Lock = 0;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <W25qxx_WritePage+0x100>)
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000b7c 	.word	0x20000b7c
 80022a0:	40020000 	.word	0x40020000
 80022a4:	20000ae4 	.word	0x20000ae4

080022a8 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80022b6:	e002      	b.n	80022be <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80022b8:	2001      	movs	r0, #1
 80022ba:	f000 f911 	bl	80024e0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80022be:	4b37      	ldr	r3, [pc, #220]	; (800239c <W25qxx_ReadPage+0xf4>)
 80022c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d0f7      	beq.n	80022b8 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80022c8:	4b34      	ldr	r3, [pc, #208]	; (800239c <W25qxx_ReadPage+0xf4>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80022d0:	4b32      	ldr	r3, [pc, #200]	; (800239c <W25qxx_ReadPage+0xf4>)
 80022d2:	895b      	ldrh	r3, [r3, #10]
 80022d4:	461a      	mov	r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	4293      	cmp	r3, r2
 80022da:	d802      	bhi.n	80022e2 <W25qxx_ReadPage+0x3a>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80022e2:	4b2e      	ldr	r3, [pc, #184]	; (800239c <W25qxx_ReadPage+0xf4>)
 80022e4:	895b      	ldrh	r3, [r3, #10]
 80022e6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	4a2b      	ldr	r2, [pc, #172]	; (800239c <W25qxx_ReadPage+0xf4>)
 80022f0:	8952      	ldrh	r2, [r2, #10]
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d905      	bls.n	8002302 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <W25qxx_ReadPage+0xf4>)
 80022f8:	895b      	ldrh	r3, [r3, #10]
 80022fa:	461a      	mov	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <W25qxx_ReadPage+0xf4>)
 8002304:	895b      	ldrh	r3, [r3, #10]
 8002306:	461a      	mov	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	fb03 f302 	mul.w	r3, r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800231a:	4821      	ldr	r0, [pc, #132]	; (80023a0 <W25qxx_ReadPage+0xf8>)
 800231c:	f000 fbae 	bl	8002a7c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <W25qxx_ReadPage+0xf4>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d909      	bls.n	800233c <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 8002328:	200c      	movs	r0, #12
 800232a:	f7ff fd59 	bl	8001de0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	0e1b      	lsrs	r3, r3, #24
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fd53 	bl	8001de0 <W25qxx_Spi>
 800233a:	e002      	b.n	8002342 <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800233c:	200b      	movs	r0, #11
 800233e:	f7ff fd4f 	bl	8001de0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	b2db      	uxtb	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fd49 	bl	8001de0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fd43 	bl	8001de0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fd3e 	bl	8001de0 <W25qxx_Spi>
	W25qxx_Spi(0);
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff fd3b 	bl	8001de0 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	b29a      	uxth	r2, r3
 800236e:	2364      	movs	r3, #100	; 0x64
 8002370:	68f9      	ldr	r1, [r7, #12]
 8002372:	480c      	ldr	r0, [pc, #48]	; (80023a4 <W25qxx_ReadPage+0xfc>)
 8002374:	f003 f864 	bl	8005440 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002378:	2201      	movs	r2, #1
 800237a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800237e:	4808      	ldr	r0, [pc, #32]	; (80023a0 <W25qxx_ReadPage+0xf8>)
 8002380:	f000 fb7c 	bl	8002a7c <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002384:	2001      	movs	r0, #1
 8002386:	f000 f8ab 	bl	80024e0 <HAL_Delay>
	w25qxx.Lock = 0;
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <W25qxx_ReadPage+0xf4>)
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000b7c 	.word	0x20000b7c
 80023a0:	40020000 	.word	0x40020000
 80023a4:	20000ae4 	.word	0x20000ae4

080023a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023ae:	e003      	b.n	80023b8 <LoopCopyDataInit>

080023b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023b6:	3104      	adds	r1, #4

080023b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023b8:	480b      	ldr	r0, [pc, #44]	; (80023e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023c0:	d3f6      	bcc.n	80023b0 <CopyDataInit>
  ldr  r2, =_sbss
 80023c2:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023c4:	e002      	b.n	80023cc <LoopFillZerobss>

080023c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023c8:	f842 3b04 	str.w	r3, [r2], #4

080023cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023d0:	d3f9      	bcc.n	80023c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023d2:	f7ff fc4d 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023d6:	f007 fd7b 	bl	8009ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023da:	f7fe fc1d 	bl	8000c18 <main>
  bx  lr    
 80023de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80023e4:	0800bb00 	.word	0x0800bb00
  ldr  r0, =_sdata
 80023e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023ec:	2000051c 	.word	0x2000051c
  ldr  r2, =_sbss
 80023f0:	2000051c 	.word	0x2000051c
  ldr  r3, = _ebss
 80023f4:	200014ec 	.word	0x200014ec

080023f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f8:	e7fe      	b.n	80023f8 <ADC_IRQHandler>
	...

080023fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0d      	ldr	r2, [pc, #52]	; (800243c <HAL_Init+0x40>)
 8002406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_Init+0x40>)
 8002412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a07      	ldr	r2, [pc, #28]	; (800243c <HAL_Init+0x40>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002424:	2003      	movs	r0, #3
 8002426:	f000 f94d 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800242a:	2000      	movs	r0, #0
 800242c:	f000 f808 	bl	8002440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002430:	f7ff fb68 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_InitTick+0x54>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_InitTick+0x58>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002456:	fbb3 f3f1 	udiv	r3, r3, r1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f965 	bl	800272e <HAL_SYSTICK_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00e      	b.n	800248c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d80a      	bhi.n	800248a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002474:	2200      	movs	r2, #0
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f000 f92d 	bl	80026da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002480:	4a06      	ldr	r2, [pc, #24]	; (800249c <HAL_InitTick+0x5c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	200000a0 	.word	0x200000a0
 8002498:	200000a8 	.word	0x200000a8
 800249c:	200000a4 	.word	0x200000a4

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	200000a8 	.word	0x200000a8
 80024c4:	20000ba4 	.word	0x20000ba4

080024c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000ba4 	.word	0x20000ba4

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_Delay+0x40>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200000a8 	.word	0x200000a8

08002524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800254c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <__NVIC_GetPriorityGrouping+0x18>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 0307 	and.w	r3, r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	2b00      	cmp	r3, #0
 8002598:	db0b      	blt.n	80025b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	4907      	ldr	r1, [pc, #28]	; (80025c0 <__NVIC_EnableIRQ+0x38>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2001      	movs	r0, #1
 80025aa:	fa00 f202 	lsl.w	r2, r0, r2
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db0a      	blt.n	80025ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	490c      	ldr	r1, [pc, #48]	; (8002610 <__NVIC_SetPriority+0x4c>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	0112      	lsls	r2, r2, #4
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	440b      	add	r3, r1
 80025e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ec:	e00a      	b.n	8002604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4908      	ldr	r1, [pc, #32]	; (8002614 <__NVIC_SetPriority+0x50>)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	3b04      	subs	r3, #4
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	440b      	add	r3, r1
 8002602:	761a      	strb	r2, [r3, #24]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000e100 	.word	0xe000e100
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f1c3 0307 	rsb	r3, r3, #7
 8002632:	2b04      	cmp	r3, #4
 8002634:	bf28      	it	cs
 8002636:	2304      	movcs	r3, #4
 8002638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3304      	adds	r3, #4
 800263e:	2b06      	cmp	r3, #6
 8002640:	d902      	bls.n	8002648 <NVIC_EncodePriority+0x30>
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3b03      	subs	r3, #3
 8002646:	e000      	b.n	800264a <NVIC_EncodePriority+0x32>
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002660:	f04f 31ff 	mov.w	r1, #4294967295
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	43d9      	mvns	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	4313      	orrs	r3, r2
         );
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002690:	d301      	bcc.n	8002696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <SysTick_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269e:	210f      	movs	r1, #15
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f7ff ff8e 	bl	80025c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <SysTick_Config+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <SysTick_Config+0x40>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff29 	bl	8002524 <__NVIC_SetPriorityGrouping>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff3e 	bl	800256c <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff8e 	bl	8002618 <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5d 	bl	80025c4 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff31 	bl	8002588 <__NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa2 	bl	8002680 <SysTick_Config>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e159      	b.n	8002a18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	f040 8148 	bne.w	8002a12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d00b      	beq.n	80027a2 <HAL_GPIO_Init+0x5a>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d007      	beq.n	80027a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002796:	2b11      	cmp	r3, #17
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d130      	bne.n	8002804 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	2203      	movs	r2, #3
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d8:	2201      	movs	r2, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 0201 	and.w	r2, r3, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0xfc>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b12      	cmp	r3, #18
 8002842:	d123      	bne.n	800288c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80a2 	beq.w	8002a12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <HAL_GPIO_Init+0x2e4>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	4a55      	ldr	r2, [pc, #340]	; (8002a2c <HAL_GPIO_Init+0x2e4>)
 80028d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028dc:	6453      	str	r3, [r2, #68]	; 0x44
 80028de:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_GPIO_Init+0x2e4>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ea:	4a51      	ldr	r2, [pc, #324]	; (8002a30 <HAL_GPIO_Init+0x2e8>)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	3302      	adds	r3, #2
 80028f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	220f      	movs	r2, #15
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a48      	ldr	r2, [pc, #288]	; (8002a34 <HAL_GPIO_Init+0x2ec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d019      	beq.n	800294a <HAL_GPIO_Init+0x202>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a47      	ldr	r2, [pc, #284]	; (8002a38 <HAL_GPIO_Init+0x2f0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0x1fe>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a46      	ldr	r2, [pc, #280]	; (8002a3c <HAL_GPIO_Init+0x2f4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0x1fa>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a45      	ldr	r2, [pc, #276]	; (8002a40 <HAL_GPIO_Init+0x2f8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x1f6>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a44      	ldr	r2, [pc, #272]	; (8002a44 <HAL_GPIO_Init+0x2fc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_GPIO_Init+0x1f2>
 8002936:	2304      	movs	r3, #4
 8002938:	e008      	b.n	800294c <HAL_GPIO_Init+0x204>
 800293a:	2307      	movs	r3, #7
 800293c:	e006      	b.n	800294c <HAL_GPIO_Init+0x204>
 800293e:	2303      	movs	r3, #3
 8002940:	e004      	b.n	800294c <HAL_GPIO_Init+0x204>
 8002942:	2302      	movs	r3, #2
 8002944:	e002      	b.n	800294c <HAL_GPIO_Init+0x204>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_GPIO_Init+0x204>
 800294a:	2300      	movs	r3, #0
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	f002 0203 	and.w	r2, r2, #3
 8002952:	0092      	lsls	r2, r2, #2
 8002954:	4093      	lsls	r3, r2
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800295c:	4934      	ldr	r1, [pc, #208]	; (8002a30 <HAL_GPIO_Init+0x2e8>)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	3302      	adds	r3, #2
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800296a:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_GPIO_Init+0x300>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800298e:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <HAL_GPIO_Init+0x300>)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002994:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <HAL_GPIO_Init+0x300>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029b8:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <HAL_GPIO_Init+0x300>)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <HAL_GPIO_Init+0x300>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e2:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <HAL_GPIO_Init+0x300>)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e8:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <HAL_GPIO_Init+0x300>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <HAL_GPIO_Init+0x300>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3301      	adds	r3, #1
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2b0f      	cmp	r3, #15
 8002a1c:	f67f aea2 	bls.w	8002764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a20:	bf00      	nop
 8002a22:	3724      	adds	r7, #36	; 0x24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020c00 	.word	0x40020c00
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40013c00 	.word	0x40013c00

08002a4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e001      	b.n	8002a6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe faaa 	bl	8001028 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40013c00 	.word	0x40013c00

08002ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e11f      	b.n	8002d32 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fd fe1a 	bl	8000740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2224      	movs	r2, #36	; 0x24
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b44:	f002 fad0 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 8002b48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4a7b      	ldr	r2, [pc, #492]	; (8002d3c <HAL_I2C_Init+0x25c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d807      	bhi.n	8002b64 <HAL_I2C_Init+0x84>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4a7a      	ldr	r2, [pc, #488]	; (8002d40 <HAL_I2C_Init+0x260>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	bf94      	ite	ls
 8002b5c:	2301      	movls	r3, #1
 8002b5e:	2300      	movhi	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e006      	b.n	8002b72 <HAL_I2C_Init+0x92>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a77      	ldr	r2, [pc, #476]	; (8002d44 <HAL_I2C_Init+0x264>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	bf94      	ite	ls
 8002b6c:	2301      	movls	r3, #1
 8002b6e:	2300      	movhi	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0db      	b.n	8002d32 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4a72      	ldr	r2, [pc, #456]	; (8002d48 <HAL_I2C_Init+0x268>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0c9b      	lsrs	r3, r3, #18
 8002b84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a64      	ldr	r2, [pc, #400]	; (8002d3c <HAL_I2C_Init+0x25c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d802      	bhi.n	8002bb4 <HAL_I2C_Init+0xd4>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	e009      	b.n	8002bc8 <HAL_I2C_Init+0xe8>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	4a63      	ldr	r2, [pc, #396]	; (8002d4c <HAL_I2C_Init+0x26c>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	099b      	lsrs	r3, r3, #6
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4956      	ldr	r1, [pc, #344]	; (8002d3c <HAL_I2C_Init+0x25c>)
 8002be4:	428b      	cmp	r3, r1
 8002be6:	d80d      	bhi.n	8002c04 <HAL_I2C_Init+0x124>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e59      	subs	r1, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	bf38      	it	cc
 8002c00:	2304      	movcc	r3, #4
 8002c02:	e04f      	b.n	8002ca4 <HAL_I2C_Init+0x1c4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d111      	bne.n	8002c30 <HAL_I2C_Init+0x150>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e58      	subs	r0, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	440b      	add	r3, r1
 8002c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e012      	b.n	8002c56 <HAL_I2C_Init+0x176>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e58      	subs	r0, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	0099      	lsls	r1, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_Init+0x17e>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e022      	b.n	8002ca4 <HAL_I2C_Init+0x1c4>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10e      	bne.n	8002c84 <HAL_I2C_Init+0x1a4>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1e58      	subs	r0, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6859      	ldr	r1, [r3, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	440b      	add	r3, r1
 8002c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c82:	e00f      	b.n	8002ca4 <HAL_I2C_Init+0x1c4>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1e58      	subs	r0, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	0099      	lsls	r1, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	6809      	ldr	r1, [r1, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6911      	ldr	r1, [r2, #16]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68d2      	ldr	r2, [r2, #12]
 8002cde:	4311      	orrs	r1, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	000186a0 	.word	0x000186a0
 8002d40:	001e847f 	.word	0x001e847f
 8002d44:	003d08ff 	.word	0x003d08ff
 8002d48:	431bde83 	.word	0x431bde83
 8002d4c:	10624dd3 	.word	0x10624dd3

08002d50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	817b      	strh	r3, [r7, #10]
 8002d60:	4613      	mov	r3, r2
 8002d62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7ff fbb0 	bl	80024c8 <HAL_GetTick>
 8002d68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	f040 80e0 	bne.w	8002f38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	2319      	movs	r3, #25
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4970      	ldr	r1, [pc, #448]	; (8002f44 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fa92 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e0d3      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_I2C_Master_Transmit+0x50>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e0cc      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d007      	beq.n	8002dc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2221      	movs	r2, #33	; 0x21
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2210      	movs	r2, #16
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	893a      	ldrh	r2, [r7, #8]
 8002df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a50      	ldr	r2, [pc, #320]	; (8002f48 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e08:	8979      	ldrh	r1, [r7, #10]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f9ca 	bl	80031a8 <I2C_MasterRequestWrite>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e08d      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e34:	e066      	b.n	8002f04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	6a39      	ldr	r1, [r7, #32]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fb0c 	bl	8003458 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d107      	bne.n	8002e5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e06b      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d11b      	bne.n	8002ed8 <HAL_I2C_Master_Transmit+0x188>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d017      	beq.n	8002ed8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	6a39      	ldr	r1, [r7, #32]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fafc 	bl	80034da <I2C_WaitOnBTFFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00d      	beq.n	8002f04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d107      	bne.n	8002f00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e01a      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d194      	bne.n	8002e36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f38:	2302      	movs	r3, #2
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	00100002 	.word	0x00100002
 8002f48:	ffff0000 	.word	0xffff0000

08002f4c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff fab4 	bl	80024c8 <HAL_GetTick>
 8002f60:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002f62:	2301      	movs	r3, #1
 8002f64:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	f040 8111 	bne.w	8003196 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2319      	movs	r3, #25
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4988      	ldr	r1, [pc, #544]	; (80031a0 <HAL_I2C_IsDeviceReady+0x254>)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f994 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e104      	b.n	8003198 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_I2C_IsDeviceReady+0x50>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e0fd      	b.n	8003198 <HAL_I2C_IsDeviceReady+0x24c>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d007      	beq.n	8002fc2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2224      	movs	r2, #36	; 0x24
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a70      	ldr	r2, [pc, #448]	; (80031a4 <HAL_I2C_IsDeviceReady+0x258>)
 8002fe4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f952 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301c:	d103      	bne.n	8003026 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0b6      	b.n	8003198 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800302a:	897b      	ldrh	r3, [r7, #10]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003038:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800303a:	f7ff fa45 	bl	80024c8 <HAL_GetTick>
 800303e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003064:	bf0c      	ite	eq
 8003066:	2301      	moveq	r3, #1
 8003068:	2300      	movne	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800306e:	e025      	b.n	80030bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003070:	f7ff fa2a 	bl	80024c8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d302      	bcc.n	8003086 <HAL_I2C_IsDeviceReady+0x13a>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	22a0      	movs	r2, #160	; 0xa0
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b02      	cmp	r3, #2
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2ba0      	cmp	r3, #160	; 0xa0
 80030c6:	d005      	beq.n	80030d4 <HAL_I2C_IsDeviceReady+0x188>
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_I2C_IsDeviceReady+0x188>
 80030ce:	7dbb      	ldrb	r3, [r7, #22]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0cd      	beq.n	8003070 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d129      	bne.n	800313e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2319      	movs	r3, #25
 8003116:	2201      	movs	r2, #1
 8003118:	4921      	ldr	r1, [pc, #132]	; (80031a0 <HAL_I2C_IsDeviceReady+0x254>)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f8c6 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e036      	b.n	8003198 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	e02c      	b.n	8003198 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003156:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2319      	movs	r3, #25
 800315e:	2201      	movs	r2, #1
 8003160:	490f      	ldr	r1, [pc, #60]	; (80031a0 <HAL_I2C_IsDeviceReady+0x254>)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f8a2 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e012      	b.n	8003198 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	3301      	adds	r3, #1
 8003176:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	f4ff af32 	bcc.w	8002fe6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003196:	2302      	movs	r3, #2
  }
}
 8003198:	4618      	mov	r0, r3
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	00100002 	.word	0x00100002
 80031a4:	ffff0000 	.word	0xffff0000

080031a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	460b      	mov	r3, r1
 80031b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d006      	beq.n	80031d2 <I2C_MasterRequestWrite+0x2a>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d003      	beq.n	80031d2 <I2C_MasterRequestWrite+0x2a>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031d0:	d108      	bne.n	80031e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	e00b      	b.n	80031fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	2b12      	cmp	r3, #18
 80031ea:	d107      	bne.n	80031fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f84f 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00d      	beq.n	8003230 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003222:	d103      	bne.n	800322c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e035      	b.n	800329c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003238:	d108      	bne.n	800324c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800323a:	897b      	ldrh	r3, [r7, #10]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003248:	611a      	str	r2, [r3, #16]
 800324a:	e01b      	b.n	8003284 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800324c:	897b      	ldrh	r3, [r7, #10]
 800324e:	11db      	asrs	r3, r3, #7
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 0306 	and.w	r3, r3, #6
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f063 030f 	orn	r3, r3, #15
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	490e      	ldr	r1, [pc, #56]	; (80032a4 <I2C_MasterRequestWrite+0xfc>)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f875 	bl	800335a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e010      	b.n	800329c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800327a:	897b      	ldrh	r3, [r7, #10]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4907      	ldr	r1, [pc, #28]	; (80032a8 <I2C_MasterRequestWrite+0x100>)
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f865 	bl	800335a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	00010008 	.word	0x00010008
 80032a8:	00010002 	.word	0x00010002

080032ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032bc:	e025      	b.n	800330a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d021      	beq.n	800330a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7ff f8ff 	bl	80024c8 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d116      	bne.n	800330a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e023      	b.n	8003352 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d10d      	bne.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4013      	ands	r3, r2
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	e00c      	b.n	800334a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	429a      	cmp	r2, r3
 800334e:	d0b6      	beq.n	80032be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003368:	e051      	b.n	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003378:	d123      	bne.n	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003388:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003392:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f043 0204 	orr.w	r2, r3, #4
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e046      	b.n	8003450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d021      	beq.n	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7ff f87d 	bl	80024c8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d116      	bne.n	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f043 0220 	orr.w	r2, r3, #32
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e020      	b.n	8003450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d10c      	bne.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4013      	ands	r3, r2
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	bf14      	ite	ne
 800342a:	2301      	movne	r3, #1
 800342c:	2300      	moveq	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	e00b      	b.n	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	43da      	mvns	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d18d      	bne.n	800336a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003464:	e02d      	b.n	80034c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f878 	bl	800355c <I2C_IsAcknowledgeFailed>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e02d      	b.n	80034d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d021      	beq.n	80034c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7ff f823 	bl	80024c8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d116      	bne.n	80034c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e007      	b.n	80034d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b80      	cmp	r3, #128	; 0x80
 80034ce:	d1ca      	bne.n	8003466 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034e6:	e02d      	b.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f837 	bl	800355c <I2C_IsAcknowledgeFailed>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e02d      	b.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d021      	beq.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003500:	f7fe ffe2 	bl	80024c8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	429a      	cmp	r2, r3
 800350e:	d302      	bcc.n	8003516 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e007      	b.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b04      	cmp	r3, #4
 8003550:	d1ca      	bne.n	80034e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003572:	d11b      	bne.n	80035ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800357c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f043 0204 	orr.w	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035bc:	b08f      	sub	sp, #60	; 0x3c
 80035be:	af0a      	add	r7, sp, #40	; 0x28
 80035c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e10f      	b.n	80037ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f006 f97a 	bl	80098e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2203      	movs	r2, #3
 80035f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f002 ff2b 	bl	8006466 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	687e      	ldr	r6, [r7, #4]
 8003618:	466d      	mov	r5, sp
 800361a:	f106 0410 	add.w	r4, r6, #16
 800361e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003626:	e894 0003 	ldmia.w	r4, {r0, r1}
 800362a:	e885 0003 	stmia.w	r5, {r0, r1}
 800362e:	1d33      	adds	r3, r6, #4
 8003630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003632:	6838      	ldr	r0, [r7, #0]
 8003634:	f002 fe02 	bl	800623c <USB_CoreInit>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2202      	movs	r2, #2
 8003642:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0d0      	b.n	80037ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f002 ff19 	bl	8006488 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
 800365a:	e04a      	b.n	80036f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800365c:	7bfa      	ldrb	r2, [r7, #15]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	333d      	adds	r3, #61	; 0x3d
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	333c      	adds	r3, #60	; 0x3c
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	b298      	uxth	r0, r3
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	3342      	adds	r3, #66	; 0x42
 8003698:	4602      	mov	r2, r0
 800369a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	333f      	adds	r3, #63	; 0x3f
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	3344      	adds	r3, #68	; 0x44
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3348      	adds	r3, #72	; 0x48
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	3350      	adds	r3, #80	; 0x50
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	3301      	adds	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d3af      	bcc.n	800365c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e044      	b.n	800378c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	3301      	adds	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	d3b5      	bcc.n	8003702 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	687e      	ldr	r6, [r7, #4]
 800379e:	466d      	mov	r5, sp
 80037a0:	f106 0410 	add.w	r4, r6, #16
 80037a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80037b4:	1d33      	adds	r3, r6, #4
 80037b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b8:	6838      	ldr	r0, [r7, #0]
 80037ba:	f002 fe8f 	bl	80064dc <USB_DevInit>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e00d      	b.n	80037ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 fed7 	bl	8007598 <USB_DevDisconnect>

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_PCD_Start+0x1c>
 800380c:	2302      	movs	r3, #2
 800380e:	e020      	b.n	8003852 <HAL_PCD_Start+0x5e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	2b01      	cmp	r3, #1
 800381e:	d109      	bne.n	8003834 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003824:	2b01      	cmp	r3, #1
 8003826:	d005      	beq.n	8003834 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f002 fe03 	bl	8006444 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f003 fe87 	bl	8007556 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800385a:	b590      	push	{r4, r7, lr}
 800385c:	b08d      	sub	sp, #52	; 0x34
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f003 ff45 	bl	8007700 <USB_GetMode>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	f040 839d 	bne.w	8003fb8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f003 fea9 	bl	80075da <USB_ReadInterrupts>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8393 	beq.w	8003fb6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f003 fea0 	bl	80075da <USB_ReadInterrupts>
 800389a:	4603      	mov	r3, r0
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d107      	bne.n	80038b4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f002 0202 	and.w	r2, r2, #2
 80038b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f003 fe8e 	bl	80075da <USB_ReadInterrupts>
 80038be:	4603      	mov	r3, r0
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d161      	bne.n	800398c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0210 	bic.w	r2, r2, #16
 80038d6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 020f 	and.w	r2, r3, #15
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	3304      	adds	r3, #4
 80038f6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	0c5b      	lsrs	r3, r3, #17
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	2b02      	cmp	r3, #2
 8003902:	d124      	bne.n	800394e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800390a:	4013      	ands	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d035      	beq.n	800397c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800391a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800391e:	b29b      	uxth	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	6a38      	ldr	r0, [r7, #32]
 8003924:	f003 fcf4 	bl	8007310 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003934:	441a      	add	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003946:	441a      	add	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	619a      	str	r2, [r3, #24]
 800394c:	e016      	b.n	800397c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	0c5b      	lsrs	r3, r3, #17
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	2b06      	cmp	r3, #6
 8003958:	d110      	bne.n	800397c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003960:	2208      	movs	r2, #8
 8003962:	4619      	mov	r1, r3
 8003964:	6a38      	ldr	r0, [r7, #32]
 8003966:	f003 fcd3 	bl	8007310 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003976:	441a      	add	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0210 	orr.w	r2, r2, #16
 800398a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f003 fe22 	bl	80075da <USB_ReadInterrupts>
 8003996:	4603      	mov	r3, r0
 8003998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039a0:	d16e      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f003 fe28 	bl	8007600 <USB_ReadDevAllOutEpInterrupt>
 80039b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80039b2:	e062      	b.n	8003a7a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d057      	beq.n	8003a6e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f003 fe4d 	bl	8007668 <USB_ReadDevOutEPInterrupt>
 80039ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00c      	beq.n	80039f4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	461a      	mov	r2, r3
 80039e8:	2301      	movs	r3, #1
 80039ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fdb0 	bl	8004554 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00c      	beq.n	8003a18 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 feaa 	bl	800476c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2310      	movs	r3, #16
 8003a32:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	461a      	mov	r2, r3
 8003a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a6c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	3301      	adds	r3, #1
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d199      	bne.n	80039b4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f003 fda8 	bl	80075da <USB_ReadInterrupts>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a94:	f040 80c0 	bne.w	8003c18 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f003 fdc9 	bl	8007634 <USB_ReadDevAllInEpInterrupt>
 8003aa2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003aa8:	e0b2      	b.n	8003c10 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80a7 	beq.w	8003c04 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f003 fdef 	bl	80076a4 <USB_ReadDevInEPInterrupt>
 8003ac6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d057      	beq.n	8003b82 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	2201      	movs	r2, #1
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69f9      	ldr	r1, [r7, #28]
 8003aee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003af2:	4013      	ands	r3, r2
 8003af4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b02:	461a      	mov	r2, r3
 8003b04:	2301      	movs	r3, #1
 8003b06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d132      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3348      	adds	r3, #72	; 0x48
 8003b20:	6819      	ldr	r1, [r3, #0]
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4403      	add	r3, r0
 8003b30:	3344      	adds	r3, #68	; 0x44
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4419      	add	r1, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4403      	add	r3, r0
 8003b44:	3348      	adds	r3, #72	; 0x48
 8003b46:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d113      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x31c>
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3350      	adds	r3, #80	; 0x50
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d108      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2101      	movs	r1, #1
 8003b72:	f003 fdf7 	bl	8007764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f005 ff30 	bl	80099e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2310      	movs	r3, #16
 8003bb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2340      	movs	r3, #64	; 0x40
 8003bd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bec:	461a      	mov	r2, r3
 8003bee:	2302      	movs	r3, #2
 8003bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fc1b 	bl	800443a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	3301      	adds	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f47f af49 	bne.w	8003aaa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f003 fcdc 	bl	80075da <USB_ReadInterrupts>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c2c:	d122      	bne.n	8003c74 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d108      	bne.n	8003c5e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c54:	2100      	movs	r1, #0
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fe26 	bl	80048a8 <HAL_PCDEx_LPM_Callback>
 8003c5c:	e002      	b.n	8003c64 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f005 ff2c 	bl	8009abc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f003 fcae 	bl	80075da <USB_ReadInterrupts>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c88:	d112      	bne.n	8003cb0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d102      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f005 fee8 	bl	8009a70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f003 fc90 	bl	80075da <USB_ReadInterrupts>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc4:	f040 80c7 	bne.w	8003e56 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2110      	movs	r1, #16
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f002 fd5e 	bl	80067a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce8:	2300      	movs	r3, #0
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cec:	e056      	b.n	8003d9c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d00:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d12:	0151      	lsls	r1, r2, #5
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	440a      	add	r2, r1
 8003d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d20:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d66:	0151      	lsls	r1, r2, #5
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	440a      	add	r2, r1
 8003d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d86:	0151      	lsls	r1, r2, #5
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	440a      	add	r2, r1
 8003d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	3301      	adds	r3, #1
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3a3      	bcc.n	8003cee <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003db8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd2:	f043 030b 	orr.w	r3, r3, #11
 8003dd6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de8:	f043 030b 	orr.w	r3, r3, #11
 8003dec:	6453      	str	r3, [r2, #68]	; 0x44
 8003dee:	e015      	b.n	8003e1c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e02:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e16:	f043 030b 	orr.w	r3, r3, #11
 8003e1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e40:	461a      	mov	r2, r3
 8003e42:	f003 fc8f 	bl	8007764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f003 fbbd 	bl	80075da <USB_ReadInterrupts>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6a:	d124      	bne.n	8003eb6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 fc53 	bl	800771c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f002 fcf3 	bl	8006866 <USB_GetDevSpeed>
 8003e80:	4603      	mov	r3, r0
 8003e82:	461a      	mov	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681c      	ldr	r4, [r3, #0]
 8003e8c:	f001 f920 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 8003e90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f002 fa30 	bl	8006300 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f005 fdc6 	bl	8009a32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f003 fb8d 	bl	80075da <USB_ReadInterrupts>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f005 fda3 	bl	8009a16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f002 0208 	and.w	r2, r2, #8
 8003ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f003 fb78 	bl	80075da <USB_ReadInterrupts>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef4:	d10f      	bne.n	8003f16 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f005 fdfb 	bl	8009afc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f003 fb5d 	bl	80075da <USB_ReadInterrupts>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f2a:	d10f      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f005 fdce 	bl	8009ad8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f003 fb42 	bl	80075da <USB_ReadInterrupts>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f60:	d10a      	bne.n	8003f78 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f005 fddc 	bl	8009b20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f003 fb2c 	bl	80075da <USB_ReadInterrupts>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d115      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f005 fdcc 	bl	8009b3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	e000      	b.n	8003fb8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003fb6:	bf00      	nop
    }
  }
}
 8003fb8:	3734      	adds	r7, #52	; 0x34
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd90      	pop	{r4, r7, pc}

08003fbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_PCD_SetAddress+0x1a>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e013      	b.n	8004000 <HAL_PCD_SetAddress+0x42>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f003 fa8a 	bl	800750a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	4608      	mov	r0, r1
 8004012:	4611      	mov	r1, r2
 8004014:	461a      	mov	r2, r3
 8004016:	4603      	mov	r3, r0
 8004018:	70fb      	strb	r3, [r7, #3]
 800401a:	460b      	mov	r3, r1
 800401c:	803b      	strh	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800402a:	2b00      	cmp	r3, #0
 800402c:	da0f      	bge.n	800404e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	f003 020f 	and.w	r2, r3, #15
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	3338      	adds	r3, #56	; 0x38
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4413      	add	r3, r2
 8004042:	3304      	adds	r3, #4
 8004044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	705a      	strb	r2, [r3, #1]
 800404c:	e00f      	b.n	800406e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	f003 020f 	and.w	r2, r3, #15
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	3304      	adds	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	b2da      	uxtb	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800407a:	883a      	ldrh	r2, [r7, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	78ba      	ldrb	r2, [r7, #2]
 8004084:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004098:	78bb      	ldrb	r3, [r7, #2]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d102      	bne.n	80040a4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_PCD_EP_Open+0xaa>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e00e      	b.n	80040d0 <HAL_PCD_EP_Open+0xc8>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f002 fbf5 	bl	80068b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80040ce:	7afb      	ldrb	r3, [r7, #11]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	da0f      	bge.n	800410c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	f003 020f 	and.w	r2, r3, #15
 80040f2:	4613      	mov	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	3338      	adds	r3, #56	; 0x38
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	4413      	add	r3, r2
 8004100:	3304      	adds	r3, #4
 8004102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	705a      	strb	r2, [r3, #1]
 800410a:	e00f      	b.n	800412c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	f003 020f 	and.w	r2, r3, #15
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4413      	add	r3, r2
 8004122:	3304      	adds	r3, #4
 8004124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	b2da      	uxtb	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_PCD_EP_Close+0x6e>
 8004142:	2302      	movs	r3, #2
 8004144:	e00e      	b.n	8004164 <HAL_PCD_EP_Close+0x8c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	4618      	mov	r0, r3
 8004156:	f002 fc33 	bl	80069c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	460b      	mov	r3, r1
 800417a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800417c:	7afb      	ldrb	r3, [r7, #11]
 800417e:	f003 020f 	and.w	r2, r3, #15
 8004182:	4613      	mov	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	3304      	adds	r3, #4
 8004194:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2200      	movs	r2, #0
 80041ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ae:	7afb      	ldrb	r3, [r7, #11]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d102      	bne.n	80041c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041c8:	7afb      	ldrb	r3, [r7, #11]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	6979      	ldr	r1, [r7, #20]
 80041e0:	f002 ff0e 	bl	8007000 <USB_EP0StartXfer>
 80041e4:	e008      	b.n	80041f8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	6979      	ldr	r1, [r7, #20]
 80041f4:	f002 fcc0 	bl	8006b78 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	f003 020f 	and.w	r2, r3, #15
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004224:	681b      	ldr	r3, [r3, #0]
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b086      	sub	sp, #24
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	460b      	mov	r3, r1
 8004240:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004242:	7afb      	ldrb	r3, [r7, #11]
 8004244:	f003 020f 	and.w	r2, r3, #15
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	3338      	adds	r3, #56	; 0x38
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	3304      	adds	r3, #4
 8004258:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2201      	movs	r2, #1
 8004270:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004272:	7afb      	ldrb	r3, [r7, #11]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	b2da      	uxtb	r2, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d102      	bne.n	800428c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800428c:	7afb      	ldrb	r3, [r7, #11]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	6979      	ldr	r1, [r7, #20]
 80042a4:	f002 feac 	bl	8007000 <USB_EP0StartXfer>
 80042a8:	e008      	b.n	80042bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	6979      	ldr	r1, [r7, #20]
 80042b8:	f002 fc5e 	bl	8006b78 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	f003 020f 	and.w	r2, r3, #15
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d901      	bls.n	80042e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e050      	b.n	8004386 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	da0f      	bge.n	800430c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	f003 020f 	and.w	r2, r3, #15
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3338      	adds	r3, #56	; 0x38
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	3304      	adds	r3, #4
 8004302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	705a      	strb	r2, [r3, #1]
 800430a:	e00d      	b.n	8004328 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	3304      	adds	r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_PCD_EP_SetStall+0x82>
 8004344:	2302      	movs	r3, #2
 8004346:	e01e      	b.n	8004386 <HAL_PCD_EP_SetStall+0xc0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	4618      	mov	r0, r3
 8004358:	f003 f803 	bl	8007362 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	b2d9      	uxtb	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004376:	461a      	mov	r2, r3
 8004378:	f003 f9f4 	bl	8007764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	f003 020f 	and.w	r2, r3, #15
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d901      	bls.n	80043ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e042      	b.n	8004432 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	da0f      	bge.n	80043d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	f003 020f 	and.w	r2, r3, #15
 80043ba:	4613      	mov	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	3338      	adds	r3, #56	; 0x38
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	4413      	add	r3, r2
 80043c8:	3304      	adds	r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	705a      	strb	r2, [r3, #1]
 80043d2:	e00f      	b.n	80043f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	f003 020f 	and.w	r2, r3, #15
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	3304      	adds	r3, #4
 80043ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_PCD_EP_ClrStall+0x86>
 8004410:	2302      	movs	r3, #2
 8004412:	e00e      	b.n	8004432 <HAL_PCD_EP_ClrStall+0xa4>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68f9      	ldr	r1, [r7, #12]
 8004422:	4618      	mov	r0, r3
 8004424:	f003 f80b 	bl	800743e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b08a      	sub	sp, #40	; 0x28
 800443e:	af02      	add	r7, sp, #8
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	3338      	adds	r3, #56	; 0x38
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	3304      	adds	r3, #4
 8004460:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	429a      	cmp	r2, r3
 800446c:	d901      	bls.n	8004472 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e06c      	b.n	800454c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	429a      	cmp	r2, r3
 8004486:	d902      	bls.n	800448e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3303      	adds	r3, #3
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004496:	e02b      	b.n	80044f0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d902      	bls.n	80044b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3303      	adds	r3, #3
 80044b8:	089b      	lsrs	r3, r3, #2
 80044ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68d9      	ldr	r1, [r3, #12]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	4603      	mov	r3, r0
 80044d2:	6978      	ldr	r0, [r7, #20]
 80044d4:	f002 fee7 	bl	80072a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	441a      	add	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	429a      	cmp	r2, r3
 8004504:	d809      	bhi.n	800451a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800450e:	429a      	cmp	r2, r3
 8004510:	d203      	bcs.n	800451a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1be      	bne.n	8004498 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	429a      	cmp	r2, r3
 8004524:	d811      	bhi.n	800454a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	2201      	movs	r2, #1
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	43db      	mvns	r3, r3
 8004540:	6939      	ldr	r1, [r7, #16]
 8004542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004546:	4013      	ands	r3, r2
 8004548:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	333c      	adds	r3, #60	; 0x3c
 800456c:	3304      	adds	r3, #4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b01      	cmp	r3, #1
 8004588:	f040 80a0 	bne.w	80046cc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d015      	beq.n	80045c2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a72      	ldr	r2, [pc, #456]	; (8004764 <PCD_EP_OutXfrComplete_int+0x210>)
 800459a:	4293      	cmp	r3, r2
 800459c:	f240 80dd 	bls.w	800475a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80d7 	beq.w	800475a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	461a      	mov	r2, r3
 80045ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045be:	6093      	str	r3, [r2, #8]
 80045c0:	e0cb      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	461a      	mov	r2, r3
 80045da:	2320      	movs	r3, #32
 80045dc:	6093      	str	r3, [r2, #8]
 80045de:	e0bc      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 80b7 	bne.w	800475a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a5d      	ldr	r2, [pc, #372]	; (8004764 <PCD_EP_OutXfrComplete_int+0x210>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d90f      	bls.n	8004614 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460a:	461a      	mov	r2, r3
 800460c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004610:	6093      	str	r3, [r2, #8]
 8004612:	e0a2      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004626:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	0159      	lsls	r1, r3, #5
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	440b      	add	r3, r1
 8004630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800463a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4403      	add	r3, r0
 800464a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800464e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4403      	add	r3, r0
 8004672:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4419      	add	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	4613      	mov	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4403      	add	r3, r0
 8004688:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800468c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d114      	bne.n	80046be <PCD_EP_OutXfrComplete_int+0x16a>
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d108      	bne.n	80046be <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046b6:	461a      	mov	r2, r3
 80046b8:	2101      	movs	r1, #1
 80046ba:	f003 f853 	bl	8007764 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f005 f971 	bl	80099ac <HAL_PCD_DataOutStageCallback>
 80046ca:	e046      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a26      	ldr	r2, [pc, #152]	; (8004768 <PCD_EP_OutXfrComplete_int+0x214>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d124      	bne.n	800471e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ea:	461a      	mov	r2, r3
 80046ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f0:	6093      	str	r3, [r2, #8]
 80046f2:	e032      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470a:	461a      	mov	r2, r3
 800470c:	2320      	movs	r3, #32
 800470e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f005 f948 	bl	80099ac <HAL_PCD_DataOutStageCallback>
 800471c:	e01d      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d114      	bne.n	800474e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d108      	bne.n	800474e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004746:	461a      	mov	r2, r3
 8004748:	2100      	movs	r1, #0
 800474a:	f003 f80b 	bl	8007764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f005 f929 	bl	80099ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	4f54300a 	.word	0x4f54300a
 8004768:	4f54310a 	.word	0x4f54310a

0800476c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	333c      	adds	r3, #60	; 0x3c
 8004784:	3304      	adds	r3, #4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d90e      	bls.n	80047c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	461a      	mov	r2, r3
 80047ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f005 f8e1 	bl	8009988 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d90c      	bls.n	80047e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d108      	bne.n	80047e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047e0:	461a      	mov	r2, r3
 80047e2:	2101      	movs	r1, #1
 80047e4:	f002 ffbe 	bl	8007764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	4f54300a 	.word	0x4f54300a

080047f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
 8004804:	4613      	mov	r3, r2
 8004806:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d107      	bne.n	8004826 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004816:	883b      	ldrh	r3, [r7, #0]
 8004818:	0419      	lsls	r1, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	430a      	orrs	r2, r1
 8004822:	629a      	str	r2, [r3, #40]	; 0x28
 8004824:	e028      	b.n	8004878 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4413      	add	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004834:	2300      	movs	r3, #0
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	e00d      	b.n	8004856 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	3340      	adds	r3, #64	; 0x40
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	4413      	add	r3, r2
 800484e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	3301      	adds	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
 8004856:	7bfa      	ldrb	r2, [r7, #15]
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	3b01      	subs	r3, #1
 800485c:	429a      	cmp	r2, r3
 800485e:	d3ec      	bcc.n	800483a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004860:	883b      	ldrh	r3, [r7, #0]
 8004862:	0418      	lsls	r0, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6819      	ldr	r1, [r3, #0]
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	3b01      	subs	r3, #1
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	4302      	orrs	r2, r0
 8004870:	3340      	adds	r3, #64	; 0x40
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	460b      	mov	r3, r1
 8004890:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e25b      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d075      	beq.n	80049ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048de:	4ba3      	ldr	r3, [pc, #652]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d00c      	beq.n	8004904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ea:	4ba0      	ldr	r3, [pc, #640]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d112      	bne.n	800491c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f6:	4b9d      	ldr	r3, [pc, #628]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004902:	d10b      	bne.n	800491c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004904:	4b99      	ldr	r3, [pc, #612]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05b      	beq.n	80049c8 <HAL_RCC_OscConfig+0x108>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d157      	bne.n	80049c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e236      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d106      	bne.n	8004934 <HAL_RCC_OscConfig+0x74>
 8004926:	4b91      	ldr	r3, [pc, #580]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a90      	ldr	r2, [pc, #576]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e01d      	b.n	8004970 <HAL_RCC_OscConfig+0xb0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0x98>
 800493e:	4b8b      	ldr	r3, [pc, #556]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a8a      	ldr	r2, [pc, #552]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b88      	ldr	r3, [pc, #544]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a87      	ldr	r2, [pc, #540]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e00b      	b.n	8004970 <HAL_RCC_OscConfig+0xb0>
 8004958:	4b84      	ldr	r3, [pc, #528]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a83      	ldr	r2, [pc, #524]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800495e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b81      	ldr	r3, [pc, #516]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a80      	ldr	r2, [pc, #512]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800496a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fd fda6 	bl	80024c8 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004980:	f7fd fda2 	bl	80024c8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e1fb      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b76      	ldr	r3, [pc, #472]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0xc0>
 800499e:	e014      	b.n	80049ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fd fd92 	bl	80024c8 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fd fd8e 	bl	80024c8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e1e7      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ba:	4b6c      	ldr	r3, [pc, #432]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0xe8>
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d063      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049d6:	4b65      	ldr	r3, [pc, #404]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b62      	ldr	r3, [pc, #392]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d11c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	4b5f      	ldr	r3, [pc, #380]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fa:	4b5c      	ldr	r3, [pc, #368]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_RCC_OscConfig+0x152>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e1bb      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b56      	ldr	r3, [pc, #344]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4952      	ldr	r1, [pc, #328]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	e03a      	b.n	8004a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a30:	4b4f      	ldr	r3, [pc, #316]	; (8004b70 <HAL_RCC_OscConfig+0x2b0>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7fd fd47 	bl	80024c8 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a3e:	f7fd fd43 	bl	80024c8 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e19c      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a50:	4b46      	ldr	r3, [pc, #280]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5c:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4940      	ldr	r1, [pc, #256]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]
 8004a70:	e015      	b.n	8004a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a72:	4b3f      	ldr	r3, [pc, #252]	; (8004b70 <HAL_RCC_OscConfig+0x2b0>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fd fd26 	bl	80024c8 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fd fd22 	bl	80024c8 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e17b      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d030      	beq.n	8004b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab2:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <HAL_RCC_OscConfig+0x2b4>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7fd fd06 	bl	80024c8 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac0:	f7fd fd02 	bl	80024c8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e15b      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad2:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x200>
 8004ade:	e015      	b.n	8004b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae0:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <HAL_RCC_OscConfig+0x2b4>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae6:	f7fd fcef 	bl	80024c8 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aee:	f7fd fceb 	bl	80024c8 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e144      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f0      	bne.n	8004aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80a0 	beq.w	8004c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_OscConfig+0x2b8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d121      	bne.n	8004b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b56:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <HAL_RCC_OscConfig+0x2b8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a07      	ldr	r2, [pc, #28]	; (8004b78 <HAL_RCC_OscConfig+0x2b8>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b62:	f7fd fcb1 	bl	80024c8 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	e011      	b.n	8004b8e <HAL_RCC_OscConfig+0x2ce>
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	42470000 	.word	0x42470000
 8004b74:	42470e80 	.word	0x42470e80
 8004b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7c:	f7fd fca4 	bl	80024c8 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e0fd      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8e:	4b81      	ldr	r3, [pc, #516]	; (8004d94 <HAL_RCC_OscConfig+0x4d4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d106      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x2f0>
 8004ba2:	4b7d      	ldr	r3, [pc, #500]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	4a7c      	ldr	r2, [pc, #496]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70
 8004bae:	e01c      	b.n	8004bea <HAL_RCC_OscConfig+0x32a>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x312>
 8004bb8:	4b77      	ldr	r3, [pc, #476]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	4a76      	ldr	r2, [pc, #472]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bbe:	f043 0304 	orr.w	r3, r3, #4
 8004bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc4:	4b74      	ldr	r3, [pc, #464]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	4a73      	ldr	r2, [pc, #460]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd0:	e00b      	b.n	8004bea <HAL_RCC_OscConfig+0x32a>
 8004bd2:	4b71      	ldr	r3, [pc, #452]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	4a70      	ldr	r2, [pc, #448]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bde:	4b6e      	ldr	r3, [pc, #440]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	4a6d      	ldr	r2, [pc, #436]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d015      	beq.n	8004c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fd fc69 	bl	80024c8 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fd fc65 	bl	80024c8 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0bc      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c10:	4b61      	ldr	r3, [pc, #388]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0ee      	beq.n	8004bfa <HAL_RCC_OscConfig+0x33a>
 8004c1c:	e014      	b.n	8004c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1e:	f7fd fc53 	bl	80024c8 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c26:	f7fd fc4f 	bl	80024c8 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0a6      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3c:	4b56      	ldr	r3, [pc, #344]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1ee      	bne.n	8004c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4e:	4b52      	ldr	r3, [pc, #328]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	4a51      	ldr	r2, [pc, #324]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8092 	beq.w	8004d88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c64:	4b4c      	ldr	r3, [pc, #304]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d05c      	beq.n	8004d2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d141      	bne.n	8004cfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c78:	4b48      	ldr	r3, [pc, #288]	; (8004d9c <HAL_RCC_OscConfig+0x4dc>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7e:	f7fd fc23 	bl	80024c8 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c86:	f7fd fc1f 	bl	80024c8 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e078      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c98:	4b3f      	ldr	r3, [pc, #252]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	019b      	lsls	r3, r3, #6
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	061b      	lsls	r3, r3, #24
 8004cc8:	4933      	ldr	r1, [pc, #204]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cce:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_RCC_OscConfig+0x4dc>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fd fbf8 	bl	80024c8 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fd fbf4 	bl	80024c8 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e04d      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x41c>
 8004cfa:	e045      	b.n	8004d88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfc:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <HAL_RCC_OscConfig+0x4dc>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d02:	f7fd fbe1 	bl	80024c8 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d0a:	f7fd fbdd 	bl	80024c8 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e036      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x44a>
 8004d28:	e02e      	b.n	8004d88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e029      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d36:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d11c      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d115      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d5e:	4013      	ands	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d10d      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d106      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40007000 	.word	0x40007000
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	42470060 	.word	0x42470060

08004da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0cc      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db4:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d90c      	bls.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dca:	4b63      	ldr	r3, [pc, #396]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0b8      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df4:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a58      	ldr	r2, [pc, #352]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e0c:	4b53      	ldr	r3, [pc, #332]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a52      	ldr	r2, [pc, #328]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e18:	4b50      	ldr	r3, [pc, #320]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	494d      	ldr	r1, [pc, #308]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d044      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	4b47      	ldr	r3, [pc, #284]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d119      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e07f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d003      	beq.n	8004e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5e:	4b3f      	ldr	r3, [pc, #252]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e06f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6e:	4b3b      	ldr	r3, [pc, #236]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e067      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e7e:	4b37      	ldr	r3, [pc, #220]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f023 0203 	bic.w	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4934      	ldr	r1, [pc, #208]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e90:	f7fd fb1a 	bl	80024c8 <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	e00a      	b.n	8004eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e98:	f7fd fb16 	bl	80024c8 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e04f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	4b2b      	ldr	r3, [pc, #172]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 020c 	and.w	r2, r3, #12
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1eb      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d20c      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ece:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e032      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef4:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4916      	ldr	r1, [pc, #88]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f12:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	490e      	ldr	r1, [pc, #56]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f26:	f000 f821 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	5cd3      	ldrb	r3, [r2, r3]
 8004f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8004f3e:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f42:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd fa7a 	bl	8002440 <HAL_InitTick>

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40023c00 	.word	0x40023c00
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	0800b94c 	.word	0x0800b94c
 8004f64:	200000a0 	.word	0x200000a0
 8004f68:	200000a4 	.word	0x200000a4

08004f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f82:	4b50      	ldr	r3, [pc, #320]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d007      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x32>
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d008      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x38>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f040 808d 	bne.w	80050b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f98:	4b4b      	ldr	r3, [pc, #300]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004f9a:	60bb      	str	r3, [r7, #8]
       break;
 8004f9c:	e08c      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f9e:	4b4b      	ldr	r3, [pc, #300]	; (80050cc <HAL_RCC_GetSysClockFreq+0x160>)
 8004fa0:	60bb      	str	r3, [r7, #8]
      break;
 8004fa2:	e089      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fa4:	4b47      	ldr	r3, [pc, #284]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fae:	4b45      	ldr	r3, [pc, #276]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d023      	beq.n	8005002 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fba:	4b42      	ldr	r3, [pc, #264]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	099b      	lsrs	r3, r3, #6
 8004fc0:	f04f 0400 	mov.w	r4, #0
 8004fc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	ea03 0501 	and.w	r5, r3, r1
 8004fd0:	ea04 0602 	and.w	r6, r4, r2
 8004fd4:	4a3d      	ldr	r2, [pc, #244]	; (80050cc <HAL_RCC_GetSysClockFreq+0x160>)
 8004fd6:	fb02 f106 	mul.w	r1, r2, r6
 8004fda:	2200      	movs	r2, #0
 8004fdc:	fb02 f205 	mul.w	r2, r2, r5
 8004fe0:	440a      	add	r2, r1
 8004fe2:	493a      	ldr	r1, [pc, #232]	; (80050cc <HAL_RCC_GetSysClockFreq+0x160>)
 8004fe4:	fba5 0101 	umull	r0, r1, r5, r1
 8004fe8:	1853      	adds	r3, r2, r1
 8004fea:	4619      	mov	r1, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f04f 0400 	mov.w	r4, #0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4623      	mov	r3, r4
 8004ff6:	f7fb f94b 	bl	8000290 <__aeabi_uldivmod>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e049      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005002:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	099b      	lsrs	r3, r3, #6
 8005008:	f04f 0400 	mov.w	r4, #0
 800500c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	ea03 0501 	and.w	r5, r3, r1
 8005018:	ea04 0602 	and.w	r6, r4, r2
 800501c:	4629      	mov	r1, r5
 800501e:	4632      	mov	r2, r6
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	f04f 0400 	mov.w	r4, #0
 8005028:	0154      	lsls	r4, r2, #5
 800502a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800502e:	014b      	lsls	r3, r1, #5
 8005030:	4619      	mov	r1, r3
 8005032:	4622      	mov	r2, r4
 8005034:	1b49      	subs	r1, r1, r5
 8005036:	eb62 0206 	sbc.w	r2, r2, r6
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	f04f 0400 	mov.w	r4, #0
 8005042:	0194      	lsls	r4, r2, #6
 8005044:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005048:	018b      	lsls	r3, r1, #6
 800504a:	1a5b      	subs	r3, r3, r1
 800504c:	eb64 0402 	sbc.w	r4, r4, r2
 8005050:	f04f 0100 	mov.w	r1, #0
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	00e2      	lsls	r2, r4, #3
 800505a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800505e:	00d9      	lsls	r1, r3, #3
 8005060:	460b      	mov	r3, r1
 8005062:	4614      	mov	r4, r2
 8005064:	195b      	adds	r3, r3, r5
 8005066:	eb44 0406 	adc.w	r4, r4, r6
 800506a:	f04f 0100 	mov.w	r1, #0
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	02a2      	lsls	r2, r4, #10
 8005074:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005078:	0299      	lsls	r1, r3, #10
 800507a:	460b      	mov	r3, r1
 800507c:	4614      	mov	r4, r2
 800507e:	4618      	mov	r0, r3
 8005080:	4621      	mov	r1, r4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f04f 0400 	mov.w	r4, #0
 8005088:	461a      	mov	r2, r3
 800508a:	4623      	mov	r3, r4
 800508c:	f7fb f900 	bl	8000290 <__aeabi_uldivmod>
 8005090:	4603      	mov	r3, r0
 8005092:	460c      	mov	r4, r1
 8005094:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	3301      	adds	r3, #1
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	60bb      	str	r3, [r7, #8]
      break;
 80050b0:	e002      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80050b4:	60bb      	str	r3, [r7, #8]
      break;
 80050b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050b8:	68bb      	ldr	r3, [r7, #8]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40023800 	.word	0x40023800
 80050c8:	00f42400 	.word	0x00f42400
 80050cc:	017d7840 	.word	0x017d7840

080050d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	200000a0 	.word	0x200000a0

080050e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050ec:	f7ff fff0 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 80050f0:	4601      	mov	r1, r0
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0a9b      	lsrs	r3, r3, #10
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4a03      	ldr	r2, [pc, #12]	; (800510c <HAL_RCC_GetPCLK1Freq+0x24>)
 80050fe:	5cd3      	ldrb	r3, [r2, r3]
 8005100:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	0800b95c 	.word	0x0800b95c

08005110 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e056      	b.n	80051d0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7fc f895 	bl	800126c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005158:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	ea42 0103 	orr.w	r1, r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	0c1b      	lsrs	r3, r3, #16
 80051a0:	f003 0104 	and.w	r1, r3, #4
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69da      	ldr	r2, [r3, #28]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_SPI_Transmit+0x22>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e11e      	b.n	8005438 <HAL_SPI_Transmit+0x260>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005202:	f7fd f961 	bl	80024c8 <HAL_GetTick>
 8005206:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d002      	beq.n	800521e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005218:	2302      	movs	r3, #2
 800521a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800521c:	e103      	b.n	8005426 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_SPI_Transmit+0x52>
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800522e:	e0fa      	b.n	8005426 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2203      	movs	r2, #3
 8005234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005276:	d107      	bne.n	8005288 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005286:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d007      	beq.n	80052a6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ae:	d14b      	bne.n	8005348 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_SPI_Transmit+0xe6>
 80052b8:	8afb      	ldrh	r3, [r7, #22]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d13e      	bne.n	800533c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	881a      	ldrh	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052e2:	e02b      	b.n	800533c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d112      	bne.n	8005318 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	881a      	ldrh	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	86da      	strh	r2, [r3, #54]	; 0x36
 8005316:	e011      	b.n	800533c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005318:	f7fd f8d6 	bl	80024c8 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d803      	bhi.n	8005330 <HAL_SPI_Transmit+0x158>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532e:	d102      	bne.n	8005336 <HAL_SPI_Transmit+0x15e>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	77fb      	strb	r3, [r7, #31]
          goto error;
 800533a:	e074      	b.n	8005426 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1ce      	bne.n	80052e4 <HAL_SPI_Transmit+0x10c>
 8005346:	e04c      	b.n	80053e2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_SPI_Transmit+0x17e>
 8005350:	8afb      	ldrh	r3, [r7, #22]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d140      	bne.n	80053d8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	330c      	adds	r3, #12
 8005360:	7812      	ldrb	r2, [r2, #0]
 8005362:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800537c:	e02c      	b.n	80053d8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b02      	cmp	r3, #2
 800538a:	d113      	bne.n	80053b4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	330c      	adds	r3, #12
 8005396:	7812      	ldrb	r2, [r2, #0]
 8005398:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80053b2:	e011      	b.n	80053d8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b4:	f7fd f888 	bl	80024c8 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d803      	bhi.n	80053cc <HAL_SPI_Transmit+0x1f4>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ca:	d102      	bne.n	80053d2 <HAL_SPI_Transmit+0x1fa>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053d6:	e026      	b.n	8005426 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1cd      	bne.n	800537e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fba4 	bl	8005b34 <SPI_EndRxTxTransaction>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005400:	2300      	movs	r3, #0
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	77fb      	strb	r3, [r7, #31]
 8005422:	e000      	b.n	8005426 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005424:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005436:	7ffb      	ldrb	r3, [r7, #31]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800545c:	d112      	bne.n	8005484 <HAL_SPI_Receive+0x44>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10e      	bne.n	8005484 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2204      	movs	r2, #4
 800546a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f8e9 	bl	8005652 <HAL_SPI_TransmitReceive>
 8005480:	4603      	mov	r3, r0
 8005482:	e0e2      	b.n	800564a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_SPI_Receive+0x52>
 800548e:	2302      	movs	r3, #2
 8005490:	e0db      	b.n	800564a <HAL_SPI_Receive+0x20a>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800549a:	f7fd f815 	bl	80024c8 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d002      	beq.n	80054b2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80054ac:	2302      	movs	r3, #2
 80054ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054b0:	e0c2      	b.n	8005638 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_SPI_Receive+0x7e>
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d102      	bne.n	80054c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054c2:	e0b9      	b.n	8005638 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2204      	movs	r2, #4
 80054c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	88fa      	ldrh	r2, [r7, #6]
 80054dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550a:	d107      	bne.n	800551c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800551a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b40      	cmp	r3, #64	; 0x40
 8005528:	d007      	beq.n	800553a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005538:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d162      	bne.n	8005608 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005542:	e02e      	b.n	80055a2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b01      	cmp	r3, #1
 8005550:	d115      	bne.n	800557e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f103 020c 	add.w	r2, r3, #12
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	7812      	ldrb	r2, [r2, #0]
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800557c:	e011      	b.n	80055a2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800557e:	f7fc ffa3 	bl	80024c8 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d803      	bhi.n	8005596 <HAL_SPI_Receive+0x156>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005594:	d102      	bne.n	800559c <HAL_SPI_Receive+0x15c>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055a0:	e04a      	b.n	8005638 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1cb      	bne.n	8005544 <HAL_SPI_Receive+0x104>
 80055ac:	e031      	b.n	8005612 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d113      	bne.n	80055e4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	b292      	uxth	r2, r2
 80055c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	1c9a      	adds	r2, r3, #2
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055e2:	e011      	b.n	8005608 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e4:	f7fc ff70 	bl	80024c8 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d803      	bhi.n	80055fc <HAL_SPI_Receive+0x1bc>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d102      	bne.n	8005602 <HAL_SPI_Receive+0x1c2>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005606:	e017      	b.n	8005638 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1cd      	bne.n	80055ae <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fa27 	bl	8005a6a <SPI_EndRxTransaction>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
 8005634:	e000      	b.n	8005638 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005636:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b08c      	sub	sp, #48	; 0x30
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	607a      	str	r2, [r7, #4]
 800565e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005660:	2301      	movs	r3, #1
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x26>
 8005674:	2302      	movs	r3, #2
 8005676:	e18a      	b.n	800598e <HAL_SPI_TransmitReceive+0x33c>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005680:	f7fc ff22 	bl	80024c8 <HAL_GetTick>
 8005684:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800568c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005696:	887b      	ldrh	r3, [r7, #2]
 8005698:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800569a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d00f      	beq.n	80056c2 <HAL_SPI_TransmitReceive+0x70>
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a8:	d107      	bne.n	80056ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <HAL_SPI_TransmitReceive+0x68>
 80056b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d003      	beq.n	80056c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
 80056bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056c0:	e15b      	b.n	800597a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_SPI_TransmitReceive+0x82>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_TransmitReceive+0x82>
 80056ce:	887b      	ldrh	r3, [r7, #2]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d103      	bne.n	80056dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056da:	e14e      	b.n	800597a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d003      	beq.n	80056f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2205      	movs	r2, #5
 80056ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	887a      	ldrh	r2, [r7, #2]
 8005700:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	887a      	ldrh	r2, [r7, #2]
 8005706:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	887a      	ldrh	r2, [r7, #2]
 8005712:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d007      	beq.n	8005744 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005742:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574c:	d178      	bne.n	8005840 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <HAL_SPI_TransmitReceive+0x10a>
 8005756:	8b7b      	ldrh	r3, [r7, #26]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d166      	bne.n	800582a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	881a      	ldrh	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	1c9a      	adds	r2, r3, #2
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005780:	e053      	b.n	800582a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b02      	cmp	r3, #2
 800578e:	d11b      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x176>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d016      	beq.n	80057c8 <HAL_SPI_TransmitReceive+0x176>
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d113      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	1c9a      	adds	r2, r3, #2
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d119      	bne.n	800580a <HAL_SPI_TransmitReceive+0x1b8>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d014      	beq.n	800580a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	b292      	uxth	r2, r2
 80057ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	1c9a      	adds	r2, r3, #2
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005806:	2301      	movs	r3, #1
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800580a:	f7fc fe5d 	bl	80024c8 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005816:	429a      	cmp	r2, r3
 8005818:	d807      	bhi.n	800582a <HAL_SPI_TransmitReceive+0x1d8>
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d003      	beq.n	800582a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005828:	e0a7      	b.n	800597a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1a6      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x130>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1a1      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x130>
 800583e:	e07c      	b.n	800593a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_SPI_TransmitReceive+0x1fc>
 8005848:	8b7b      	ldrh	r3, [r7, #26]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d16b      	bne.n	8005926 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	330c      	adds	r3, #12
 8005858:	7812      	ldrb	r2, [r2, #0]
 800585a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005874:	e057      	b.n	8005926 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d11c      	bne.n	80058be <HAL_SPI_TransmitReceive+0x26c>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d017      	beq.n	80058be <HAL_SPI_TransmitReceive+0x26c>
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d114      	bne.n	80058be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	7812      	ldrb	r2, [r2, #0]
 80058a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d119      	bne.n	8005900 <HAL_SPI_TransmitReceive+0x2ae>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d014      	beq.n	8005900 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058fc:	2301      	movs	r3, #1
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005900:	f7fc fde2 	bl	80024c8 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800590c:	429a      	cmp	r2, r3
 800590e:	d803      	bhi.n	8005918 <HAL_SPI_TransmitReceive+0x2c6>
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d102      	bne.n	800591e <HAL_SPI_TransmitReceive+0x2cc>
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005924:	e029      	b.n	800597a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1a2      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x224>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d19d      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800593a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800593c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 f8f8 	bl	8005b34 <SPI_EndRxTxTransaction>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d006      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005956:	e010      	b.n	800597a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10b      	bne.n	8005978 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	e000      	b.n	800597a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005978:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800598a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800598e:	4618      	mov	r0, r3
 8005990:	3730      	adds	r7, #48	; 0x30
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	4613      	mov	r3, r2
 80059a4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059a6:	e04c      	b.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ae:	d048      	beq.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80059b0:	f7fc fd8a 	bl	80024c8 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d902      	bls.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d13d      	bne.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059de:	d111      	bne.n	8005a04 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e8:	d004      	beq.n	80059f4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f2:	d107      	bne.n	8005a04 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a0c:	d10f      	bne.n	8005a2e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e00f      	b.n	8005a62 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	bf0c      	ite	eq
 8005a52:	2301      	moveq	r3, #1
 8005a54:	2300      	movne	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d1a3      	bne.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b086      	sub	sp, #24
 8005a6e:	af02      	add	r7, sp, #8
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7e:	d111      	bne.n	8005aa4 <SPI_EndRxTransaction+0x3a>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a88:	d004      	beq.n	8005a94 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a92:	d107      	bne.n	8005aa4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aac:	d12a      	bne.n	8005b04 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab6:	d012      	beq.n	8005ade <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2180      	movs	r1, #128	; 0x80
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff ff67 	bl	8005996 <SPI_WaitFlagStateUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d02d      	beq.n	8005b2a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e026      	b.n	8005b2c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff ff54 	bl	8005996 <SPI_WaitFlagStateUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d01a      	beq.n	8005b2a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e013      	b.n	8005b2c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff ff41 	bl	8005996 <SPI_WaitFlagStateUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1e:	f043 0220 	orr.w	r2, r3, #32
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e000      	b.n	8005b2c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b40:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <SPI_EndRxTxTransaction+0x7c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <SPI_EndRxTxTransaction+0x80>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	0d5b      	lsrs	r3, r3, #21
 8005b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b50:	fb02 f303 	mul.w	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b5e:	d112      	bne.n	8005b86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2200      	movs	r2, #0
 8005b68:	2180      	movs	r1, #128	; 0x80
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff ff13 	bl	8005996 <SPI_WaitFlagStateUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e00f      	b.n	8005ba6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9c:	2b80      	cmp	r3, #128	; 0x80
 8005b9e:	d0f2      	beq.n	8005b86 <SPI_EndRxTxTransaction+0x52>
 8005ba0:	e000      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ba2:	bf00      	nop
  }

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	200000a0 	.word	0x200000a0
 8005bb4:	165e9f81 	.word	0x165e9f81

08005bb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e083      	b.n	8005cd4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7fc f8af 	bl	8001d44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bfc:	f023 0307 	bic.w	r3, r3, #7
 8005c00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f000 f9ed 	bl	8005fec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c58:	f023 030c 	bic.w	r3, r3, #12
 8005c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	021b      	lsls	r3, r3, #8
 8005c74:	4313      	orrs	r3, r2
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	011a      	lsls	r2, r3, #4
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	031b      	lsls	r3, r3, #12
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	4313      	orrs	r3, r2
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_TIM_Encoder_Start_IT+0x16>
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d010      	beq.n	8005d12 <HAL_TIM_Encoder_Start_IT+0x36>
 8005cf0:	e01f      	b.n	8005d32 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f9f6 	bl	80060ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0202 	orr.w	r2, r2, #2
 8005d0e:	60da      	str	r2, [r3, #12]
      break;
 8005d10:	e02e      	b.n	8005d70 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2201      	movs	r2, #1
 8005d18:	2104      	movs	r1, #4
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f9e6 	bl	80060ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0204 	orr.w	r2, r2, #4
 8005d2e:	60da      	str	r2, [r3, #12]
      break;
 8005d30:	e01e      	b.n	8005d70 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f9d6 	bl	80060ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2201      	movs	r2, #1
 8005d46:	2104      	movs	r1, #4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 f9cf 	bl	80060ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0202 	orr.w	r2, r2, #2
 8005d5c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0204 	orr.w	r2, r2, #4
 8005d6c:	60da      	str	r2, [r3, #12]
      break;
 8005d6e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d122      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d11b      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f06f 0202 	mvn.w	r2, #2
 8005db6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fb f8dd 	bl	8000f8c <HAL_TIM_IC_CaptureCallback>
 8005dd2:	e005      	b.n	8005de0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f8ea 	bl	8005fae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f8f1 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d122      	bne.n	8005e3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d11b      	bne.n	8005e3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f06f 0204 	mvn.w	r2, #4
 8005e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7fb f8b3 	bl	8000f8c <HAL_TIM_IC_CaptureCallback>
 8005e26:	e005      	b.n	8005e34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f8c0 	bl	8005fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f8c7 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d122      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d11b      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f06f 0208 	mvn.w	r2, #8
 8005e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2204      	movs	r2, #4
 8005e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7fb f889 	bl	8000f8c <HAL_TIM_IC_CaptureCallback>
 8005e7a:	e005      	b.n	8005e88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f896 	bl	8005fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f89d 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b10      	cmp	r3, #16
 8005e9a:	d122      	bne.n	8005ee2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	2b10      	cmp	r3, #16
 8005ea8:	d11b      	bne.n	8005ee2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f06f 0210 	mvn.w	r2, #16
 8005eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fb f85f 	bl	8000f8c <HAL_TIM_IC_CaptureCallback>
 8005ece:	e005      	b.n	8005edc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f86c 	bl	8005fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f873 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d10e      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d107      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f06f 0201 	mvn.w	r2, #1
 8005f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f846 	bl	8005f9a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b80      	cmp	r3, #128	; 0x80
 8005f1a:	d10e      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f26:	2b80      	cmp	r3, #128	; 0x80
 8005f28:	d107      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f977 	bl	8006228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d10e      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d107      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f838 	bl	8005fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d10e      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d107      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f06f 0220 	mvn.w	r2, #32
 8005f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f941 	bl	8006214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a34      	ldr	r2, [pc, #208]	; (80060d0 <TIM_Base_SetConfig+0xe4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00f      	beq.n	8006024 <TIM_Base_SetConfig+0x38>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600a:	d00b      	beq.n	8006024 <TIM_Base_SetConfig+0x38>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a31      	ldr	r2, [pc, #196]	; (80060d4 <TIM_Base_SetConfig+0xe8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d007      	beq.n	8006024 <TIM_Base_SetConfig+0x38>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a30      	ldr	r2, [pc, #192]	; (80060d8 <TIM_Base_SetConfig+0xec>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_Base_SetConfig+0x38>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a2f      	ldr	r2, [pc, #188]	; (80060dc <TIM_Base_SetConfig+0xf0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d108      	bne.n	8006036 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <TIM_Base_SetConfig+0xe4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01b      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006044:	d017      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a22      	ldr	r2, [pc, #136]	; (80060d4 <TIM_Base_SetConfig+0xe8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <TIM_Base_SetConfig+0xec>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00f      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a20      	ldr	r2, [pc, #128]	; (80060dc <TIM_Base_SetConfig+0xf0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00b      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a1f      	ldr	r2, [pc, #124]	; (80060e0 <TIM_Base_SetConfig+0xf4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a1e      	ldr	r2, [pc, #120]	; (80060e4 <TIM_Base_SetConfig+0xf8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1d      	ldr	r2, [pc, #116]	; (80060e8 <TIM_Base_SetConfig+0xfc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d108      	bne.n	8006088 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a08      	ldr	r2, [pc, #32]	; (80060d0 <TIM_Base_SetConfig+0xe4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d103      	bne.n	80060bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	615a      	str	r2, [r3, #20]
}
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40014000 	.word	0x40014000
 80060e4:	40014400 	.word	0x40014400
 80060e8:	40014800 	.word	0x40014800

080060ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	2201      	movs	r2, #1
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1a      	ldr	r2, [r3, #32]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	43db      	mvns	r3, r3
 800610e:	401a      	ands	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a1a      	ldr	r2, [r3, #32]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 031f 	and.w	r3, r3, #31
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	fa01 f303 	lsl.w	r3, r1, r3
 8006124:	431a      	orrs	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
	...

08006138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800614c:	2302      	movs	r3, #2
 800614e:	e050      	b.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1c      	ldr	r2, [pc, #112]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d018      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619c:	d013      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a18      	ldr	r2, [pc, #96]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00e      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a16      	ldr	r2, [pc, #88]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d009      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a15      	ldr	r2, [pc, #84]	; (800620c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a13      	ldr	r2, [pc, #76]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d10c      	bne.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40010000 	.word	0x40010000
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40014000 	.word	0x40014000

08006214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800623c:	b084      	sub	sp, #16
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	f107 001c 	add.w	r0, r7, #28
 800624a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	2b01      	cmp	r3, #1
 8006252:	d122      	bne.n	800629a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800627c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627e:	2b01      	cmp	r3, #1
 8006280:	d105      	bne.n	800628e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 fac6 	bl	8007820 <USB_CoreReset>
 8006294:	4603      	mov	r3, r0
 8006296:	73fb      	strb	r3, [r7, #15]
 8006298:	e01a      	b.n	80062d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 faba 	bl	8007820 <USB_CoreReset>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
 80062c2:	e005      	b.n	80062d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d10b      	bne.n	80062ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f043 0206 	orr.w	r2, r3, #6
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f043 0220 	orr.w	r2, r3, #32
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062fa:	b004      	add	sp, #16
 80062fc:	4770      	bx	lr
	...

08006300 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d165      	bne.n	80063e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4a41      	ldr	r2, [pc, #260]	; (800641c <USB_SetTurnaroundTime+0x11c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d906      	bls.n	800632a <USB_SetTurnaroundTime+0x2a>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4a40      	ldr	r2, [pc, #256]	; (8006420 <USB_SetTurnaroundTime+0x120>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d802      	bhi.n	800632a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006324:	230f      	movs	r3, #15
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	e062      	b.n	80063f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	4a3c      	ldr	r2, [pc, #240]	; (8006420 <USB_SetTurnaroundTime+0x120>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d906      	bls.n	8006340 <USB_SetTurnaroundTime+0x40>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4a3b      	ldr	r2, [pc, #236]	; (8006424 <USB_SetTurnaroundTime+0x124>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d802      	bhi.n	8006340 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800633a:	230e      	movs	r3, #14
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	e057      	b.n	80063f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4a38      	ldr	r2, [pc, #224]	; (8006424 <USB_SetTurnaroundTime+0x124>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d906      	bls.n	8006356 <USB_SetTurnaroundTime+0x56>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4a37      	ldr	r2, [pc, #220]	; (8006428 <USB_SetTurnaroundTime+0x128>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d802      	bhi.n	8006356 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006350:	230d      	movs	r3, #13
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	e04c      	b.n	80063f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	4a33      	ldr	r2, [pc, #204]	; (8006428 <USB_SetTurnaroundTime+0x128>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d906      	bls.n	800636c <USB_SetTurnaroundTime+0x6c>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4a32      	ldr	r2, [pc, #200]	; (800642c <USB_SetTurnaroundTime+0x12c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d802      	bhi.n	800636c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006366:	230c      	movs	r3, #12
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	e041      	b.n	80063f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4a2f      	ldr	r2, [pc, #188]	; (800642c <USB_SetTurnaroundTime+0x12c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d906      	bls.n	8006382 <USB_SetTurnaroundTime+0x82>
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4a2e      	ldr	r2, [pc, #184]	; (8006430 <USB_SetTurnaroundTime+0x130>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d802      	bhi.n	8006382 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800637c:	230b      	movs	r3, #11
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	e036      	b.n	80063f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4a2a      	ldr	r2, [pc, #168]	; (8006430 <USB_SetTurnaroundTime+0x130>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d906      	bls.n	8006398 <USB_SetTurnaroundTime+0x98>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	4a29      	ldr	r2, [pc, #164]	; (8006434 <USB_SetTurnaroundTime+0x134>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d802      	bhi.n	8006398 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006392:	230a      	movs	r3, #10
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	e02b      	b.n	80063f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4a26      	ldr	r2, [pc, #152]	; (8006434 <USB_SetTurnaroundTime+0x134>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d906      	bls.n	80063ae <USB_SetTurnaroundTime+0xae>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4a25      	ldr	r2, [pc, #148]	; (8006438 <USB_SetTurnaroundTime+0x138>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d802      	bhi.n	80063ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80063a8:	2309      	movs	r3, #9
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	e020      	b.n	80063f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4a21      	ldr	r2, [pc, #132]	; (8006438 <USB_SetTurnaroundTime+0x138>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d906      	bls.n	80063c4 <USB_SetTurnaroundTime+0xc4>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	4a20      	ldr	r2, [pc, #128]	; (800643c <USB_SetTurnaroundTime+0x13c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d802      	bhi.n	80063c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063be:	2308      	movs	r3, #8
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	e015      	b.n	80063f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4a1d      	ldr	r2, [pc, #116]	; (800643c <USB_SetTurnaroundTime+0x13c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d906      	bls.n	80063da <USB_SetTurnaroundTime+0xda>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4a1c      	ldr	r2, [pc, #112]	; (8006440 <USB_SetTurnaroundTime+0x140>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d802      	bhi.n	80063da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063d4:	2307      	movs	r3, #7
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	e00a      	b.n	80063f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063da:	2306      	movs	r3, #6
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	e007      	b.n	80063f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063e6:	2309      	movs	r3, #9
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	e001      	b.n	80063f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063ec:	2309      	movs	r3, #9
 80063ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	029b      	lsls	r3, r3, #10
 8006404:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006408:	431a      	orrs	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	00d8acbf 	.word	0x00d8acbf
 8006420:	00e4e1bf 	.word	0x00e4e1bf
 8006424:	00f423ff 	.word	0x00f423ff
 8006428:	0106737f 	.word	0x0106737f
 800642c:	011a499f 	.word	0x011a499f
 8006430:	01312cff 	.word	0x01312cff
 8006434:	014ca43f 	.word	0x014ca43f
 8006438:	016e35ff 	.word	0x016e35ff
 800643c:	01a6ab1f 	.word	0x01a6ab1f
 8006440:	01e847ff 	.word	0x01e847ff

08006444 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f043 0201 	orr.w	r2, r3, #1
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f023 0201 	bic.w	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d106      	bne.n	80064b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60da      	str	r2, [r3, #12]
 80064b2:	e00b      	b.n	80064cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60da      	str	r2, [r3, #12]
 80064c6:	e001      	b.n	80064cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e003      	b.n	80064d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80064cc:	2032      	movs	r0, #50	; 0x32
 80064ce:	f7fc f807 	bl	80024e0 <HAL_Delay>

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064dc:	b084      	sub	sp, #16
 80064de:	b580      	push	{r7, lr}
 80064e0:	b086      	sub	sp, #24
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064f6:	2300      	movs	r3, #0
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	e009      	b.n	8006510 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3340      	adds	r3, #64	; 0x40
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	2200      	movs	r2, #0
 8006508:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	3301      	adds	r3, #1
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b0e      	cmp	r3, #14
 8006514:	d9f2      	bls.n	80064fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006518:	2b00      	cmp	r3, #0
 800651a:	d11c      	bne.n	8006556 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800652a:	f043 0302 	orr.w	r3, r3, #2
 800652e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
 8006554:	e00b      	b.n	800656e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006574:	461a      	mov	r2, r3
 8006576:	2300      	movs	r3, #0
 8006578:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	4619      	mov	r1, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006588:	461a      	mov	r2, r3
 800658a:	680b      	ldr	r3, [r1, #0]
 800658c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10c      	bne.n	80065ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800659a:	2100      	movs	r1, #0
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f949 	bl	8006834 <USB_SetDevSpeed>
 80065a2:	e008      	b.n	80065b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065a4:	2101      	movs	r1, #1
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f944 	bl	8006834 <USB_SetDevSpeed>
 80065ac:	e003      	b.n	80065b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065ae:	2103      	movs	r1, #3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f93f 	bl	8006834 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065b6:	2110      	movs	r1, #16
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f8f3 	bl	80067a4 <USB_FlushTxFifo>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f911 	bl	80067f0 <USB_FlushRxFifo>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	461a      	mov	r2, r3
 80065e0:	2300      	movs	r3, #0
 80065e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	461a      	mov	r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	461a      	mov	r2, r3
 80065f8:	2300      	movs	r3, #0
 80065fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065fc:	2300      	movs	r3, #0
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	e043      	b.n	800668a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006618:	d118      	bne.n	800664c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	461a      	mov	r2, r3
 800662e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e013      	b.n	800665e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006642:	461a      	mov	r2, r3
 8006644:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e008      	b.n	800665e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006658:	461a      	mov	r2, r3
 800665a:	2300      	movs	r3, #0
 800665c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	461a      	mov	r2, r3
 800666c:	2300      	movs	r3, #0
 800666e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667c:	461a      	mov	r2, r3
 800667e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006682:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	3301      	adds	r3, #1
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	429a      	cmp	r2, r3
 8006690:	d3b7      	bcc.n	8006602 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006692:	2300      	movs	r3, #0
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	e043      	b.n	8006720 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ae:	d118      	bne.n	80066e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	461a      	mov	r2, r3
 80066c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e013      	b.n	80066f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d8:	461a      	mov	r2, r3
 80066da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e008      	b.n	80066f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ee:	461a      	mov	r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006712:	461a      	mov	r2, r3
 8006714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3301      	adds	r3, #1
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	429a      	cmp	r2, r3
 8006726:	d3b7      	bcc.n	8006698 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800673a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006748:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	2b00      	cmp	r3, #0
 800674e:	d105      	bne.n	800675c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f043 0210 	orr.w	r2, r3, #16
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <USB_DevInit+0x2c4>)
 8006762:	4313      	orrs	r3, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	f043 0208 	orr.w	r2, r3, #8
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800677a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d107      	bne.n	8006790 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006788:	f043 0304 	orr.w	r3, r3, #4
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006790:	7dfb      	ldrb	r3, [r7, #23]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800679c:	b004      	add	sp, #16
 800679e:	4770      	bx	lr
 80067a0:	803c3800 	.word	0x803c3800

080067a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	019b      	lsls	r3, r3, #6
 80067b6:	f043 0220 	orr.w	r2, r3, #32
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a09      	ldr	r2, [pc, #36]	; (80067ec <USB_FlushTxFifo+0x48>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d901      	bls.n	80067d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e006      	b.n	80067de <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d0f0      	beq.n	80067be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	00030d40 	.word	0x00030d40

080067f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2210      	movs	r2, #16
 8006800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4a09      	ldr	r2, [pc, #36]	; (8006830 <USB_FlushRxFifo+0x40>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e006      	b.n	8006822 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b10      	cmp	r3, #16
 800681e:	d0f0      	beq.n	8006802 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	00030d40 	.word	0x00030d40

08006834 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006854:	4313      	orrs	r3, r2
 8006856:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b087      	sub	sp, #28
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 0306 	and.w	r3, r3, #6
 800687e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]
 800688a:	e00a      	b.n	80068a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b02      	cmp	r3, #2
 8006890:	d002      	beq.n	8006898 <USB_GetDevSpeed+0x32>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b06      	cmp	r3, #6
 8006896:	d102      	bne.n	800689e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006898:	2302      	movs	r3, #2
 800689a:	75fb      	strb	r3, [r7, #23]
 800689c:	e001      	b.n	80068a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800689e:	230f      	movs	r3, #15
 80068a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d13a      	bne.n	8006942 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	2101      	movs	r1, #1
 80068de:	fa01 f303 	lsl.w	r3, r1, r3
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	68f9      	ldr	r1, [r7, #12]
 80068e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ea:	4313      	orrs	r3, r2
 80068ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d155      	bne.n	80069b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	78db      	ldrb	r3, [r3, #3]
 800691e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006920:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	059b      	lsls	r3, r3, #22
 8006926:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006928:	4313      	orrs	r3, r2
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	440a      	add	r2, r1
 8006932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	e036      	b.n	80069b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006948:	69da      	ldr	r2, [r3, #28]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	2101      	movs	r1, #1
 8006954:	fa01 f303 	lsl.w	r3, r1, r3
 8006958:	041b      	lsls	r3, r3, #16
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006960:	4313      	orrs	r3, r2
 8006962:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d11a      	bne.n	80069b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	78db      	ldrb	r3, [r3, #3]
 8006994:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006996:	430b      	orrs	r3, r1
 8006998:	4313      	orrs	r3, r2
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
	...

080069c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d161      	bne.n	8006aa0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069f2:	d11f      	bne.n	8006a34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	2101      	movs	r1, #1
 8006a46:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	68f9      	ldr	r1, [r7, #12]
 8006a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a54:	4013      	ands	r3, r2
 8006a56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	2101      	movs	r1, #1
 8006a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	43db      	mvns	r3, r3
 8006a72:	68f9      	ldr	r1, [r7, #12]
 8006a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a78:	4013      	ands	r3, r2
 8006a7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	0159      	lsls	r1, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	440b      	add	r3, r1
 8006a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a96:	4619      	mov	r1, r3
 8006a98:	4b35      	ldr	r3, [pc, #212]	; (8006b70 <USB_DeactivateEndpoint+0x1b0>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	600b      	str	r3, [r1, #0]
 8006a9e:	e060      	b.n	8006b62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab6:	d11f      	bne.n	8006af8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ad6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	0151      	lsls	r1, r2, #5
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	440a      	add	r2, r1
 8006aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006af6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	2101      	movs	r1, #1
 8006b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	43db      	mvns	r3, r3
 8006b12:	68f9      	ldr	r1, [r7, #12]
 8006b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b18:	4013      	ands	r3, r2
 8006b1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	43db      	mvns	r3, r3
 8006b36:	68f9      	ldr	r1, [r7, #12]
 8006b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	0159      	lsls	r1, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	440b      	add	r3, r1
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <USB_DeactivateEndpoint+0x1b4>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	ec337800 	.word	0xec337800
 8006b74:	eff37800 	.word	0xeff37800

08006b78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08a      	sub	sp, #40	; 0x28
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	4613      	mov	r3, r2
 8006b84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	f040 815c 	bne.w	8006e52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d132      	bne.n	8006c08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006be4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c00:	0cdb      	lsrs	r3, r3, #19
 8006c02:	04db      	lsls	r3, r3, #19
 8006c04:	6113      	str	r3, [r2, #16]
 8006c06:	e074      	b.n	8006cf2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	0151      	lsls	r1, r2, #5
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	440a      	add	r2, r1
 8006c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c22:	0cdb      	lsrs	r3, r3, #19
 8006c24:	04db      	lsls	r3, r3, #19
 8006c26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	0151      	lsls	r1, r2, #5
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	440a      	add	r2, r1
 8006c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	691a      	ldr	r2, [r3, #16]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6959      	ldr	r1, [r3, #20]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	440b      	add	r3, r1
 8006c64:	1e59      	subs	r1, r3, #1
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c6e:	04d9      	lsls	r1, r3, #19
 8006c70:	4b9d      	ldr	r3, [pc, #628]	; (8006ee8 <USB_EPStartXfer+0x370>)
 8006c72:	400b      	ands	r3, r1
 8006c74:	69b9      	ldr	r1, [r7, #24]
 8006c76:	0148      	lsls	r0, r1, #5
 8006c78:	69f9      	ldr	r1, [r7, #28]
 8006c7a:	4401      	add	r1, r0
 8006c7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c80:	4313      	orrs	r3, r2
 8006c82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c9a:	69b9      	ldr	r1, [r7, #24]
 8006c9c:	0148      	lsls	r0, r1, #5
 8006c9e:	69f9      	ldr	r1, [r7, #28]
 8006ca0:	4401      	add	r1, r0
 8006ca2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	78db      	ldrb	r3, [r3, #3]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d11f      	bne.n	8006cf2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	0151      	lsls	r1, r2, #5
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	440a      	add	r2, r1
 8006cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ccc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006cd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	0151      	lsls	r1, r2, #5
 8006ce4:	69fa      	ldr	r2, [r7, #28]
 8006ce6:	440a      	add	r2, r1
 8006ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cf0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d14b      	bne.n	8006d90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d009      	beq.n	8006d14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	78db      	ldrb	r3, [r3, #3]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d128      	bne.n	8006d6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d110      	bne.n	8006d4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	e00f      	b.n	8006d6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	0151      	lsls	r1, r2, #5
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	440a      	add	r2, r1
 8006d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	e12f      	b.n	8006ff0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	0151      	lsls	r1, r2, #5
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	440a      	add	r2, r1
 8006da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006daa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	78db      	ldrb	r3, [r3, #3]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d015      	beq.n	8006de4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8117 	beq.w	8006ff0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd8:	69f9      	ldr	r1, [r7, #28]
 8006dda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dde:	4313      	orrs	r3, r2
 8006de0:	634b      	str	r3, [r1, #52]	; 0x34
 8006de2:	e105      	b.n	8006ff0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d110      	bne.n	8006e16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	e00f      	b.n	8006e36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	68d9      	ldr	r1, [r3, #12]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	781a      	ldrb	r2, [r3, #0]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	b298      	uxth	r0, r3
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	4603      	mov	r3, r0
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 fa2b 	bl	80072a6 <USB_WritePacket>
 8006e50:	e0ce      	b.n	8006ff0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6c:	0cdb      	lsrs	r3, r3, #19
 8006e6e:	04db      	lsls	r3, r3, #19
 8006e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d126      	bne.n	8006eec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb4:	69b9      	ldr	r1, [r7, #24]
 8006eb6:	0148      	lsls	r0, r1, #5
 8006eb8:	69f9      	ldr	r1, [r7, #28]
 8006eba:	4401      	add	r1, r0
 8006ebc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	0151      	lsls	r1, r2, #5
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	440a      	add	r2, r1
 8006eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ee2:	6113      	str	r3, [r2, #16]
 8006ee4:	e036      	b.n	8006f54 <USB_EPStartXfer+0x3dc>
 8006ee6:	bf00      	nop
 8006ee8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	695a      	ldr	r2, [r3, #20]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	1e5a      	subs	r2, r3, #1
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	8afb      	ldrh	r3, [r7, #22]
 8006f12:	04d9      	lsls	r1, r3, #19
 8006f14:	4b39      	ldr	r3, [pc, #228]	; (8006ffc <USB_EPStartXfer+0x484>)
 8006f16:	400b      	ands	r3, r1
 8006f18:	69b9      	ldr	r1, [r7, #24]
 8006f1a:	0148      	lsls	r0, r1, #5
 8006f1c:	69f9      	ldr	r1, [r7, #28]
 8006f1e:	4401      	add	r1, r0
 8006f20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f24:	4313      	orrs	r3, r2
 8006f26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	8af9      	ldrh	r1, [r7, #22]
 8006f3c:	fb01 f303 	mul.w	r3, r1, r3
 8006f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f44:	69b9      	ldr	r1, [r7, #24]
 8006f46:	0148      	lsls	r0, r1, #5
 8006f48:	69f9      	ldr	r1, [r7, #28]
 8006f4a:	4401      	add	r1, r0
 8006f4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f50:	4313      	orrs	r3, r2
 8006f52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d10d      	bne.n	8006f76 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	68d9      	ldr	r1, [r3, #12]
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f72:	460a      	mov	r2, r1
 8006f74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	78db      	ldrb	r3, [r3, #3]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d128      	bne.n	8006fd0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d110      	bne.n	8006fb0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	69fa      	ldr	r2, [r7, #28]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	e00f      	b.n	8006fd0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	0151      	lsls	r1, r2, #5
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	440a      	add	r2, r1
 8006fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	1ff80000 	.word	0x1ff80000

08007000 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	785b      	ldrb	r3, [r3, #1]
 800701c:	2b01      	cmp	r3, #1
 800701e:	f040 80cd 	bne.w	80071bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d132      	bne.n	8007090 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007044:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007048:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800704c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	0151      	lsls	r1, r2, #5
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	440a      	add	r2, r1
 8007064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800706c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	0151      	lsls	r1, r2, #5
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	440a      	add	r2, r1
 8007084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007088:	0cdb      	lsrs	r3, r3, #19
 800708a:	04db      	lsls	r3, r3, #19
 800708c:	6113      	str	r3, [r2, #16]
 800708e:	e04e      	b.n	800712e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070aa:	0cdb      	lsrs	r3, r3, #19
 80070ac:	04db      	lsls	r3, r3, #19
 80070ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	695a      	ldr	r2, [r3, #20]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d903      	bls.n	80070e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	0151      	lsls	r1, r2, #5
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	440a      	add	r2, r1
 80070fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007106:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007114:	691a      	ldr	r2, [r3, #16]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800711e:	6939      	ldr	r1, [r7, #16]
 8007120:	0148      	lsls	r0, r1, #5
 8007122:	6979      	ldr	r1, [r7, #20]
 8007124:	4401      	add	r1, r0
 8007126:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800712a:	4313      	orrs	r3, r2
 800712c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d11e      	bne.n	8007172 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d009      	beq.n	8007150 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007148:	461a      	mov	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	0151      	lsls	r1, r2, #5
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	440a      	add	r2, r1
 8007166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800716a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	e092      	b.n	8007298 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800718c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007190:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d07e      	beq.n	8007298 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	2101      	movs	r1, #1
 80071ac:	fa01 f303 	lsl.w	r3, r1, r3
 80071b0:	6979      	ldr	r1, [r7, #20]
 80071b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b6:	4313      	orrs	r3, r2
 80071b8:	634b      	str	r3, [r1, #52]	; 0x34
 80071ba:	e06d      	b.n	8007298 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d6:	0cdb      	lsrs	r3, r3, #19
 80071d8:	04db      	lsls	r3, r3, #19
 80071da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	0151      	lsls	r1, r2, #5
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	440a      	add	r2, r1
 8007226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800722e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007246:	6939      	ldr	r1, [r7, #16]
 8007248:	0148      	lsls	r0, r1, #5
 800724a:	6979      	ldr	r1, [r7, #20]
 800724c:	4401      	add	r1, r0
 800724e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007252:	4313      	orrs	r3, r2
 8007254:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d10d      	bne.n	8007278 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d009      	beq.n	8007278 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	68d9      	ldr	r1, [r3, #12]
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	460a      	mov	r2, r1
 8007276:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	0151      	lsls	r1, r2, #5
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	440a      	add	r2, r1
 800728e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007292:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007296:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b089      	sub	sp, #36	; 0x24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	4611      	mov	r1, r2
 80072b2:	461a      	mov	r2, r3
 80072b4:	460b      	mov	r3, r1
 80072b6:	71fb      	strb	r3, [r7, #7]
 80072b8:	4613      	mov	r3, r2
 80072ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80072c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d11a      	bne.n	8007302 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072cc:	88bb      	ldrh	r3, [r7, #4]
 80072ce:	3303      	adds	r3, #3
 80072d0:	089b      	lsrs	r3, r3, #2
 80072d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072d4:	2300      	movs	r3, #0
 80072d6:	61bb      	str	r3, [r7, #24]
 80072d8:	e00f      	b.n	80072fa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	031a      	lsls	r2, r3, #12
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e6:	461a      	mov	r2, r3
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	3304      	adds	r3, #4
 80072f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	3301      	adds	r3, #1
 80072f8:	61bb      	str	r3, [r7, #24]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d3eb      	bcc.n	80072da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3724      	adds	r7, #36	; 0x24
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007310:	b480      	push	{r7}
 8007312:	b089      	sub	sp, #36	; 0x24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007326:	88fb      	ldrh	r3, [r7, #6]
 8007328:	3303      	adds	r3, #3
 800732a:	089b      	lsrs	r3, r3, #2
 800732c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800732e:	2300      	movs	r3, #0
 8007330:	61bb      	str	r3, [r7, #24]
 8007332:	e00b      	b.n	800734c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	3304      	adds	r3, #4
 8007344:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	3301      	adds	r3, #1
 800734a:	61bb      	str	r3, [r7, #24]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	429a      	cmp	r2, r3
 8007352:	d3ef      	bcc.n	8007334 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007354:	69fb      	ldr	r3, [r7, #28]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3724      	adds	r7, #36	; 0x24
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007362:	b480      	push	{r7}
 8007364:	b085      	sub	sp, #20
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d12c      	bne.n	80073d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	db12      	blt.n	80073b6 <USB_EPSetStall+0x54>
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00f      	beq.n	80073b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	0151      	lsls	r1, r2, #5
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	440a      	add	r2, r1
 80073cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	e02b      	b.n	8007430 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	db12      	blt.n	8007410 <USB_EPSetStall+0xae>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00f      	beq.n	8007410 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800740e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800742e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d128      	bne.n	80074ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	440a      	add	r2, r1
 8007470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007474:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007478:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	78db      	ldrb	r3, [r3, #3]
 800747e:	2b03      	cmp	r3, #3
 8007480:	d003      	beq.n	800748a <USB_EPClearStall+0x4c>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	78db      	ldrb	r3, [r3, #3]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d138      	bne.n	80074fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	0151      	lsls	r1, r2, #5
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	440a      	add	r2, r1
 80074a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	e027      	b.n	80074fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	78db      	ldrb	r3, [r3, #3]
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d003      	beq.n	80074dc <USB_EPClearStall+0x9e>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	78db      	ldrb	r3, [r3, #3]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d10f      	bne.n	80074fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007528:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800752c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007544:	4313      	orrs	r3, r2
 8007546:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007556:	b480      	push	{r7}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007570:	f023 0303 	bic.w	r3, r3, #3
 8007574:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007584:	f023 0302 	bic.w	r3, r3, #2
 8007588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075c6:	f043 0302 	orr.w	r3, r3, #2
 80075ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	4013      	ands	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075f2:	68fb      	ldr	r3, [r7, #12]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	4013      	ands	r3, r2
 8007622:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	0c1b      	lsrs	r3, r3, #16
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	4013      	ands	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	b29b      	uxth	r3, r3
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	4013      	ands	r3, r2
 8007694:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007696:	68bb      	ldr	r3, [r7, #8]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
 80076d4:	01db      	lsls	r3, r3, #7
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4013      	ands	r3, r2
 80076f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076f2:	68bb      	ldr	r3, [r7, #8]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	f003 0301 	and.w	r3, r3, #1
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007736:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800774e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007752:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	460b      	mov	r3, r1
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	333c      	adds	r3, #60	; 0x3c
 800777a:	3304      	adds	r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	4a26      	ldr	r2, [pc, #152]	; (800781c <USB_EP0_OutStart+0xb8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d90a      	bls.n	800779e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007798:	d101      	bne.n	800779e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	e037      	b.n	800780e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a4:	461a      	mov	r2, r3
 80077a6:	2300      	movs	r3, #0
 80077a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077cc:	f043 0318 	orr.w	r3, r3, #24
 80077d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80077e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80077e6:	7afb      	ldrb	r3, [r7, #11]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d10f      	bne.n	800780c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f2:	461a      	mov	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007806:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800780a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	4f54300a 	.word	0x4f54300a

08007820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	4a13      	ldr	r2, [pc, #76]	; (8007884 <USB_CoreReset+0x64>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d901      	bls.n	800783e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e01b      	b.n	8007876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	daf2      	bge.n	800782c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	f043 0201 	orr.w	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3301      	adds	r3, #1
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4a09      	ldr	r2, [pc, #36]	; (8007884 <USB_CoreReset+0x64>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d901      	bls.n	8007868 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e006      	b.n	8007876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b01      	cmp	r3, #1
 8007872:	d0f0      	beq.n	8007856 <USB_CoreReset+0x36>

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	00030d40 	.word	0x00030d40

08007888 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007894:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007898:	f002 fb3e 	bl	8009f18 <malloc>
 800789c:	4603      	mov	r3, r0
 800789e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d105      	bne.n	80078b2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80078ae:	2302      	movs	r3, #2
 80078b0:	e066      	b.n	8007980 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	7c1b      	ldrb	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d119      	bne.n	80078f6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078c6:	2202      	movs	r2, #2
 80078c8:	2181      	movs	r1, #129	; 0x81
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f002 f9ab 	bl	8009c26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078da:	2202      	movs	r2, #2
 80078dc:	2101      	movs	r1, #1
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f002 f9a1 	bl	8009c26 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2210      	movs	r2, #16
 80078f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80078f4:	e016      	b.n	8007924 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078f6:	2340      	movs	r3, #64	; 0x40
 80078f8:	2202      	movs	r2, #2
 80078fa:	2181      	movs	r1, #129	; 0x81
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f002 f992 	bl	8009c26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007908:	2340      	movs	r3, #64	; 0x40
 800790a:	2202      	movs	r2, #2
 800790c:	2101      	movs	r1, #1
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f002 f989 	bl	8009c26 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2210      	movs	r2, #16
 8007920:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007924:	2308      	movs	r3, #8
 8007926:	2203      	movs	r2, #3
 8007928:	2182      	movs	r1, #130	; 0x82
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f002 f97b 	bl	8009c26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	7c1b      	ldrb	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007964:	2101      	movs	r1, #1
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f002 fa4c 	bl	8009e04 <USBD_LL_PrepareReceive>
 800796c:	e007      	b.n	800797e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007974:	2340      	movs	r3, #64	; 0x40
 8007976:	2101      	movs	r1, #1
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f002 fa43 	bl	8009e04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007998:	2181      	movs	r1, #129	; 0x81
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f002 f969 	bl	8009c72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079a6:	2101      	movs	r1, #1
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f002 f962 	bl	8009c72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079b6:	2182      	movs	r1, #130	; 0x82
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f002 f95a 	bl	8009c72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00e      	beq.n	80079f6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e8:	4618      	mov	r0, r3
 80079ea:	f002 fa9d 	bl	8009f28 <free>
    pdev->pClassData = NULL;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a10:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d03a      	beq.n	8007aa0 <USBD_CDC_Setup+0xa0>
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	f040 8097 	bne.w	8007b5e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	88db      	ldrh	r3, [r3, #6]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d029      	beq.n	8007a8c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	b25b      	sxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	da11      	bge.n	8007a66 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007a4e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	88d2      	ldrh	r2, [r2, #6]
 8007a54:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a56:	6939      	ldr	r1, [r7, #16]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	88db      	ldrh	r3, [r3, #6]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fc63 	bl	800932a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007a64:	e082      	b.n	8007b6c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	785a      	ldrb	r2, [r3, #1]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	88db      	ldrh	r3, [r3, #6]
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a7c:	6939      	ldr	r1, [r7, #16]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	88db      	ldrh	r3, [r3, #6]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 fc7c 	bl	8009382 <USBD_CtlPrepareRx>
    break;
 8007a8a:	e06f      	b.n	8007b6c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	7850      	ldrb	r0, [r2, #1]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	4798      	blx	r3
    break;
 8007a9e:	e065      	b.n	8007b6c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2b0b      	cmp	r3, #11
 8007aa6:	d84f      	bhi.n	8007b48 <USBD_CDC_Setup+0x148>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <USBD_CDC_Setup+0xb0>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ae1 	.word	0x08007ae1
 8007ab4:	08007b57 	.word	0x08007b57
 8007ab8:	08007b49 	.word	0x08007b49
 8007abc:	08007b49 	.word	0x08007b49
 8007ac0:	08007b49 	.word	0x08007b49
 8007ac4:	08007b49 	.word	0x08007b49
 8007ac8:	08007b49 	.word	0x08007b49
 8007acc:	08007b49 	.word	0x08007b49
 8007ad0:	08007b49 	.word	0x08007b49
 8007ad4:	08007b49 	.word	0x08007b49
 8007ad8:	08007b09 	.word	0x08007b09
 8007adc:	08007b31 	.word	0x08007b31
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d107      	bne.n	8007afa <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007aea:	f107 030c 	add.w	r3, r7, #12
 8007aee:	2202      	movs	r2, #2
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 fc19 	bl	800932a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007af8:	e030      	b.n	8007b5c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 fba3 	bl	8009248 <USBD_CtlError>
        ret = USBD_FAIL;
 8007b02:	2303      	movs	r3, #3
 8007b04:	75fb      	strb	r3, [r7, #23]
      break;
 8007b06:	e029      	b.n	8007b5c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d107      	bne.n	8007b22 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b12:	f107 030f 	add.w	r3, r7, #15
 8007b16:	2201      	movs	r2, #1
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 fc05 	bl	800932a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007b20:	e01c      	b.n	8007b5c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fb8f 	bl	8009248 <USBD_CtlError>
        ret = USBD_FAIL;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b2e:	e015      	b.n	8007b5c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d00f      	beq.n	8007b5a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 fb83 	bl	8009248 <USBD_CtlError>
        ret = USBD_FAIL;
 8007b42:	2303      	movs	r3, #3
 8007b44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007b46:	e008      	b.n	8007b5a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 fb7c 	bl	8009248 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b50:	2303      	movs	r3, #3
 8007b52:	75fb      	strb	r3, [r7, #23]
      break;
 8007b54:	e002      	b.n	8007b5c <USBD_CDC_Setup+0x15c>
      break;
 8007b56:	bf00      	nop
 8007b58:	e008      	b.n	8007b6c <USBD_CDC_Setup+0x16c>
      break;
 8007b5a:	bf00      	nop
    }
    break;
 8007b5c:	e006      	b.n	8007b6c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 fb71 	bl	8009248 <USBD_CtlError>
    ret = USBD_FAIL;
 8007b66:	2303      	movs	r3, #3
 8007b68:	75fb      	strb	r3, [r7, #23]
    break;
 8007b6a:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop

08007b78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e049      	b.n	8007c2e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ba2:	78fa      	ldrb	r2, [r7, #3]
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	3318      	adds	r3, #24
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d029      	beq.n	8007c0c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	3318      	adds	r3, #24
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	78f9      	ldrb	r1, [r7, #3]
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	1a5b      	subs	r3, r3, r1
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4403      	add	r3, r0
 8007bd8:	3344      	adds	r3, #68	; 0x44
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007be0:	fb03 f301 	mul.w	r3, r3, r1
 8007be4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d110      	bne.n	8007c0c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007bea:	78fa      	ldrb	r2, [r7, #3]
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3318      	adds	r3, #24
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007bfe:	78f9      	ldrb	r1, [r7, #3]
 8007c00:	2300      	movs	r3, #0
 8007c02:	2200      	movs	r2, #0
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f002 f8dc 	bl	8009dc2 <USBD_LL_Transmit>
 8007c0a:	e00f      	b.n	8007c2c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e015      	b.n	8007c84 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f002 f8f2 	bl	8009e46 <USBD_LL_GetRxDataSize>
 8007c62:	4602      	mov	r2, r0
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c9a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d015      	beq.n	8007cd2 <USBD_CDC_EP0_RxReady+0x46>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cac:	2bff      	cmp	r3, #255	; 0xff
 8007cae:	d010      	beq.n	8007cd2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007cbe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cc6:	b292      	uxth	r2, r2
 8007cc8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	22ff      	movs	r2, #255	; 0xff
 8007cce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2243      	movs	r2, #67	; 0x43
 8007ce8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007cea:	4b03      	ldr	r3, [pc, #12]	; (8007cf8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	20000134 	.word	0x20000134

08007cfc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2243      	movs	r2, #67	; 0x43
 8007d08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d0a:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	200000f0 	.word	0x200000f0

08007d1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2243      	movs	r2, #67	; 0x43
 8007d28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007d2a:	4b03      	ldr	r3, [pc, #12]	; (8007d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	20000178 	.word	0x20000178

08007d3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	220a      	movs	r2, #10
 8007d48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d4a:	4b03      	ldr	r3, [pc, #12]	; (8007d58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	200000ac 	.word	0x200000ac

08007d5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e004      	b.n	8007d7a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b087      	sub	sp, #28
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d98:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	371c      	adds	r7, #28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dc8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007df0:	2301      	movs	r3, #1
 8007df2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e01a      	b.n	8007e38 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d114      	bne.n	8007e36 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e2a:	2181      	movs	r1, #129	; 0x81
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 ffc8 	bl	8009dc2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e016      	b.n	8007e8c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	7c1b      	ldrb	r3, [r3, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d109      	bne.n	8007e7a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e70:	2101      	movs	r1, #1
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f001 ffc6 	bl	8009e04 <USBD_LL_PrepareReceive>
 8007e78:	e007      	b.n	8007e8a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e80:	2340      	movs	r3, #64	; 0x40
 8007e82:	2101      	movs	r1, #1
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 ffbd 	bl	8009e04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	USBD_HID_HandleTypeDef *hhid;

	hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007ea0:	2010      	movs	r0, #16
 8007ea2:	f002 f839 	bl	8009f18 <malloc>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d105      	bne.n	8007ebc <USBD_HID_Init+0x28>
	{
		pdev->pClassData = NULL;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		return (uint8_t)USBD_EMEM;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e01b      	b.n	8007ef4 <USBD_HID_Init+0x60>
	}

	pdev->pClassData = (void *)hhid;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7c1b      	ldrb	r3, [r3, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d103      	bne.n	8007ed4 <USBD_HID_Init+0x40>
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2207      	movs	r2, #7
 8007ed0:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007ed2:	e002      	b.n	8007eda <USBD_HID_Init+0x46>
	}
	else   /* LOW and FULL-speed endpoints */
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	220a      	movs	r2, #10
 8007ed8:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	/* Open EP IN */
	(void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007eda:	2304      	movs	r3, #4
 8007edc:	2203      	movs	r2, #3
 8007ede:	2181      	movs	r1, #129	; 0x81
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 fea0 	bl	8009c26 <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	871a      	strh	r2, [r3, #56]	; 0x38

	hhid->state = HID_IDLE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_HID_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	/* Close HID EPs */
	(void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007f08:	2181      	movs	r1, #129	; 0x81
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 feb1 	bl	8009c72 <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	871a      	strh	r2, [r3, #56]	; 0x38
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	875a      	strh	r2, [r3, #58]	; 0x3a

	/* FRee allocated memory */
	if (pdev->pClassData != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d009      	beq.n	8007f3a <USBD_HID_DeInit+0x3e>
	{
		(void)USBD_free(pdev->pClassData);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fffb 	bl	8009f28 <free>
		pdev->pClassData = NULL;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t)USBD_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f54:	60fb      	str	r3, [r7, #12]
	USBD_StatusTypeDef ret = USBD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	817b      	strh	r3, [r7, #10]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d045      	beq.n	8007ff6 <USBD_HID_Setup+0xb2>
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	f040 80d4 	bne.w	8008118 <USBD_HID_Setup+0x1d4>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	785b      	ldrb	r3, [r3, #1]
 8007f74:	3b02      	subs	r3, #2
 8007f76:	2b09      	cmp	r3, #9
 8007f78:	d835      	bhi.n	8007fe6 <USBD_HID_Setup+0xa2>
 8007f7a:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <USBD_HID_Setup+0x3c>)
 8007f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f80:	08007fd7 	.word	0x08007fd7
 8007f84:	08007fb7 	.word	0x08007fb7
 8007f88:	08007fe7 	.word	0x08007fe7
 8007f8c:	08007fe7 	.word	0x08007fe7
 8007f90:	08007fe7 	.word	0x08007fe7
 8007f94:	08007fe7 	.word	0x08007fe7
 8007f98:	08007fe7 	.word	0x08007fe7
 8007f9c:	08007fe7 	.word	0x08007fe7
 8007fa0:	08007fc5 	.word	0x08007fc5
 8007fa4:	08007fa9 	.word	0x08007fa9
		{
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	885b      	ldrh	r3, [r3, #2]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	601a      	str	r2, [r3, #0]
			break;
 8007fb4:	e01e      	b.n	8007ff4 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 f9b4 	bl	800932a <USBD_CtlSendData>
			break;
 8007fc2:	e017      	b.n	8007ff4 <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	885b      	ldrh	r3, [r3, #2]
 8007fc8:	0a1b      	lsrs	r3, r3, #8
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	605a      	str	r2, [r3, #4]
			break;
 8007fd4:	e00e      	b.n	8007ff4 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	2201      	movs	r2, #1
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 f9a3 	bl	800932a <USBD_CtlSendData>
			break;
 8007fe4:	e006      	b.n	8007ff4 <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 f92d 	bl	8009248 <USBD_CtlError>
			ret = USBD_FAIL;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	75fb      	strb	r3, [r7, #23]
			break;
 8007ff2:	bf00      	nop
		}
		break;
 8007ff4:	e097      	b.n	8008126 <USBD_HID_Setup+0x1e2>
		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	785b      	ldrb	r3, [r3, #1]
 8007ffa:	2b0b      	cmp	r3, #11
 8007ffc:	f200 8083 	bhi.w	8008106 <USBD_HID_Setup+0x1c2>
 8008000:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <USBD_HID_Setup+0xc4>)
 8008002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008006:	bf00      	nop
 8008008:	08008039 	.word	0x08008039
 800800c:	08008115 	.word	0x08008115
 8008010:	08008107 	.word	0x08008107
 8008014:	08008107 	.word	0x08008107
 8008018:	08008107 	.word	0x08008107
 800801c:	08008107 	.word	0x08008107
 8008020:	08008061 	.word	0x08008061
 8008024:	08008107 	.word	0x08008107
 8008028:	08008107 	.word	0x08008107
 800802c:	08008107 	.word	0x08008107
 8008030:	080080b9 	.word	0x080080b9
 8008034:	080080e1 	.word	0x080080e1
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803e:	2b03      	cmp	r3, #3
 8008040:	d107      	bne.n	8008052 <USBD_HID_Setup+0x10e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008042:	f107 030a 	add.w	r3, r7, #10
 8008046:	2202      	movs	r2, #2
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 f96d 	bl	800932a <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8008050:	e061      	b.n	8008116 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 f8f7 	bl	8009248 <USBD_CtlError>
					ret = USBD_FAIL;
 800805a:	2303      	movs	r3, #3
 800805c:	75fb      	strb	r3, [r7, #23]
				break;
 800805e:	e05a      	b.n	8008116 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_DESCRIPTOR:
				if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	0a1b      	lsrs	r3, r3, #8
 8008066:	b29b      	uxth	r3, r3
 8008068:	2b22      	cmp	r3, #34	; 0x22
 800806a:	d108      	bne.n	800807e <USBD_HID_Setup+0x13a>
				{
					len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	88db      	ldrh	r3, [r3, #6]
 8008070:	2b3f      	cmp	r3, #63	; 0x3f
 8008072:	bf28      	it	cs
 8008074:	233f      	movcs	r3, #63	; 0x3f
 8008076:	82bb      	strh	r3, [r7, #20]
					pbuf = HID_MOUSE_ReportDesc;
 8008078:	4b2d      	ldr	r3, [pc, #180]	; (8008130 <USBD_HID_Setup+0x1ec>)
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	e015      	b.n	80080aa <USBD_HID_Setup+0x166>
				}
				else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	885b      	ldrh	r3, [r3, #2]
 8008082:	0a1b      	lsrs	r3, r3, #8
 8008084:	b29b      	uxth	r3, r3
 8008086:	2b21      	cmp	r3, #33	; 0x21
 8008088:	d108      	bne.n	800809c <USBD_HID_Setup+0x158>
				{
					pbuf = USBD_HID_Desc;
 800808a:	4b2a      	ldr	r3, [pc, #168]	; (8008134 <USBD_HID_Setup+0x1f0>)
 800808c:	613b      	str	r3, [r7, #16]
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	88db      	ldrh	r3, [r3, #6]
 8008092:	2b09      	cmp	r3, #9
 8008094:	bf28      	it	cs
 8008096:	2309      	movcs	r3, #9
 8008098:	82bb      	strh	r3, [r7, #20]
 800809a:	e006      	b.n	80080aa <USBD_HID_Setup+0x166>
				}
				else
				{
					USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 f8d2 	bl	8009248 <USBD_CtlError>
					ret = USBD_FAIL;
 80080a4:	2303      	movs	r3, #3
 80080a6:	75fb      	strb	r3, [r7, #23]
					break;
 80080a8:	e035      	b.n	8008116 <USBD_HID_Setup+0x1d2>
				}
				(void)USBD_CtlSendData(pdev, pbuf, len);
 80080aa:	8abb      	ldrh	r3, [r7, #20]
 80080ac:	461a      	mov	r2, r3
 80080ae:	6939      	ldr	r1, [r7, #16]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 f93a 	bl	800932a <USBD_CtlSendData>
				break;
 80080b6:	e02e      	b.n	8008116 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d107      	bne.n	80080d2 <USBD_HID_Setup+0x18e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3308      	adds	r3, #8
 80080c6:	2201      	movs	r2, #1
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 f92d 	bl	800932a <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 80080d0:	e021      	b.n	8008116 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 f8b7 	bl	8009248 <USBD_CtlError>
					ret = USBD_FAIL;
 80080da:	2303      	movs	r3, #3
 80080dc:	75fb      	strb	r3, [r7, #23]
				break;
 80080de:	e01a      	b.n	8008116 <USBD_HID_Setup+0x1d2>

			case USB_REQ_SET_INTERFACE:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d106      	bne.n	80080f8 <USBD_HID_Setup+0x1b4>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	885b      	ldrh	r3, [r3, #2]
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	461a      	mov	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	609a      	str	r2, [r3, #8]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 80080f6:	e00e      	b.n	8008116 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 f8a4 	bl	8009248 <USBD_CtlError>
					ret = USBD_FAIL;
 8008100:	2303      	movs	r3, #3
 8008102:	75fb      	strb	r3, [r7, #23]
				break;
 8008104:	e007      	b.n	8008116 <USBD_HID_Setup+0x1d2>

			case USB_REQ_CLEAR_FEATURE:
				break;

			default:
				USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 f89d 	bl	8009248 <USBD_CtlError>
				ret = USBD_FAIL;
 800810e:	2303      	movs	r3, #3
 8008110:	75fb      	strb	r3, [r7, #23]
				break;
 8008112:	e000      	b.n	8008116 <USBD_HID_Setup+0x1d2>
				break;
 8008114:	bf00      	nop
			}
			break;
 8008116:	e006      	b.n	8008126 <USBD_HID_Setup+0x1e2>

			default:
				USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 f894 	bl	8009248 <USBD_CtlError>
				ret = USBD_FAIL;
 8008120:	2303      	movs	r3, #3
 8008122:	75fb      	strb	r3, [r7, #23]
				break;
 8008124:	bf00      	nop
	}

	return (uint8_t)ret;
 8008126:	7dfb      	ldrb	r3, [r7, #23]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000278 	.word	0x20000278
 8008134:	20000260 	.word	0x20000260

08008138 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	4613      	mov	r3, r2
 8008144:	80fb      	strh	r3, [r7, #6]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800814c:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008154:	2b03      	cmp	r3, #3
 8008156:	d10c      	bne.n	8008172 <USBD_HID_SendReport+0x3a>
	{
		if (hhid->state == HID_IDLE)
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	7b1b      	ldrb	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d108      	bne.n	8008172 <USBD_HID_SendReport+0x3a>
		{
			hhid->state = HID_BUSY;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2201      	movs	r2, #1
 8008164:	731a      	strb	r2, [r3, #12]
			(void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	2181      	movs	r1, #129	; 0x81
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f001 fe28 	bl	8009dc2 <USBD_LL_Transmit>
		}
	}

	return (uint8_t)USBD_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2222      	movs	r2, #34	; 0x22
 8008188:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgFSDesc;
 800818a:	4b03      	ldr	r3, [pc, #12]	; (8008198 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	200001f4 	.word	0x200001f4

0800819c <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2222      	movs	r2, #34	; 0x22
 80081a8:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgHSDesc;
 80081aa:	4b03      	ldr	r3, [pc, #12]	; (80081b8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	20000218 	.word	0x20000218

080081bc <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2222      	movs	r2, #34	; 0x22
 80081c8:	801a      	strh	r2, [r3, #0]

	return USBD_HID_OtherSpeedCfgDesc;
 80081ca:	4b03      	ldr	r3, [pc, #12]	; (80081d8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	2000023c 	.word	0x2000023c

080081dc <USBD_HID_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
	UNUSED(epnum);
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ee:	2200      	movs	r2, #0
 80081f0:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	220a      	movs	r2, #10
 800820c:	801a      	strh	r2, [r3, #0]

	return USBD_HID_DeviceQualifierDesc;
 800820e:	4b03      	ldr	r3, [pc, #12]	; (800821c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	2000026c 	.word	0x2000026c

08008220 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	4613      	mov	r3, r2
 800822c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	e025      	b.n	8008284 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	79fa      	ldrb	r2, [r7, #7]
 8008276:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f001 fc6d 	bl	8009b58 <USBD_LL_Init>
 800827e:	4603      	mov	r3, r0
 8008280:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008282:	7dfb      	ldrb	r3, [r7, #23]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3718      	adds	r7, #24
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e010      	b.n	80082c6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b4:	f107 020e 	add.w	r2, r7, #14
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
 80082bc:	4602      	mov	r2, r0
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fc8a 	bl	8009bf0 <USBD_LL_Start>
 80082dc:	4603      	mov	r3, r0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008308:	2303      	movs	r3, #3
 800830a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008312:	2b00      	cmp	r3, #0
 8008314:	d009      	beq.n	800832a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	4611      	mov	r1, r2
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	4798      	blx	r3
 8008326:	4603      	mov	r3, r0
 8008328:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008346:	2b00      	cmp	r3, #0
 8008348:	d007      	beq.n	800835a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	78fa      	ldrb	r2, [r7, #3]
 8008354:	4611      	mov	r1, r2
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	4798      	blx	r3
  }

  return USBD_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 ff2c 	bl	80091d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800838a:	461a      	mov	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008398:	f003 031f 	and.w	r3, r3, #31
 800839c:	2b01      	cmp	r3, #1
 800839e:	d00e      	beq.n	80083be <USBD_LL_SetupStage+0x5a>
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d302      	bcc.n	80083aa <USBD_LL_SetupStage+0x46>
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d014      	beq.n	80083d2 <USBD_LL_SetupStage+0x6e>
 80083a8:	e01d      	b.n	80083e6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa18 	bl	80087e8 <USBD_StdDevReq>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73fb      	strb	r3, [r7, #15]
      break;
 80083bc:	e020      	b.n	8008400 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa7c 	bl	80088c4 <USBD_StdItfReq>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]
      break;
 80083d0:	e016      	b.n	8008400 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fab8 	bl	8008950 <USBD_StdEPReq>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73fb      	strb	r3, [r7, #15]
      break;
 80083e4:	e00c      	b.n	8008400 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 fc5b 	bl	8009cb0 <USBD_LL_StallEP>
 80083fa:	4603      	mov	r3, r0
 80083fc:	73fb      	strb	r3, [r7, #15]
      break;
 80083fe:	bf00      	nop
  }

  return ret;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b086      	sub	sp, #24
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	460b      	mov	r3, r1
 8008414:	607a      	str	r2, [r7, #4]
 8008416:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008418:	7afb      	ldrb	r3, [r7, #11]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d137      	bne.n	800848e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008424:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800842c:	2b03      	cmp	r3, #3
 800842e:	d14a      	bne.n	80084c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	429a      	cmp	r2, r3
 800843a:	d913      	bls.n	8008464 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	1ad2      	subs	r2, r2, r3
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	4293      	cmp	r3, r2
 8008454:	bf28      	it	cs
 8008456:	4613      	movcs	r3, r2
 8008458:	461a      	mov	r2, r3
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 ffad 	bl	80093bc <USBD_CtlContinueRx>
 8008462:	e030      	b.n	80084c6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008476:	2b03      	cmp	r3, #3
 8008478:	d105      	bne.n	8008486 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 ffa9 	bl	80093de <USBD_CtlSendStatus>
 800848c:	e01b      	b.n	80084c6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d013      	beq.n	80084c2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d10e      	bne.n	80084c2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	7afa      	ldrb	r2, [r7, #11]
 80084ae:	4611      	mov	r1, r2
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	4798      	blx	r3
 80084b4:	4603      	mov	r3, r0
 80084b6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	e002      	b.n	80084c8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e000      	b.n	80084c8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	460b      	mov	r3, r1
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80084de:	7afb      	ldrb	r3, [r7, #11]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d16a      	bne.n	80085ba <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3314      	adds	r3, #20
 80084e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d155      	bne.n	80085a0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	689a      	ldr	r2, [r3, #8]
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d914      	bls.n	800852a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	1ad2      	subs	r2, r2, r3
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	461a      	mov	r2, r3
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 ff22 	bl	8009360 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800851c:	2300      	movs	r3, #0
 800851e:	2200      	movs	r2, #0
 8008520:	2100      	movs	r1, #0
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f001 fc6e 	bl	8009e04 <USBD_LL_PrepareReceive>
 8008528:	e03a      	b.n	80085a0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	68da      	ldr	r2, [r3, #12]
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	429a      	cmp	r2, r3
 8008534:	d11c      	bne.n	8008570 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800853e:	429a      	cmp	r2, r3
 8008540:	d316      	bcc.n	8008570 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800854c:	429a      	cmp	r2, r3
 800854e:	d20f      	bcs.n	8008570 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008550:	2200      	movs	r2, #0
 8008552:	2100      	movs	r1, #0
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 ff03 	bl	8009360 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008562:	2300      	movs	r3, #0
 8008564:	2200      	movs	r2, #0
 8008566:	2100      	movs	r1, #0
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f001 fc4b 	bl	8009e04 <USBD_LL_PrepareReceive>
 800856e:	e017      	b.n	80085a0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008582:	2b03      	cmp	r3, #3
 8008584:	d105      	bne.n	8008592 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008592:	2180      	movs	r1, #128	; 0x80
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f001 fb8b 	bl	8009cb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 ff32 	bl	8009404 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d123      	bne.n	80085f2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f7ff fe9b 	bl	80082e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085b8:	e01b      	b.n	80085f2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d013      	beq.n	80085ee <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d10e      	bne.n	80085ee <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	7afa      	ldrb	r2, [r7, #11]
 80085da:	4611      	mov	r1, r2
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	4798      	blx	r3
 80085e0:	4603      	mov	r3, r0
 80085e2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	e002      	b.n	80085f4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e000      	b.n	80085f4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008628:	2b00      	cmp	r3, #0
 800862a:	d009      	beq.n	8008640 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6852      	ldr	r2, [r2, #4]
 8008638:	b2d2      	uxtb	r2, r2
 800863a:	4611      	mov	r1, r2
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008640:	2340      	movs	r3, #64	; 0x40
 8008642:	2200      	movs	r2, #0
 8008644:	2100      	movs	r1, #0
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 faed 	bl	8009c26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2240      	movs	r2, #64	; 0x40
 8008658:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800865c:	2340      	movs	r3, #64	; 0x40
 800865e:	2200      	movs	r2, #0
 8008660:	2180      	movs	r1, #128	; 0x80
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f001 fadf 	bl	8009c26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2240      	movs	r2, #64	; 0x40
 8008672:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800867e:	b480      	push	{r7}
 8008680:	b083      	sub	sp, #12
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	460b      	mov	r3, r1
 8008688:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	78fa      	ldrb	r2, [r7, #3]
 800868e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2204      	movs	r2, #4
 80086b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d105      	bne.n	80086e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008702:	2b03      	cmp	r3, #3
 8008704:	d10b      	bne.n	800871e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d005      	beq.n	800871e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	460b      	mov	r3, r1
 800874c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6852      	ldr	r2, [r2, #4]
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	4611      	mov	r1, r2
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	4798      	blx	r3
  }

  return USBD_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b087      	sub	sp, #28
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	3301      	adds	r3, #1
 80087c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80087c8:	8a3b      	ldrh	r3, [r7, #16]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	b21a      	sxth	r2, r3
 80087ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	b21b      	sxth	r3, r3
 80087d6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087d8:	89fb      	ldrh	r3, [r7, #14]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
	...

080087e8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d004      	beq.n	800880c <USBD_StdDevReq+0x24>
 8008802:	2b40      	cmp	r3, #64	; 0x40
 8008804:	d002      	beq.n	800880c <USBD_StdDevReq+0x24>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <USBD_StdDevReq+0x38>
 800880a:	e050      	b.n	80088ae <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	4798      	blx	r3
 800881a:	4603      	mov	r3, r0
 800881c:	73fb      	strb	r3, [r7, #15]
    break;
 800881e:	e04b      	b.n	80088b8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	785b      	ldrb	r3, [r3, #1]
 8008824:	2b09      	cmp	r3, #9
 8008826:	d83c      	bhi.n	80088a2 <USBD_StdDevReq+0xba>
 8008828:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <USBD_StdDevReq+0x48>)
 800882a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882e:	bf00      	nop
 8008830:	08008885 	.word	0x08008885
 8008834:	08008899 	.word	0x08008899
 8008838:	080088a3 	.word	0x080088a3
 800883c:	0800888f 	.word	0x0800888f
 8008840:	080088a3 	.word	0x080088a3
 8008844:	08008863 	.word	0x08008863
 8008848:	08008859 	.word	0x08008859
 800884c:	080088a3 	.word	0x080088a3
 8008850:	0800887b 	.word	0x0800887b
 8008854:	0800886d 	.word	0x0800886d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f9ce 	bl	8008bfc <USBD_GetDescriptor>
      break;
 8008860:	e024      	b.n	80088ac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fb33 	bl	8008ed0 <USBD_SetAddress>
      break;
 800886a:	e01f      	b.n	80088ac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fb70 	bl	8008f54 <USBD_SetConfig>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]
      break;
 8008878:	e018      	b.n	80088ac <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fc0d 	bl	800909c <USBD_GetConfig>
      break;
 8008882:	e013      	b.n	80088ac <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fc3c 	bl	8009104 <USBD_GetStatus>
      break;
 800888c:	e00e      	b.n	80088ac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fc6a 	bl	800916a <USBD_SetFeature>
      break;
 8008896:	e009      	b.n	80088ac <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fc79 	bl	8009192 <USBD_ClrFeature>
      break;
 80088a0:	e004      	b.n	80088ac <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fccf 	bl	8009248 <USBD_CtlError>
      break;
 80088aa:	bf00      	nop
    }
    break;
 80088ac:	e004      	b.n	80088b8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fcc9 	bl	8009248 <USBD_CtlError>
    break;
 80088b6:	bf00      	nop
  }

  return ret;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop

080088c4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088da:	2b20      	cmp	r3, #32
 80088dc:	d003      	beq.n	80088e6 <USBD_StdItfReq+0x22>
 80088de:	2b40      	cmp	r3, #64	; 0x40
 80088e0:	d001      	beq.n	80088e6 <USBD_StdItfReq+0x22>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d12a      	bne.n	800893c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ec:	3b01      	subs	r3, #1
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d81d      	bhi.n	800892e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	889b      	ldrh	r3, [r3, #4]
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d813      	bhi.n	8008924 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
 800890a:	4603      	mov	r3, r0
 800890c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	88db      	ldrh	r3, [r3, #6]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d110      	bne.n	8008938 <USBD_StdItfReq+0x74>
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10d      	bne.n	8008938 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fd5e 	bl	80093de <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008922:	e009      	b.n	8008938 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fc8e 	bl	8009248 <USBD_CtlError>
      break;
 800892c:	e004      	b.n	8008938 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fc89 	bl	8009248 <USBD_CtlError>
      break;
 8008936:	e000      	b.n	800893a <USBD_StdItfReq+0x76>
      break;
 8008938:	bf00      	nop
    }
    break;
 800893a:	e004      	b.n	8008946 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fc82 	bl	8009248 <USBD_CtlError>
    break;
 8008944:	bf00      	nop
  }

  return ret;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	889b      	ldrh	r3, [r3, #4]
 8008962:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800896c:	2b20      	cmp	r3, #32
 800896e:	d004      	beq.n	800897a <USBD_StdEPReq+0x2a>
 8008970:	2b40      	cmp	r3, #64	; 0x40
 8008972:	d002      	beq.n	800897a <USBD_StdEPReq+0x2a>
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00a      	beq.n	800898e <USBD_StdEPReq+0x3e>
 8008978:	e135      	b.n	8008be6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	4798      	blx	r3
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
    break;
 800898c:	e130      	b.n	8008bf0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	785b      	ldrb	r3, [r3, #1]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d03e      	beq.n	8008a14 <USBD_StdEPReq+0xc4>
 8008996:	2b03      	cmp	r3, #3
 8008998:	d002      	beq.n	80089a0 <USBD_StdEPReq+0x50>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d077      	beq.n	8008a8e <USBD_StdEPReq+0x13e>
 800899e:	e11c      	b.n	8008bda <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d002      	beq.n	80089b0 <USBD_StdEPReq+0x60>
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d015      	beq.n	80089da <USBD_StdEPReq+0x8a>
 80089ae:	e02b      	b.n	8008a08 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00c      	beq.n	80089d0 <USBD_StdEPReq+0x80>
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b80      	cmp	r3, #128	; 0x80
 80089ba:	d009      	beq.n	80089d0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	4619      	mov	r1, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 f975 	bl	8009cb0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089c6:	2180      	movs	r1, #128	; 0x80
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f971 	bl	8009cb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80089ce:	e020      	b.n	8008a12 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fc38 	bl	8009248 <USBD_CtlError>
        break;
 80089d8:	e01b      	b.n	8008a12 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	885b      	ldrh	r3, [r3, #2]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10e      	bne.n	8008a00 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <USBD_StdEPReq+0xb0>
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	2b80      	cmp	r3, #128	; 0x80
 80089ec:	d008      	beq.n	8008a00 <USBD_StdEPReq+0xb0>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	88db      	ldrh	r3, [r3, #6]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d104      	bne.n	8008a00 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 f958 	bl	8009cb0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fcec 	bl	80093de <USBD_CtlSendStatus>

        break;
 8008a06:	e004      	b.n	8008a12 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fc1c 	bl	8009248 <USBD_CtlError>
        break;
 8008a10:	bf00      	nop
      }
      break;
 8008a12:	e0e7      	b.n	8008be4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d002      	beq.n	8008a24 <USBD_StdEPReq+0xd4>
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d015      	beq.n	8008a4e <USBD_StdEPReq+0xfe>
 8008a22:	e02d      	b.n	8008a80 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00c      	beq.n	8008a44 <USBD_StdEPReq+0xf4>
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b80      	cmp	r3, #128	; 0x80
 8008a2e:	d009      	beq.n	8008a44 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f93b 	bl	8009cb0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a3a:	2180      	movs	r1, #128	; 0x80
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f001 f937 	bl	8009cb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008a42:	e023      	b.n	8008a8c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fbfe 	bl	8009248 <USBD_CtlError>
        break;
 8008a4c:	e01e      	b.n	8008a8c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	885b      	ldrh	r3, [r3, #2]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d119      	bne.n	8008a8a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d004      	beq.n	8008a6a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f001 f942 	bl	8009cee <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fcb7 	bl	80093de <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	4798      	blx	r3
        }
        break;
 8008a7e:	e004      	b.n	8008a8a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fbe0 	bl	8009248 <USBD_CtlError>
        break;
 8008a88:	e000      	b.n	8008a8c <USBD_StdEPReq+0x13c>
        break;
 8008a8a:	bf00      	nop
      }
      break;
 8008a8c:	e0aa      	b.n	8008be4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d002      	beq.n	8008a9e <USBD_StdEPReq+0x14e>
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d032      	beq.n	8008b02 <USBD_StdEPReq+0x1b2>
 8008a9c:	e097      	b.n	8008bce <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d007      	beq.n	8008ab4 <USBD_StdEPReq+0x164>
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2b80      	cmp	r3, #128	; 0x80
 8008aa8:	d004      	beq.n	8008ab4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fbcb 	bl	8009248 <USBD_CtlError>
          break;
 8008ab2:	e091      	b.n	8008bd8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	da0b      	bge.n	8008ad4 <USBD_StdEPReq+0x184>
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	3310      	adds	r3, #16
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	4413      	add	r3, r2
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	e00b      	b.n	8008aec <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ada:	4613      	mov	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	4413      	add	r3, r2
 8008aea:	3304      	adds	r3, #4
 8008aec:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2202      	movs	r2, #2
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fc15 	bl	800932a <USBD_CtlSendData>
        break;
 8008b00:	e06a      	b.n	8008bd8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da11      	bge.n	8008b2e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	f003 020f 	and.w	r2, r3, #15
 8008b10:	6879      	ldr	r1, [r7, #4]
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	3324      	adds	r3, #36	; 0x24
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d117      	bne.n	8008b54 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fb8e 	bl	8009248 <USBD_CtlError>
            break;
 8008b2c:	e054      	b.n	8008bd8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	f003 020f 	and.w	r2, r3, #15
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	440b      	add	r3, r1
 8008b40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d104      	bne.n	8008b54 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fb7b 	bl	8009248 <USBD_CtlError>
            break;
 8008b52:	e041      	b.n	8008bd8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	da0b      	bge.n	8008b74 <USBD_StdEPReq+0x224>
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	3310      	adds	r3, #16
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	4413      	add	r3, r2
 8008b70:	3304      	adds	r3, #4
 8008b72:	e00b      	b.n	8008b8c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b8e:	7bbb      	ldrb	r3, [r7, #14]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <USBD_StdEPReq+0x24a>
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2b80      	cmp	r3, #128	; 0x80
 8008b98:	d103      	bne.n	8008ba2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	e00e      	b.n	8008bc0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 f8c0 	bl	8009d2c <USBD_LL_IsStallEP>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	e002      	b.n	8008bc0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fbaf 	bl	800932a <USBD_CtlSendData>
          break;
 8008bcc:	e004      	b.n	8008bd8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fb39 	bl	8009248 <USBD_CtlError>
        break;
 8008bd6:	bf00      	nop
      }
      break;
 8008bd8:	e004      	b.n	8008be4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fb33 	bl	8009248 <USBD_CtlError>
      break;
 8008be2:	bf00      	nop
    }
    break;
 8008be4:	e004      	b.n	8008bf0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fb2d 	bl	8009248 <USBD_CtlError>
    break;
 8008bee:	bf00      	nop
  }

  return ret;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	885b      	ldrh	r3, [r3, #2]
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	2b06      	cmp	r3, #6
 8008c1e:	f200 8128 	bhi.w	8008e72 <USBD_GetDescriptor+0x276>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <USBD_GetDescriptor+0x2c>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c45 	.word	0x08008c45
 8008c2c:	08008c5d 	.word	0x08008c5d
 8008c30:	08008c9d 	.word	0x08008c9d
 8008c34:	08008e73 	.word	0x08008e73
 8008c38:	08008e73 	.word	0x08008e73
 8008c3c:	08008e13 	.word	0x08008e13
 8008c40:	08008e3f 	.word	0x08008e3f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	7c12      	ldrb	r2, [r2, #16]
 8008c50:	f107 0108 	add.w	r1, r7, #8
 8008c54:	4610      	mov	r0, r2
 8008c56:	4798      	blx	r3
 8008c58:	60f8      	str	r0, [r7, #12]
    break;
 8008c5a:	e112      	b.n	8008e82 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	7c1b      	ldrb	r3, [r3, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10d      	bne.n	8008c80 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6c:	f107 0208 	add.w	r2, r7, #8
 8008c70:	4610      	mov	r0, r2
 8008c72:	4798      	blx	r3
 8008c74:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008c7e:	e100      	b.n	8008e82 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c88:	f107 0208 	add.w	r2, r7, #8
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4798      	blx	r3
 8008c90:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3301      	adds	r3, #1
 8008c96:	2202      	movs	r2, #2
 8008c98:	701a      	strb	r2, [r3, #0]
    break;
 8008c9a:	e0f2      	b.n	8008e82 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	885b      	ldrh	r3, [r3, #2]
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b05      	cmp	r3, #5
 8008ca4:	f200 80ac 	bhi.w	8008e00 <USBD_GetDescriptor+0x204>
 8008ca8:	a201      	add	r2, pc, #4	; (adr r2, 8008cb0 <USBD_GetDescriptor+0xb4>)
 8008caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cae:	bf00      	nop
 8008cb0:	08008cc9 	.word	0x08008cc9
 8008cb4:	08008cfd 	.word	0x08008cfd
 8008cb8:	08008d31 	.word	0x08008d31
 8008cbc:	08008d65 	.word	0x08008d65
 8008cc0:	08008d99 	.word	0x08008d99
 8008cc4:	08008dcd 	.word	0x08008dcd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	7c12      	ldrb	r2, [r2, #16]
 8008ce0:	f107 0108 	add.w	r1, r7, #8
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4798      	blx	r3
 8008ce8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cea:	e091      	b.n	8008e10 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 faaa 	bl	8009248 <USBD_CtlError>
        err++;
 8008cf4:	7afb      	ldrb	r3, [r7, #11]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	72fb      	strb	r3, [r7, #11]
      break;
 8008cfa:	e089      	b.n	8008e10 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	7c12      	ldrb	r2, [r2, #16]
 8008d14:	f107 0108 	add.w	r1, r7, #8
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4798      	blx	r3
 8008d1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d1e:	e077      	b.n	8008e10 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa90 	bl	8009248 <USBD_CtlError>
        err++;
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	72fb      	strb	r3, [r7, #11]
      break;
 8008d2e:	e06f      	b.n	8008e10 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00b      	beq.n	8008d54 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	7c12      	ldrb	r2, [r2, #16]
 8008d48:	f107 0108 	add.w	r1, r7, #8
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4798      	blx	r3
 8008d50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d52:	e05d      	b.n	8008e10 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa76 	bl	8009248 <USBD_CtlError>
        err++;
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	72fb      	strb	r3, [r7, #11]
      break;
 8008d62:	e055      	b.n	8008e10 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00b      	beq.n	8008d88 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	7c12      	ldrb	r2, [r2, #16]
 8008d7c:	f107 0108 	add.w	r1, r7, #8
 8008d80:	4610      	mov	r0, r2
 8008d82:	4798      	blx	r3
 8008d84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d86:	e043      	b.n	8008e10 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa5c 	bl	8009248 <USBD_CtlError>
        err++;
 8008d90:	7afb      	ldrb	r3, [r7, #11]
 8008d92:	3301      	adds	r3, #1
 8008d94:	72fb      	strb	r3, [r7, #11]
      break;
 8008d96:	e03b      	b.n	8008e10 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	7c12      	ldrb	r2, [r2, #16]
 8008db0:	f107 0108 	add.w	r1, r7, #8
 8008db4:	4610      	mov	r0, r2
 8008db6:	4798      	blx	r3
 8008db8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dba:	e029      	b.n	8008e10 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fa42 	bl	8009248 <USBD_CtlError>
        err++;
 8008dc4:	7afb      	ldrb	r3, [r7, #11]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	72fb      	strb	r3, [r7, #11]
      break;
 8008dca:	e021      	b.n	8008e10 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00b      	beq.n	8008df0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	7c12      	ldrb	r2, [r2, #16]
 8008de4:	f107 0108 	add.w	r1, r7, #8
 8008de8:	4610      	mov	r0, r2
 8008dea:	4798      	blx	r3
 8008dec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dee:	e00f      	b.n	8008e10 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fa28 	bl	8009248 <USBD_CtlError>
        err++;
 8008df8:	7afb      	ldrb	r3, [r7, #11]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	72fb      	strb	r3, [r7, #11]
      break;
 8008dfe:	e007      	b.n	8008e10 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fa20 	bl	8009248 <USBD_CtlError>
      err++;
 8008e08:	7afb      	ldrb	r3, [r7, #11]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008e0e:	bf00      	nop
    }
    break;
 8008e10:	e037      	b.n	8008e82 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7c1b      	ldrb	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d109      	bne.n	8008e2e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e22:	f107 0208 	add.w	r2, r7, #8
 8008e26:	4610      	mov	r0, r2
 8008e28:	4798      	blx	r3
 8008e2a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e2c:	e029      	b.n	8008e82 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fa09 	bl	8009248 <USBD_CtlError>
      err++;
 8008e36:	7afb      	ldrb	r3, [r7, #11]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	72fb      	strb	r3, [r7, #11]
    break;
 8008e3c:	e021      	b.n	8008e82 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	7c1b      	ldrb	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10d      	bne.n	8008e62 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	f107 0208 	add.w	r2, r7, #8
 8008e52:	4610      	mov	r0, r2
 8008e54:	4798      	blx	r3
 8008e56:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	2207      	movs	r2, #7
 8008e5e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e60:	e00f      	b.n	8008e82 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f9ef 	bl	8009248 <USBD_CtlError>
      err++;
 8008e6a:	7afb      	ldrb	r3, [r7, #11]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	72fb      	strb	r3, [r7, #11]
    break;
 8008e70:	e007      	b.n	8008e82 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f9e7 	bl	8009248 <USBD_CtlError>
    err++;
 8008e7a:	7afb      	ldrb	r3, [r7, #11]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	72fb      	strb	r3, [r7, #11]
    break;
 8008e80:	bf00      	nop
  }

  if (err != 0U)
 8008e82:	7afb      	ldrb	r3, [r7, #11]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d11e      	bne.n	8008ec6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	88db      	ldrh	r3, [r3, #6]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d016      	beq.n	8008ebe <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008e90:	893b      	ldrh	r3, [r7, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00e      	beq.n	8008eb4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	88da      	ldrh	r2, [r3, #6]
 8008e9a:	893b      	ldrh	r3, [r7, #8]
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	bf28      	it	cs
 8008ea0:	4613      	movcs	r3, r2
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ea6:	893b      	ldrh	r3, [r7, #8]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	68f9      	ldr	r1, [r7, #12]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fa3c 	bl	800932a <USBD_CtlSendData>
 8008eb2:	e009      	b.n	8008ec8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f9c6 	bl	8009248 <USBD_CtlError>
 8008ebc:	e004      	b.n	8008ec8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fa8d 	bl	80093de <USBD_CtlSendStatus>
 8008ec4:	e000      	b.n	8008ec8 <USBD_GetDescriptor+0x2cc>
    return;
 8008ec6:	bf00      	nop
    }
  }
}
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop

08008ed0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	889b      	ldrh	r3, [r3, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d130      	bne.n	8008f44 <USBD_SetAddress+0x74>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	88db      	ldrh	r3, [r3, #6]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d12c      	bne.n	8008f44 <USBD_SetAddress+0x74>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	885b      	ldrh	r3, [r3, #2]
 8008eee:	2b7f      	cmp	r3, #127	; 0x7f
 8008ef0:	d828      	bhi.n	8008f44 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	885b      	ldrh	r3, [r3, #2]
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008efc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f04:	2b03      	cmp	r3, #3
 8008f06:	d104      	bne.n	8008f12 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f99c 	bl	8009248 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f10:	e01c      	b.n	8008f4c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	7bfa      	ldrb	r2, [r7, #15]
 8008f16:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 ff30 	bl	8009d84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fa5a 	bl	80093de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d004      	beq.n	8008f3a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f38:	e008      	b.n	8008f4c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f42:	e003      	b.n	8008f4c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f97e 	bl	8009248 <USBD_CtlError>
  }
}
 8008f4c:	bf00      	nop
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	885b      	ldrh	r3, [r3, #2]
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	4b4b      	ldr	r3, [pc, #300]	; (8009098 <USBD_SetConfig+0x144>)
 8008f6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f6c:	4b4a      	ldr	r3, [pc, #296]	; (8009098 <USBD_SetConfig+0x144>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d905      	bls.n	8008f80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f966 	bl	8009248 <USBD_CtlError>
    return USBD_FAIL;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e087      	b.n	8009090 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d002      	beq.n	8008f90 <USBD_SetConfig+0x3c>
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d025      	beq.n	8008fda <USBD_SetConfig+0x86>
 8008f8e:	e071      	b.n	8009074 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008f90:	4b41      	ldr	r3, [pc, #260]	; (8009098 <USBD_SetConfig+0x144>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d01c      	beq.n	8008fd2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008f98:	4b3f      	ldr	r3, [pc, #252]	; (8009098 <USBD_SetConfig+0x144>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fa2:	4b3d      	ldr	r3, [pc, #244]	; (8009098 <USBD_SetConfig+0x144>)
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff f9a7 	bl	80082fc <USBD_SetClassConfig>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d004      	beq.n	8008fc2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f944 	bl	8009248 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008fc0:	e065      	b.n	800908e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fa0b 	bl	80093de <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2203      	movs	r2, #3
 8008fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008fd0:	e05d      	b.n	800908e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fa03 	bl	80093de <USBD_CtlSendStatus>
    break;
 8008fd8:	e059      	b.n	800908e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008fda:	4b2f      	ldr	r3, [pc, #188]	; (8009098 <USBD_SetConfig+0x144>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d112      	bne.n	8009008 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008fea:	4b2b      	ldr	r3, [pc, #172]	; (8009098 <USBD_SetConfig+0x144>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ff4:	4b28      	ldr	r3, [pc, #160]	; (8009098 <USBD_SetConfig+0x144>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff f99a 	bl	8008334 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f9ec 	bl	80093de <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009006:	e042      	b.n	800908e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009008:	4b23      	ldr	r3, [pc, #140]	; (8009098 <USBD_SetConfig+0x144>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	429a      	cmp	r2, r3
 8009014:	d02a      	beq.n	800906c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	b2db      	uxtb	r3, r3
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff f988 	bl	8008334 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009024:	4b1c      	ldr	r3, [pc, #112]	; (8009098 <USBD_SetConfig+0x144>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800902e:	4b1a      	ldr	r3, [pc, #104]	; (8009098 <USBD_SetConfig+0x144>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff f961 	bl	80082fc <USBD_SetClassConfig>
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00f      	beq.n	8009064 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f8fe 	bl	8009248 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff f96d 	bl	8008334 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2202      	movs	r2, #2
 800905e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009062:	e014      	b.n	800908e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f9ba 	bl	80093de <USBD_CtlSendStatus>
    break;
 800906a:	e010      	b.n	800908e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f9b6 	bl	80093de <USBD_CtlSendStatus>
    break;
 8009072:	e00c      	b.n	800908e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f8e6 	bl	8009248 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800907c:	4b06      	ldr	r3, [pc, #24]	; (8009098 <USBD_SetConfig+0x144>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff f956 	bl	8008334 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009088:	2303      	movs	r3, #3
 800908a:	73fb      	strb	r3, [r7, #15]
    break;
 800908c:	bf00      	nop
  }

  return ret;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20000990 	.word	0x20000990

0800909c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	88db      	ldrh	r3, [r3, #6]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d004      	beq.n	80090b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f8c9 	bl	8009248 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80090b6:	e021      	b.n	80090fc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090be:	2b01      	cmp	r3, #1
 80090c0:	db17      	blt.n	80090f2 <USBD_GetConfig+0x56>
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	dd02      	ble.n	80090cc <USBD_GetConfig+0x30>
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d00b      	beq.n	80090e2 <USBD_GetConfig+0x46>
 80090ca:	e012      	b.n	80090f2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	3308      	adds	r3, #8
 80090d6:	2201      	movs	r2, #1
 80090d8:	4619      	mov	r1, r3
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f925 	bl	800932a <USBD_CtlSendData>
      break;
 80090e0:	e00c      	b.n	80090fc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	3304      	adds	r3, #4
 80090e6:	2201      	movs	r2, #1
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f91d 	bl	800932a <USBD_CtlSendData>
      break;
 80090f0:	e004      	b.n	80090fc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f8a7 	bl	8009248 <USBD_CtlError>
      break;
 80090fa:	bf00      	nop
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009114:	3b01      	subs	r3, #1
 8009116:	2b02      	cmp	r3, #2
 8009118:	d81e      	bhi.n	8009158 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	88db      	ldrh	r3, [r3, #6]
 800911e:	2b02      	cmp	r3, #2
 8009120:	d004      	beq.n	800912c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f88f 	bl	8009248 <USBD_CtlError>
      break;
 800912a:	e01a      	b.n	8009162 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009138:	2b00      	cmp	r3, #0
 800913a:	d005      	beq.n	8009148 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f043 0202 	orr.w	r2, r3, #2
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	330c      	adds	r3, #12
 800914c:	2202      	movs	r2, #2
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f8ea 	bl	800932a <USBD_CtlSendData>
    break;
 8009156:	e004      	b.n	8009162 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f874 	bl	8009248 <USBD_CtlError>
    break;
 8009160:	bf00      	nop
  }
}
 8009162:	bf00      	nop
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	885b      	ldrh	r3, [r3, #2]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d106      	bne.n	800918a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f92a 	bl	80093de <USBD_CtlSendStatus>
  }
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a2:	3b01      	subs	r3, #1
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d80b      	bhi.n	80091c0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	885b      	ldrh	r3, [r3, #2]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d10c      	bne.n	80091ca <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f910 	bl	80093de <USBD_CtlSendStatus>
      }
      break;
 80091be:	e004      	b.n	80091ca <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f840 	bl	8009248 <USBD_CtlError>
      break;
 80091c8:	e000      	b.n	80091cc <USBD_ClrFeature+0x3a>
      break;
 80091ca:	bf00      	nop
  }
}
 80091cc:	bf00      	nop
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	781a      	ldrb	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	781a      	ldrb	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	3301      	adds	r3, #1
 80091fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f7ff fad3 	bl	80087aa <SWAPBYTE>
 8009204:	4603      	mov	r3, r0
 8009206:	461a      	mov	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	3301      	adds	r3, #1
 8009210:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3301      	adds	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f7ff fac6 	bl	80087aa <SWAPBYTE>
 800921e:	4603      	mov	r3, r0
 8009220:	461a      	mov	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3301      	adds	r3, #1
 800922a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f7ff fab9 	bl	80087aa <SWAPBYTE>
 8009238:	4603      	mov	r3, r0
 800923a:	461a      	mov	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	80da      	strh	r2, [r3, #6]
}
 8009240:	bf00      	nop
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009252:	2180      	movs	r1, #128	; 0x80
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fd2b 	bl	8009cb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800925a:	2100      	movs	r1, #0
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fd27 	bl	8009cb0 <USBD_LL_StallEP>
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b086      	sub	sp, #24
 800926e:	af00      	add	r7, sp, #0
 8009270:	60f8      	str	r0, [r7, #12]
 8009272:	60b9      	str	r1, [r7, #8]
 8009274:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d036      	beq.n	80092ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009284:	6938      	ldr	r0, [r7, #16]
 8009286:	f000 f836 	bl	80092f6 <USBD_GetLen>
 800928a:	4603      	mov	r3, r0
 800928c:	3301      	adds	r3, #1
 800928e:	b29b      	uxth	r3, r3
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	b29a      	uxth	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	4413      	add	r3, r2
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	7812      	ldrb	r2, [r2, #0]
 80092a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80092a4:	7dfb      	ldrb	r3, [r7, #23]
 80092a6:	3301      	adds	r3, #1
 80092a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	4413      	add	r3, r2
 80092b0:	2203      	movs	r2, #3
 80092b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
 80092b6:	3301      	adds	r3, #1
 80092b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80092ba:	e013      	b.n	80092e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	4413      	add	r3, r2
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	7812      	ldrb	r2, [r2, #0]
 80092c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	3301      	adds	r3, #1
 80092cc:	613b      	str	r3, [r7, #16]
    idx++;
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	3301      	adds	r3, #1
 80092d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	4413      	add	r3, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80092de:	7dfb      	ldrb	r3, [r7, #23]
 80092e0:	3301      	adds	r3, #1
 80092e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e7      	bne.n	80092bc <USBD_GetString+0x52>
 80092ec:	e000      	b.n	80092f0 <USBD_GetString+0x86>
    return;
 80092ee:	bf00      	nop
  }
}
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b085      	sub	sp, #20
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009306:	e005      	b.n	8009314 <USBD_GetLen+0x1e>
  {
    len++;
 8009308:	7bfb      	ldrb	r3, [r7, #15]
 800930a:	3301      	adds	r3, #1
 800930c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	3301      	adds	r3, #1
 8009312:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1f5      	bne.n	8009308 <USBD_GetLen+0x12>
  }

  return len;
 800931c:	7bfb      	ldrb	r3, [r7, #15]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	60f8      	str	r0, [r7, #12]
 8009332:	60b9      	str	r1, [r7, #8]
 8009334:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2202      	movs	r2, #2
 800933a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	2100      	movs	r1, #0
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 fd36 	bl	8009dc2 <USBD_LL_Transmit>

  return USBD_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	2100      	movs	r1, #0
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f000 fd25 	bl	8009dc2 <USBD_LL_Transmit>

  return USBD_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	60b9      	str	r1, [r7, #8]
 800938c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2203      	movs	r2, #3
 8009392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	2100      	movs	r1, #0
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 fd29 	bl	8009e04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	2100      	movs	r1, #0
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 fd18 	bl	8009e04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b082      	sub	sp, #8
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2204      	movs	r2, #4
 80093ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093ee:	2300      	movs	r3, #0
 80093f0:	2200      	movs	r2, #0
 80093f2:	2100      	movs	r1, #0
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fce4 	bl	8009dc2 <USBD_LL_Transmit>

  return USBD_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2205      	movs	r2, #5
 8009410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009414:	2300      	movs	r3, #0
 8009416:	2200      	movs	r2, #0
 8009418:	2100      	movs	r1, #0
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fcf2 	bl	8009e04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <MX_USB_DEVICE_Init>:
/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(uint8_t flag)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if(flag){
 8009436:	79fb      	ldrb	r3, [r7, #7]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d024      	beq.n	8009486 <MX_USB_DEVICE_Init+0x5a>
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc_SETUP, DEVICE_FS) != USBD_OK)
 800943c:	2200      	movs	r2, #0
 800943e:	4922      	ldr	r1, [pc, #136]	; (80094c8 <MX_USB_DEVICE_Init+0x9c>)
 8009440:	4822      	ldr	r0, [pc, #136]	; (80094cc <MX_USB_DEVICE_Init+0xa0>)
 8009442:	f7fe feed 	bl	8008220 <USBD_Init>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <MX_USB_DEVICE_Init+0x24>
		{
			Error_Handler();
 800944c:	f7f7 fed0 	bl	80011f0 <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009450:	491f      	ldr	r1, [pc, #124]	; (80094d0 <MX_USB_DEVICE_Init+0xa4>)
 8009452:	481e      	ldr	r0, [pc, #120]	; (80094cc <MX_USB_DEVICE_Init+0xa0>)
 8009454:	f7fe ff1a 	bl	800828c <USBD_RegisterClass>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <MX_USB_DEVICE_Init+0x36>
		{
			Error_Handler();
 800945e:	f7f7 fec7 	bl	80011f0 <Error_Handler>
		}
		if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009462:	491c      	ldr	r1, [pc, #112]	; (80094d4 <MX_USB_DEVICE_Init+0xa8>)
 8009464:	4819      	ldr	r0, [pc, #100]	; (80094cc <MX_USB_DEVICE_Init+0xa0>)
 8009466:	f7fe fc79 	bl	8007d5c <USBD_CDC_RegisterInterface>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <MX_USB_DEVICE_Init+0x48>
		{
			Error_Handler();
 8009470:	f7f7 febe 	bl	80011f0 <Error_Handler>
		}
		if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009474:	4815      	ldr	r0, [pc, #84]	; (80094cc <MX_USB_DEVICE_Init+0xa0>)
 8009476:	f7fe ff2a 	bl	80082ce <USBD_Start>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01e      	beq.n	80094be <MX_USB_DEVICE_Init+0x92>
		{
			Error_Handler();
 8009480:	f7f7 feb6 	bl	80011f0 <Error_Handler>
		}
		return;
 8009484:	e01b      	b.n	80094be <MX_USB_DEVICE_Init+0x92>
	}

	/* USER CODE END USB_DEVICE_Init_PreTreatment */

	/* Init Device Library, add supported class and start the library. */
	if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009486:	2200      	movs	r2, #0
 8009488:	4913      	ldr	r1, [pc, #76]	; (80094d8 <MX_USB_DEVICE_Init+0xac>)
 800948a:	4810      	ldr	r0, [pc, #64]	; (80094cc <MX_USB_DEVICE_Init+0xa0>)
 800948c:	f7fe fec8 	bl	8008220 <USBD_Init>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <MX_USB_DEVICE_Init+0x6e>
	{
		Error_Handler();
 8009496:	f7f7 feab 	bl	80011f0 <Error_Handler>
	}
	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800949a:	4910      	ldr	r1, [pc, #64]	; (80094dc <MX_USB_DEVICE_Init+0xb0>)
 800949c:	480b      	ldr	r0, [pc, #44]	; (80094cc <MX_USB_DEVICE_Init+0xa0>)
 800949e:	f7fe fef5 	bl	800828c <USBD_RegisterClass>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <MX_USB_DEVICE_Init+0x80>
	{
		Error_Handler();
 80094a8:	f7f7 fea2 	bl	80011f0 <Error_Handler>
	}
	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094ac:	4807      	ldr	r0, [pc, #28]	; (80094cc <MX_USB_DEVICE_Init+0xa0>)
 80094ae:	f7fe ff0e 	bl	80082ce <USBD_Start>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d003      	beq.n	80094c0 <MX_USB_DEVICE_Init+0x94>
	{
		Error_Handler();
 80094b8:	f7f7 fe9a 	bl	80011f0 <Error_Handler>
 80094bc:	e000      	b.n	80094c0 <MX_USB_DEVICE_Init+0x94>
		return;
 80094be:	bf00      	nop
	}

	/* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

	/* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	200002e8 	.word	0x200002e8
 80094cc:	20000ba8 	.word	0x20000ba8
 80094d0:	200000b8 	.word	0x200000b8
 80094d4:	200002b8 	.word	0x200002b8
 80094d8:	200002cc 	.word	0x200002cc
 80094dc:	200001bc 	.word	0x200001bc

080094e0 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094e4:	2200      	movs	r2, #0
 80094e6:	4905      	ldr	r1, [pc, #20]	; (80094fc <CDC_Init_FS+0x1c>)
 80094e8:	4805      	ldr	r0, [pc, #20]	; (8009500 <CDC_Init_FS+0x20>)
 80094ea:	f7fe fc4c 	bl	8007d86 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80094ee:	4905      	ldr	r1, [pc, #20]	; (8009504 <CDC_Init_FS+0x24>)
 80094f0:	4803      	ldr	r0, [pc, #12]	; (8009500 <CDC_Init_FS+0x20>)
 80094f2:	f7fe fc61 	bl	8007db8 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80094f6:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	20000eb8 	.word	0x20000eb8
 8009500:	20000ba8 	.word	0x20000ba8
 8009504:	20000e78 	.word	0x20000e78

08009508 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8009508:	b480      	push	{r7}
 800950a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800950c:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800950e:	4618      	mov	r0, r3
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	6039      	str	r1, [r7, #0]
 8009522:	71fb      	strb	r3, [r7, #7]
 8009524:	4613      	mov	r3, r2
 8009526:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8009528:	79fb      	ldrb	r3, [r7, #7]
 800952a:	2b23      	cmp	r3, #35	; 0x23
 800952c:	d84a      	bhi.n	80095c4 <CDC_Control_FS+0xac>
 800952e:	a201      	add	r2, pc, #4	; (adr r2, 8009534 <CDC_Control_FS+0x1c>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	080095c5 	.word	0x080095c5
 8009538:	080095c5 	.word	0x080095c5
 800953c:	080095c5 	.word	0x080095c5
 8009540:	080095c5 	.word	0x080095c5
 8009544:	080095c5 	.word	0x080095c5
 8009548:	080095c5 	.word	0x080095c5
 800954c:	080095c5 	.word	0x080095c5
 8009550:	080095c5 	.word	0x080095c5
 8009554:	080095c5 	.word	0x080095c5
 8009558:	080095c5 	.word	0x080095c5
 800955c:	080095c5 	.word	0x080095c5
 8009560:	080095c5 	.word	0x080095c5
 8009564:	080095c5 	.word	0x080095c5
 8009568:	080095c5 	.word	0x080095c5
 800956c:	080095c5 	.word	0x080095c5
 8009570:	080095c5 	.word	0x080095c5
 8009574:	080095c5 	.word	0x080095c5
 8009578:	080095c5 	.word	0x080095c5
 800957c:	080095c5 	.word	0x080095c5
 8009580:	080095c5 	.word	0x080095c5
 8009584:	080095c5 	.word	0x080095c5
 8009588:	080095c5 	.word	0x080095c5
 800958c:	080095c5 	.word	0x080095c5
 8009590:	080095c5 	.word	0x080095c5
 8009594:	080095c5 	.word	0x080095c5
 8009598:	080095c5 	.word	0x080095c5
 800959c:	080095c5 	.word	0x080095c5
 80095a0:	080095c5 	.word	0x080095c5
 80095a4:	080095c5 	.word	0x080095c5
 80095a8:	080095c5 	.word	0x080095c5
 80095ac:	080095c5 	.word	0x080095c5
 80095b0:	080095c5 	.word	0x080095c5
 80095b4:	080095c5 	.word	0x080095c5
 80095b8:	080095c5 	.word	0x080095c5
 80095bc:	080095c5 	.word	0x080095c5
 80095c0:	080095c5 	.word	0x080095c5
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80095c4:	bf00      	nop
	}

	return (USBD_OK);
 80095c6:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80095de:	6879      	ldr	r1, [r7, #4]
 80095e0:	4810      	ldr	r0, [pc, #64]	; (8009624 <CDC_Receive_FS+0x50>)
 80095e2:	f7fe fbe9 	bl	8007db8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80095e6:	480f      	ldr	r0, [pc, #60]	; (8009624 <CDC_Receive_FS+0x50>)
 80095e8:	f7fe fc2a 	bl	8007e40 <USBD_CDC_ReceivePacket>
	memset (ReceivedData, '\0', 64);
 80095ec:	2240      	movs	r2, #64	; 0x40
 80095ee:	2100      	movs	r1, #0
 80095f0:	480d      	ldr	r0, [pc, #52]	; (8009628 <CDC_Receive_FS+0x54>)
 80095f2:	f000 fcac 	bl	8009f4e <memset>
	uint8_t len = (uint8_t)*Len;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	73fb      	strb	r3, [r7, #15]
	memcpy(ReceivedData, Buf, len);
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	461a      	mov	r2, r3
 8009600:	6879      	ldr	r1, [r7, #4]
 8009602:	4809      	ldr	r0, [pc, #36]	; (8009628 <CDC_Receive_FS+0x54>)
 8009604:	f000 fc98 	bl	8009f38 <memcpy>
	memset(Buf, '\0', len);
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	461a      	mov	r2, r3
 800960c:	2100      	movs	r1, #0
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fc9d 	bl	8009f4e <memset>
	ReceivedDataFlag = 1;
 8009614:	4b05      	ldr	r3, [pc, #20]	; (800962c <CDC_Receive_FS+0x58>)
 8009616:	2201      	movs	r2, #1
 8009618:	701a      	strb	r2, [r3, #0]
			ReceivedDataFlag = 1;
			ReceivedIter = 0;
		}
	}*/

	return (USBD_OK);
 800961a:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	20000ba8 	.word	0x20000ba8
 8009628:	20000aa0 	.word	0x20000aa0
 800962c:	2000056c 	.word	0x2000056c

08009630 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009640:	4b0d      	ldr	r3, [pc, #52]	; (8009678 <CDC_Transmit_FS+0x48>)
 8009642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009646:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8009652:	2301      	movs	r3, #1
 8009654:	e00b      	b.n	800966e <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009656:	887b      	ldrh	r3, [r7, #2]
 8009658:	461a      	mov	r2, r3
 800965a:	6879      	ldr	r1, [r7, #4]
 800965c:	4806      	ldr	r0, [pc, #24]	; (8009678 <CDC_Transmit_FS+0x48>)
 800965e:	f7fe fb92 	bl	8007d86 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009662:	4805      	ldr	r0, [pc, #20]	; (8009678 <CDC_Transmit_FS+0x48>)
 8009664:	f7fe fbbc 	bl	8007de0 <USBD_CDC_TransmitPacket>
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800966c:	7bfb      	ldrb	r3, [r7, #15]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20000ba8 	.word	0x20000ba8

0800967c <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4613      	mov	r3, r2
 8009688:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 800968e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009692:	4618      	mov	r0, r3
 8009694:	371c      	adds	r7, #28
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
	...

080096a0 <USBD_FS_DeviceDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	6039      	str	r1, [r7, #0]
 80096aa:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_FS_DeviceDesc);
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2212      	movs	r2, #18
 80096b0:	801a      	strh	r2, [r3, #0]
	return USBD_FS_DeviceDesc;
 80096b2:	4b03      	ldr	r3, [pc, #12]	; (80096c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	20000304 	.word	0x20000304

080096c4 <USBD_FS_DeviceDescriptor_SETUP>:
// wpisywanie hasel descriptor
uint8_t * USBD_FS_DeviceDescriptor_SETUP(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	6039      	str	r1, [r7, #0]
 80096ce:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_FS_DeviceDesc_SETUP);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2212      	movs	r2, #18
 80096d4:	801a      	strh	r2, [r3, #0]
	return USBD_FS_DeviceDesc_SETUP;
 80096d6:	4b03      	ldr	r3, [pc, #12]	; (80096e4 <USBD_FS_DeviceDescriptor_SETUP+0x20>)
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	20000318 	.word	0x20000318

080096e8 <USBD_FS_LangIDStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	6039      	str	r1, [r7, #0]
 80096f2:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_LangIDDesc);
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	2204      	movs	r2, #4
 80096f8:	801a      	strh	r2, [r3, #0]
	return USBD_LangIDDesc;
 80096fa:	4b03      	ldr	r3, [pc, #12]	; (8009708 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	2000032c 	.word	0x2000032c

0800970c <USBD_FS_ProductStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	4603      	mov	r3, r0
 8009714:	6039      	str	r1, [r7, #0]
 8009716:	71fb      	strb	r3, [r7, #7]
	if(speed == 0)
 8009718:	79fb      	ldrb	r3, [r7, #7]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d105      	bne.n	800972a <USBD_FS_ProductStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	4907      	ldr	r1, [pc, #28]	; (8009740 <USBD_FS_ProductStrDescriptor+0x34>)
 8009722:	4808      	ldr	r0, [pc, #32]	; (8009744 <USBD_FS_ProductStrDescriptor+0x38>)
 8009724:	f7ff fda1 	bl	800926a <USBD_GetString>
 8009728:	e004      	b.n	8009734 <USBD_FS_ProductStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	4904      	ldr	r1, [pc, #16]	; (8009740 <USBD_FS_ProductStrDescriptor+0x34>)
 800972e:	4805      	ldr	r0, [pc, #20]	; (8009744 <USBD_FS_ProductStrDescriptor+0x38>)
 8009730:	f7ff fd9b 	bl	800926a <USBD_GetString>
	}
	return USBD_StrDesc;
 8009734:	4b02      	ldr	r3, [pc, #8]	; (8009740 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009736:	4618      	mov	r0, r3
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20000ee0 	.word	0x20000ee0
 8009744:	0800ab9c 	.word	0x0800ab9c

08009748 <USBD_FS_ManufacturerStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	6039      	str	r1, [r7, #0]
 8009752:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	4904      	ldr	r1, [pc, #16]	; (8009768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009758:	4804      	ldr	r0, [pc, #16]	; (800976c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800975a:	f7ff fd86 	bl	800926a <USBD_GetString>
	return USBD_StrDesc;
 800975e:	4b02      	ldr	r3, [pc, #8]	; (8009768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20000ee0 	.word	0x20000ee0
 800976c:	0800abb4 	.word	0x0800abb4

08009770 <USBD_FS_SerialStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = USB_SIZ_STRING_SERIAL;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	221a      	movs	r2, #26
 8009780:	801a      	strh	r2, [r3, #0]

	/* Update the serial number string descriptor with the data from the unique
	 * ID */
	Get_SerialNum();
 8009782:	f000 f843 	bl	800980c <Get_SerialNum>
	/* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

	/* USER CODE END USBD_FS_SerialStrDescriptor */
	return (uint8_t *) USBD_StringSerial;
 8009786:	4b02      	ldr	r3, [pc, #8]	; (8009790 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009788:	4618      	mov	r0, r3
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	20000330 	.word	0x20000330

08009794 <USBD_FS_ConfigStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	6039      	str	r1, [r7, #0]
 800979e:	71fb      	strb	r3, [r7, #7]
	if(speed == USBD_SPEED_HIGH)
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d105      	bne.n	80097b2 <USBD_FS_ConfigStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	4907      	ldr	r1, [pc, #28]	; (80097c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097aa:	4808      	ldr	r0, [pc, #32]	; (80097cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80097ac:	f7ff fd5d 	bl	800926a <USBD_GetString>
 80097b0:	e004      	b.n	80097bc <USBD_FS_ConfigStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	4904      	ldr	r1, [pc, #16]	; (80097c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097b6:	4805      	ldr	r0, [pc, #20]	; (80097cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80097b8:	f7ff fd57 	bl	800926a <USBD_GetString>
	}
	return USBD_StrDesc;
 80097bc:	4b02      	ldr	r3, [pc, #8]	; (80097c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	20000ee0 	.word	0x20000ee0
 80097cc:	0800abc8 	.word	0x0800abc8

080097d0 <USBD_FS_InterfaceStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	6039      	str	r1, [r7, #0]
 80097da:	71fb      	strb	r3, [r7, #7]
	if(speed == 0)
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d105      	bne.n	80097ee <USBD_FS_InterfaceStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	4907      	ldr	r1, [pc, #28]	; (8009804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097e6:	4808      	ldr	r0, [pc, #32]	; (8009808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097e8:	f7ff fd3f 	bl	800926a <USBD_GetString>
 80097ec:	e004      	b.n	80097f8 <USBD_FS_InterfaceStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	4904      	ldr	r1, [pc, #16]	; (8009804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097f2:	4805      	ldr	r0, [pc, #20]	; (8009808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097f4:	f7ff fd39 	bl	800926a <USBD_GetString>
	}
	return USBD_StrDesc;
 80097f8:	4b02      	ldr	r3, [pc, #8]	; (8009804 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20000ee0 	.word	0x20000ee0
 8009808:	0800abd4 	.word	0x0800abd4

0800980c <Get_SerialNum>:
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
	uint32_t deviceserial0, deviceserial1, deviceserial2;

	deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009812:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <Get_SerialNum+0x44>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	60fb      	str	r3, [r7, #12]
	deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009818:	4b0e      	ldr	r3, [pc, #56]	; (8009854 <Get_SerialNum+0x48>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	60bb      	str	r3, [r7, #8]
	deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800981e:	4b0e      	ldr	r3, [pc, #56]	; (8009858 <Get_SerialNum+0x4c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	607b      	str	r3, [r7, #4]

	deviceserial0 += deviceserial2;
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4413      	add	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]

	if (deviceserial0 != 0)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d009      	beq.n	8009846 <Get_SerialNum+0x3a>
	{
		IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009832:	2208      	movs	r2, #8
 8009834:	4909      	ldr	r1, [pc, #36]	; (800985c <Get_SerialNum+0x50>)
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 f814 	bl	8009864 <IntToUnicode>
		IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800983c:	2204      	movs	r2, #4
 800983e:	4908      	ldr	r1, [pc, #32]	; (8009860 <Get_SerialNum+0x54>)
 8009840:	68b8      	ldr	r0, [r7, #8]
 8009842:	f000 f80f 	bl	8009864 <IntToUnicode>
	}
}
 8009846:	bf00      	nop
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	1fff7a10 	.word	0x1fff7a10
 8009854:	1fff7a14 	.word	0x1fff7a14
 8009858:	1fff7a18 	.word	0x1fff7a18
 800985c:	20000332 	.word	0x20000332
 8009860:	20000342 	.word	0x20000342

08009864 <IntToUnicode>:
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009864:	b480      	push	{r7}
 8009866:	b087      	sub	sp, #28
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	4613      	mov	r3, r2
 8009870:	71fb      	strb	r3, [r7, #7]
	uint8_t idx = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	75fb      	strb	r3, [r7, #23]

	for (idx = 0; idx < len; idx++)
 8009876:	2300      	movs	r3, #0
 8009878:	75fb      	strb	r3, [r7, #23]
 800987a:	e027      	b.n	80098cc <IntToUnicode+0x68>
	{
		if (((value >> 28)) < 0xA)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	0f1b      	lsrs	r3, r3, #28
 8009880:	2b09      	cmp	r3, #9
 8009882:	d80b      	bhi.n	800989c <IntToUnicode+0x38>
		{
			pbuf[2 * idx] = (value >> 28) + '0';
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	0f1b      	lsrs	r3, r3, #28
 8009888:	b2da      	uxtb	r2, r3
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	005b      	lsls	r3, r3, #1
 800988e:	4619      	mov	r1, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	440b      	add	r3, r1
 8009894:	3230      	adds	r2, #48	; 0x30
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	701a      	strb	r2, [r3, #0]
 800989a:	e00a      	b.n	80098b2 <IntToUnicode+0x4e>
		}
		else
		{
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	0f1b      	lsrs	r3, r3, #28
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	4619      	mov	r1, r3
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	440b      	add	r3, r1
 80098ac:	3237      	adds	r2, #55	; 0x37
 80098ae:	b2d2      	uxtb	r2, r2
 80098b0:	701a      	strb	r2, [r3, #0]
		}

		value = value << 4;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	011b      	lsls	r3, r3, #4
 80098b6:	60fb      	str	r3, [r7, #12]

		pbuf[2 * idx + 1] = 0;
 80098b8:	7dfb      	ldrb	r3, [r7, #23]
 80098ba:	005b      	lsls	r3, r3, #1
 80098bc:	3301      	adds	r3, #1
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	4413      	add	r3, r2
 80098c2:	2200      	movs	r2, #0
 80098c4:	701a      	strb	r2, [r3, #0]
	for (idx = 0; idx < len; idx++)
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
 80098c8:	3301      	adds	r3, #1
 80098ca:	75fb      	strb	r3, [r7, #23]
 80098cc:	7dfa      	ldrb	r2, [r7, #23]
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d3d3      	bcc.n	800987c <IntToUnicode+0x18>
	}
}
 80098d4:	bf00      	nop
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08a      	sub	sp, #40	; 0x28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098e8:	f107 0314 	add.w	r3, r7, #20
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	605a      	str	r2, [r3, #4]
 80098f2:	609a      	str	r2, [r3, #8]
 80098f4:	60da      	str	r2, [r3, #12]
 80098f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009900:	d13a      	bne.n	8009978 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009902:	2300      	movs	r3, #0
 8009904:	613b      	str	r3, [r7, #16]
 8009906:	4b1e      	ldr	r3, [pc, #120]	; (8009980 <HAL_PCD_MspInit+0xa0>)
 8009908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990a:	4a1d      	ldr	r2, [pc, #116]	; (8009980 <HAL_PCD_MspInit+0xa0>)
 800990c:	f043 0301 	orr.w	r3, r3, #1
 8009910:	6313      	str	r3, [r2, #48]	; 0x30
 8009912:	4b1b      	ldr	r3, [pc, #108]	; (8009980 <HAL_PCD_MspInit+0xa0>)
 8009914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	613b      	str	r3, [r7, #16]
 800991c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800991e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009924:	2302      	movs	r3, #2
 8009926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009928:	2300      	movs	r3, #0
 800992a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800992c:	2303      	movs	r3, #3
 800992e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009930:	230a      	movs	r3, #10
 8009932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009934:	f107 0314 	add.w	r3, r7, #20
 8009938:	4619      	mov	r1, r3
 800993a:	4812      	ldr	r0, [pc, #72]	; (8009984 <HAL_PCD_MspInit+0xa4>)
 800993c:	f7f8 ff04 	bl	8002748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009940:	4b0f      	ldr	r3, [pc, #60]	; (8009980 <HAL_PCD_MspInit+0xa0>)
 8009942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009944:	4a0e      	ldr	r2, [pc, #56]	; (8009980 <HAL_PCD_MspInit+0xa0>)
 8009946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800994a:	6353      	str	r3, [r2, #52]	; 0x34
 800994c:	2300      	movs	r3, #0
 800994e:	60fb      	str	r3, [r7, #12]
 8009950:	4b0b      	ldr	r3, [pc, #44]	; (8009980 <HAL_PCD_MspInit+0xa0>)
 8009952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009954:	4a0a      	ldr	r2, [pc, #40]	; (8009980 <HAL_PCD_MspInit+0xa0>)
 8009956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800995a:	6453      	str	r3, [r2, #68]	; 0x44
 800995c:	4b08      	ldr	r3, [pc, #32]	; (8009980 <HAL_PCD_MspInit+0xa0>)
 800995e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009968:	2200      	movs	r2, #0
 800996a:	2100      	movs	r1, #0
 800996c:	2043      	movs	r0, #67	; 0x43
 800996e:	f7f8 feb4 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009972:	2043      	movs	r0, #67	; 0x43
 8009974:	f7f8 fecd 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009978:	bf00      	nop
 800997a:	3728      	adds	r7, #40	; 0x28
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	40023800 	.word	0x40023800
 8009984:	40020000 	.word	0x40020000

08009988 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800999c:	4619      	mov	r1, r3
 800999e:	4610      	mov	r0, r2
 80099a0:	f7fe fce0 	bl	8008364 <USBD_LL_SetupStage>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80099be:	78fa      	ldrb	r2, [r7, #3]
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	4613      	mov	r3, r2
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	1a9b      	subs	r3, r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	440b      	add	r3, r1
 80099cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	4619      	mov	r1, r3
 80099d6:	f7fe fd18 	bl	800840a <USBD_LL_DataOutStage>
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	460b      	mov	r3, r1
 80099ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80099f4:	78fa      	ldrb	r2, [r7, #3]
 80099f6:	6879      	ldr	r1, [r7, #4]
 80099f8:	4613      	mov	r3, r2
 80099fa:	00db      	lsls	r3, r3, #3
 80099fc:	1a9b      	subs	r3, r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	440b      	add	r3, r1
 8009a02:	3348      	adds	r3, #72	; 0x48
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	f7fe fd61 	bl	80084d0 <USBD_LL_DataInStage>
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe fe65 	bl	80086f4 <USBD_LL_SOF>
}
 8009a2a:	bf00      	nop
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d001      	beq.n	8009a4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a46:	f7f7 fbd3 	bl	80011f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a50:	7bfa      	ldrb	r2, [r7, #15]
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fe fe12 	bl	800867e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe fdcb 	bl	80085fc <USBD_LL_Reset>
}
 8009a66:	bf00      	nop
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fe fe0d 	bl	800869e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	6812      	ldr	r2, [r2, #0]
 8009a92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a96:	f043 0301 	orr.w	r3, r3, #1
 8009a9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d005      	beq.n	8009ab0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009aa4:	4b04      	ldr	r3, [pc, #16]	; (8009ab8 <HAL_PCD_SuspendCallback+0x48>)
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	4a03      	ldr	r2, [pc, #12]	; (8009ab8 <HAL_PCD_SuspendCallback+0x48>)
 8009aaa:	f043 0306 	orr.w	r3, r3, #6
 8009aae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ab0:	bf00      	nop
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	e000ed00 	.word	0xe000ed00

08009abc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe fdfc 	bl	80086c8 <USBD_LL_Resume>
}
 8009ad0:	bf00      	nop
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009aea:	78fa      	ldrb	r2, [r7, #3]
 8009aec:	4611      	mov	r1, r2
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe fe27 	bl	8008742 <USBD_LL_IsoOUTIncomplete>
}
 8009af4:	bf00      	nop
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b0e:	78fa      	ldrb	r2, [r7, #3]
 8009b10:	4611      	mov	r1, r2
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fe08 	bl	8008728 <USBD_LL_IsoINIncomplete>
}
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe fe14 	bl	800875c <USBD_LL_DevConnected>
}
 8009b34:	bf00      	nop
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe fe11 	bl	8008772 <USBD_LL_DevDisconnected>
}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d13c      	bne.n	8009be2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b68:	4a20      	ldr	r2, [pc, #128]	; (8009bec <USBD_LL_Init+0x94>)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a1e      	ldr	r2, [pc, #120]	; (8009bec <USBD_LL_Init+0x94>)
 8009b74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b78:	4b1c      	ldr	r3, [pc, #112]	; (8009bec <USBD_LL_Init+0x94>)
 8009b7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b80:	4b1a      	ldr	r3, [pc, #104]	; (8009bec <USBD_LL_Init+0x94>)
 8009b82:	2204      	movs	r2, #4
 8009b84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b86:	4b19      	ldr	r3, [pc, #100]	; (8009bec <USBD_LL_Init+0x94>)
 8009b88:	2202      	movs	r2, #2
 8009b8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b8c:	4b17      	ldr	r3, [pc, #92]	; (8009bec <USBD_LL_Init+0x94>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b92:	4b16      	ldr	r3, [pc, #88]	; (8009bec <USBD_LL_Init+0x94>)
 8009b94:	2202      	movs	r2, #2
 8009b96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b98:	4b14      	ldr	r3, [pc, #80]	; (8009bec <USBD_LL_Init+0x94>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b9e:	4b13      	ldr	r3, [pc, #76]	; (8009bec <USBD_LL_Init+0x94>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ba4:	4b11      	ldr	r3, [pc, #68]	; (8009bec <USBD_LL_Init+0x94>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009baa:	4b10      	ldr	r3, [pc, #64]	; (8009bec <USBD_LL_Init+0x94>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009bb0:	4b0e      	ldr	r3, [pc, #56]	; (8009bec <USBD_LL_Init+0x94>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009bb6:	480d      	ldr	r0, [pc, #52]	; (8009bec <USBD_LL_Init+0x94>)
 8009bb8:	f7f9 fcff 	bl	80035ba <HAL_PCD_Init>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009bc2:	f7f7 fb15 	bl	80011f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009bc6:	2180      	movs	r1, #128	; 0x80
 8009bc8:	4808      	ldr	r0, [pc, #32]	; (8009bec <USBD_LL_Init+0x94>)
 8009bca:	f7fa fe5c 	bl	8004886 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009bce:	2240      	movs	r2, #64	; 0x40
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4806      	ldr	r0, [pc, #24]	; (8009bec <USBD_LL_Init+0x94>)
 8009bd4:	f7fa fe10 	bl	80047f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009bd8:	2280      	movs	r2, #128	; 0x80
 8009bda:	2101      	movs	r1, #1
 8009bdc:	4803      	ldr	r0, [pc, #12]	; (8009bec <USBD_LL_Init+0x94>)
 8009bde:	f7fa fe0b 	bl	80047f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	200010e0 	.word	0x200010e0

08009bf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7f9 fdf4 	bl	80037f4 <HAL_PCD_Start>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 f92a 	bl	8009e6c <USBD_Get_USB_Status>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	4608      	mov	r0, r1
 8009c30:	4611      	mov	r1, r2
 8009c32:	461a      	mov	r2, r3
 8009c34:	4603      	mov	r3, r0
 8009c36:	70fb      	strb	r3, [r7, #3]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	70bb      	strb	r3, [r7, #2]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c40:	2300      	movs	r3, #0
 8009c42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c4e:	78bb      	ldrb	r3, [r7, #2]
 8009c50:	883a      	ldrh	r2, [r7, #0]
 8009c52:	78f9      	ldrb	r1, [r7, #3]
 8009c54:	f7fa f9d8 	bl	8004008 <HAL_PCD_EP_Open>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 f904 	bl	8009e6c <USBD_Get_USB_Status>
 8009c64:	4603      	mov	r3, r0
 8009c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c8c:	78fa      	ldrb	r2, [r7, #3]
 8009c8e:	4611      	mov	r1, r2
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fa fa21 	bl	80040d8 <HAL_PCD_EP_Close>
 8009c96:	4603      	mov	r3, r0
 8009c98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 f8e5 	bl	8009e6c <USBD_Get_USB_Status>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cca:	78fa      	ldrb	r2, [r7, #3]
 8009ccc:	4611      	mov	r1, r2
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fa faf9 	bl	80042c6 <HAL_PCD_EP_SetStall>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 f8c6 	bl	8009e6c <USBD_Get_USB_Status>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d08:	78fa      	ldrb	r2, [r7, #3]
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fa fb3e 	bl	800438e <HAL_PCD_EP_ClrStall>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 f8a7 	bl	8009e6c <USBD_Get_USB_Status>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	da0b      	bge.n	8009d60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d48:	78fb      	ldrb	r3, [r7, #3]
 8009d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d4e:	68f9      	ldr	r1, [r7, #12]
 8009d50:	4613      	mov	r3, r2
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	1a9b      	subs	r3, r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	440b      	add	r3, r1
 8009d5a:	333e      	adds	r3, #62	; 0x3e
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	e00b      	b.n	8009d78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d60:	78fb      	ldrb	r3, [r7, #3]
 8009d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d66:	68f9      	ldr	r1, [r7, #12]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	00db      	lsls	r3, r3, #3
 8009d6c:	1a9b      	subs	r3, r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	440b      	add	r3, r1
 8009d72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d9e:	78fa      	ldrb	r2, [r7, #3]
 8009da0:	4611      	mov	r1, r2
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fa f90b 	bl	8003fbe <HAL_PCD_SetAddress>
 8009da8:	4603      	mov	r3, r0
 8009daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 f85c 	bl	8009e6c <USBD_Get_USB_Status>
 8009db4:	4603      	mov	r3, r0
 8009db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b086      	sub	sp, #24
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
 8009dce:	460b      	mov	r3, r1
 8009dd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009de0:	7af9      	ldrb	r1, [r7, #11]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	f7fa fa24 	bl	8004232 <HAL_PCD_EP_Transmit>
 8009dea:	4603      	mov	r3, r0
 8009dec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f000 f83b 	bl	8009e6c <USBD_Get_USB_Status>
 8009df6:	4603      	mov	r3, r0
 8009df8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	607a      	str	r2, [r7, #4]
 8009e0e:	603b      	str	r3, [r7, #0]
 8009e10:	460b      	mov	r3, r1
 8009e12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e22:	7af9      	ldrb	r1, [r7, #11]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	f7fa f9a0 	bl	800416c <HAL_PCD_EP_Receive>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 f81a 	bl	8009e6c <USBD_Get_USB_Status>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b082      	sub	sp, #8
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e58:	78fa      	ldrb	r2, [r7, #3]
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7fa f9d0 	bl	8004202 <HAL_PCD_EP_GetRxCount>
 8009e62:	4603      	mov	r3, r0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e7a:	79fb      	ldrb	r3, [r7, #7]
 8009e7c:	2b03      	cmp	r3, #3
 8009e7e:	d817      	bhi.n	8009eb0 <USBD_Get_USB_Status+0x44>
 8009e80:	a201      	add	r2, pc, #4	; (adr r2, 8009e88 <USBD_Get_USB_Status+0x1c>)
 8009e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e86:	bf00      	nop
 8009e88:	08009e99 	.word	0x08009e99
 8009e8c:	08009e9f 	.word	0x08009e9f
 8009e90:	08009ea5 	.word	0x08009ea5
 8009e94:	08009eab 	.word	0x08009eab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e9c:	e00b      	b.n	8009eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea2:	e008      	b.n	8009eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea8:	e005      	b.n	8009eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	73fb      	strb	r3, [r7, #15]
    break;
 8009eae:	e002      	b.n	8009eb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb4:	bf00      	nop
  }
  return usb_status;
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <__errno>:
 8009ec4:	4b01      	ldr	r3, [pc, #4]	; (8009ecc <__errno+0x8>)
 8009ec6:	6818      	ldr	r0, [r3, #0]
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	2000034c 	.word	0x2000034c

08009ed0 <__libc_init_array>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	4e0d      	ldr	r6, [pc, #52]	; (8009f08 <__libc_init_array+0x38>)
 8009ed4:	4c0d      	ldr	r4, [pc, #52]	; (8009f0c <__libc_init_array+0x3c>)
 8009ed6:	1ba4      	subs	r4, r4, r6
 8009ed8:	10a4      	asrs	r4, r4, #2
 8009eda:	2500      	movs	r5, #0
 8009edc:	42a5      	cmp	r5, r4
 8009ede:	d109      	bne.n	8009ef4 <__libc_init_array+0x24>
 8009ee0:	4e0b      	ldr	r6, [pc, #44]	; (8009f10 <__libc_init_array+0x40>)
 8009ee2:	4c0c      	ldr	r4, [pc, #48]	; (8009f14 <__libc_init_array+0x44>)
 8009ee4:	f000 fe0a 	bl	800aafc <_init>
 8009ee8:	1ba4      	subs	r4, r4, r6
 8009eea:	10a4      	asrs	r4, r4, #2
 8009eec:	2500      	movs	r5, #0
 8009eee:	42a5      	cmp	r5, r4
 8009ef0:	d105      	bne.n	8009efe <__libc_init_array+0x2e>
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ef8:	4798      	blx	r3
 8009efa:	3501      	adds	r5, #1
 8009efc:	e7ee      	b.n	8009edc <__libc_init_array+0xc>
 8009efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f02:	4798      	blx	r3
 8009f04:	3501      	adds	r5, #1
 8009f06:	e7f2      	b.n	8009eee <__libc_init_array+0x1e>
 8009f08:	0800baf8 	.word	0x0800baf8
 8009f0c:	0800baf8 	.word	0x0800baf8
 8009f10:	0800baf8 	.word	0x0800baf8
 8009f14:	0800bafc 	.word	0x0800bafc

08009f18 <malloc>:
 8009f18:	4b02      	ldr	r3, [pc, #8]	; (8009f24 <malloc+0xc>)
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	f000 b86d 	b.w	8009ffc <_malloc_r>
 8009f22:	bf00      	nop
 8009f24:	2000034c 	.word	0x2000034c

08009f28 <free>:
 8009f28:	4b02      	ldr	r3, [pc, #8]	; (8009f34 <free+0xc>)
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	6818      	ldr	r0, [r3, #0]
 8009f2e:	f000 b817 	b.w	8009f60 <_free_r>
 8009f32:	bf00      	nop
 8009f34:	2000034c 	.word	0x2000034c

08009f38 <memcpy>:
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	1e43      	subs	r3, r0, #1
 8009f3c:	440a      	add	r2, r1
 8009f3e:	4291      	cmp	r1, r2
 8009f40:	d100      	bne.n	8009f44 <memcpy+0xc>
 8009f42:	bd10      	pop	{r4, pc}
 8009f44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f4c:	e7f7      	b.n	8009f3e <memcpy+0x6>

08009f4e <memset>:
 8009f4e:	4402      	add	r2, r0
 8009f50:	4603      	mov	r3, r0
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d100      	bne.n	8009f58 <memset+0xa>
 8009f56:	4770      	bx	lr
 8009f58:	f803 1b01 	strb.w	r1, [r3], #1
 8009f5c:	e7f9      	b.n	8009f52 <memset+0x4>
	...

08009f60 <_free_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4605      	mov	r5, r0
 8009f64:	2900      	cmp	r1, #0
 8009f66:	d045      	beq.n	8009ff4 <_free_r+0x94>
 8009f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f6c:	1f0c      	subs	r4, r1, #4
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	bfb8      	it	lt
 8009f72:	18e4      	addlt	r4, r4, r3
 8009f74:	f000 f8d8 	bl	800a128 <__malloc_lock>
 8009f78:	4a1f      	ldr	r2, [pc, #124]	; (8009ff8 <_free_r+0x98>)
 8009f7a:	6813      	ldr	r3, [r2, #0]
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	b933      	cbnz	r3, 8009f8e <_free_r+0x2e>
 8009f80:	6063      	str	r3, [r4, #4]
 8009f82:	6014      	str	r4, [r2, #0]
 8009f84:	4628      	mov	r0, r5
 8009f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f8a:	f000 b8ce 	b.w	800a12a <__malloc_unlock>
 8009f8e:	42a3      	cmp	r3, r4
 8009f90:	d90c      	bls.n	8009fac <_free_r+0x4c>
 8009f92:	6821      	ldr	r1, [r4, #0]
 8009f94:	1862      	adds	r2, r4, r1
 8009f96:	4293      	cmp	r3, r2
 8009f98:	bf04      	itt	eq
 8009f9a:	681a      	ldreq	r2, [r3, #0]
 8009f9c:	685b      	ldreq	r3, [r3, #4]
 8009f9e:	6063      	str	r3, [r4, #4]
 8009fa0:	bf04      	itt	eq
 8009fa2:	1852      	addeq	r2, r2, r1
 8009fa4:	6022      	streq	r2, [r4, #0]
 8009fa6:	6004      	str	r4, [r0, #0]
 8009fa8:	e7ec      	b.n	8009f84 <_free_r+0x24>
 8009faa:	4613      	mov	r3, r2
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	b10a      	cbz	r2, 8009fb4 <_free_r+0x54>
 8009fb0:	42a2      	cmp	r2, r4
 8009fb2:	d9fa      	bls.n	8009faa <_free_r+0x4a>
 8009fb4:	6819      	ldr	r1, [r3, #0]
 8009fb6:	1858      	adds	r0, r3, r1
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d10b      	bne.n	8009fd4 <_free_r+0x74>
 8009fbc:	6820      	ldr	r0, [r4, #0]
 8009fbe:	4401      	add	r1, r0
 8009fc0:	1858      	adds	r0, r3, r1
 8009fc2:	4282      	cmp	r2, r0
 8009fc4:	6019      	str	r1, [r3, #0]
 8009fc6:	d1dd      	bne.n	8009f84 <_free_r+0x24>
 8009fc8:	6810      	ldr	r0, [r2, #0]
 8009fca:	6852      	ldr	r2, [r2, #4]
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	4401      	add	r1, r0
 8009fd0:	6019      	str	r1, [r3, #0]
 8009fd2:	e7d7      	b.n	8009f84 <_free_r+0x24>
 8009fd4:	d902      	bls.n	8009fdc <_free_r+0x7c>
 8009fd6:	230c      	movs	r3, #12
 8009fd8:	602b      	str	r3, [r5, #0]
 8009fda:	e7d3      	b.n	8009f84 <_free_r+0x24>
 8009fdc:	6820      	ldr	r0, [r4, #0]
 8009fde:	1821      	adds	r1, r4, r0
 8009fe0:	428a      	cmp	r2, r1
 8009fe2:	bf04      	itt	eq
 8009fe4:	6811      	ldreq	r1, [r2, #0]
 8009fe6:	6852      	ldreq	r2, [r2, #4]
 8009fe8:	6062      	str	r2, [r4, #4]
 8009fea:	bf04      	itt	eq
 8009fec:	1809      	addeq	r1, r1, r0
 8009fee:	6021      	streq	r1, [r4, #0]
 8009ff0:	605c      	str	r4, [r3, #4]
 8009ff2:	e7c7      	b.n	8009f84 <_free_r+0x24>
 8009ff4:	bd38      	pop	{r3, r4, r5, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20000994 	.word	0x20000994

08009ffc <_malloc_r>:
 8009ffc:	b570      	push	{r4, r5, r6, lr}
 8009ffe:	1ccd      	adds	r5, r1, #3
 800a000:	f025 0503 	bic.w	r5, r5, #3
 800a004:	3508      	adds	r5, #8
 800a006:	2d0c      	cmp	r5, #12
 800a008:	bf38      	it	cc
 800a00a:	250c      	movcc	r5, #12
 800a00c:	2d00      	cmp	r5, #0
 800a00e:	4606      	mov	r6, r0
 800a010:	db01      	blt.n	800a016 <_malloc_r+0x1a>
 800a012:	42a9      	cmp	r1, r5
 800a014:	d903      	bls.n	800a01e <_malloc_r+0x22>
 800a016:	230c      	movs	r3, #12
 800a018:	6033      	str	r3, [r6, #0]
 800a01a:	2000      	movs	r0, #0
 800a01c:	bd70      	pop	{r4, r5, r6, pc}
 800a01e:	f000 f883 	bl	800a128 <__malloc_lock>
 800a022:	4a21      	ldr	r2, [pc, #132]	; (800a0a8 <_malloc_r+0xac>)
 800a024:	6814      	ldr	r4, [r2, #0]
 800a026:	4621      	mov	r1, r4
 800a028:	b991      	cbnz	r1, 800a050 <_malloc_r+0x54>
 800a02a:	4c20      	ldr	r4, [pc, #128]	; (800a0ac <_malloc_r+0xb0>)
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	b91b      	cbnz	r3, 800a038 <_malloc_r+0x3c>
 800a030:	4630      	mov	r0, r6
 800a032:	f000 f83d 	bl	800a0b0 <_sbrk_r>
 800a036:	6020      	str	r0, [r4, #0]
 800a038:	4629      	mov	r1, r5
 800a03a:	4630      	mov	r0, r6
 800a03c:	f000 f838 	bl	800a0b0 <_sbrk_r>
 800a040:	1c43      	adds	r3, r0, #1
 800a042:	d124      	bne.n	800a08e <_malloc_r+0x92>
 800a044:	230c      	movs	r3, #12
 800a046:	6033      	str	r3, [r6, #0]
 800a048:	4630      	mov	r0, r6
 800a04a:	f000 f86e 	bl	800a12a <__malloc_unlock>
 800a04e:	e7e4      	b.n	800a01a <_malloc_r+0x1e>
 800a050:	680b      	ldr	r3, [r1, #0]
 800a052:	1b5b      	subs	r3, r3, r5
 800a054:	d418      	bmi.n	800a088 <_malloc_r+0x8c>
 800a056:	2b0b      	cmp	r3, #11
 800a058:	d90f      	bls.n	800a07a <_malloc_r+0x7e>
 800a05a:	600b      	str	r3, [r1, #0]
 800a05c:	50cd      	str	r5, [r1, r3]
 800a05e:	18cc      	adds	r4, r1, r3
 800a060:	4630      	mov	r0, r6
 800a062:	f000 f862 	bl	800a12a <__malloc_unlock>
 800a066:	f104 000b 	add.w	r0, r4, #11
 800a06a:	1d23      	adds	r3, r4, #4
 800a06c:	f020 0007 	bic.w	r0, r0, #7
 800a070:	1ac3      	subs	r3, r0, r3
 800a072:	d0d3      	beq.n	800a01c <_malloc_r+0x20>
 800a074:	425a      	negs	r2, r3
 800a076:	50e2      	str	r2, [r4, r3]
 800a078:	e7d0      	b.n	800a01c <_malloc_r+0x20>
 800a07a:	428c      	cmp	r4, r1
 800a07c:	684b      	ldr	r3, [r1, #4]
 800a07e:	bf16      	itet	ne
 800a080:	6063      	strne	r3, [r4, #4]
 800a082:	6013      	streq	r3, [r2, #0]
 800a084:	460c      	movne	r4, r1
 800a086:	e7eb      	b.n	800a060 <_malloc_r+0x64>
 800a088:	460c      	mov	r4, r1
 800a08a:	6849      	ldr	r1, [r1, #4]
 800a08c:	e7cc      	b.n	800a028 <_malloc_r+0x2c>
 800a08e:	1cc4      	adds	r4, r0, #3
 800a090:	f024 0403 	bic.w	r4, r4, #3
 800a094:	42a0      	cmp	r0, r4
 800a096:	d005      	beq.n	800a0a4 <_malloc_r+0xa8>
 800a098:	1a21      	subs	r1, r4, r0
 800a09a:	4630      	mov	r0, r6
 800a09c:	f000 f808 	bl	800a0b0 <_sbrk_r>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d0cf      	beq.n	800a044 <_malloc_r+0x48>
 800a0a4:	6025      	str	r5, [r4, #0]
 800a0a6:	e7db      	b.n	800a060 <_malloc_r+0x64>
 800a0a8:	20000994 	.word	0x20000994
 800a0ac:	20000998 	.word	0x20000998

0800a0b0 <_sbrk_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4c06      	ldr	r4, [pc, #24]	; (800a0cc <_sbrk_r+0x1c>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	6023      	str	r3, [r4, #0]
 800a0bc:	f7f7 fda2 	bl	8001c04 <_sbrk>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_sbrk_r+0x1a>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_sbrk_r+0x1a>
 800a0c8:	602b      	str	r3, [r5, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	200014e8 	.word	0x200014e8

0800a0d0 <siscanf>:
 800a0d0:	b40e      	push	{r1, r2, r3}
 800a0d2:	b530      	push	{r4, r5, lr}
 800a0d4:	b09c      	sub	sp, #112	; 0x70
 800a0d6:	ac1f      	add	r4, sp, #124	; 0x7c
 800a0d8:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a0dc:	f854 5b04 	ldr.w	r5, [r4], #4
 800a0e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a0e4:	9002      	str	r0, [sp, #8]
 800a0e6:	9006      	str	r0, [sp, #24]
 800a0e8:	f7f6 f87a 	bl	80001e0 <strlen>
 800a0ec:	4b0b      	ldr	r3, [pc, #44]	; (800a11c <siscanf+0x4c>)
 800a0ee:	9003      	str	r0, [sp, #12]
 800a0f0:	9007      	str	r0, [sp, #28]
 800a0f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0f4:	480a      	ldr	r0, [pc, #40]	; (800a120 <siscanf+0x50>)
 800a0f6:	9401      	str	r4, [sp, #4]
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0fc:	9314      	str	r3, [sp, #80]	; 0x50
 800a0fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a102:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a106:	462a      	mov	r2, r5
 800a108:	4623      	mov	r3, r4
 800a10a:	a902      	add	r1, sp, #8
 800a10c:	6800      	ldr	r0, [r0, #0]
 800a10e:	f000 f867 	bl	800a1e0 <__ssvfiscanf_r>
 800a112:	b01c      	add	sp, #112	; 0x70
 800a114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a118:	b003      	add	sp, #12
 800a11a:	4770      	bx	lr
 800a11c:	0800a125 	.word	0x0800a125
 800a120:	2000034c 	.word	0x2000034c

0800a124 <__seofread>:
 800a124:	2000      	movs	r0, #0
 800a126:	4770      	bx	lr

0800a128 <__malloc_lock>:
 800a128:	4770      	bx	lr

0800a12a <__malloc_unlock>:
 800a12a:	4770      	bx	lr

0800a12c <_sungetc_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	1c4b      	adds	r3, r1, #1
 800a130:	4614      	mov	r4, r2
 800a132:	d103      	bne.n	800a13c <_sungetc_r+0x10>
 800a134:	f04f 35ff 	mov.w	r5, #4294967295
 800a138:	4628      	mov	r0, r5
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	8993      	ldrh	r3, [r2, #12]
 800a13e:	f023 0320 	bic.w	r3, r3, #32
 800a142:	8193      	strh	r3, [r2, #12]
 800a144:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a146:	6852      	ldr	r2, [r2, #4]
 800a148:	b2cd      	uxtb	r5, r1
 800a14a:	b18b      	cbz	r3, 800a170 <_sungetc_r+0x44>
 800a14c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a14e:	4293      	cmp	r3, r2
 800a150:	dd08      	ble.n	800a164 <_sungetc_r+0x38>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	1e5a      	subs	r2, r3, #1
 800a156:	6022      	str	r2, [r4, #0]
 800a158:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a15c:	6863      	ldr	r3, [r4, #4]
 800a15e:	3301      	adds	r3, #1
 800a160:	6063      	str	r3, [r4, #4]
 800a162:	e7e9      	b.n	800a138 <_sungetc_r+0xc>
 800a164:	4621      	mov	r1, r4
 800a166:	f000 fc2f 	bl	800a9c8 <__submore>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d0f1      	beq.n	800a152 <_sungetc_r+0x26>
 800a16e:	e7e1      	b.n	800a134 <_sungetc_r+0x8>
 800a170:	6921      	ldr	r1, [r4, #16]
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	b151      	cbz	r1, 800a18c <_sungetc_r+0x60>
 800a176:	4299      	cmp	r1, r3
 800a178:	d208      	bcs.n	800a18c <_sungetc_r+0x60>
 800a17a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a17e:	42a9      	cmp	r1, r5
 800a180:	d104      	bne.n	800a18c <_sungetc_r+0x60>
 800a182:	3b01      	subs	r3, #1
 800a184:	3201      	adds	r2, #1
 800a186:	6023      	str	r3, [r4, #0]
 800a188:	6062      	str	r2, [r4, #4]
 800a18a:	e7d5      	b.n	800a138 <_sungetc_r+0xc>
 800a18c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a194:	6363      	str	r3, [r4, #52]	; 0x34
 800a196:	2303      	movs	r3, #3
 800a198:	63a3      	str	r3, [r4, #56]	; 0x38
 800a19a:	4623      	mov	r3, r4
 800a19c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e7dc      	b.n	800a160 <_sungetc_r+0x34>

0800a1a6 <__ssrefill_r>:
 800a1a6:	b510      	push	{r4, lr}
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a1ac:	b169      	cbz	r1, 800a1ca <__ssrefill_r+0x24>
 800a1ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1b2:	4299      	cmp	r1, r3
 800a1b4:	d001      	beq.n	800a1ba <__ssrefill_r+0x14>
 800a1b6:	f7ff fed3 	bl	8009f60 <_free_r>
 800a1ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1bc:	6063      	str	r3, [r4, #4]
 800a1be:	2000      	movs	r0, #0
 800a1c0:	6360      	str	r0, [r4, #52]	; 0x34
 800a1c2:	b113      	cbz	r3, 800a1ca <__ssrefill_r+0x24>
 800a1c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a1c6:	6023      	str	r3, [r4, #0]
 800a1c8:	bd10      	pop	{r4, pc}
 800a1ca:	6923      	ldr	r3, [r4, #16]
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	6063      	str	r3, [r4, #4]
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	f043 0320 	orr.w	r3, r3, #32
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	f04f 30ff 	mov.w	r0, #4294967295
 800a1de:	e7f3      	b.n	800a1c8 <__ssrefill_r+0x22>

0800a1e0 <__ssvfiscanf_r>:
 800a1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	9144      	str	r1, [sp, #272]	; 0x110
 800a1ee:	9145      	str	r1, [sp, #276]	; 0x114
 800a1f0:	499f      	ldr	r1, [pc, #636]	; (800a470 <__ssvfiscanf_r+0x290>)
 800a1f2:	91a0      	str	r1, [sp, #640]	; 0x280
 800a1f4:	f10d 0804 	add.w	r8, sp, #4
 800a1f8:	499e      	ldr	r1, [pc, #632]	; (800a474 <__ssvfiscanf_r+0x294>)
 800a1fa:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800a478 <__ssvfiscanf_r+0x298>
 800a1fe:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a202:	4606      	mov	r6, r0
 800a204:	4692      	mov	sl, r2
 800a206:	91a1      	str	r1, [sp, #644]	; 0x284
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	270a      	movs	r7, #10
 800a20c:	f89a 3000 	ldrb.w	r3, [sl]
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 812a 	beq.w	800a46a <__ssvfiscanf_r+0x28a>
 800a216:	4655      	mov	r5, sl
 800a218:	f000 fc14 	bl	800aa44 <__locale_ctype_ptr>
 800a21c:	f815 bb01 	ldrb.w	fp, [r5], #1
 800a220:	4458      	add	r0, fp
 800a222:	7843      	ldrb	r3, [r0, #1]
 800a224:	f013 0308 	ands.w	r3, r3, #8
 800a228:	d01c      	beq.n	800a264 <__ssvfiscanf_r+0x84>
 800a22a:	6863      	ldr	r3, [r4, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	dd12      	ble.n	800a256 <__ssvfiscanf_r+0x76>
 800a230:	f000 fc08 	bl	800aa44 <__locale_ctype_ptr>
 800a234:	6823      	ldr	r3, [r4, #0]
 800a236:	781a      	ldrb	r2, [r3, #0]
 800a238:	4410      	add	r0, r2
 800a23a:	7842      	ldrb	r2, [r0, #1]
 800a23c:	0712      	lsls	r2, r2, #28
 800a23e:	d401      	bmi.n	800a244 <__ssvfiscanf_r+0x64>
 800a240:	46aa      	mov	sl, r5
 800a242:	e7e3      	b.n	800a20c <__ssvfiscanf_r+0x2c>
 800a244:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a246:	3201      	adds	r2, #1
 800a248:	9245      	str	r2, [sp, #276]	; 0x114
 800a24a:	6862      	ldr	r2, [r4, #4]
 800a24c:	3301      	adds	r3, #1
 800a24e:	3a01      	subs	r2, #1
 800a250:	6062      	str	r2, [r4, #4]
 800a252:	6023      	str	r3, [r4, #0]
 800a254:	e7e9      	b.n	800a22a <__ssvfiscanf_r+0x4a>
 800a256:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a258:	4621      	mov	r1, r4
 800a25a:	4630      	mov	r0, r6
 800a25c:	4798      	blx	r3
 800a25e:	2800      	cmp	r0, #0
 800a260:	d0e6      	beq.n	800a230 <__ssvfiscanf_r+0x50>
 800a262:	e7ed      	b.n	800a240 <__ssvfiscanf_r+0x60>
 800a264:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a268:	f040 8082 	bne.w	800a370 <__ssvfiscanf_r+0x190>
 800a26c:	9343      	str	r3, [sp, #268]	; 0x10c
 800a26e:	9341      	str	r3, [sp, #260]	; 0x104
 800a270:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a274:	2b2a      	cmp	r3, #42	; 0x2a
 800a276:	d103      	bne.n	800a280 <__ssvfiscanf_r+0xa0>
 800a278:	2310      	movs	r3, #16
 800a27a:	9341      	str	r3, [sp, #260]	; 0x104
 800a27c:	f10a 0502 	add.w	r5, sl, #2
 800a280:	46aa      	mov	sl, r5
 800a282:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a286:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a28a:	2a09      	cmp	r2, #9
 800a28c:	d922      	bls.n	800a2d4 <__ssvfiscanf_r+0xf4>
 800a28e:	2203      	movs	r2, #3
 800a290:	4879      	ldr	r0, [pc, #484]	; (800a478 <__ssvfiscanf_r+0x298>)
 800a292:	f7f5 ffad 	bl	80001f0 <memchr>
 800a296:	b138      	cbz	r0, 800a2a8 <__ssvfiscanf_r+0xc8>
 800a298:	eba0 0309 	sub.w	r3, r0, r9
 800a29c:	2001      	movs	r0, #1
 800a29e:	4098      	lsls	r0, r3
 800a2a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2a2:	4318      	orrs	r0, r3
 800a2a4:	9041      	str	r0, [sp, #260]	; 0x104
 800a2a6:	46aa      	mov	sl, r5
 800a2a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ac:	2b67      	cmp	r3, #103	; 0x67
 800a2ae:	f10a 0501 	add.w	r5, sl, #1
 800a2b2:	d82b      	bhi.n	800a30c <__ssvfiscanf_r+0x12c>
 800a2b4:	2b65      	cmp	r3, #101	; 0x65
 800a2b6:	f080 809f 	bcs.w	800a3f8 <__ssvfiscanf_r+0x218>
 800a2ba:	2b47      	cmp	r3, #71	; 0x47
 800a2bc:	d810      	bhi.n	800a2e0 <__ssvfiscanf_r+0x100>
 800a2be:	2b45      	cmp	r3, #69	; 0x45
 800a2c0:	f080 809a 	bcs.w	800a3f8 <__ssvfiscanf_r+0x218>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d06c      	beq.n	800a3a2 <__ssvfiscanf_r+0x1c2>
 800a2c8:	2b25      	cmp	r3, #37	; 0x25
 800a2ca:	d051      	beq.n	800a370 <__ssvfiscanf_r+0x190>
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	9347      	str	r3, [sp, #284]	; 0x11c
 800a2d0:	9742      	str	r7, [sp, #264]	; 0x108
 800a2d2:	e027      	b.n	800a324 <__ssvfiscanf_r+0x144>
 800a2d4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a2d6:	fb07 1303 	mla	r3, r7, r3, r1
 800a2da:	3b30      	subs	r3, #48	; 0x30
 800a2dc:	9343      	str	r3, [sp, #268]	; 0x10c
 800a2de:	e7cf      	b.n	800a280 <__ssvfiscanf_r+0xa0>
 800a2e0:	2b5b      	cmp	r3, #91	; 0x5b
 800a2e2:	d06a      	beq.n	800a3ba <__ssvfiscanf_r+0x1da>
 800a2e4:	d80c      	bhi.n	800a300 <__ssvfiscanf_r+0x120>
 800a2e6:	2b58      	cmp	r3, #88	; 0x58
 800a2e8:	d1f0      	bne.n	800a2cc <__ssvfiscanf_r+0xec>
 800a2ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a2ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2f0:	9241      	str	r2, [sp, #260]	; 0x104
 800a2f2:	2210      	movs	r2, #16
 800a2f4:	9242      	str	r2, [sp, #264]	; 0x108
 800a2f6:	2b6e      	cmp	r3, #110	; 0x6e
 800a2f8:	bf8c      	ite	hi
 800a2fa:	2304      	movhi	r3, #4
 800a2fc:	2303      	movls	r3, #3
 800a2fe:	e010      	b.n	800a322 <__ssvfiscanf_r+0x142>
 800a300:	2b63      	cmp	r3, #99	; 0x63
 800a302:	d065      	beq.n	800a3d0 <__ssvfiscanf_r+0x1f0>
 800a304:	2b64      	cmp	r3, #100	; 0x64
 800a306:	d1e1      	bne.n	800a2cc <__ssvfiscanf_r+0xec>
 800a308:	9742      	str	r7, [sp, #264]	; 0x108
 800a30a:	e7f4      	b.n	800a2f6 <__ssvfiscanf_r+0x116>
 800a30c:	2b70      	cmp	r3, #112	; 0x70
 800a30e:	d04b      	beq.n	800a3a8 <__ssvfiscanf_r+0x1c8>
 800a310:	d826      	bhi.n	800a360 <__ssvfiscanf_r+0x180>
 800a312:	2b6e      	cmp	r3, #110	; 0x6e
 800a314:	d062      	beq.n	800a3dc <__ssvfiscanf_r+0x1fc>
 800a316:	d84c      	bhi.n	800a3b2 <__ssvfiscanf_r+0x1d2>
 800a318:	2b69      	cmp	r3, #105	; 0x69
 800a31a:	d1d7      	bne.n	800a2cc <__ssvfiscanf_r+0xec>
 800a31c:	2300      	movs	r3, #0
 800a31e:	9342      	str	r3, [sp, #264]	; 0x108
 800a320:	2303      	movs	r3, #3
 800a322:	9347      	str	r3, [sp, #284]	; 0x11c
 800a324:	6863      	ldr	r3, [r4, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	dd68      	ble.n	800a3fc <__ssvfiscanf_r+0x21c>
 800a32a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a32c:	0659      	lsls	r1, r3, #25
 800a32e:	d407      	bmi.n	800a340 <__ssvfiscanf_r+0x160>
 800a330:	f000 fb88 	bl	800aa44 <__locale_ctype_ptr>
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	781a      	ldrb	r2, [r3, #0]
 800a338:	4410      	add	r0, r2
 800a33a:	7842      	ldrb	r2, [r0, #1]
 800a33c:	0712      	lsls	r2, r2, #28
 800a33e:	d464      	bmi.n	800a40a <__ssvfiscanf_r+0x22a>
 800a340:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a342:	2b02      	cmp	r3, #2
 800a344:	dc73      	bgt.n	800a42e <__ssvfiscanf_r+0x24e>
 800a346:	466b      	mov	r3, sp
 800a348:	4622      	mov	r2, r4
 800a34a:	a941      	add	r1, sp, #260	; 0x104
 800a34c:	4630      	mov	r0, r6
 800a34e:	f000 f897 	bl	800a480 <_scanf_chars>
 800a352:	2801      	cmp	r0, #1
 800a354:	f000 8089 	beq.w	800a46a <__ssvfiscanf_r+0x28a>
 800a358:	2802      	cmp	r0, #2
 800a35a:	f47f af71 	bne.w	800a240 <__ssvfiscanf_r+0x60>
 800a35e:	e01d      	b.n	800a39c <__ssvfiscanf_r+0x1bc>
 800a360:	2b75      	cmp	r3, #117	; 0x75
 800a362:	d0d1      	beq.n	800a308 <__ssvfiscanf_r+0x128>
 800a364:	2b78      	cmp	r3, #120	; 0x78
 800a366:	d0c0      	beq.n	800a2ea <__ssvfiscanf_r+0x10a>
 800a368:	2b73      	cmp	r3, #115	; 0x73
 800a36a:	d1af      	bne.n	800a2cc <__ssvfiscanf_r+0xec>
 800a36c:	2302      	movs	r3, #2
 800a36e:	e7d8      	b.n	800a322 <__ssvfiscanf_r+0x142>
 800a370:	6863      	ldr	r3, [r4, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	dd0c      	ble.n	800a390 <__ssvfiscanf_r+0x1b0>
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	781a      	ldrb	r2, [r3, #0]
 800a37a:	455a      	cmp	r2, fp
 800a37c:	d175      	bne.n	800a46a <__ssvfiscanf_r+0x28a>
 800a37e:	3301      	adds	r3, #1
 800a380:	6862      	ldr	r2, [r4, #4]
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a386:	3a01      	subs	r2, #1
 800a388:	3301      	adds	r3, #1
 800a38a:	6062      	str	r2, [r4, #4]
 800a38c:	9345      	str	r3, [sp, #276]	; 0x114
 800a38e:	e757      	b.n	800a240 <__ssvfiscanf_r+0x60>
 800a390:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a392:	4621      	mov	r1, r4
 800a394:	4630      	mov	r0, r6
 800a396:	4798      	blx	r3
 800a398:	2800      	cmp	r0, #0
 800a39a:	d0ec      	beq.n	800a376 <__ssvfiscanf_r+0x196>
 800a39c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d159      	bne.n	800a456 <__ssvfiscanf_r+0x276>
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a6:	e05c      	b.n	800a462 <__ssvfiscanf_r+0x282>
 800a3a8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a3aa:	f042 0220 	orr.w	r2, r2, #32
 800a3ae:	9241      	str	r2, [sp, #260]	; 0x104
 800a3b0:	e79b      	b.n	800a2ea <__ssvfiscanf_r+0x10a>
 800a3b2:	2308      	movs	r3, #8
 800a3b4:	9342      	str	r3, [sp, #264]	; 0x108
 800a3b6:	2304      	movs	r3, #4
 800a3b8:	e7b3      	b.n	800a322 <__ssvfiscanf_r+0x142>
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4640      	mov	r0, r8
 800a3be:	f000 f9b7 	bl	800a730 <__sccl>
 800a3c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3c8:	9341      	str	r3, [sp, #260]	; 0x104
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e7a8      	b.n	800a322 <__ssvfiscanf_r+0x142>
 800a3d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3d6:	9341      	str	r3, [sp, #260]	; 0x104
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e7a2      	b.n	800a322 <__ssvfiscanf_r+0x142>
 800a3dc:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a3de:	06c3      	lsls	r3, r0, #27
 800a3e0:	f53f af2e 	bmi.w	800a240 <__ssvfiscanf_r+0x60>
 800a3e4:	9b00      	ldr	r3, [sp, #0]
 800a3e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a3e8:	1d19      	adds	r1, r3, #4
 800a3ea:	9100      	str	r1, [sp, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	07c0      	lsls	r0, r0, #31
 800a3f0:	bf4c      	ite	mi
 800a3f2:	801a      	strhmi	r2, [r3, #0]
 800a3f4:	601a      	strpl	r2, [r3, #0]
 800a3f6:	e723      	b.n	800a240 <__ssvfiscanf_r+0x60>
 800a3f8:	2305      	movs	r3, #5
 800a3fa:	e792      	b.n	800a322 <__ssvfiscanf_r+0x142>
 800a3fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a3fe:	4621      	mov	r1, r4
 800a400:	4630      	mov	r0, r6
 800a402:	4798      	blx	r3
 800a404:	2800      	cmp	r0, #0
 800a406:	d090      	beq.n	800a32a <__ssvfiscanf_r+0x14a>
 800a408:	e7c8      	b.n	800a39c <__ssvfiscanf_r+0x1bc>
 800a40a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a40c:	3201      	adds	r2, #1
 800a40e:	9245      	str	r2, [sp, #276]	; 0x114
 800a410:	6862      	ldr	r2, [r4, #4]
 800a412:	3a01      	subs	r2, #1
 800a414:	2a00      	cmp	r2, #0
 800a416:	6062      	str	r2, [r4, #4]
 800a418:	dd02      	ble.n	800a420 <__ssvfiscanf_r+0x240>
 800a41a:	3301      	adds	r3, #1
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	e787      	b.n	800a330 <__ssvfiscanf_r+0x150>
 800a420:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a422:	4621      	mov	r1, r4
 800a424:	4630      	mov	r0, r6
 800a426:	4798      	blx	r3
 800a428:	2800      	cmp	r0, #0
 800a42a:	d081      	beq.n	800a330 <__ssvfiscanf_r+0x150>
 800a42c:	e7b6      	b.n	800a39c <__ssvfiscanf_r+0x1bc>
 800a42e:	2b04      	cmp	r3, #4
 800a430:	dc06      	bgt.n	800a440 <__ssvfiscanf_r+0x260>
 800a432:	466b      	mov	r3, sp
 800a434:	4622      	mov	r2, r4
 800a436:	a941      	add	r1, sp, #260	; 0x104
 800a438:	4630      	mov	r0, r6
 800a43a:	f000 f885 	bl	800a548 <_scanf_i>
 800a43e:	e788      	b.n	800a352 <__ssvfiscanf_r+0x172>
 800a440:	4b0e      	ldr	r3, [pc, #56]	; (800a47c <__ssvfiscanf_r+0x29c>)
 800a442:	2b00      	cmp	r3, #0
 800a444:	f43f aefc 	beq.w	800a240 <__ssvfiscanf_r+0x60>
 800a448:	466b      	mov	r3, sp
 800a44a:	4622      	mov	r2, r4
 800a44c:	a941      	add	r1, sp, #260	; 0x104
 800a44e:	4630      	mov	r0, r6
 800a450:	f3af 8000 	nop.w
 800a454:	e77d      	b.n	800a352 <__ssvfiscanf_r+0x172>
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a45c:	bf18      	it	ne
 800a45e:	f04f 30ff 	movne.w	r0, #4294967295
 800a462:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a46c:	e7f9      	b.n	800a462 <__ssvfiscanf_r+0x282>
 800a46e:	bf00      	nop
 800a470:	0800a12d 	.word	0x0800a12d
 800a474:	0800a1a7 	.word	0x0800a1a7
 800a478:	0800b964 	.word	0x0800b964
 800a47c:	00000000 	.word	0x00000000

0800a480 <_scanf_chars>:
 800a480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a484:	4615      	mov	r5, r2
 800a486:	688a      	ldr	r2, [r1, #8]
 800a488:	4680      	mov	r8, r0
 800a48a:	460c      	mov	r4, r1
 800a48c:	b932      	cbnz	r2, 800a49c <_scanf_chars+0x1c>
 800a48e:	698a      	ldr	r2, [r1, #24]
 800a490:	2a00      	cmp	r2, #0
 800a492:	bf14      	ite	ne
 800a494:	f04f 32ff 	movne.w	r2, #4294967295
 800a498:	2201      	moveq	r2, #1
 800a49a:	608a      	str	r2, [r1, #8]
 800a49c:	6822      	ldr	r2, [r4, #0]
 800a49e:	06d1      	lsls	r1, r2, #27
 800a4a0:	bf5f      	itttt	pl
 800a4a2:	681a      	ldrpl	r2, [r3, #0]
 800a4a4:	1d11      	addpl	r1, r2, #4
 800a4a6:	6019      	strpl	r1, [r3, #0]
 800a4a8:	6817      	ldrpl	r7, [r2, #0]
 800a4aa:	2600      	movs	r6, #0
 800a4ac:	69a3      	ldr	r3, [r4, #24]
 800a4ae:	b1db      	cbz	r3, 800a4e8 <_scanf_chars+0x68>
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d107      	bne.n	800a4c4 <_scanf_chars+0x44>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	6962      	ldr	r2, [r4, #20]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	5cd3      	ldrb	r3, [r2, r3]
 800a4bc:	b9a3      	cbnz	r3, 800a4e8 <_scanf_chars+0x68>
 800a4be:	2e00      	cmp	r6, #0
 800a4c0:	d132      	bne.n	800a528 <_scanf_chars+0xa8>
 800a4c2:	e006      	b.n	800a4d2 <_scanf_chars+0x52>
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d007      	beq.n	800a4d8 <_scanf_chars+0x58>
 800a4c8:	2e00      	cmp	r6, #0
 800a4ca:	d12d      	bne.n	800a528 <_scanf_chars+0xa8>
 800a4cc:	69a3      	ldr	r3, [r4, #24]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d12a      	bne.n	800a528 <_scanf_chars+0xa8>
 800a4d2:	2001      	movs	r0, #1
 800a4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4d8:	f000 fab4 	bl	800aa44 <__locale_ctype_ptr>
 800a4dc:	682b      	ldr	r3, [r5, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	4418      	add	r0, r3
 800a4e2:	7843      	ldrb	r3, [r0, #1]
 800a4e4:	071b      	lsls	r3, r3, #28
 800a4e6:	d4ef      	bmi.n	800a4c8 <_scanf_chars+0x48>
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	06da      	lsls	r2, r3, #27
 800a4ec:	bf5e      	ittt	pl
 800a4ee:	682b      	ldrpl	r3, [r5, #0]
 800a4f0:	781b      	ldrbpl	r3, [r3, #0]
 800a4f2:	703b      	strbpl	r3, [r7, #0]
 800a4f4:	682a      	ldr	r2, [r5, #0]
 800a4f6:	686b      	ldr	r3, [r5, #4]
 800a4f8:	f102 0201 	add.w	r2, r2, #1
 800a4fc:	602a      	str	r2, [r5, #0]
 800a4fe:	68a2      	ldr	r2, [r4, #8]
 800a500:	f103 33ff 	add.w	r3, r3, #4294967295
 800a504:	f102 32ff 	add.w	r2, r2, #4294967295
 800a508:	606b      	str	r3, [r5, #4]
 800a50a:	f106 0601 	add.w	r6, r6, #1
 800a50e:	bf58      	it	pl
 800a510:	3701      	addpl	r7, #1
 800a512:	60a2      	str	r2, [r4, #8]
 800a514:	b142      	cbz	r2, 800a528 <_scanf_chars+0xa8>
 800a516:	2b00      	cmp	r3, #0
 800a518:	dcc8      	bgt.n	800a4ac <_scanf_chars+0x2c>
 800a51a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a51e:	4629      	mov	r1, r5
 800a520:	4640      	mov	r0, r8
 800a522:	4798      	blx	r3
 800a524:	2800      	cmp	r0, #0
 800a526:	d0c1      	beq.n	800a4ac <_scanf_chars+0x2c>
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	f013 0310 	ands.w	r3, r3, #16
 800a52e:	d105      	bne.n	800a53c <_scanf_chars+0xbc>
 800a530:	68e2      	ldr	r2, [r4, #12]
 800a532:	3201      	adds	r2, #1
 800a534:	60e2      	str	r2, [r4, #12]
 800a536:	69a2      	ldr	r2, [r4, #24]
 800a538:	b102      	cbz	r2, 800a53c <_scanf_chars+0xbc>
 800a53a:	703b      	strb	r3, [r7, #0]
 800a53c:	6923      	ldr	r3, [r4, #16]
 800a53e:	441e      	add	r6, r3
 800a540:	6126      	str	r6, [r4, #16]
 800a542:	2000      	movs	r0, #0
 800a544:	e7c6      	b.n	800a4d4 <_scanf_chars+0x54>
	...

0800a548 <_scanf_i>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	469a      	mov	sl, r3
 800a54e:	4b74      	ldr	r3, [pc, #464]	; (800a720 <_scanf_i+0x1d8>)
 800a550:	460c      	mov	r4, r1
 800a552:	4683      	mov	fp, r0
 800a554:	4616      	mov	r6, r2
 800a556:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a55a:	b087      	sub	sp, #28
 800a55c:	ab03      	add	r3, sp, #12
 800a55e:	68a7      	ldr	r7, [r4, #8]
 800a560:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a564:	4b6f      	ldr	r3, [pc, #444]	; (800a724 <_scanf_i+0x1dc>)
 800a566:	69a1      	ldr	r1, [r4, #24]
 800a568:	4a6f      	ldr	r2, [pc, #444]	; (800a728 <_scanf_i+0x1e0>)
 800a56a:	2903      	cmp	r1, #3
 800a56c:	bf08      	it	eq
 800a56e:	461a      	moveq	r2, r3
 800a570:	1e7b      	subs	r3, r7, #1
 800a572:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a576:	bf84      	itt	hi
 800a578:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a57c:	60a3      	strhi	r3, [r4, #8]
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	9200      	str	r2, [sp, #0]
 800a582:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a586:	bf88      	it	hi
 800a588:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a58c:	f104 091c 	add.w	r9, r4, #28
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bf8c      	ite	hi
 800a594:	197f      	addhi	r7, r7, r5
 800a596:	2700      	movls	r7, #0
 800a598:	464b      	mov	r3, r9
 800a59a:	f04f 0800 	mov.w	r8, #0
 800a59e:	9301      	str	r3, [sp, #4]
 800a5a0:	6831      	ldr	r1, [r6, #0]
 800a5a2:	ab03      	add	r3, sp, #12
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a5aa:	7809      	ldrb	r1, [r1, #0]
 800a5ac:	f7f5 fe20 	bl	80001f0 <memchr>
 800a5b0:	9b01      	ldr	r3, [sp, #4]
 800a5b2:	b330      	cbz	r0, 800a602 <_scanf_i+0xba>
 800a5b4:	f1b8 0f01 	cmp.w	r8, #1
 800a5b8:	d15a      	bne.n	800a670 <_scanf_i+0x128>
 800a5ba:	6862      	ldr	r2, [r4, #4]
 800a5bc:	b92a      	cbnz	r2, 800a5ca <_scanf_i+0x82>
 800a5be:	6822      	ldr	r2, [r4, #0]
 800a5c0:	2108      	movs	r1, #8
 800a5c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5c6:	6061      	str	r1, [r4, #4]
 800a5c8:	6022      	str	r2, [r4, #0]
 800a5ca:	6822      	ldr	r2, [r4, #0]
 800a5cc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a5d0:	6022      	str	r2, [r4, #0]
 800a5d2:	68a2      	ldr	r2, [r4, #8]
 800a5d4:	1e51      	subs	r1, r2, #1
 800a5d6:	60a1      	str	r1, [r4, #8]
 800a5d8:	b19a      	cbz	r2, 800a602 <_scanf_i+0xba>
 800a5da:	6832      	ldr	r2, [r6, #0]
 800a5dc:	1c51      	adds	r1, r2, #1
 800a5de:	6031      	str	r1, [r6, #0]
 800a5e0:	7812      	ldrb	r2, [r2, #0]
 800a5e2:	701a      	strb	r2, [r3, #0]
 800a5e4:	1c5d      	adds	r5, r3, #1
 800a5e6:	6873      	ldr	r3, [r6, #4]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	6073      	str	r3, [r6, #4]
 800a5ee:	dc07      	bgt.n	800a600 <_scanf_i+0xb8>
 800a5f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5f4:	4631      	mov	r1, r6
 800a5f6:	4658      	mov	r0, fp
 800a5f8:	4798      	blx	r3
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	f040 8086 	bne.w	800a70c <_scanf_i+0x1c4>
 800a600:	462b      	mov	r3, r5
 800a602:	f108 0801 	add.w	r8, r8, #1
 800a606:	f1b8 0f03 	cmp.w	r8, #3
 800a60a:	d1c8      	bne.n	800a59e <_scanf_i+0x56>
 800a60c:	6862      	ldr	r2, [r4, #4]
 800a60e:	b90a      	cbnz	r2, 800a614 <_scanf_i+0xcc>
 800a610:	220a      	movs	r2, #10
 800a612:	6062      	str	r2, [r4, #4]
 800a614:	6862      	ldr	r2, [r4, #4]
 800a616:	4945      	ldr	r1, [pc, #276]	; (800a72c <_scanf_i+0x1e4>)
 800a618:	6960      	ldr	r0, [r4, #20]
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	1a89      	subs	r1, r1, r2
 800a61e:	f000 f887 	bl	800a730 <__sccl>
 800a622:	9b01      	ldr	r3, [sp, #4]
 800a624:	f04f 0800 	mov.w	r8, #0
 800a628:	461d      	mov	r5, r3
 800a62a:	68a3      	ldr	r3, [r4, #8]
 800a62c:	6822      	ldr	r2, [r4, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d03a      	beq.n	800a6a8 <_scanf_i+0x160>
 800a632:	6831      	ldr	r1, [r6, #0]
 800a634:	6960      	ldr	r0, [r4, #20]
 800a636:	f891 c000 	ldrb.w	ip, [r1]
 800a63a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a63e:	2800      	cmp	r0, #0
 800a640:	d032      	beq.n	800a6a8 <_scanf_i+0x160>
 800a642:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a646:	d121      	bne.n	800a68c <_scanf_i+0x144>
 800a648:	0510      	lsls	r0, r2, #20
 800a64a:	d51f      	bpl.n	800a68c <_scanf_i+0x144>
 800a64c:	f108 0801 	add.w	r8, r8, #1
 800a650:	b117      	cbz	r7, 800a658 <_scanf_i+0x110>
 800a652:	3301      	adds	r3, #1
 800a654:	3f01      	subs	r7, #1
 800a656:	60a3      	str	r3, [r4, #8]
 800a658:	6873      	ldr	r3, [r6, #4]
 800a65a:	3b01      	subs	r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	6073      	str	r3, [r6, #4]
 800a660:	dd1b      	ble.n	800a69a <_scanf_i+0x152>
 800a662:	6833      	ldr	r3, [r6, #0]
 800a664:	3301      	adds	r3, #1
 800a666:	6033      	str	r3, [r6, #0]
 800a668:	68a3      	ldr	r3, [r4, #8]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	60a3      	str	r3, [r4, #8]
 800a66e:	e7dc      	b.n	800a62a <_scanf_i+0xe2>
 800a670:	f1b8 0f02 	cmp.w	r8, #2
 800a674:	d1ad      	bne.n	800a5d2 <_scanf_i+0x8a>
 800a676:	6822      	ldr	r2, [r4, #0]
 800a678:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a67c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a680:	d1bf      	bne.n	800a602 <_scanf_i+0xba>
 800a682:	2110      	movs	r1, #16
 800a684:	6061      	str	r1, [r4, #4]
 800a686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a68a:	e7a1      	b.n	800a5d0 <_scanf_i+0x88>
 800a68c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a690:	6022      	str	r2, [r4, #0]
 800a692:	780b      	ldrb	r3, [r1, #0]
 800a694:	702b      	strb	r3, [r5, #0]
 800a696:	3501      	adds	r5, #1
 800a698:	e7de      	b.n	800a658 <_scanf_i+0x110>
 800a69a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a69e:	4631      	mov	r1, r6
 800a6a0:	4658      	mov	r0, fp
 800a6a2:	4798      	blx	r3
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d0df      	beq.n	800a668 <_scanf_i+0x120>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	05d9      	lsls	r1, r3, #23
 800a6ac:	d50c      	bpl.n	800a6c8 <_scanf_i+0x180>
 800a6ae:	454d      	cmp	r5, r9
 800a6b0:	d908      	bls.n	800a6c4 <_scanf_i+0x17c>
 800a6b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a6b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6ba:	4632      	mov	r2, r6
 800a6bc:	4658      	mov	r0, fp
 800a6be:	4798      	blx	r3
 800a6c0:	1e6f      	subs	r7, r5, #1
 800a6c2:	463d      	mov	r5, r7
 800a6c4:	454d      	cmp	r5, r9
 800a6c6:	d029      	beq.n	800a71c <_scanf_i+0x1d4>
 800a6c8:	6822      	ldr	r2, [r4, #0]
 800a6ca:	f012 0210 	ands.w	r2, r2, #16
 800a6ce:	d113      	bne.n	800a6f8 <_scanf_i+0x1b0>
 800a6d0:	702a      	strb	r2, [r5, #0]
 800a6d2:	6863      	ldr	r3, [r4, #4]
 800a6d4:	9e00      	ldr	r6, [sp, #0]
 800a6d6:	4649      	mov	r1, r9
 800a6d8:	4658      	mov	r0, fp
 800a6da:	47b0      	blx	r6
 800a6dc:	f8da 3000 	ldr.w	r3, [sl]
 800a6e0:	6821      	ldr	r1, [r4, #0]
 800a6e2:	1d1a      	adds	r2, r3, #4
 800a6e4:	f8ca 2000 	str.w	r2, [sl]
 800a6e8:	f011 0f20 	tst.w	r1, #32
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	d010      	beq.n	800a712 <_scanf_i+0x1ca>
 800a6f0:	6018      	str	r0, [r3, #0]
 800a6f2:	68e3      	ldr	r3, [r4, #12]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	60e3      	str	r3, [r4, #12]
 800a6f8:	eba5 0509 	sub.w	r5, r5, r9
 800a6fc:	44a8      	add	r8, r5
 800a6fe:	6925      	ldr	r5, [r4, #16]
 800a700:	4445      	add	r5, r8
 800a702:	6125      	str	r5, [r4, #16]
 800a704:	2000      	movs	r0, #0
 800a706:	b007      	add	sp, #28
 800a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70c:	f04f 0800 	mov.w	r8, #0
 800a710:	e7ca      	b.n	800a6a8 <_scanf_i+0x160>
 800a712:	07ca      	lsls	r2, r1, #31
 800a714:	bf4c      	ite	mi
 800a716:	8018      	strhmi	r0, [r3, #0]
 800a718:	6018      	strpl	r0, [r3, #0]
 800a71a:	e7ea      	b.n	800a6f2 <_scanf_i+0x1aa>
 800a71c:	2001      	movs	r0, #1
 800a71e:	e7f2      	b.n	800a706 <_scanf_i+0x1be>
 800a720:	0800abe4 	.word	0x0800abe4
 800a724:	0800a88d 	.word	0x0800a88d
 800a728:	0800a9a5 	.word	0x0800a9a5
 800a72c:	0800b978 	.word	0x0800b978

0800a730 <__sccl>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	780b      	ldrb	r3, [r1, #0]
 800a734:	2b5e      	cmp	r3, #94	; 0x5e
 800a736:	bf13      	iteet	ne
 800a738:	1c4a      	addne	r2, r1, #1
 800a73a:	1c8a      	addeq	r2, r1, #2
 800a73c:	784b      	ldrbeq	r3, [r1, #1]
 800a73e:	2100      	movne	r1, #0
 800a740:	bf08      	it	eq
 800a742:	2101      	moveq	r1, #1
 800a744:	1e44      	subs	r4, r0, #1
 800a746:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800a74a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800a74e:	42ac      	cmp	r4, r5
 800a750:	d1fb      	bne.n	800a74a <__sccl+0x1a>
 800a752:	b913      	cbnz	r3, 800a75a <__sccl+0x2a>
 800a754:	3a01      	subs	r2, #1
 800a756:	4610      	mov	r0, r2
 800a758:	bd70      	pop	{r4, r5, r6, pc}
 800a75a:	f081 0401 	eor.w	r4, r1, #1
 800a75e:	54c4      	strb	r4, [r0, r3]
 800a760:	1c51      	adds	r1, r2, #1
 800a762:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800a766:	2d2d      	cmp	r5, #45	; 0x2d
 800a768:	f101 36ff 	add.w	r6, r1, #4294967295
 800a76c:	460a      	mov	r2, r1
 800a76e:	d006      	beq.n	800a77e <__sccl+0x4e>
 800a770:	2d5d      	cmp	r5, #93	; 0x5d
 800a772:	d0f0      	beq.n	800a756 <__sccl+0x26>
 800a774:	b90d      	cbnz	r5, 800a77a <__sccl+0x4a>
 800a776:	4632      	mov	r2, r6
 800a778:	e7ed      	b.n	800a756 <__sccl+0x26>
 800a77a:	462b      	mov	r3, r5
 800a77c:	e7ef      	b.n	800a75e <__sccl+0x2e>
 800a77e:	780e      	ldrb	r6, [r1, #0]
 800a780:	2e5d      	cmp	r6, #93	; 0x5d
 800a782:	d0fa      	beq.n	800a77a <__sccl+0x4a>
 800a784:	42b3      	cmp	r3, r6
 800a786:	dcf8      	bgt.n	800a77a <__sccl+0x4a>
 800a788:	3301      	adds	r3, #1
 800a78a:	429e      	cmp	r6, r3
 800a78c:	54c4      	strb	r4, [r0, r3]
 800a78e:	dcfb      	bgt.n	800a788 <__sccl+0x58>
 800a790:	3102      	adds	r1, #2
 800a792:	e7e6      	b.n	800a762 <__sccl+0x32>

0800a794 <_strtol_l.isra.0>:
 800a794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	4680      	mov	r8, r0
 800a79a:	4689      	mov	r9, r1
 800a79c:	4692      	mov	sl, r2
 800a79e:	461e      	mov	r6, r3
 800a7a0:	460f      	mov	r7, r1
 800a7a2:	463d      	mov	r5, r7
 800a7a4:	9808      	ldr	r0, [sp, #32]
 800a7a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7aa:	f000 f947 	bl	800aa3c <__locale_ctype_ptr_l>
 800a7ae:	4420      	add	r0, r4
 800a7b0:	7843      	ldrb	r3, [r0, #1]
 800a7b2:	f013 0308 	ands.w	r3, r3, #8
 800a7b6:	d132      	bne.n	800a81e <_strtol_l.isra.0+0x8a>
 800a7b8:	2c2d      	cmp	r4, #45	; 0x2d
 800a7ba:	d132      	bne.n	800a822 <_strtol_l.isra.0+0x8e>
 800a7bc:	787c      	ldrb	r4, [r7, #1]
 800a7be:	1cbd      	adds	r5, r7, #2
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	2e00      	cmp	r6, #0
 800a7c4:	d05d      	beq.n	800a882 <_strtol_l.isra.0+0xee>
 800a7c6:	2e10      	cmp	r6, #16
 800a7c8:	d109      	bne.n	800a7de <_strtol_l.isra.0+0x4a>
 800a7ca:	2c30      	cmp	r4, #48	; 0x30
 800a7cc:	d107      	bne.n	800a7de <_strtol_l.isra.0+0x4a>
 800a7ce:	782b      	ldrb	r3, [r5, #0]
 800a7d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7d4:	2b58      	cmp	r3, #88	; 0x58
 800a7d6:	d14f      	bne.n	800a878 <_strtol_l.isra.0+0xe4>
 800a7d8:	786c      	ldrb	r4, [r5, #1]
 800a7da:	2610      	movs	r6, #16
 800a7dc:	3502      	adds	r5, #2
 800a7de:	2a00      	cmp	r2, #0
 800a7e0:	bf14      	ite	ne
 800a7e2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a7e6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a7ea:	2700      	movs	r7, #0
 800a7ec:	fbb1 fcf6 	udiv	ip, r1, r6
 800a7f0:	4638      	mov	r0, r7
 800a7f2:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a7f6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a7fa:	2b09      	cmp	r3, #9
 800a7fc:	d817      	bhi.n	800a82e <_strtol_l.isra.0+0x9a>
 800a7fe:	461c      	mov	r4, r3
 800a800:	42a6      	cmp	r6, r4
 800a802:	dd23      	ble.n	800a84c <_strtol_l.isra.0+0xb8>
 800a804:	1c7b      	adds	r3, r7, #1
 800a806:	d007      	beq.n	800a818 <_strtol_l.isra.0+0x84>
 800a808:	4584      	cmp	ip, r0
 800a80a:	d31c      	bcc.n	800a846 <_strtol_l.isra.0+0xb2>
 800a80c:	d101      	bne.n	800a812 <_strtol_l.isra.0+0x7e>
 800a80e:	45a6      	cmp	lr, r4
 800a810:	db19      	blt.n	800a846 <_strtol_l.isra.0+0xb2>
 800a812:	fb00 4006 	mla	r0, r0, r6, r4
 800a816:	2701      	movs	r7, #1
 800a818:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a81c:	e7eb      	b.n	800a7f6 <_strtol_l.isra.0+0x62>
 800a81e:	462f      	mov	r7, r5
 800a820:	e7bf      	b.n	800a7a2 <_strtol_l.isra.0+0xe>
 800a822:	2c2b      	cmp	r4, #43	; 0x2b
 800a824:	bf04      	itt	eq
 800a826:	1cbd      	addeq	r5, r7, #2
 800a828:	787c      	ldrbeq	r4, [r7, #1]
 800a82a:	461a      	mov	r2, r3
 800a82c:	e7c9      	b.n	800a7c2 <_strtol_l.isra.0+0x2e>
 800a82e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a832:	2b19      	cmp	r3, #25
 800a834:	d801      	bhi.n	800a83a <_strtol_l.isra.0+0xa6>
 800a836:	3c37      	subs	r4, #55	; 0x37
 800a838:	e7e2      	b.n	800a800 <_strtol_l.isra.0+0x6c>
 800a83a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a83e:	2b19      	cmp	r3, #25
 800a840:	d804      	bhi.n	800a84c <_strtol_l.isra.0+0xb8>
 800a842:	3c57      	subs	r4, #87	; 0x57
 800a844:	e7dc      	b.n	800a800 <_strtol_l.isra.0+0x6c>
 800a846:	f04f 37ff 	mov.w	r7, #4294967295
 800a84a:	e7e5      	b.n	800a818 <_strtol_l.isra.0+0x84>
 800a84c:	1c7b      	adds	r3, r7, #1
 800a84e:	d108      	bne.n	800a862 <_strtol_l.isra.0+0xce>
 800a850:	2322      	movs	r3, #34	; 0x22
 800a852:	f8c8 3000 	str.w	r3, [r8]
 800a856:	4608      	mov	r0, r1
 800a858:	f1ba 0f00 	cmp.w	sl, #0
 800a85c:	d107      	bne.n	800a86e <_strtol_l.isra.0+0xda>
 800a85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a862:	b102      	cbz	r2, 800a866 <_strtol_l.isra.0+0xd2>
 800a864:	4240      	negs	r0, r0
 800a866:	f1ba 0f00 	cmp.w	sl, #0
 800a86a:	d0f8      	beq.n	800a85e <_strtol_l.isra.0+0xca>
 800a86c:	b10f      	cbz	r7, 800a872 <_strtol_l.isra.0+0xde>
 800a86e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a872:	f8ca 9000 	str.w	r9, [sl]
 800a876:	e7f2      	b.n	800a85e <_strtol_l.isra.0+0xca>
 800a878:	2430      	movs	r4, #48	; 0x30
 800a87a:	2e00      	cmp	r6, #0
 800a87c:	d1af      	bne.n	800a7de <_strtol_l.isra.0+0x4a>
 800a87e:	2608      	movs	r6, #8
 800a880:	e7ad      	b.n	800a7de <_strtol_l.isra.0+0x4a>
 800a882:	2c30      	cmp	r4, #48	; 0x30
 800a884:	d0a3      	beq.n	800a7ce <_strtol_l.isra.0+0x3a>
 800a886:	260a      	movs	r6, #10
 800a888:	e7a9      	b.n	800a7de <_strtol_l.isra.0+0x4a>
	...

0800a88c <_strtol_r>:
 800a88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a88e:	4c06      	ldr	r4, [pc, #24]	; (800a8a8 <_strtol_r+0x1c>)
 800a890:	4d06      	ldr	r5, [pc, #24]	; (800a8ac <_strtol_r+0x20>)
 800a892:	6824      	ldr	r4, [r4, #0]
 800a894:	6a24      	ldr	r4, [r4, #32]
 800a896:	2c00      	cmp	r4, #0
 800a898:	bf08      	it	eq
 800a89a:	462c      	moveq	r4, r5
 800a89c:	9400      	str	r4, [sp, #0]
 800a89e:	f7ff ff79 	bl	800a794 <_strtol_l.isra.0>
 800a8a2:	b003      	add	sp, #12
 800a8a4:	bd30      	pop	{r4, r5, pc}
 800a8a6:	bf00      	nop
 800a8a8:	2000034c 	.word	0x2000034c
 800a8ac:	200003b0 	.word	0x200003b0

0800a8b0 <_strtoul_l.isra.0>:
 800a8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b4:	4680      	mov	r8, r0
 800a8b6:	4689      	mov	r9, r1
 800a8b8:	4692      	mov	sl, r2
 800a8ba:	461e      	mov	r6, r3
 800a8bc:	460f      	mov	r7, r1
 800a8be:	463d      	mov	r5, r7
 800a8c0:	9808      	ldr	r0, [sp, #32]
 800a8c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8c6:	f000 f8b9 	bl	800aa3c <__locale_ctype_ptr_l>
 800a8ca:	4420      	add	r0, r4
 800a8cc:	7843      	ldrb	r3, [r0, #1]
 800a8ce:	f013 0308 	ands.w	r3, r3, #8
 800a8d2:	d130      	bne.n	800a936 <_strtoul_l.isra.0+0x86>
 800a8d4:	2c2d      	cmp	r4, #45	; 0x2d
 800a8d6:	d130      	bne.n	800a93a <_strtoul_l.isra.0+0x8a>
 800a8d8:	787c      	ldrb	r4, [r7, #1]
 800a8da:	1cbd      	adds	r5, r7, #2
 800a8dc:	2101      	movs	r1, #1
 800a8de:	2e00      	cmp	r6, #0
 800a8e0:	d05c      	beq.n	800a99c <_strtoul_l.isra.0+0xec>
 800a8e2:	2e10      	cmp	r6, #16
 800a8e4:	d109      	bne.n	800a8fa <_strtoul_l.isra.0+0x4a>
 800a8e6:	2c30      	cmp	r4, #48	; 0x30
 800a8e8:	d107      	bne.n	800a8fa <_strtoul_l.isra.0+0x4a>
 800a8ea:	782b      	ldrb	r3, [r5, #0]
 800a8ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a8f0:	2b58      	cmp	r3, #88	; 0x58
 800a8f2:	d14e      	bne.n	800a992 <_strtoul_l.isra.0+0xe2>
 800a8f4:	786c      	ldrb	r4, [r5, #1]
 800a8f6:	2610      	movs	r6, #16
 800a8f8:	3502      	adds	r5, #2
 800a8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a8fe:	2300      	movs	r3, #0
 800a900:	fbb2 f2f6 	udiv	r2, r2, r6
 800a904:	fb06 fc02 	mul.w	ip, r6, r2
 800a908:	ea6f 0c0c 	mvn.w	ip, ip
 800a90c:	4618      	mov	r0, r3
 800a90e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a912:	2f09      	cmp	r7, #9
 800a914:	d817      	bhi.n	800a946 <_strtoul_l.isra.0+0x96>
 800a916:	463c      	mov	r4, r7
 800a918:	42a6      	cmp	r6, r4
 800a91a:	dd23      	ble.n	800a964 <_strtoul_l.isra.0+0xb4>
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	db1e      	blt.n	800a95e <_strtoul_l.isra.0+0xae>
 800a920:	4282      	cmp	r2, r0
 800a922:	d31c      	bcc.n	800a95e <_strtoul_l.isra.0+0xae>
 800a924:	d101      	bne.n	800a92a <_strtoul_l.isra.0+0x7a>
 800a926:	45a4      	cmp	ip, r4
 800a928:	db19      	blt.n	800a95e <_strtoul_l.isra.0+0xae>
 800a92a:	fb00 4006 	mla	r0, r0, r6, r4
 800a92e:	2301      	movs	r3, #1
 800a930:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a934:	e7eb      	b.n	800a90e <_strtoul_l.isra.0+0x5e>
 800a936:	462f      	mov	r7, r5
 800a938:	e7c1      	b.n	800a8be <_strtoul_l.isra.0+0xe>
 800a93a:	2c2b      	cmp	r4, #43	; 0x2b
 800a93c:	bf04      	itt	eq
 800a93e:	1cbd      	addeq	r5, r7, #2
 800a940:	787c      	ldrbeq	r4, [r7, #1]
 800a942:	4619      	mov	r1, r3
 800a944:	e7cb      	b.n	800a8de <_strtoul_l.isra.0+0x2e>
 800a946:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a94a:	2f19      	cmp	r7, #25
 800a94c:	d801      	bhi.n	800a952 <_strtoul_l.isra.0+0xa2>
 800a94e:	3c37      	subs	r4, #55	; 0x37
 800a950:	e7e2      	b.n	800a918 <_strtoul_l.isra.0+0x68>
 800a952:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a956:	2f19      	cmp	r7, #25
 800a958:	d804      	bhi.n	800a964 <_strtoul_l.isra.0+0xb4>
 800a95a:	3c57      	subs	r4, #87	; 0x57
 800a95c:	e7dc      	b.n	800a918 <_strtoul_l.isra.0+0x68>
 800a95e:	f04f 33ff 	mov.w	r3, #4294967295
 800a962:	e7e5      	b.n	800a930 <_strtoul_l.isra.0+0x80>
 800a964:	2b00      	cmp	r3, #0
 800a966:	da09      	bge.n	800a97c <_strtoul_l.isra.0+0xcc>
 800a968:	2322      	movs	r3, #34	; 0x22
 800a96a:	f8c8 3000 	str.w	r3, [r8]
 800a96e:	f04f 30ff 	mov.w	r0, #4294967295
 800a972:	f1ba 0f00 	cmp.w	sl, #0
 800a976:	d107      	bne.n	800a988 <_strtoul_l.isra.0+0xd8>
 800a978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97c:	b101      	cbz	r1, 800a980 <_strtoul_l.isra.0+0xd0>
 800a97e:	4240      	negs	r0, r0
 800a980:	f1ba 0f00 	cmp.w	sl, #0
 800a984:	d0f8      	beq.n	800a978 <_strtoul_l.isra.0+0xc8>
 800a986:	b10b      	cbz	r3, 800a98c <_strtoul_l.isra.0+0xdc>
 800a988:	f105 39ff 	add.w	r9, r5, #4294967295
 800a98c:	f8ca 9000 	str.w	r9, [sl]
 800a990:	e7f2      	b.n	800a978 <_strtoul_l.isra.0+0xc8>
 800a992:	2430      	movs	r4, #48	; 0x30
 800a994:	2e00      	cmp	r6, #0
 800a996:	d1b0      	bne.n	800a8fa <_strtoul_l.isra.0+0x4a>
 800a998:	2608      	movs	r6, #8
 800a99a:	e7ae      	b.n	800a8fa <_strtoul_l.isra.0+0x4a>
 800a99c:	2c30      	cmp	r4, #48	; 0x30
 800a99e:	d0a4      	beq.n	800a8ea <_strtoul_l.isra.0+0x3a>
 800a9a0:	260a      	movs	r6, #10
 800a9a2:	e7aa      	b.n	800a8fa <_strtoul_l.isra.0+0x4a>

0800a9a4 <_strtoul_r>:
 800a9a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9a6:	4c06      	ldr	r4, [pc, #24]	; (800a9c0 <_strtoul_r+0x1c>)
 800a9a8:	4d06      	ldr	r5, [pc, #24]	; (800a9c4 <_strtoul_r+0x20>)
 800a9aa:	6824      	ldr	r4, [r4, #0]
 800a9ac:	6a24      	ldr	r4, [r4, #32]
 800a9ae:	2c00      	cmp	r4, #0
 800a9b0:	bf08      	it	eq
 800a9b2:	462c      	moveq	r4, r5
 800a9b4:	9400      	str	r4, [sp, #0]
 800a9b6:	f7ff ff7b 	bl	800a8b0 <_strtoul_l.isra.0>
 800a9ba:	b003      	add	sp, #12
 800a9bc:	bd30      	pop	{r4, r5, pc}
 800a9be:	bf00      	nop
 800a9c0:	2000034c 	.word	0x2000034c
 800a9c4:	200003b0 	.word	0x200003b0

0800a9c8 <__submore>:
 800a9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a9d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9d4:	4299      	cmp	r1, r3
 800a9d6:	d11d      	bne.n	800aa14 <__submore+0x4c>
 800a9d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a9dc:	f7ff fb0e 	bl	8009ffc <_malloc_r>
 800a9e0:	b918      	cbnz	r0, 800a9ea <__submore+0x22>
 800a9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ee:	63a3      	str	r3, [r4, #56]	; 0x38
 800a9f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a9f4:	6360      	str	r0, [r4, #52]	; 0x34
 800a9f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a9fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a9fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800aa02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aa06:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800aa0a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aa0e:	6020      	str	r0, [r4, #0]
 800aa10:	2000      	movs	r0, #0
 800aa12:	e7e8      	b.n	800a9e6 <__submore+0x1e>
 800aa14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aa16:	0077      	lsls	r7, r6, #1
 800aa18:	463a      	mov	r2, r7
 800aa1a:	f000 f833 	bl	800aa84 <_realloc_r>
 800aa1e:	4605      	mov	r5, r0
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d0de      	beq.n	800a9e2 <__submore+0x1a>
 800aa24:	eb00 0806 	add.w	r8, r0, r6
 800aa28:	4601      	mov	r1, r0
 800aa2a:	4632      	mov	r2, r6
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	f7ff fa83 	bl	8009f38 <memcpy>
 800aa32:	f8c4 8000 	str.w	r8, [r4]
 800aa36:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800aa3a:	e7e9      	b.n	800aa10 <__submore+0x48>

0800aa3c <__locale_ctype_ptr_l>:
 800aa3c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800aa40:	4770      	bx	lr
	...

0800aa44 <__locale_ctype_ptr>:
 800aa44:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <__locale_ctype_ptr+0x14>)
 800aa46:	4a05      	ldr	r2, [pc, #20]	; (800aa5c <__locale_ctype_ptr+0x18>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bf08      	it	eq
 800aa50:	4613      	moveq	r3, r2
 800aa52:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800aa56:	4770      	bx	lr
 800aa58:	2000034c 	.word	0x2000034c
 800aa5c:	200003b0 	.word	0x200003b0

0800aa60 <__ascii_mbtowc>:
 800aa60:	b082      	sub	sp, #8
 800aa62:	b901      	cbnz	r1, 800aa66 <__ascii_mbtowc+0x6>
 800aa64:	a901      	add	r1, sp, #4
 800aa66:	b142      	cbz	r2, 800aa7a <__ascii_mbtowc+0x1a>
 800aa68:	b14b      	cbz	r3, 800aa7e <__ascii_mbtowc+0x1e>
 800aa6a:	7813      	ldrb	r3, [r2, #0]
 800aa6c:	600b      	str	r3, [r1, #0]
 800aa6e:	7812      	ldrb	r2, [r2, #0]
 800aa70:	1c10      	adds	r0, r2, #0
 800aa72:	bf18      	it	ne
 800aa74:	2001      	movne	r0, #1
 800aa76:	b002      	add	sp, #8
 800aa78:	4770      	bx	lr
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	e7fb      	b.n	800aa76 <__ascii_mbtowc+0x16>
 800aa7e:	f06f 0001 	mvn.w	r0, #1
 800aa82:	e7f8      	b.n	800aa76 <__ascii_mbtowc+0x16>

0800aa84 <_realloc_r>:
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa86:	4607      	mov	r7, r0
 800aa88:	4614      	mov	r4, r2
 800aa8a:	460e      	mov	r6, r1
 800aa8c:	b921      	cbnz	r1, 800aa98 <_realloc_r+0x14>
 800aa8e:	4611      	mov	r1, r2
 800aa90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa94:	f7ff bab2 	b.w	8009ffc <_malloc_r>
 800aa98:	b922      	cbnz	r2, 800aaa4 <_realloc_r+0x20>
 800aa9a:	f7ff fa61 	bl	8009f60 <_free_r>
 800aa9e:	4625      	mov	r5, r4
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa4:	f000 f821 	bl	800aaea <_malloc_usable_size_r>
 800aaa8:	42a0      	cmp	r0, r4
 800aaaa:	d20f      	bcs.n	800aacc <_realloc_r+0x48>
 800aaac:	4621      	mov	r1, r4
 800aaae:	4638      	mov	r0, r7
 800aab0:	f7ff faa4 	bl	8009ffc <_malloc_r>
 800aab4:	4605      	mov	r5, r0
 800aab6:	2800      	cmp	r0, #0
 800aab8:	d0f2      	beq.n	800aaa0 <_realloc_r+0x1c>
 800aaba:	4631      	mov	r1, r6
 800aabc:	4622      	mov	r2, r4
 800aabe:	f7ff fa3b 	bl	8009f38 <memcpy>
 800aac2:	4631      	mov	r1, r6
 800aac4:	4638      	mov	r0, r7
 800aac6:	f7ff fa4b 	bl	8009f60 <_free_r>
 800aaca:	e7e9      	b.n	800aaa0 <_realloc_r+0x1c>
 800aacc:	4635      	mov	r5, r6
 800aace:	e7e7      	b.n	800aaa0 <_realloc_r+0x1c>

0800aad0 <__ascii_wctomb>:
 800aad0:	b149      	cbz	r1, 800aae6 <__ascii_wctomb+0x16>
 800aad2:	2aff      	cmp	r2, #255	; 0xff
 800aad4:	bf85      	ittet	hi
 800aad6:	238a      	movhi	r3, #138	; 0x8a
 800aad8:	6003      	strhi	r3, [r0, #0]
 800aada:	700a      	strbls	r2, [r1, #0]
 800aadc:	f04f 30ff 	movhi.w	r0, #4294967295
 800aae0:	bf98      	it	ls
 800aae2:	2001      	movls	r0, #1
 800aae4:	4770      	bx	lr
 800aae6:	4608      	mov	r0, r1
 800aae8:	4770      	bx	lr

0800aaea <_malloc_usable_size_r>:
 800aaea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaee:	1f18      	subs	r0, r3, #4
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bfbc      	itt	lt
 800aaf4:	580b      	ldrlt	r3, [r1, r0]
 800aaf6:	18c0      	addlt	r0, r0, r3
 800aaf8:	4770      	bx	lr
	...

0800aafc <_init>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	bf00      	nop
 800ab00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab02:	bc08      	pop	{r3}
 800ab04:	469e      	mov	lr, r3
 800ab06:	4770      	bx	lr

0800ab08 <_fini>:
 800ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0a:	bf00      	nop
 800ab0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab0e:	bc08      	pop	{r3}
 800ab10:	469e      	mov	lr, r3
 800ab12:	4770      	bx	lr
