
SR_MHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ebc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e40  0800a054  0800a054  0001a054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae94  0800ae94  000203b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae94  0800ae94  0001ae94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae9c  0800ae9c  000203b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae9c  0800ae9c  0001ae9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aea0  0800aea0  0001aea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  0800aea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd0  200003b0  0800b254  000203b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001380  0800b254  00021380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021308  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004545  00000000  00000000  000416e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001808  00000000  00000000  00045c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001670  00000000  00000000  00047438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007223  00000000  00000000  00048aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016e15  00000000  00000000  0004fccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009409d  00000000  00000000  00066ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fab7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000654c  00000000  00000000  000fabf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003b0 	.word	0x200003b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a03c 	.word	0x0800a03c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003b4 	.word	0x200003b4
 80001d4:	0800a03c 	.word	0x0800a03c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	; 0x28
 80004ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	4b4a      	ldr	r3, [pc, #296]	; (800062c <MX_GPIO_Init+0x144>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a49      	ldr	r2, [pc, #292]	; (800062c <MX_GPIO_Init+0x144>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b47      	ldr	r3, [pc, #284]	; (800062c <MX_GPIO_Init+0x144>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	4b43      	ldr	r3, [pc, #268]	; (800062c <MX_GPIO_Init+0x144>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a42      	ldr	r2, [pc, #264]	; (800062c <MX_GPIO_Init+0x144>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b40      	ldr	r3, [pc, #256]	; (800062c <MX_GPIO_Init+0x144>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	4b3c      	ldr	r3, [pc, #240]	; (800062c <MX_GPIO_Init+0x144>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a3b      	ldr	r2, [pc, #236]	; (800062c <MX_GPIO_Init+0x144>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b39      	ldr	r3, [pc, #228]	; (800062c <MX_GPIO_Init+0x144>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	4b35      	ldr	r3, [pc, #212]	; (800062c <MX_GPIO_Init+0x144>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a34      	ldr	r2, [pc, #208]	; (800062c <MX_GPIO_Init+0x144>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b32      	ldr	r3, [pc, #200]	; (800062c <MX_GPIO_Init+0x144>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000574:	482e      	ldr	r0, [pc, #184]	; (8000630 <MX_GPIO_Init+0x148>)
 8000576:	f002 fa35 	bl	80029e4 <HAL_GPIO_WritePin>
                          |CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000580:	482c      	ldr	r0, [pc, #176]	; (8000634 <MX_GPIO_Init+0x14c>)
 8000582:	f002 fa2f 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin;
 8000586:	231c      	movs	r3, #28
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_GPIO_Init+0x150>)
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4825      	ldr	r0, [pc, #148]	; (8000630 <MX_GPIO_Init+0x148>)
 800059a:	f002 f889 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800059e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80005a2:	617b      	str	r3, [r7, #20]
                          |CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	481e      	ldr	r0, [pc, #120]	; (8000630 <MX_GPIO_Init+0x148>)
 80005b8:	f002 f87a 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_BUT_Pin;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	4819      	ldr	r0, [pc, #100]	; (8000634 <MX_GPIO_Init+0x14c>)
 80005d0:	f002 f86e 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 80005d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4811      	ldr	r0, [pc, #68]	; (8000634 <MX_GPIO_Init+0x14c>)
 80005ee:	f002 f85f 	bl	80026b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2008      	movs	r0, #8
 80005f8:	f002 f823 	bl	8002642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005fc:	2008      	movs	r0, #8
 80005fe:	f002 f83c 	bl	800267a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2009      	movs	r0, #9
 8000608:	f002 f81b 	bl	8002642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800060c:	2009      	movs	r0, #9
 800060e:	f002 f834 	bl	800267a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	200a      	movs	r0, #10
 8000618:	f002 f813 	bl	8002642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800061c:	200a      	movs	r0, #10
 800061e:	f002 f82c 	bl	800267a <HAL_NVIC_EnableIRQ>

}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000
 8000634:	40020400 	.word	0x40020400
 8000638:	10110000 	.word	0x10110000

0800063c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_I2C1_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_I2C1_Init+0x50>)
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_I2C1_Init+0x58>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_I2C1_Init+0x50>)
 800065a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_I2C1_Init+0x50>)
 800067a:	f002 f9e5 	bl	8002a48 <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 fd68 	bl	8001158 <Error_Handler>
  }

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000830 	.word	0x20000830
 8000690:	40005400 	.word	0x40005400
 8000694:	00061a80 	.word	0x00061a80

08000698 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <HAL_I2C_MspInit+0x84>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d12b      	bne.n	8000712 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006da:	2312      	movs	r3, #18
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006de:	2301      	movs	r3, #1
 80006e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e6:	2304      	movs	r3, #4
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <HAL_I2C_MspInit+0x8c>)
 80006f2:	f001 ffdd 	bl	80026b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_I2C_MspInit+0x88>)
 8000700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000704:	6413      	str	r3, [r2, #64]	; 0x40
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_I2C_MspInit+0x88>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40005400 	.word	0x40005400
 8000720:	40023800 	.word	0x40023800
 8000724:	40020400 	.word	0x40020400

08000728 <XORCipher>:

/*! \brief Funkcja szyfrująca hasło przy pomocy operacji binarnego XOR
 * 	Funkcja szyfrująca hasło przy pomocy operacji binarnego XOR, dostaje tablice char oraz klucz do szyfrowania
 */
void XORCipher(uint8_t* string, uint8_t* key)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < strlen(string); i++)
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	e018      	b.n	800076a <XORCipher+0x42>
	{
		string[i] = string[i] ^ key[i % 8];
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	7819      	ldrb	r1, [r3, #0]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	425a      	negs	r2, r3
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	f002 0207 	and.w	r2, r2, #7
 800074c:	bf58      	it	pl
 800074e:	4253      	negpl	r3, r2
 8000750:	461a      	mov	r2, r3
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4413      	add	r3, r2
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	4403      	add	r3, r0
 800075e:	404a      	eors	r2, r1
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < strlen(string); i++)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fd34 	bl	80001d8 <strlen>
 8000770:	4602      	mov	r2, r0
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	429a      	cmp	r2, r3
 8000776:	d8df      	bhi.n	8000738 <XORCipher+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <OLED_write_sc>:

/*! \brief Funkcja wyświetlająca ekran trybu wpisywania
 * 	Funkcja wyświetlająca ekran trybu wpisywania na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_write_sc(){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000786:	f001 fe53 	bl	8002430 <HAL_GetTick>
 800078a:	4602      	mov	r2, r0
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <OLED_write_sc+0x8c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000796:	d936      	bls.n	8000806 <OLED_write_sc+0x86>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fe55 	bl	8001448 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 800079e:	2106      	movs	r1, #6
 80007a0:	2004      	movs	r0, #4
 80007a2:	f000 fec9 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Puts ("-- WRITE --", &Font_11x18, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	4919      	ldr	r1, [pc, #100]	; (8000810 <OLED_write_sc+0x90>)
 80007aa:	481a      	ldr	r0, [pc, #104]	; (8000814 <OLED_write_sc+0x94>)
 80007ac:	f000 ff5a 	bl	8001664 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 80007b0:	2119      	movs	r1, #25
 80007b2:	2004      	movs	r0, #4
 80007b4:	f000 fec0 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Puts ("-- MODE  --", &Font_11x18, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	4915      	ldr	r1, [pc, #84]	; (8000810 <OLED_write_sc+0x90>)
 80007bc:	4816      	ldr	r0, [pc, #88]	; (8000818 <OLED_write_sc+0x98>)
 80007be:	f000 ff51 	bl	8001664 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 80007c2:	2301      	movs	r3, #1
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2301      	movs	r3, #1
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	2101      	movs	r1, #1
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 ff6e 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 80007d2:	2301      	movs	r3, #1
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2340      	movs	r3, #64	; 0x40
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 ff66 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 80007e2:	2301      	movs	r3, #1
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2340      	movs	r3, #64	; 0x40
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	2100      	movs	r1, #0
 80007ec:	2080      	movs	r0, #128	; 0x80
 80007ee:	f000 ff5e 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 80007f2:	2301      	movs	r3, #1
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	2140      	movs	r1, #64	; 0x40
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 ff56 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 8000802:	f000 fdf3 	bl	80013ec <SSD1306_UpdateScreen>
	}
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000408 	.word	0x20000408
 8000810:	20000000 	.word	0x20000000
 8000814:	0800a054 	.word	0x0800a054
 8000818:	0800a060 	.word	0x0800a060

0800081c <OLED_page_sc>:

/*! \brief Funkcja wyświetlająca ekran wyboru strony
 * 	Funkcja wyświetlająca ekran wyboru strony na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_page_sc(){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000822:	f001 fe05 	bl	8002430 <HAL_GetTick>
 8000826:	4602      	mov	r2, r0
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <OLED_page_sc+0xcc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000832:	d955      	bls.n	80008e0 <OLED_page_sc+0xc4>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fe07 	bl	8001448 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 800083a:	2106      	movs	r1, #6
 800083c:	2004      	movs	r0, #4
 800083e:	f000 fe7b 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Puts ("--MHS--", &Font_11x18, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	4929      	ldr	r1, [pc, #164]	; (80008ec <OLED_page_sc+0xd0>)
 8000846:	482a      	ldr	r0, [pc, #168]	; (80008f0 <OLED_page_sc+0xd4>)
 8000848:	f000 ff0c 	bl	8001664 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 800084c:	2119      	movs	r1, #25
 800084e:	2004      	movs	r0, #4
 8000850:	f000 fe72 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Puts ("PAGE", &Font_11x18, 1);
 8000854:	2201      	movs	r2, #1
 8000856:	4925      	ldr	r1, [pc, #148]	; (80008ec <OLED_page_sc+0xd0>)
 8000858:	4826      	ldr	r0, [pc, #152]	; (80008f4 <OLED_page_sc+0xd8>)
 800085a:	f000 ff03 	bl	8001664 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 800085e:	212c      	movs	r1, #44	; 0x2c
 8000860:	2004      	movs	r0, #4
 8000862:	f000 fe69 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Puts ("NUMBER:", &Font_11x18, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	4920      	ldr	r1, [pc, #128]	; (80008ec <OLED_page_sc+0xd0>)
 800086a:	4823      	ldr	r0, [pc, #140]	; (80008f8 <OLED_page_sc+0xdc>)
 800086c:	f000 fefa 	bl	8001664 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000870:	2301      	movs	r3, #1
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2301      	movs	r3, #1
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	2101      	movs	r1, #1
 800087a:	2000      	movs	r0, #0
 800087c:	f000 ff17 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000880:	2301      	movs	r3, #1
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2000      	movs	r0, #0
 800088c:	f000 ff0f 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000890:	2301      	movs	r3, #1
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	2100      	movs	r1, #0
 800089a:	2080      	movs	r0, #128	; 0x80
 800089c:	f000 ff07 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 80008a0:	2301      	movs	r3, #1
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 feff 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 80008b0:	2301      	movs	r3, #1
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	233e      	movs	r3, #62	; 0x3e
 80008b6:	221b      	movs	r2, #27
 80008b8:	2102      	movs	r1, #2
 80008ba:	2064      	movs	r0, #100	; 0x64
 80008bc:	f000 fff2 	bl	80018a4 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 80008c0:	2119      	movs	r1, #25
 80008c2:	206e      	movs	r0, #110	; 0x6e
 80008c4:	f000 fe38 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(pageNumber+'0'), &Font_11x18, 1);
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <OLED_page_sc+0xe0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	3330      	adds	r3, #48	; 0x30
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2201      	movs	r2, #1
 80008d4:	4905      	ldr	r1, [pc, #20]	; (80008ec <OLED_page_sc+0xd0>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fe44 	bl	8001564 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 80008dc:	f000 fd86 	bl	80013ec <SSD1306_UpdateScreen>
	}
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000040c 	.word	0x2000040c
 80008ec:	20000000 	.word	0x20000000
 80008f0:	0800a06c 	.word	0x0800a06c
 80008f4:	0800a074 	.word	0x0800a074
 80008f8:	0800a07c 	.word	0x0800a07c
 80008fc:	20000404 	.word	0x20000404

08000900 <OLED_login_sc>:

/*! \brief Funkcja wyświetlająca ekran logowania
 * 	Funkcja wyświetlająca ekran logowania na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_login_sc(){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000906:	f001 fd93 	bl	8002430 <HAL_GetTick>
 800090a:	4602      	mov	r2, r0
 800090c:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <OLED_login_sc+0xc8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000916:	d954      	bls.n	80009c2 <OLED_login_sc+0xc2>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000918:	2000      	movs	r0, #0
 800091a:	f000 fd95 	bl	8001448 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 800091e:	2106      	movs	r1, #6
 8000920:	2004      	movs	r0, #4
 8000922:	f000 fe09 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Puts ("-ENTER-", &Font_11x18, 1);
 8000926:	2201      	movs	r2, #1
 8000928:	4928      	ldr	r1, [pc, #160]	; (80009cc <OLED_login_sc+0xcc>)
 800092a:	4829      	ldr	r0, [pc, #164]	; (80009d0 <OLED_login_sc+0xd0>)
 800092c:	f000 fe9a 	bl	8001664 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000930:	2119      	movs	r1, #25
 8000932:	2004      	movs	r0, #4
 8000934:	f000 fe00 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Puts ("PASSWORD", &Font_11x18, 1);
 8000938:	2201      	movs	r2, #1
 800093a:	4924      	ldr	r1, [pc, #144]	; (80009cc <OLED_login_sc+0xcc>)
 800093c:	4825      	ldr	r0, [pc, #148]	; (80009d4 <OLED_login_sc+0xd4>)
 800093e:	f000 fe91 	bl	8001664 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 8000942:	212c      	movs	r1, #44	; 0x2c
 8000944:	2004      	movs	r0, #4
 8000946:	f000 fdf7 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Puts ("TRIES:", &Font_11x18, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	491f      	ldr	r1, [pc, #124]	; (80009cc <OLED_login_sc+0xcc>)
 800094e:	4822      	ldr	r0, [pc, #136]	; (80009d8 <OLED_login_sc+0xd8>)
 8000950:	f000 fe88 	bl	8001664 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000954:	2301      	movs	r3, #1
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	2101      	movs	r1, #1
 800095e:	2000      	movs	r0, #0
 8000960:	f000 fea5 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000964:	2301      	movs	r3, #1
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2340      	movs	r3, #64	; 0x40
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2000      	movs	r0, #0
 8000970:	f000 fe9d 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000974:	2301      	movs	r3, #1
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	2100      	movs	r1, #0
 800097e:	2080      	movs	r0, #128	; 0x80
 8000980:	f000 fe95 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000984:	2301      	movs	r3, #1
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2340      	movs	r3, #64	; 0x40
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	2140      	movs	r1, #64	; 0x40
 800098e:	2000      	movs	r0, #0
 8000990:	f000 fe8d 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 8000994:	2301      	movs	r3, #1
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	233e      	movs	r3, #62	; 0x3e
 800099a:	221b      	movs	r2, #27
 800099c:	2102      	movs	r1, #2
 800099e:	2064      	movs	r0, #100	; 0x64
 80009a0:	f000 ff80 	bl	80018a4 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 80009a4:	2119      	movs	r1, #25
 80009a6:	206e      	movs	r0, #110	; 0x6e
 80009a8:	f000 fdc6 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(loginTries+'0'), &Font_11x18, 1);
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <OLED_login_sc+0xdc>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	3330      	adds	r3, #48	; 0x30
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2201      	movs	r2, #1
 80009b6:	4905      	ldr	r1, [pc, #20]	; (80009cc <OLED_login_sc+0xcc>)
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fdd3 	bl	8001564 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 80009be:	f000 fd15 	bl	80013ec <SSD1306_UpdateScreen>
	}
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000410 	.word	0x20000410
 80009cc:	20000000 	.word	0x20000000
 80009d0:	0800a084 	.word	0x0800a084
 80009d4:	0800a08c 	.word	0x0800a08c
 80009d8:	0800a098 	.word	0x0800a098
 80009dc:	20000092 	.word	0x20000092

080009e0 <OLED_block_sc>:

/*! \brief Funkcja wyświetlająca ekran blokady
 * 	Funkcja wyświetlająca ekran blokady na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_block_sc(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 80009e6:	f001 fd23 	bl	8002430 <HAL_GetTick>
 80009ea:	4602      	mov	r2, r0
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <OLED_block_sc+0x8c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009f6:	d936      	bls.n	8000a66 <OLED_block_sc+0x86>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 fd25 	bl	8001448 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 80009fe:	2106      	movs	r1, #6
 8000a00:	2004      	movs	r0, #4
 8000a02:	f000 fd99 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Puts ("- DEVICE  -", &Font_11x18, 1);
 8000a06:	2201      	movs	r2, #1
 8000a08:	4919      	ldr	r1, [pc, #100]	; (8000a70 <OLED_block_sc+0x90>)
 8000a0a:	481a      	ldr	r0, [pc, #104]	; (8000a74 <OLED_block_sc+0x94>)
 8000a0c:	f000 fe2a 	bl	8001664 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000a10:	2119      	movs	r1, #25
 8000a12:	2004      	movs	r0, #4
 8000a14:	f000 fd90 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Puts ("- BLOCKED -", &Font_11x18, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4915      	ldr	r1, [pc, #84]	; (8000a70 <OLED_block_sc+0x90>)
 8000a1c:	4816      	ldr	r0, [pc, #88]	; (8000a78 <OLED_block_sc+0x98>)
 8000a1e:	f000 fe21 	bl	8001664 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000a22:	2301      	movs	r3, #1
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	2301      	movs	r3, #1
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fe3e 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000a32:	2301      	movs	r3, #1
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2340      	movs	r3, #64	; 0x40
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f000 fe36 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000a42:	2301      	movs	r3, #1
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2340      	movs	r3, #64	; 0x40
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2080      	movs	r0, #128	; 0x80
 8000a4e:	f000 fe2e 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000a52:	2301      	movs	r3, #1
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 fe26 	bl	80016ae <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 8000a62:	f000 fcc3 	bl	80013ec <SSD1306_UpdateScreen>
	}
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000414 	.word	0x20000414
 8000a70:	20000000 	.word	0x20000000
 8000a74:	0800a0a0 	.word	0x0800a0a0
 8000a78:	0800a0ac 	.word	0x0800a0ac

08000a7c <sendUSB>:

/*! \brief Funkcja przesyłająca hasło do komputera po USB
 * 	Funkcja dostaje tablice znaków char, którą po literze wysyła do komputera poprzez połączenie USB
 */
void sendUSB(uint8_t *pass){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	while(*pass != '\0'){
 8000a84:	e066      	b.n	8000b54 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e060      	b.n	8000b4e <sendUSB+0xd2>
			if(*pass == keys[i].value){
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7819      	ldrb	r1, [r3, #0]
 8000a90:	4834      	ldr	r0, [pc, #208]	; (8000b64 <sendUSB+0xe8>)
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	4403      	add	r3, r0
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4299      	cmp	r1, r3
 8000aa2:	d11f      	bne.n	8000ae4 <sendUSB+0x68>
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000aa4:	492f      	ldr	r1, [pc, #188]	; (8000b64 <sendUSB+0xe8>)
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <sendUSB+0xec>)
 8000ab4:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	492b      	ldr	r1, [pc, #172]	; (8000b68 <sendUSB+0xec>)
 8000aba:	482c      	ldr	r0, [pc, #176]	; (8000b6c <sendUSB+0xf0>)
 8000abc:	f007 faf0 	bl	80080a0 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000ac0:	2032      	movs	r0, #50	; 0x32
 8000ac2:	f001 fcc1 	bl	8002448 <HAL_Delay>
				keyboardhid.KEYCODE1 = 0x00;
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <sendUSB+0xec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000acc:	2208      	movs	r2, #8
 8000ace:	4926      	ldr	r1, [pc, #152]	; (8000b68 <sendUSB+0xec>)
 8000ad0:	4826      	ldr	r0, [pc, #152]	; (8000b6c <sendUSB+0xf0>)
 8000ad2:	f007 fae5 	bl	80080a0 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000ad6:	2032      	movs	r0, #50	; 0x32
 8000ad8:	f001 fcb6 	bl	8002448 <HAL_Delay>
				pass++;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	607b      	str	r3, [r7, #4]
				break;
 8000ae2:	e037      	b.n	8000b54 <sendUSB+0xd8>
			}
			else if(*pass == keys[i].shiftValue){
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7819      	ldrb	r1, [r3, #0]
 8000ae8:	481e      	ldr	r0, [pc, #120]	; (8000b64 <sendUSB+0xe8>)
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	4403      	add	r3, r0
 8000af4:	3302      	adds	r3, #2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d125      	bne.n	8000b48 <sendUSB+0xcc>
				keyboardhid.MODIFIER = 0x02;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <sendUSB+0xec>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000b02:	4918      	ldr	r1, [pc, #96]	; (8000b64 <sendUSB+0xe8>)
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4613      	mov	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4413      	add	r3, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <sendUSB+0xec>)
 8000b12:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b14:	2208      	movs	r2, #8
 8000b16:	4914      	ldr	r1, [pc, #80]	; (8000b68 <sendUSB+0xec>)
 8000b18:	4814      	ldr	r0, [pc, #80]	; (8000b6c <sendUSB+0xf0>)
 8000b1a:	f007 fac1 	bl	80080a0 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000b1e:	2032      	movs	r0, #50	; 0x32
 8000b20:	f001 fc92 	bl	8002448 <HAL_Delay>
				keyboardhid.MODIFIER = 0x00;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <sendUSB+0xec>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = 0x00;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <sendUSB+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b30:	2208      	movs	r2, #8
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <sendUSB+0xec>)
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <sendUSB+0xf0>)
 8000b36:	f007 fab3 	bl	80080a0 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000b3a:	2032      	movs	r0, #50	; 0x32
 8000b3c:	f001 fc84 	bl	8002448 <HAL_Delay>
				pass++;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3301      	adds	r3, #1
 8000b44:	607b      	str	r3, [r7, #4]
				break;
 8000b46:	e005      	b.n	8000b54 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2b2e      	cmp	r3, #46	; 0x2e
 8000b52:	dd9b      	ble.n	8000a8c <sendUSB+0x10>
	while(*pass != '\0'){
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d194      	bne.n	8000a86 <sendUSB+0xa>
			}
		}
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000008 	.word	0x20000008
 8000b68:	200003f8 	.word	0x200003f8
 8000b6c:	20000a3c 	.word	0x20000a3c

08000b70 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	b09b      	sub	sp, #108	; 0x6c
 8000b74:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b76:	f001 fbf5 	bl	8002364 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b7a:	f000 f953 	bl	8000e24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b7e:	f7ff fcb3 	bl	80004e8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b82:	f7ff fd5b 	bl	800063c <MX_I2C1_Init>
	MX_SPI3_Init();
 8000b86:	f000 faef 	bl	8001168 <MX_SPI3_Init>
	MX_TIM2_Init();
 8000b8a:	f001 f83b 	bl	8001c04 <MX_TIM2_Init>
	if(HAL_GPIO_ReadPin(ROT_BUT_GPIO_Port, ROT_BUT_Pin)){
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4891      	ldr	r0, [pc, #580]	; (8000dd8 <main+0x268>)
 8000b92:	f001 ff0f 	bl	80029b4 <HAL_GPIO_ReadPin>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <main+0x3a>
		MX_USB_DEVICE_Init(0);
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f008 fbf9 	bl	8009394 <MX_USB_DEVICE_Init>
		deviceFLAG = 0;
 8000ba2:	4b8e      	ldr	r3, [pc, #568]	; (8000ddc <main+0x26c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e005      	b.n	8000bb6 <main+0x46>
	}else{
		MX_USB_DEVICE_Init(1);
 8000baa:	2001      	movs	r0, #1
 8000bac:	f008 fbf2 	bl	8009394 <MX_USB_DEVICE_Init>
		deviceFLAG = 1;
 8000bb0:	4b8a      	ldr	r3, [pc, #552]	; (8000ddc <main+0x26c>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE BEGIN 2 */

	//---- Inicjalizacja wyświetlacza OLED ----
	SSD1306_Init();
 8000bb6:	f000 fb55 	bl	8001264 <SSD1306_Init>

	//---- Inicjalizacja obsługi enkodera ----
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000bba:	213c      	movs	r1, #60	; 0x3c
 8000bbc:	4888      	ldr	r0, [pc, #544]	; (8000de0 <main+0x270>)
 8000bbe:	f005 f841 	bl	8005c44 <HAL_TIM_Encoder_Start_IT>

	//---- Inicjalizacja pamięci FLASH ----
	W25qxx_Init();
 8000bc2:	f001 f9d3 	bl	8001f6c <W25qxx_Init>
	memcpy(passwordWrite, "0\0", sizeof(passwordWrite));
	XORCipher(passwordWrite, cipherKey);
	W25qxx_WritePage(passwordWrite, 10, 0, 64);
	*/
	//---- Inicjalizacja obsługi macierzy przycisków
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2120      	movs	r1, #32
 8000bca:	4886      	ldr	r0, [pc, #536]	; (8000de4 <main+0x274>)
 8000bcc:	f001 ff0a 	bl	80029e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	4883      	ldr	r0, [pc, #524]	; (8000de4 <main+0x274>)
 8000bd6:	f001 ff05 	bl	80029e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	4881      	ldr	r0, [pc, #516]	; (8000de4 <main+0x274>)
 8000be0:	f001 ff00 	bl	80029e4 <HAL_GPIO_WritePin>

	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bea:	487b      	ldr	r0, [pc, #492]	; (8000dd8 <main+0x268>)
 8000bec:	f001 fefa 	bl	80029e4 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(deviceFLAG){  // Tryb urządzenia Virtual COM do zapisywania przesłanych haseł
 8000bf0:	4b7a      	ldr	r3, [pc, #488]	; (8000ddc <main+0x26c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d078      	beq.n	8000cea <main+0x17a>
			OLED_write_sc();
 8000bf8:	f7ff fdc2 	bl	8000780 <OLED_write_sc>
			uint8_t Text[] = "WRITE MODE -> len:nr:password\r\n";
 8000bfc:	4b7a      	ldr	r3, [pc, #488]	; (8000de8 <main+0x278>)
 8000bfe:	1d3c      	adds	r4, r7, #4
 8000c00:	461d      	mov	r5, r3
 8000c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			CDC_Transmit_FS(Text,strlen(Text)); /*when commented the port is recognized*/
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fae1 	bl	80001d8 <strlen>
 8000c16:	4602      	mov	r2, r0
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f008 fcbb 	bl	8009598 <CDC_Transmit_FS>
			if(ReceivedDataFlag == 1){
 8000c22:	4b72      	ldr	r3, [pc, #456]	; (8000dec <main+0x27c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d15a      	bne.n	8000ce0 <main+0x170>
				ReceivedDataFlag = 0;
 8000c2a:	4b70      	ldr	r3, [pc, #448]	; (8000dec <main+0x27c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
				//MessageLength = sprintf(DataToSend, "Odebrano: %s\n\r", ReceivedData);
				//CDC_Transmit_FS(DataToSend, MessageLength);
				uint8_t text[64];
				ReceivedPassNr = (ReceivedData[0] - '0') * 10 + (ReceivedData[1] - '0');
 8000c30:	4b6f      	ldr	r3, [pc, #444]	; (8000df0 <main+0x280>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	0092      	lsls	r2, r2, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b6c      	ldr	r3, [pc, #432]	; (8000df0 <main+0x280>)
 8000c40:	785b      	ldrb	r3, [r3, #1]
 8000c42:	4413      	add	r3, r2
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	3b10      	subs	r3, #16
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4b6a      	ldr	r3, [pc, #424]	; (8000df4 <main+0x284>)
 8000c4c:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<strlen(ReceivedData)-3; i++){
 8000c4e:	2300      	movs	r3, #0
 8000c50:	667b      	str	r3, [r7, #100]	; 0x64
 8000c52:	e00c      	b.n	8000c6e <main+0xfe>
					text[i] = ReceivedData[i+3];
 8000c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c56:	3303      	adds	r3, #3
 8000c58:	4a65      	ldr	r2, [pc, #404]	; (8000df0 <main+0x280>)
 8000c5a:	5cd1      	ldrb	r1, [r2, r3]
 8000c5c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c62:	4413      	add	r3, r2
 8000c64:	460a      	mov	r2, r1
 8000c66:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<strlen(ReceivedData)-3; i++){
 8000c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	667b      	str	r3, [r7, #100]	; 0x64
 8000c6e:	4860      	ldr	r0, [pc, #384]	; (8000df0 <main+0x280>)
 8000c70:	f7ff fab2 	bl	80001d8 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	1eda      	subs	r2, r3, #3
 8000c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d8ea      	bhi.n	8000c54 <main+0xe4>
				}
				text[strlen(ReceivedData)-3] = '\0';
 8000c7e:	485c      	ldr	r0, [pc, #368]	; (8000df0 <main+0x280>)
 8000c80:	f7ff faaa 	bl	80001d8 <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	3b03      	subs	r3, #3
 8000c88:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000c8c:	4413      	add	r3, r2
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f803 2c44 	strb.w	r2, [r3, #-68]
				memcpy(passwordWrite, text, sizeof(passwordWrite));
 8000c94:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <main+0x288>)
 8000c96:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000c9a:	469c      	mov	ip, r3
 8000c9c:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000ca0:	4665      	mov	r5, ip
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ca6:	6028      	str	r0, [r5, #0]
 8000ca8:	6069      	str	r1, [r5, #4]
 8000caa:	60aa      	str	r2, [r5, #8]
 8000cac:	60eb      	str	r3, [r5, #12]
 8000cae:	3410      	adds	r4, #16
 8000cb0:	f10c 0c10 	add.w	ip, ip, #16
 8000cb4:	4574      	cmp	r4, lr
 8000cb6:	d1f3      	bne.n	8000ca0 <main+0x130>
				XORCipher(passwordWrite, cipherKey);
 8000cb8:	4950      	ldr	r1, [pc, #320]	; (8000dfc <main+0x28c>)
 8000cba:	484f      	ldr	r0, [pc, #316]	; (8000df8 <main+0x288>)
 8000cbc:	f7ff fd34 	bl	8000728 <XORCipher>
				W25qxx_WritePage(passwordWrite, (uint32_t)ReceivedPassNr, 0, 64);
 8000cc0:	4b4c      	ldr	r3, [pc, #304]	; (8000df4 <main+0x284>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	2340      	movs	r3, #64	; 0x40
 8000cc8:	2200      	movs	r2, #0
 8000cca:	484b      	ldr	r0, [pc, #300]	; (8000df8 <main+0x288>)
 8000ccc:	f001 fa1a 	bl	8002104 <W25qxx_WritePage>
				memset(ReceivedData,0, 64);
 8000cd0:	2240      	movs	r2, #64	; 0x40
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4846      	ldr	r0, [pc, #280]	; (8000df0 <main+0x280>)
 8000cd6:	f009 f8ee 	bl	8009eb6 <memset>
				ReceivedPassNr = 0;
 8000cda:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <main+0x284>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
			}
			HAL_Delay(1000);
 8000ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce4:	f001 fbb0 	bl	8002448 <HAL_Delay>
 8000ce8:	e782      	b.n	8000bf0 <main+0x80>
		}else{ // Tryb urządzenia HID do odczytywania haseł
			if(deviceState == 0){ // Urządzenie zablokowane -> wpisywanie hasła urządzenia
 8000cea:	4b45      	ldr	r3, [pc, #276]	; (8000e00 <main+0x290>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d149      	bne.n	8000d86 <main+0x216>
				OLED_login_sc();
 8000cf2:	f7ff fe05 	bl	8000900 <OLED_login_sc>
				if(keyFlag){
 8000cf6:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <main+0x294>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d010      	beq.n	8000d22 <main+0x1b2>
					loginBuff[loginCounter] = keyPressed;
 8000d00:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <main+0x298>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b41      	ldr	r3, [pc, #260]	; (8000e0c <main+0x29c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2d9      	uxtb	r1, r3
 8000d0c:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <main+0x2a0>)
 8000d0e:	5499      	strb	r1, [r3, r2]
					loginCounter++;
 8000d10:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <main+0x298>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <main+0x298>)
 8000d1a:	701a      	strb	r2, [r3, #0]
					keyFlag = 0;
 8000d1c:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <main+0x294>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
				}
				if(loginCounter == 4){
 8000d22:	4b39      	ldr	r3, [pc, #228]	; (8000e08 <main+0x298>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	d124      	bne.n	8000d74 <main+0x204>
					if(login[0] == loginBuff[0] && login[1] == loginBuff[1] && login[2] == loginBuff[2] && login[3] == loginBuff[3]){
 8000d2a:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <main+0x2a4>)
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	4b38      	ldr	r3, [pc, #224]	; (8000e10 <main+0x2a0>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d115      	bne.n	8000d62 <main+0x1f2>
 8000d36:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <main+0x2a4>)
 8000d38:	785a      	ldrb	r2, [r3, #1]
 8000d3a:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <main+0x2a0>)
 8000d3c:	785b      	ldrb	r3, [r3, #1]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d10f      	bne.n	8000d62 <main+0x1f2>
 8000d42:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <main+0x2a4>)
 8000d44:	789a      	ldrb	r2, [r3, #2]
 8000d46:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <main+0x2a0>)
 8000d48:	789b      	ldrb	r3, [r3, #2]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d109      	bne.n	8000d62 <main+0x1f2>
 8000d4e:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <main+0x2a4>)
 8000d50:	78da      	ldrb	r2, [r3, #3]
 8000d52:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <main+0x2a0>)
 8000d54:	78db      	ldrb	r3, [r3, #3]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d103      	bne.n	8000d62 <main+0x1f2>
						deviceState = 1;
 8000d5a:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <main+0x290>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e008      	b.n	8000d74 <main+0x204>
					}else{
						loginCounter = 0;
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <main+0x298>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
						loginTries--;
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <main+0x2a8>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <main+0x2a8>)
 8000d72:	701a      	strb	r2, [r3, #0]
					}
				}
				if(loginTries == 0){
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <main+0x2a8>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f47f af39 	bne.w	8000bf0 <main+0x80>
					deviceState = 99;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <main+0x290>)
 8000d80:	2263      	movs	r2, #99	; 0x63
 8000d82:	701a      	strb	r2, [r3, #0]
 8000d84:	e734      	b.n	8000bf0 <main+0x80>
				}
			}
			else if(deviceState == 99){ // Urządzenie całkowicie zablokowane
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <main+0x290>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b63      	cmp	r3, #99	; 0x63
 8000d8c:	d102      	bne.n	8000d94 <main+0x224>
				OLED_block_sc();
 8000d8e:	f7ff fe27 	bl	80009e0 <OLED_block_sc>
 8000d92:	e72d      	b.n	8000bf0 <main+0x80>
			}
			else{ // Urządzenie odblokowane -> odczyt haseł
				OLED_page_sc();
 8000d94:	f7ff fd42 	bl	800081c <OLED_page_sc>
				if(keyFlag){
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <main+0x294>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f43f af26 	beq.w	8000bf0 <main+0x80>
					W25qxx_ReadPage(passwordRead, pageNumber*9+keyPressed, 0, 64);
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <main+0x2ac>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4613      	mov	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	4413      	add	r3, r2
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <main+0x29c>)
 8000db0:	7812      	ldrb	r2, [r2, #0]
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	1899      	adds	r1, r3, r2
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	2200      	movs	r2, #0
 8000dba:	4819      	ldr	r0, [pc, #100]	; (8000e20 <main+0x2b0>)
 8000dbc:	f001 fa28 	bl	8002210 <W25qxx_ReadPage>
					XORCipher(passwordRead, cipherKey);
 8000dc0:	490e      	ldr	r1, [pc, #56]	; (8000dfc <main+0x28c>)
 8000dc2:	4817      	ldr	r0, [pc, #92]	; (8000e20 <main+0x2b0>)
 8000dc4:	f7ff fcb0 	bl	8000728 <XORCipher>
					sendUSB(passwordRead);
 8000dc8:	4815      	ldr	r0, [pc, #84]	; (8000e20 <main+0x2b0>)
 8000dca:	f7ff fe57 	bl	8000a7c <sendUSB>
					keyFlag = 0;
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <main+0x294>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
		if(deviceFLAG){  // Tryb urządzenia Virtual COM do zapisywania przesłanych haseł
 8000dd4:	e70c      	b.n	8000bf0 <main+0x80>
 8000dd6:	bf00      	nop
 8000dd8:	40020400 	.word	0x40020400
 8000ddc:	200003cc 	.word	0x200003cc
 8000de0:	200009d0 	.word	0x200009d0
 8000de4:	40020000 	.word	0x40020000
 8000de8:	0800a0b8 	.word	0x0800a0b8
 8000dec:	20000400 	.word	0x20000400
 8000df0:	20000934 	.word	0x20000934
 8000df4:	20000974 	.word	0x20000974
 8000df8:	200008f0 	.word	0x200008f0
 8000dfc:	20000098 	.word	0x20000098
 8000e00:	200003cd 	.word	0x200003cd
 8000e04:	200003e5 	.word	0x200003e5
 8000e08:	200003ce 	.word	0x200003ce
 8000e0c:	200003e4 	.word	0x200003e4
 8000e10:	20000930 	.word	0x20000930
 8000e14:	20000094 	.word	0x20000094
 8000e18:	20000092 	.word	0x20000092
 8000e1c:	20000404 	.word	0x20000404
 8000e20:	200008b0 	.word	0x200008b0

08000e24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b094      	sub	sp, #80	; 0x50
 8000e28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	2230      	movs	r2, #48	; 0x30
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f009 f83f 	bl	8009eb6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b27      	ldr	r3, [pc, #156]	; (8000eec <SystemClock_Config+0xc8>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	4a26      	ldr	r2, [pc, #152]	; (8000eec <SystemClock_Config+0xc8>)
 8000e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <SystemClock_Config+0xc8>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <SystemClock_Config+0xcc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a20      	ldr	r2, [pc, #128]	; (8000ef0 <SystemClock_Config+0xcc>)
 8000e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <SystemClock_Config+0xcc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e92:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000e94:	2319      	movs	r3, #25
 8000e96:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000e98:	23c0      	movs	r3, #192	; 0xc0
 8000e9a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea4:	f107 0320 	add.w	r3, r7, #32
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 fcbd 	bl	8004828 <HAL_RCC_OscConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000eb4:	f000 f950 	bl	8001158 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb8:	230f      	movs	r3, #15
 8000eba:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 ff17 	bl	8004d08 <HAL_RCC_ClockConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000ee0:	f000 f93a 	bl	8001158 <Error_Handler>
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	3750      	adds	r7, #80	; 0x50
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000f04:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	if(count - old_count > 5)
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	dd0e      	ble.n	8000f42 <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(pageNumber > 0)
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <HAL_TIM_IC_CaptureCallback+0x42>
			pageNumber--;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f34:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f3e:	801a      	strh	r2, [r3, #0]
		if(pageNumber < 9)
			pageNumber++;
		old_count = count;
	}

}
 8000f40:	e018      	b.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x80>
	}else if(count - old_count < -5)
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	f113 0f05 	cmn.w	r3, #5
 8000f56:	da0d      	bge.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x80>
		if(pageNumber < 9)
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d804      	bhi.n	8000f6a <HAL_TIM_IC_CaptureCallback+0x76>
			pageNumber++;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f68:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f72:	801a      	strh	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	200003f0 	.word	0x200003f0
 8000f84:	200003f4 	.word	0x200003f4
 8000f88:	200003f6 	.word	0x200003f6
 8000f8c:	20000404 	.word	0x20000404

08000f90 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000f9a:	f001 fa49 	bl	8002430 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	4b66      	ldr	r3, [pc, #408]	; (800113c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000fa2:	601a      	str	r2, [r3, #0]
	if(currentMillis - previousMillis > 300)
 8000fa4:	4b65      	ldr	r3, [pc, #404]	; (800113c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b65      	ldr	r3, [pc, #404]	; (8001140 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fb2:	f240 80be 	bls.w	8001132 <HAL_GPIO_EXTI_Callback+0x1a2>
	{
		GPIO_InitStructPrivate.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000fb6:	4b63      	ldr	r3, [pc, #396]	; (8001144 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000fb8:	221c      	movs	r2, #28
 8000fba:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000fbc:	4b61      	ldr	r3, [pc, #388]	; (8001144 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000fc2:	4b60      	ldr	r3, [pc, #384]	; (8001144 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	4b5e      	ldr	r3, [pc, #376]	; (8001144 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000fce:	495d      	ldr	r1, [pc, #372]	; (8001144 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000fd0:	485d      	ldr	r0, [pc, #372]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fd2:	f001 fb6d 	bl	80026b0 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2120      	movs	r1, #32
 8000fda:	485b      	ldr	r0, [pc, #364]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fdc:	f001 fd02 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	4858      	ldr	r0, [pc, #352]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fe6:	f001 fcfd 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	4856      	ldr	r0, [pc, #344]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000ff0:	f001 fcf8 	bl	80029e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	4854      	ldr	r0, [pc, #336]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000ff8:	f001 fcdc 	bl	80029b4 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_EXTI_Callback+0x7a>
			keyPressed = 1;
 8001002:	4b52      	ldr	r3, [pc, #328]	; (800114c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e014      	b.n	8001034 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 800100a:	2108      	movs	r1, #8
 800100c:	484e      	ldr	r0, [pc, #312]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800100e:	f001 fcd1 	bl	80029b4 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_EXTI_Callback+0x90>
			keyPressed = 4;
 8001018:	4b4c      	ldr	r3, [pc, #304]	; (800114c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800101a:	2204      	movs	r2, #4
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e009      	b.n	8001034 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8001020:	2104      	movs	r1, #4
 8001022:	4849      	ldr	r0, [pc, #292]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001024:	f001 fcc6 	bl	80029b4 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <HAL_GPIO_EXTI_Callback+0xa4>
			keyPressed = 7;
 800102e:	4b47      	ldr	r3, [pc, #284]	; (800114c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001030:	2207      	movs	r2, #7
 8001032:	701a      	strb	r2, [r3, #0]

		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2120      	movs	r1, #32
 8001038:	4843      	ldr	r0, [pc, #268]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800103a:	f001 fcd3 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	4841      	ldr	r0, [pc, #260]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001044:	f001 fcce 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	483e      	ldr	r0, [pc, #248]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800104e:	f001 fcc9 	bl	80029e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8001052:	2110      	movs	r1, #16
 8001054:	483c      	ldr	r0, [pc, #240]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001056:	f001 fcad 	bl	80029b4 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_EXTI_Callback+0xd8>
			keyPressed = 2;
 8001060:	4b3a      	ldr	r3, [pc, #232]	; (800114c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001062:	2202      	movs	r2, #2
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e014      	b.n	8001092 <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8001068:	2108      	movs	r1, #8
 800106a:	4837      	ldr	r0, [pc, #220]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800106c:	f001 fca2 	bl	80029b4 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_EXTI_Callback+0xee>
			keyPressed = 5;
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001078:	2205      	movs	r2, #5
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	e009      	b.n	8001092 <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 800107e:	2104      	movs	r1, #4
 8001080:	4831      	ldr	r0, [pc, #196]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001082:	f001 fc97 	bl	80029b4 <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <HAL_GPIO_EXTI_Callback+0x102>
			keyPressed = 8;
 800108c:	4b2f      	ldr	r3, [pc, #188]	; (800114c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800108e:	2208      	movs	r2, #8
 8001090:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2120      	movs	r1, #32
 8001096:	482c      	ldr	r0, [pc, #176]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001098:	f001 fca4 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	4829      	ldr	r0, [pc, #164]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010a2:	f001 fc9f 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	4827      	ldr	r0, [pc, #156]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010ac:	f001 fc9a 	bl	80029e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 80010b0:	2110      	movs	r1, #16
 80010b2:	4825      	ldr	r0, [pc, #148]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010b4:	f001 fc7e 	bl	80029b4 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_EXTI_Callback+0x136>
			keyPressed = 3;
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010c0:	2203      	movs	r2, #3
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e014      	b.n	80010f0 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 80010c6:	2108      	movs	r1, #8
 80010c8:	481f      	ldr	r0, [pc, #124]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010ca:	f001 fc73 	bl	80029b4 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_EXTI_Callback+0x14c>
			keyPressed = 6;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010d6:	2206      	movs	r2, #6
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e009      	b.n	80010f0 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 80010dc:	2104      	movs	r1, #4
 80010de:	481a      	ldr	r0, [pc, #104]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010e0:	f001 fc68 	bl	80029b4 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <HAL_GPIO_EXTI_Callback+0x160>
			keyPressed = 9;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010ec:	2209      	movs	r2, #9
 80010ee:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2120      	movs	r1, #32
 80010f4:	4814      	ldr	r0, [pc, #80]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010f6:	f001 fc75 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	4812      	ldr	r0, [pc, #72]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001100:	f001 fc70 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	480f      	ldr	r0, [pc, #60]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800110a:	f001 fc6b 	bl	80029e4 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001110:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001112:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001116:	2202      	movs	r2, #2
 8001118:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 800111a:	490a      	ldr	r1, [pc, #40]	; (8001144 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800111e:	f001 fac7 	bl	80026b0 <HAL_GPIO_Init>


		keyFlag = 1;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
		previousMillis = HAL_GetTick();
 8001128:	f001 f982 	bl	8002430 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001130:	601a      	str	r2, [r3, #0]
	}

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200003ec 	.word	0x200003ec
 8001140:	200003e8 	.word	0x200003e8
 8001144:	200003d0 	.word	0x200003d0
 8001148:	40020000 	.word	0x40020000
 800114c:	200003e4 	.word	0x200003e4
 8001150:	10110000 	.word	0x10110000
 8001154:	200003e5 	.word	0x200003e5

08001158 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_SPI3_Init+0x64>)
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <MX_SPI3_Init+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_SPI3_Init+0x64>)
 8001174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_SPI3_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_SPI3_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_SPI3_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_SPI3_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_SPI3_Init+0x64>)
 8001194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001198:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_SPI3_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_SPI3_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_SPI3_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_SPI3_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_SPI3_Init+0x64>)
 80011b4:	220a      	movs	r2, #10
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_SPI3_Init+0x64>)
 80011ba:	f003 ff5d 	bl	8005078 <HAL_SPI_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80011c4:	f7ff ffc8 	bl	8001158 <Error_Handler>
  }

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000978 	.word	0x20000978
 80011d0:	40003c00 	.word	0x40003c00

080011d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_SPI_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12b      	bne.n	800124e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_SPI_MspInit+0x88>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_SPI_MspInit+0x88>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800122e:	2338      	movs	r3, #56	; 0x38
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800123e:	2306      	movs	r3, #6
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_SPI_MspInit+0x8c>)
 800124a:	f001 fa31 	bl	80026b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40003c00 	.word	0x40003c00
 800125c:	40023800 	.word	0x40023800
 8001260:	40020400 	.word	0x40020400

08001264 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800126a:	f000 fb85 	bl	8001978 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800126e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001272:	2201      	movs	r2, #1
 8001274:	2178      	movs	r1, #120	; 0x78
 8001276:	485b      	ldr	r0, [pc, #364]	; (80013e4 <SSD1306_Init+0x180>)
 8001278:	f001 fe1c 	bl	8002eb4 <HAL_I2C_IsDeviceReady>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001282:	2300      	movs	r3, #0
 8001284:	e0a9      	b.n	80013da <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001286:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800128a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800128c:	e002      	b.n	8001294 <SSD1306_Init+0x30>
		p--;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3b01      	subs	r3, #1
 8001292:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f9      	bne.n	800128e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800129a:	22ae      	movs	r2, #174	; 0xae
 800129c:	2100      	movs	r1, #0
 800129e:	2078      	movs	r0, #120	; 0x78
 80012a0:	f000 fbc6 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80012a4:	2220      	movs	r2, #32
 80012a6:	2100      	movs	r1, #0
 80012a8:	2078      	movs	r0, #120	; 0x78
 80012aa:	f000 fbc1 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80012ae:	2210      	movs	r2, #16
 80012b0:	2100      	movs	r1, #0
 80012b2:	2078      	movs	r0, #120	; 0x78
 80012b4:	f000 fbbc 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012b8:	22b0      	movs	r2, #176	; 0xb0
 80012ba:	2100      	movs	r1, #0
 80012bc:	2078      	movs	r0, #120	; 0x78
 80012be:	f000 fbb7 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80012c2:	22c8      	movs	r2, #200	; 0xc8
 80012c4:	2100      	movs	r1, #0
 80012c6:	2078      	movs	r0, #120	; 0x78
 80012c8:	f000 fbb2 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2078      	movs	r0, #120	; 0x78
 80012d2:	f000 fbad 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80012d6:	2210      	movs	r2, #16
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	; 0x78
 80012dc:	f000 fba8 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80012e0:	2240      	movs	r2, #64	; 0x40
 80012e2:	2100      	movs	r1, #0
 80012e4:	2078      	movs	r0, #120	; 0x78
 80012e6:	f000 fba3 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80012ea:	2281      	movs	r2, #129	; 0x81
 80012ec:	2100      	movs	r1, #0
 80012ee:	2078      	movs	r0, #120	; 0x78
 80012f0:	f000 fb9e 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80012f4:	22ff      	movs	r2, #255	; 0xff
 80012f6:	2100      	movs	r1, #0
 80012f8:	2078      	movs	r0, #120	; 0x78
 80012fa:	f000 fb99 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80012fe:	22a1      	movs	r2, #161	; 0xa1
 8001300:	2100      	movs	r1, #0
 8001302:	2078      	movs	r0, #120	; 0x78
 8001304:	f000 fb94 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001308:	22a6      	movs	r2, #166	; 0xa6
 800130a:	2100      	movs	r1, #0
 800130c:	2078      	movs	r0, #120	; 0x78
 800130e:	f000 fb8f 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001312:	22a8      	movs	r2, #168	; 0xa8
 8001314:	2100      	movs	r1, #0
 8001316:	2078      	movs	r0, #120	; 0x78
 8001318:	f000 fb8a 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800131c:	223f      	movs	r2, #63	; 0x3f
 800131e:	2100      	movs	r1, #0
 8001320:	2078      	movs	r0, #120	; 0x78
 8001322:	f000 fb85 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001326:	22a4      	movs	r2, #164	; 0xa4
 8001328:	2100      	movs	r1, #0
 800132a:	2078      	movs	r0, #120	; 0x78
 800132c:	f000 fb80 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001330:	22d3      	movs	r2, #211	; 0xd3
 8001332:	2100      	movs	r1, #0
 8001334:	2078      	movs	r0, #120	; 0x78
 8001336:	f000 fb7b 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2078      	movs	r0, #120	; 0x78
 8001340:	f000 fb76 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001344:	22d5      	movs	r2, #213	; 0xd5
 8001346:	2100      	movs	r1, #0
 8001348:	2078      	movs	r0, #120	; 0x78
 800134a:	f000 fb71 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800134e:	22f0      	movs	r2, #240	; 0xf0
 8001350:	2100      	movs	r1, #0
 8001352:	2078      	movs	r0, #120	; 0x78
 8001354:	f000 fb6c 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001358:	22d9      	movs	r2, #217	; 0xd9
 800135a:	2100      	movs	r1, #0
 800135c:	2078      	movs	r0, #120	; 0x78
 800135e:	f000 fb67 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001362:	2222      	movs	r2, #34	; 0x22
 8001364:	2100      	movs	r1, #0
 8001366:	2078      	movs	r0, #120	; 0x78
 8001368:	f000 fb62 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800136c:	22da      	movs	r2, #218	; 0xda
 800136e:	2100      	movs	r1, #0
 8001370:	2078      	movs	r0, #120	; 0x78
 8001372:	f000 fb5d 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001376:	2212      	movs	r2, #18
 8001378:	2100      	movs	r1, #0
 800137a:	2078      	movs	r0, #120	; 0x78
 800137c:	f000 fb58 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001380:	22db      	movs	r2, #219	; 0xdb
 8001382:	2100      	movs	r1, #0
 8001384:	2078      	movs	r0, #120	; 0x78
 8001386:	f000 fb53 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800138a:	2220      	movs	r2, #32
 800138c:	2100      	movs	r1, #0
 800138e:	2078      	movs	r0, #120	; 0x78
 8001390:	f000 fb4e 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001394:	228d      	movs	r2, #141	; 0x8d
 8001396:	2100      	movs	r1, #0
 8001398:	2078      	movs	r0, #120	; 0x78
 800139a:	f000 fb49 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800139e:	2214      	movs	r2, #20
 80013a0:	2100      	movs	r1, #0
 80013a2:	2078      	movs	r0, #120	; 0x78
 80013a4:	f000 fb44 	bl	8001a30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80013a8:	22af      	movs	r2, #175	; 0xaf
 80013aa:	2100      	movs	r1, #0
 80013ac:	2078      	movs	r0, #120	; 0x78
 80013ae:	f000 fb3f 	bl	8001a30 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80013b2:	222e      	movs	r2, #46	; 0x2e
 80013b4:	2100      	movs	r1, #0
 80013b6:	2078      	movs	r0, #120	; 0x78
 80013b8:	f000 fb3a 	bl	8001a30 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 f843 	bl	8001448 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80013c2:	f000 f813 	bl	80013ec <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <SSD1306_Init+0x184>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SSD1306_Init+0x184>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SSD1306_Init+0x184>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000830 	.word	0x20000830
 80013e8:	20000818 	.word	0x20000818

080013ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	e01d      	b.n	8001434 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	3b50      	subs	r3, #80	; 0x50
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	2100      	movs	r1, #0
 8001402:	2078      	movs	r0, #120	; 0x78
 8001404:	f000 fb14 	bl	8001a30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2078      	movs	r0, #120	; 0x78
 800140e:	f000 fb0f 	bl	8001a30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001412:	2210      	movs	r2, #16
 8001414:	2100      	movs	r1, #0
 8001416:	2078      	movs	r0, #120	; 0x78
 8001418:	f000 fb0a 	bl	8001a30 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	01db      	lsls	r3, r3, #7
 8001420:	4a08      	ldr	r2, [pc, #32]	; (8001444 <SSD1306_UpdateScreen+0x58>)
 8001422:	441a      	add	r2, r3
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	2140      	movs	r1, #64	; 0x40
 8001428:	2078      	movs	r0, #120	; 0x78
 800142a:	f000 fab9 	bl	80019a0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	3301      	adds	r3, #1
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b07      	cmp	r3, #7
 8001438:	d9de      	bls.n	80013f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000418 	.word	0x20000418

08001448 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <SSD1306_Fill+0x14>
 8001458:	2300      	movs	r3, #0
 800145a:	e000      	b.n	800145e <SSD1306_Fill+0x16>
 800145c:	23ff      	movs	r3, #255	; 0xff
 800145e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001462:	4619      	mov	r1, r3
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <SSD1306_Fill+0x2c>)
 8001466:	f008 fd26 	bl	8009eb6 <memset>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000418 	.word	0x20000418

08001478 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	80fb      	strh	r3, [r7, #6]
 8001482:	460b      	mov	r3, r1
 8001484:	80bb      	strh	r3, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	70fb      	strb	r3, [r7, #3]
	if (
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	2b7f      	cmp	r3, #127	; 0x7f
 800148e:	d848      	bhi.n	8001522 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	2b3f      	cmp	r3, #63	; 0x3f
 8001494:	d845      	bhi.n	8001522 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <SSD1306_DrawPixel+0xb8>)
 8001498:	791b      	ldrb	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d11a      	bne.n	80014e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014b2:	88fa      	ldrh	r2, [r7, #6]
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	b298      	uxth	r0, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	01db      	lsls	r3, r3, #7
 80014be:	4413      	add	r3, r2
 80014c0:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <SSD1306_DrawPixel+0xbc>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	b25a      	sxtb	r2, r3
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	2101      	movs	r1, #1
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b259      	sxtb	r1, r3
 80014d8:	88fa      	ldrh	r2, [r7, #6]
 80014da:	4603      	mov	r3, r0
 80014dc:	01db      	lsls	r3, r3, #7
 80014de:	4413      	add	r3, r2
 80014e0:	b2c9      	uxtb	r1, r1
 80014e2:	4a14      	ldr	r2, [pc, #80]	; (8001534 <SSD1306_DrawPixel+0xbc>)
 80014e4:	54d1      	strb	r1, [r2, r3]
 80014e6:	e01d      	b.n	8001524 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014e8:	88fa      	ldrh	r2, [r7, #6]
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	b298      	uxth	r0, r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	01db      	lsls	r3, r3, #7
 80014f4:	4413      	add	r3, r2
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <SSD1306_DrawPixel+0xbc>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	b25b      	sxtb	r3, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	b25b      	sxtb	r3, r3
 800150e:	4013      	ands	r3, r2
 8001510:	b259      	sxtb	r1, r3
 8001512:	88fa      	ldrh	r2, [r7, #6]
 8001514:	4603      	mov	r3, r0
 8001516:	01db      	lsls	r3, r3, #7
 8001518:	4413      	add	r3, r2
 800151a:	b2c9      	uxtb	r1, r1
 800151c:	4a05      	ldr	r2, [pc, #20]	; (8001534 <SSD1306_DrawPixel+0xbc>)
 800151e:	54d1      	strb	r1, [r2, r3]
 8001520:	e000      	b.n	8001524 <SSD1306_DrawPixel+0xac>
		return;
 8001522:	bf00      	nop
	}
}
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000818 	.word	0x20000818
 8001534:	20000418 	.word	0x20000418

08001538 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	460a      	mov	r2, r1
 8001542:	80fb      	strh	r3, [r7, #6]
 8001544:	4613      	mov	r3, r2
 8001546:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001548:	4a05      	ldr	r2, [pc, #20]	; (8001560 <SSD1306_GotoXY+0x28>)
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <SSD1306_GotoXY+0x28>)
 8001550:	88bb      	ldrh	r3, [r7, #4]
 8001552:	8053      	strh	r3, [r2, #2]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000818 	.word	0x20000818

08001564 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001574:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <SSD1306_Putc+0xfc>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
	if (
 8001580:	2b7f      	cmp	r3, #127	; 0x7f
 8001582:	dc07      	bgt.n	8001594 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001584:	4b36      	ldr	r3, [pc, #216]	; (8001660 <SSD1306_Putc+0xfc>)
 8001586:	885b      	ldrh	r3, [r3, #2]
 8001588:	461a      	mov	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	785b      	ldrb	r3, [r3, #1]
 800158e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001590:	2b3f      	cmp	r3, #63	; 0x3f
 8001592:	dd01      	ble.n	8001598 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001594:	2300      	movs	r3, #0
 8001596:	e05e      	b.n	8001656 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e04b      	b.n	8001636 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	3b20      	subs	r3, #32
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	7849      	ldrb	r1, [r1, #1]
 80015aa:	fb01 f303 	mul.w	r3, r1, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	440b      	add	r3, r1
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	e030      	b.n	8001624 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d010      	beq.n	80015f4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <SSD1306_Putc+0xfc>)
 80015d4:	881a      	ldrh	r2, [r3, #0]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4413      	add	r3, r2
 80015dc:	b298      	uxth	r0, r3
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <SSD1306_Putc+0xfc>)
 80015e0:	885a      	ldrh	r2, [r3, #2]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	79ba      	ldrb	r2, [r7, #6]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff ff43 	bl	8001478 <SSD1306_DrawPixel>
 80015f2:	e014      	b.n	800161e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <SSD1306_Putc+0xfc>)
 80015f6:	881a      	ldrh	r2, [r3, #0]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	b298      	uxth	r0, r3
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <SSD1306_Putc+0xfc>)
 8001602:	885a      	ldrh	r2, [r3, #2]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	b29b      	uxth	r3, r3
 8001608:	4413      	add	r3, r2
 800160a:	b299      	uxth	r1, r3
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf0c      	ite	eq
 8001612:	2301      	moveq	r3, #1
 8001614:	2300      	movne	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	f7ff ff2d 	bl	8001478 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	3301      	adds	r3, #1
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4293      	cmp	r3, r2
 800162e:	d3c8      	bcc.n	80015c2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	785b      	ldrb	r3, [r3, #1]
 800163a:	461a      	mov	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	4293      	cmp	r3, r2
 8001640:	d3ad      	bcc.n	800159e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <SSD1306_Putc+0xfc>)
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4413      	add	r3, r2
 800164e:	b29a      	uxth	r2, r3
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <SSD1306_Putc+0xfc>)
 8001652:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001654:	79fb      	ldrb	r3, [r7, #7]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000818 	.word	0x20000818

08001664 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	4613      	mov	r3, r2
 8001670:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001672:	e012      	b.n	800169a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	79fa      	ldrb	r2, [r7, #7]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff71 	bl	8001564 <SSD1306_Putc>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d002      	beq.n	8001694 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	e008      	b.n	80016a6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1e8      	bne.n	8001674 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	781b      	ldrb	r3, [r3, #0]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80016ae:	b590      	push	{r4, r7, lr}
 80016b0:	b087      	sub	sp, #28
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4604      	mov	r4, r0
 80016b6:	4608      	mov	r0, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	80fb      	strh	r3, [r7, #6]
 80016c0:	4603      	mov	r3, r0
 80016c2:	80bb      	strh	r3, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	2b7f      	cmp	r3, #127	; 0x7f
 80016d0:	d901      	bls.n	80016d6 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80016d2:	237f      	movs	r3, #127	; 0x7f
 80016d4:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	2b7f      	cmp	r3, #127	; 0x7f
 80016da:	d901      	bls.n	80016e0 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80016dc:	237f      	movs	r3, #127	; 0x7f
 80016de:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	2b3f      	cmp	r3, #63	; 0x3f
 80016e4:	d901      	bls.n	80016ea <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80016e6:	233f      	movs	r3, #63	; 0x3f
 80016e8:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80016ea:	883b      	ldrh	r3, [r7, #0]
 80016ec:	2b3f      	cmp	r3, #63	; 0x3f
 80016ee:	d901      	bls.n	80016f4 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80016f0:	233f      	movs	r3, #63	; 0x3f
 80016f2:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80016f4:	88fa      	ldrh	r2, [r7, #6]
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d205      	bcs.n	8001708 <SSD1306_DrawLine+0x5a>
 80016fc:	887a      	ldrh	r2, [r7, #2]
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	b29b      	uxth	r3, r3
 8001704:	b21b      	sxth	r3, r3
 8001706:	e004      	b.n	8001712 <SSD1306_DrawLine+0x64>
 8001708:	88fa      	ldrh	r2, [r7, #6]
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b29b      	uxth	r3, r3
 8001710:	b21b      	sxth	r3, r3
 8001712:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001714:	88ba      	ldrh	r2, [r7, #4]
 8001716:	883b      	ldrh	r3, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d205      	bcs.n	8001728 <SSD1306_DrawLine+0x7a>
 800171c:	883a      	ldrh	r2, [r7, #0]
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b29b      	uxth	r3, r3
 8001724:	b21b      	sxth	r3, r3
 8001726:	e004      	b.n	8001732 <SSD1306_DrawLine+0x84>
 8001728:	88ba      	ldrh	r2, [r7, #4]
 800172a:	883b      	ldrh	r3, [r7, #0]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	b29b      	uxth	r3, r3
 8001730:	b21b      	sxth	r3, r3
 8001732:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001734:	88fa      	ldrh	r2, [r7, #6]
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	429a      	cmp	r2, r3
 800173a:	d201      	bcs.n	8001740 <SSD1306_DrawLine+0x92>
 800173c:	2301      	movs	r3, #1
 800173e:	e001      	b.n	8001744 <SSD1306_DrawLine+0x96>
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
 8001744:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001746:	88ba      	ldrh	r2, [r7, #4]
 8001748:	883b      	ldrh	r3, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d201      	bcs.n	8001752 <SSD1306_DrawLine+0xa4>
 800174e:	2301      	movs	r3, #1
 8001750:	e001      	b.n	8001756 <SSD1306_DrawLine+0xa8>
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001758:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800175c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	dd06      	ble.n	8001772 <SSD1306_DrawLine+0xc4>
 8001764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001768:	0fda      	lsrs	r2, r3, #31
 800176a:	4413      	add	r3, r2
 800176c:	105b      	asrs	r3, r3, #1
 800176e:	b21b      	sxth	r3, r3
 8001770:	e006      	b.n	8001780 <SSD1306_DrawLine+0xd2>
 8001772:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001776:	425b      	negs	r3, r3
 8001778:	0fda      	lsrs	r2, r3, #31
 800177a:	4413      	add	r3, r2
 800177c:	105b      	asrs	r3, r3, #1
 800177e:	b21b      	sxth	r3, r3
 8001780:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001782:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d129      	bne.n	80017de <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800178a:	883a      	ldrh	r2, [r7, #0]
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	d205      	bcs.n	800179e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001792:	883b      	ldrh	r3, [r7, #0]
 8001794:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001796:	88bb      	ldrh	r3, [r7, #4]
 8001798:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800179a:	893b      	ldrh	r3, [r7, #8]
 800179c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d205      	bcs.n	80017b2 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80017ae:	893b      	ldrh	r3, [r7, #8]
 80017b0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	82bb      	strh	r3, [r7, #20]
 80017b6:	e00c      	b.n	80017d2 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80017b8:	8ab9      	ldrh	r1, [r7, #20]
 80017ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fe59 	bl	8001478 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80017c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	82bb      	strh	r3, [r7, #20]
 80017d2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017d6:	883b      	ldrh	r3, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dded      	ble.n	80017b8 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80017dc:	e05f      	b.n	800189e <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80017de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d129      	bne.n	800183a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80017e6:	883a      	ldrh	r2, [r7, #0]
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d205      	bcs.n	80017fa <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80017ee:	883b      	ldrh	r3, [r7, #0]
 80017f0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80017f6:	893b      	ldrh	r3, [r7, #8]
 80017f8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d205      	bcs.n	800180e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800180a:	893b      	ldrh	r3, [r7, #8]
 800180c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	82bb      	strh	r3, [r7, #20]
 8001812:	e00c      	b.n	800182e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001814:	8abb      	ldrh	r3, [r7, #20]
 8001816:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800181a:	88b9      	ldrh	r1, [r7, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe2b 	bl	8001478 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001822:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001826:	b29b      	uxth	r3, r3
 8001828:	3301      	adds	r3, #1
 800182a:	b29b      	uxth	r3, r3
 800182c:	82bb      	strh	r3, [r7, #20]
 800182e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	429a      	cmp	r2, r3
 8001836:	dded      	ble.n	8001814 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001838:	e031      	b.n	800189e <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800183a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800183e:	88b9      	ldrh	r1, [r7, #4]
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fe18 	bl	8001478 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	429a      	cmp	r2, r3
 800184e:	d103      	bne.n	8001858 <SSD1306_DrawLine+0x1aa>
 8001850:	88ba      	ldrh	r2, [r7, #4]
 8001852:	883b      	ldrh	r3, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d021      	beq.n	800189c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001858:	8afb      	ldrh	r3, [r7, #22]
 800185a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800185c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001860:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001864:	425b      	negs	r3, r3
 8001866:	429a      	cmp	r2, r3
 8001868:	dd08      	ble.n	800187c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800186a:	8afa      	ldrh	r2, [r7, #22]
 800186c:	8a3b      	ldrh	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001874:	89fa      	ldrh	r2, [r7, #14]
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	4413      	add	r3, r2
 800187a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 800187c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001880:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	dad8      	bge.n	800183a <SSD1306_DrawLine+0x18c>
			err += dx;
 8001888:	8afa      	ldrh	r2, [r7, #22]
 800188a:	8a7b      	ldrh	r3, [r7, #18]
 800188c:	4413      	add	r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001892:	89ba      	ldrh	r2, [r7, #12]
 8001894:	88bb      	ldrh	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800189a:	e7ce      	b.n	800183a <SSD1306_DrawLine+0x18c>
			break;
 800189c:	bf00      	nop
		} 
	}
}
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	4604      	mov	r4, r0
 80018ac:	4608      	mov	r0, r1
 80018ae:	4611      	mov	r1, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	4623      	mov	r3, r4
 80018b4:	80fb      	strh	r3, [r7, #6]
 80018b6:	4603      	mov	r3, r0
 80018b8:	80bb      	strh	r3, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]
 80018be:	4613      	mov	r3, r2
 80018c0:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	2b7f      	cmp	r3, #127	; 0x7f
 80018c6:	d853      	bhi.n	8001970 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	2b3f      	cmp	r3, #63	; 0x3f
 80018cc:	d850      	bhi.n	8001970 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80018ce:	88fa      	ldrh	r2, [r7, #6]
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	4413      	add	r3, r2
 80018d4:	2b7f      	cmp	r3, #127	; 0x7f
 80018d6:	dd03      	ble.n	80018e0 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80018de:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80018e0:	88ba      	ldrh	r2, [r7, #4]
 80018e2:	883b      	ldrh	r3, [r7, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	2b3f      	cmp	r3, #63	; 0x3f
 80018e8:	dd03      	ble.n	80018f2 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80018f0:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 80018f2:	88fa      	ldrh	r2, [r7, #6]
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	4413      	add	r3, r2
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	88bc      	ldrh	r4, [r7, #4]
 80018fc:	88b9      	ldrh	r1, [r7, #4]
 80018fe:	88f8      	ldrh	r0, [r7, #6]
 8001900:	7e3b      	ldrb	r3, [r7, #24]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4623      	mov	r3, r4
 8001906:	f7ff fed2 	bl	80016ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800190a:	88ba      	ldrh	r2, [r7, #4]
 800190c:	883b      	ldrh	r3, [r7, #0]
 800190e:	4413      	add	r3, r2
 8001910:	b299      	uxth	r1, r3
 8001912:	88fa      	ldrh	r2, [r7, #6]
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	4413      	add	r3, r2
 8001918:	b29c      	uxth	r4, r3
 800191a:	88ba      	ldrh	r2, [r7, #4]
 800191c:	883b      	ldrh	r3, [r7, #0]
 800191e:	4413      	add	r3, r2
 8001920:	b29a      	uxth	r2, r3
 8001922:	88f8      	ldrh	r0, [r7, #6]
 8001924:	7e3b      	ldrb	r3, [r7, #24]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	4622      	mov	r2, r4
 800192c:	f7ff febf 	bl	80016ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001930:	88ba      	ldrh	r2, [r7, #4]
 8001932:	883b      	ldrh	r3, [r7, #0]
 8001934:	4413      	add	r3, r2
 8001936:	b29c      	uxth	r4, r3
 8001938:	88fa      	ldrh	r2, [r7, #6]
 800193a:	88b9      	ldrh	r1, [r7, #4]
 800193c:	88f8      	ldrh	r0, [r7, #6]
 800193e:	7e3b      	ldrb	r3, [r7, #24]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	4623      	mov	r3, r4
 8001944:	f7ff feb3 	bl	80016ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001948:	88fa      	ldrh	r2, [r7, #6]
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	4413      	add	r3, r2
 800194e:	b298      	uxth	r0, r3
 8001950:	88fa      	ldrh	r2, [r7, #6]
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	4413      	add	r3, r2
 8001956:	b29c      	uxth	r4, r3
 8001958:	88ba      	ldrh	r2, [r7, #4]
 800195a:	883b      	ldrh	r3, [r7, #0]
 800195c:	4413      	add	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	88b9      	ldrh	r1, [r7, #4]
 8001962:	7e3b      	ldrb	r3, [r7, #24]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	4613      	mov	r3, r2
 8001968:	4622      	mov	r2, r4
 800196a:	f7ff fea0 	bl	80016ae <SSD1306_DrawLine>
 800196e:	e000      	b.n	8001972 <SSD1306_DrawRectangle+0xce>
		return;
 8001970:	bf00      	nop
}
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}

08001978 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <ssd1306_I2C_Init+0x24>)
 8001980:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001982:	e002      	b.n	800198a <ssd1306_I2C_Init+0x12>
		p--;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
	while(p>0)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f9      	bne.n	8001984 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	0003d090 	.word	0x0003d090

080019a0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b0c7      	sub	sp, #284	; 0x11c
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	4604      	mov	r4, r0
 80019a8:	4608      	mov	r0, r1
 80019aa:	4639      	mov	r1, r7
 80019ac:	600a      	str	r2, [r1, #0]
 80019ae:	4619      	mov	r1, r3
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	4622      	mov	r2, r4
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	1dbb      	adds	r3, r7, #6
 80019b8:	4602      	mov	r2, r0
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	460a      	mov	r2, r1
 80019c0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	1dba      	adds	r2, r7, #6
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019d2:	e010      	b.n	80019f6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80019d4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019d8:	463a      	mov	r2, r7
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	441a      	add	r2, r3
 80019de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019e2:	3301      	adds	r3, #1
 80019e4:	7811      	ldrb	r1, [r2, #0]
 80019e6:	f107 020c 	add.w	r2, r7, #12
 80019ea:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019ec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019f0:	3301      	adds	r3, #1
 80019f2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019f6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	1d3a      	adds	r2, r7, #4
 80019fe:	8812      	ldrh	r2, [r2, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8e7      	bhi.n	80019d4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a04:	1dfb      	adds	r3, r7, #7
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b299      	uxth	r1, r3
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b298      	uxth	r0, r3
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	230a      	movs	r3, #10
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <ssd1306_I2C_WriteMulti+0x8c>)
 8001a1e:	f001 f94b 	bl	8002cb8 <HAL_I2C_Master_Transmit>
}
 8001a22:	bf00      	nop
 8001a24:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	20000830 	.word	0x20000830

08001a30 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	71bb      	strb	r3, [r7, #6]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a46:	797b      	ldrb	r3, [r7, #5]
 8001a48:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	b299      	uxth	r1, r3
 8001a4e:	f107 020c 	add.w	r2, r7, #12
 8001a52:	230a      	movs	r3, #10
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2302      	movs	r3, #2
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <ssd1306_I2C_Write+0x38>)
 8001a5a:	f001 f92d 	bl	8002cb8 <HAL_I2C_Master_Transmit>
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000830 	.word	0x20000830

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 fc7a 	bl	8002408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b1c:	2004      	movs	r0, #4
 8001b1e:	f000 ff7b 	bl	8002a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b2a:	2008      	movs	r0, #8
 8001b2c:	f000 ff74 	bl	8002a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b38:	2010      	movs	r0, #16
 8001b3a:	f000 ff6d 	bl	8002a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <TIM2_IRQHandler+0x10>)
 8001b4a:	f004 f8d2 	bl	8005cf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200009d0 	.word	0x200009d0

08001b58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <OTG_FS_IRQHandler+0x10>)
 8001b5e:	f001 fe30 	bl	80037c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000f74 	.word	0x20000f74

08001b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <_sbrk+0x5c>)
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <_sbrk+0x60>)
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <_sbrk+0x64>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <_sbrk+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d207      	bcs.n	8001bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b9c:	f008 f946 	bl	8009e2c <__errno>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	e009      	b.n	8001bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <_sbrk+0x64>)
 8001bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20020000 	.word	0x20020000
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	20000820 	.word	0x20000820
 8001bd4:	20001380 	.word	0x20001380

08001bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <SystemInit+0x28>)
 8001bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be2:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <SystemInit+0x28>)
 8001be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SystemInit+0x28>)
 8001bee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bf2:	609a      	str	r2, [r3, #8]
#endif
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	; 0x30
 8001c08:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	2224      	movs	r2, #36	; 0x24
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f008 f94f 	bl	8009eb6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c36:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c50:	2301      	movs	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c58:	230a      	movs	r3, #10
 8001c5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c60:	2301      	movs	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001c68:	230a      	movs	r3, #10
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	4619      	mov	r1, r3
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c74:	f003 ff54 	bl	8005b20 <HAL_TIM_Encoder_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c7e:	f7ff fa6b 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c90:	f004 fa06 	bl	80060a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c9a:	f7ff fa5d 	bl	8001158 <Error_Handler>
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200009d0 	.word	0x200009d0

08001cac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ccc:	d133      	bne.n	8001d36 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a1a      	ldr	r2, [pc, #104]	; (8001d40 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_TIM_Encoder_MspInit+0x94>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d06:	2303      	movs	r3, #3
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d16:	2301      	movs	r3, #1
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4808      	ldr	r0, [pc, #32]	; (8001d44 <HAL_TIM_Encoder_MspInit+0x98>)
 8001d22:	f000 fcc5 	bl	80026b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	201c      	movs	r0, #28
 8001d2c:	f000 fc89 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d30:	201c      	movs	r0, #28
 8001d32:	f000 fca2 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020000 	.word	0x40020000

08001d48 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001d52:	f107 020f 	add.w	r2, r7, #15
 8001d56:	1df9      	adds	r1, r7, #7
 8001d58:	2364      	movs	r3, #100	; 0x64
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	4804      	ldr	r0, [pc, #16]	; (8001d70 <W25qxx_Spi+0x28>)
 8001d60:	f003 fc2b 	bl	80055ba <HAL_SPI_TransmitReceive>
	return ret;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000978 	.word	0x20000978

08001d74 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d90:	4813      	ldr	r0, [pc, #76]	; (8001de0 <W25qxx_ReadID+0x6c>)
 8001d92:	f000 fe27 	bl	80029e4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001d96:	209f      	movs	r0, #159	; 0x9f
 8001d98:	f7ff ffd6 	bl	8001d48 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d9c:	20a5      	movs	r0, #165	; 0xa5
 8001d9e:	f7ff ffd3 	bl	8001d48 <W25qxx_Spi>
 8001da2:	4603      	mov	r3, r0
 8001da4:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001da6:	20a5      	movs	r0, #165	; 0xa5
 8001da8:	f7ff ffce 	bl	8001d48 <W25qxx_Spi>
 8001dac:	4603      	mov	r3, r0
 8001dae:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001db0:	20a5      	movs	r0, #165	; 0xa5
 8001db2:	f7ff ffc9 	bl	8001d48 <W25qxx_Spi>
 8001db6:	4603      	mov	r3, r0
 8001db8:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc0:	4807      	ldr	r0, [pc, #28]	; (8001de0 <W25qxx_ReadID+0x6c>)
 8001dc2:	f000 fe0f 	bl	80029e4 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	041a      	lsls	r2, r3, #16
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40020000 	.word	0x40020000

08001de4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df0:	4816      	ldr	r0, [pc, #88]	; (8001e4c <W25qxx_ReadUniqID+0x68>)
 8001df2:	f000 fdf7 	bl	80029e4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8001df6:	204b      	movs	r0, #75	; 0x4b
 8001df8:	f7ff ffa6 	bl	8001d48 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	e005      	b.n	8001e0e <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e02:	20a5      	movs	r0, #165	; 0xa5
 8001e04:	f7ff ffa0 	bl	8001d48 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	71fb      	strb	r3, [r7, #7]
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d9f6      	bls.n	8001e02 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	71bb      	strb	r3, [r7, #6]
 8001e18:	e00b      	b.n	8001e32 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e1a:	79bc      	ldrb	r4, [r7, #6]
 8001e1c:	20a5      	movs	r0, #165	; 0xa5
 8001e1e:	f7ff ff93 	bl	8001d48 <W25qxx_Spi>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <W25qxx_ReadUniqID+0x6c>)
 8001e28:	4423      	add	r3, r4
 8001e2a:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8001e2c:	79bb      	ldrb	r3, [r7, #6]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	71bb      	strb	r3, [r7, #6]
 8001e32:	79bb      	ldrb	r3, [r7, #6]
 8001e34:	2b07      	cmp	r3, #7
 8001e36:	d9f0      	bls.n	8001e1a <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3e:	4803      	ldr	r0, [pc, #12]	; (8001e4c <W25qxx_ReadUniqID+0x68>)
 8001e40:	f000 fdd0 	bl	80029e4 <HAL_GPIO_WritePin>
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	20000a10 	.word	0x20000a10

08001e54 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e5e:	4808      	ldr	r0, [pc, #32]	; (8001e80 <W25qxx_WriteEnable+0x2c>)
 8001e60:	f000 fdc0 	bl	80029e4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8001e64:	2006      	movs	r0, #6
 8001e66:	f7ff ff6f 	bl	8001d48 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <W25qxx_WriteEnable+0x2c>)
 8001e72:	f000 fdb7 	bl	80029e4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8001e76:	2001      	movs	r0, #1
 8001e78:	f000 fae6 	bl	8002448 <HAL_Delay>
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40020000 	.word	0x40020000

08001e84 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e98:	481c      	ldr	r0, [pc, #112]	; (8001f0c <W25qxx_ReadStatusRegister+0x88>)
 8001e9a:	f000 fda3 	bl	80029e4 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d10c      	bne.n	8001ebe <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8001ea4:	2005      	movs	r0, #5
 8001ea6:	f7ff ff4f 	bl	8001d48 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001eaa:	20a5      	movs	r0, #165	; 0xa5
 8001eac:	f7ff ff4c 	bl	8001d48 <W25qxx_Spi>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <W25qxx_ReadStatusRegister+0x8c>)
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001ebc:	e01b      	b.n	8001ef6 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d10c      	bne.n	8001ede <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8001ec4:	2035      	movs	r0, #53	; 0x35
 8001ec6:	f7ff ff3f 	bl	8001d48 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001eca:	20a5      	movs	r0, #165	; 0xa5
 8001ecc:	f7ff ff3c 	bl	8001d48 <W25qxx_Spi>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <W25qxx_ReadStatusRegister+0x8c>)
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001edc:	e00b      	b.n	8001ef6 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001ede:	2015      	movs	r0, #21
 8001ee0:	f7ff ff32 	bl	8001d48 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001ee4:	20a5      	movs	r0, #165	; 0xa5
 8001ee6:	f7ff ff2f 	bl	8001d48 <W25qxx_Spi>
 8001eea:	4603      	mov	r3, r0
 8001eec:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <W25qxx_ReadStatusRegister+0x8c>)
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <W25qxx_ReadStatusRegister+0x88>)
 8001efe:	f000 fd71 	bl	80029e4 <HAL_GPIO_WritePin>
	return status;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	20000a10 	.word	0x20000a10

08001f14 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f000 fa95 	bl	8002448 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f24:	480f      	ldr	r0, [pc, #60]	; (8001f64 <W25qxx_WaitForWriteEnd+0x50>)
 8001f26:	f000 fd5d 	bl	80029e4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8001f2a:	2005      	movs	r0, #5
 8001f2c:	f7ff ff0c 	bl	8001d48 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f30:	20a5      	movs	r0, #165	; 0xa5
 8001f32:	f7ff ff09 	bl	8001d48 <W25qxx_Spi>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <W25qxx_WaitForWriteEnd+0x54>)
 8001f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001f40:	2001      	movs	r0, #1
 8001f42:	f000 fa81 	bl	8002448 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <W25qxx_WaitForWriteEnd+0x54>)
 8001f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ed      	bne.n	8001f30 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f54:	2201      	movs	r2, #1
 8001f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f5a:	4802      	ldr	r0, [pc, #8]	; (8001f64 <W25qxx_WaitForWriteEnd+0x50>)
 8001f5c:	f000 fd42 	bl	80029e4 <HAL_GPIO_WritePin>
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40020000 	.word	0x40020000
 8001f68:	20000a10 	.word	0x20000a10

08001f6c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8001f72:	4b62      	ldr	r3, [pc, #392]	; (80020fc <W25qxx_Init+0x190>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//while (HAL_GetTick() < 100)
	//	W25qxx_Delay(1);
	W25qxx_Delay(100);
 8001f7a:	2064      	movs	r0, #100	; 0x64
 8001f7c:	f000 fa64 	bl	8002448 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f80:	2201      	movs	r2, #1
 8001f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f86:	485e      	ldr	r0, [pc, #376]	; (8002100 <W25qxx_Init+0x194>)
 8001f88:	f000 fd2c 	bl	80029e4 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001f8c:	2064      	movs	r0, #100	; 0x64
 8001f8e:	f000 fa5b 	bl	8002448 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8001f92:	f7ff feef 	bl	8001d74 <W25qxx_ReadID>
 8001f96:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	3b11      	subs	r3, #17
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	d86b      	bhi.n	800207a <W25qxx_Init+0x10e>
 8001fa2:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <W25qxx_Init+0x3c>)
 8001fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa8:	0800206d 	.word	0x0800206d
 8001fac:	0800205f 	.word	0x0800205f
 8001fb0:	08002051 	.word	0x08002051
 8001fb4:	08002043 	.word	0x08002043
 8001fb8:	08002035 	.word	0x08002035
 8001fbc:	08002027 	.word	0x08002027
 8001fc0:	08002019 	.word	0x08002019
 8001fc4:	08002009 	.word	0x08002009
 8001fc8:	08001ff9 	.word	0x08001ff9
 8001fcc:	0800207b 	.word	0x0800207b
 8001fd0:	0800207b 	.word	0x0800207b
 8001fd4:	0800207b 	.word	0x0800207b
 8001fd8:	0800207b 	.word	0x0800207b
 8001fdc:	0800207b 	.word	0x0800207b
 8001fe0:	0800207b 	.word	0x0800207b
 8001fe4:	08001fe9 	.word	0x08001fe9
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8001fe8:	4b44      	ldr	r3, [pc, #272]	; (80020fc <W25qxx_Init+0x190>)
 8001fea:	220a      	movs	r2, #10
 8001fec:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8001fee:	4b43      	ldr	r3, [pc, #268]	; (80020fc <W25qxx_Init+0x190>)
 8001ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8001ff6:	e046      	b.n	8002086 <W25qxx_Init+0x11a>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8001ff8:	4b40      	ldr	r3, [pc, #256]	; (80020fc <W25qxx_Init+0x190>)
 8001ffa:	2209      	movs	r2, #9
 8001ffc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <W25qxx_Init+0x190>)
 8002000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002004:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8002006:	e03e      	b.n	8002086 <W25qxx_Init+0x11a>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <W25qxx_Init+0x190>)
 800200a:	2208      	movs	r2, #8
 800200c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <W25qxx_Init+0x190>)
 8002010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002014:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8002016:	e036      	b.n	8002086 <W25qxx_Init+0x11a>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8002018:	4b38      	ldr	r3, [pc, #224]	; (80020fc <W25qxx_Init+0x190>)
 800201a:	2207      	movs	r2, #7
 800201c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800201e:	4b37      	ldr	r3, [pc, #220]	; (80020fc <W25qxx_Init+0x190>)
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8002024:	e02f      	b.n	8002086 <W25qxx_Init+0x11a>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8002026:	4b35      	ldr	r3, [pc, #212]	; (80020fc <W25qxx_Init+0x190>)
 8002028:	2206      	movs	r2, #6
 800202a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800202c:	4b33      	ldr	r3, [pc, #204]	; (80020fc <W25qxx_Init+0x190>)
 800202e:	2240      	movs	r2, #64	; 0x40
 8002030:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8002032:	e028      	b.n	8002086 <W25qxx_Init+0x11a>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <W25qxx_Init+0x190>)
 8002036:	2205      	movs	r2, #5
 8002038:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <W25qxx_Init+0x190>)
 800203c:	2220      	movs	r2, #32
 800203e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8002040:	e021      	b.n	8002086 <W25qxx_Init+0x11a>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002042:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <W25qxx_Init+0x190>)
 8002044:	2204      	movs	r2, #4
 8002046:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002048:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <W25qxx_Init+0x190>)
 800204a:	2210      	movs	r2, #16
 800204c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800204e:	e01a      	b.n	8002086 <W25qxx_Init+0x11a>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002050:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <W25qxx_Init+0x190>)
 8002052:	2203      	movs	r2, #3
 8002054:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <W25qxx_Init+0x190>)
 8002058:	2208      	movs	r2, #8
 800205a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 800205c:	e013      	b.n	8002086 <W25qxx_Init+0x11a>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800205e:	4b27      	ldr	r3, [pc, #156]	; (80020fc <W25qxx_Init+0x190>)
 8002060:	2202      	movs	r2, #2
 8002062:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <W25qxx_Init+0x190>)
 8002066:	2204      	movs	r2, #4
 8002068:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800206a:	e00c      	b.n	8002086 <W25qxx_Init+0x11a>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <W25qxx_Init+0x190>)
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <W25qxx_Init+0x190>)
 8002074:	2202      	movs	r2, #2
 8002076:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8002078:	e005      	b.n	8002086 <W25qxx_Init+0x11a>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <W25qxx_Init+0x190>)
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8002082:	2300      	movs	r3, #0
 8002084:	e036      	b.n	80020f4 <W25qxx_Init+0x188>
	}
	w25qxx.PageSize = 256;
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <W25qxx_Init+0x190>)
 8002088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <W25qxx_Init+0x190>)
 8002090:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002094:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <W25qxx_Init+0x190>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	4a17      	ldr	r2, [pc, #92]	; (80020fc <W25qxx_Init+0x190>)
 800209e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <W25qxx_Init+0x190>)
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	4a15      	ldr	r2, [pc, #84]	; (80020fc <W25qxx_Init+0x190>)
 80020a6:	6912      	ldr	r2, [r2, #16]
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	4a13      	ldr	r2, [pc, #76]	; (80020fc <W25qxx_Init+0x190>)
 80020ae:	8952      	ldrh	r2, [r2, #10]
 80020b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80020b4:	4a11      	ldr	r2, [pc, #68]	; (80020fc <W25qxx_Init+0x190>)
 80020b6:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80020b8:	4b10      	ldr	r3, [pc, #64]	; (80020fc <W25qxx_Init+0x190>)
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <W25qxx_Init+0x190>)
 80020c0:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <W25qxx_Init+0x190>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <W25qxx_Init+0x190>)
 80020c8:	6912      	ldr	r2, [r2, #16]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	0a9b      	lsrs	r3, r3, #10
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <W25qxx_Init+0x190>)
 80020d2:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80020d4:	f7ff fe86 	bl	8001de4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80020d8:	2001      	movs	r0, #1
 80020da:	f7ff fed3 	bl	8001e84 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80020de:	2002      	movs	r0, #2
 80020e0:	f7ff fed0 	bl	8001e84 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f7ff fecd 	bl	8001e84 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <W25qxx_Init+0x190>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000a10 	.word	0x20000a10
 8002100:	40020000 	.word	0x40020000

08002104 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8002112:	e002      	b.n	800211a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002114:	2001      	movs	r0, #1
 8002116:	f000 f997 	bl	8002448 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800211a:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <W25qxx_WritePage+0x100>)
 800211c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002120:	2b01      	cmp	r3, #1
 8002122:	d0f7      	beq.n	8002114 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8002124:	4b37      	ldr	r3, [pc, #220]	; (8002204 <W25qxx_WritePage+0x100>)
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	4a34      	ldr	r2, [pc, #208]	; (8002204 <W25qxx_WritePage+0x100>)
 8002134:	8952      	ldrh	r2, [r2, #10]
 8002136:	4293      	cmp	r3, r2
 8002138:	d802      	bhi.n	8002140 <W25qxx_WritePage+0x3c>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002140:	4b30      	ldr	r3, [pc, #192]	; (8002204 <W25qxx_WritePage+0x100>)
 8002142:	895b      	ldrh	r3, [r3, #10]
 8002144:	461a      	mov	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	4413      	add	r3, r2
 8002152:	4a2c      	ldr	r2, [pc, #176]	; (8002204 <W25qxx_WritePage+0x100>)
 8002154:	8952      	ldrh	r2, [r2, #10]
 8002156:	4293      	cmp	r3, r2
 8002158:	d905      	bls.n	8002166 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <W25qxx_WritePage+0x100>)
 800215c:	895b      	ldrh	r3, [r3, #10]
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8002166:	f7ff fed5 	bl	8001f14 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800216a:	f7ff fe73 	bl	8001e54 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002174:	4824      	ldr	r0, [pc, #144]	; (8002208 <W25qxx_WritePage+0x104>)
 8002176:	f000 fc35 	bl	80029e4 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <W25qxx_WritePage+0x100>)
 800217c:	895b      	ldrh	r3, [r3, #10]
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	fb03 f302 	mul.w	r3, r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <W25qxx_WritePage+0x100>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d909      	bls.n	80021a8 <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 8002194:	2012      	movs	r0, #18
 8002196:	f7ff fdd7 	bl	8001d48 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	0e1b      	lsrs	r3, r3, #24
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fdd1 	bl	8001d48 <W25qxx_Spi>
 80021a6:	e002      	b.n	80021ae <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 80021a8:	2002      	movs	r0, #2
 80021aa:	f7ff fdcd 	bl	8001d48 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0c1b      	lsrs	r3, r3, #16
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fdc7 	bl	8001d48 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fdc1 	bl	8001d48 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fdbc 	bl	8001d48 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	2364      	movs	r3, #100	; 0x64
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <W25qxx_WritePage+0x108>)
 80021da:	f002 ffb1 	bl	8005140 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021e4:	4808      	ldr	r0, [pc, #32]	; (8002208 <W25qxx_WritePage+0x104>)
 80021e6:	f000 fbfd 	bl	80029e4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80021ea:	f7ff fe93 	bl	8001f14 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 f92a 	bl	8002448 <HAL_Delay>
	w25qxx.Lock = 0;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <W25qxx_WritePage+0x100>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000a10 	.word	0x20000a10
 8002208:	40020000 	.word	0x40020000
 800220c:	20000978 	.word	0x20000978

08002210 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800221e:	e002      	b.n	8002226 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8002220:	2001      	movs	r0, #1
 8002222:	f000 f911 	bl	8002448 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002226:	4b37      	ldr	r3, [pc, #220]	; (8002304 <W25qxx_ReadPage+0xf4>)
 8002228:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800222c:	2b01      	cmp	r3, #1
 800222e:	d0f7      	beq.n	8002220 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8002230:	4b34      	ldr	r3, [pc, #208]	; (8002304 <W25qxx_ReadPage+0xf4>)
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <W25qxx_ReadPage+0xf4>)
 800223a:	895b      	ldrh	r3, [r3, #10]
 800223c:	461a      	mov	r2, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	4293      	cmp	r3, r2
 8002242:	d802      	bhi.n	800224a <W25qxx_ReadPage+0x3a>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800224a:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <W25qxx_ReadPage+0xf4>)
 800224c:	895b      	ldrh	r3, [r3, #10]
 800224e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	4413      	add	r3, r2
 8002256:	4a2b      	ldr	r2, [pc, #172]	; (8002304 <W25qxx_ReadPage+0xf4>)
 8002258:	8952      	ldrh	r2, [r2, #10]
 800225a:	4293      	cmp	r3, r2
 800225c:	d905      	bls.n	800226a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <W25qxx_ReadPage+0xf4>)
 8002260:	895b      	ldrh	r3, [r3, #10]
 8002262:	461a      	mov	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <W25qxx_ReadPage+0xf4>)
 800226c:	895b      	ldrh	r3, [r3, #10]
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	fb03 f302 	mul.w	r3, r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800227c:	2200      	movs	r2, #0
 800227e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002282:	4821      	ldr	r0, [pc, #132]	; (8002308 <W25qxx_ReadPage+0xf8>)
 8002284:	f000 fbae 	bl	80029e4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002288:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <W25qxx_ReadPage+0xf4>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d909      	bls.n	80022a4 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 8002290:	200c      	movs	r0, #12
 8002292:	f7ff fd59 	bl	8001d48 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	0e1b      	lsrs	r3, r3, #24
 800229a:	b2db      	uxtb	r3, r3
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fd53 	bl	8001d48 <W25qxx_Spi>
 80022a2:	e002      	b.n	80022aa <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80022a4:	200b      	movs	r0, #11
 80022a6:	f7ff fd4f 	bl	8001d48 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fd49 	bl	8001d48 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fd43 	bl	8001d48 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fd3e 	bl	8001d48 <W25qxx_Spi>
	W25qxx_Spi(0);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff fd3b 	bl	8001d48 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	2364      	movs	r3, #100	; 0x64
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	480c      	ldr	r0, [pc, #48]	; (800230c <W25qxx_ReadPage+0xfc>)
 80022dc:	f003 f864 	bl	80053a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80022e0:	2201      	movs	r2, #1
 80022e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e6:	4808      	ldr	r0, [pc, #32]	; (8002308 <W25qxx_ReadPage+0xf8>)
 80022e8:	f000 fb7c 	bl	80029e4 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80022ec:	2001      	movs	r0, #1
 80022ee:	f000 f8ab 	bl	8002448 <HAL_Delay>
	w25qxx.Lock = 0;
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <W25qxx_ReadPage+0xf4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000a10 	.word	0x20000a10
 8002308:	40020000 	.word	0x40020000
 800230c:	20000978 	.word	0x20000978

08002310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002348 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002314:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002316:	e003      	b.n	8002320 <LoopCopyDataInit>

08002318 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800231a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800231c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800231e:	3104      	adds	r1, #4

08002320 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002320:	480b      	ldr	r0, [pc, #44]	; (8002350 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002324:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002326:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002328:	d3f6      	bcc.n	8002318 <CopyDataInit>
  ldr  r2, =_sbss
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800232c:	e002      	b.n	8002334 <LoopFillZerobss>

0800232e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800232e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002330:	f842 3b04 	str.w	r3, [r2], #4

08002334 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002336:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002338:	d3f9      	bcc.n	800232e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800233a:	f7ff fc4d 	bl	8001bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233e:	f007 fd7b 	bl	8009e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002342:	f7fe fc15 	bl	8000b70 <main>
  bx  lr    
 8002346:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002348:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800234c:	0800aea4 	.word	0x0800aea4
  ldr  r0, =_sdata
 8002350:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002354:	200003b0 	.word	0x200003b0
  ldr  r2, =_sbss
 8002358:	200003b0 	.word	0x200003b0
  ldr  r3, = _ebss
 800235c:	20001380 	.word	0x20001380

08002360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC_IRQHandler>
	...

08002364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002368:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <HAL_Init+0x40>)
 800236e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002372:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_Init+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <HAL_Init+0x40>)
 800237a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800237e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <HAL_Init+0x40>)
 8002386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238c:	2003      	movs	r0, #3
 800238e:	f000 f94d 	bl	800262c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002392:	2000      	movs	r0, #0
 8002394:	f000 f808 	bl	80023a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002398:	f7ff fb68 	bl	8001a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00

080023a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_InitTick+0x54>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_InitTick+0x58>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023be:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f965 	bl	8002696 <HAL_SYSTICK_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00e      	b.n	80023f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b0f      	cmp	r3, #15
 80023da:	d80a      	bhi.n	80023f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023dc:	2200      	movs	r2, #0
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f000 f92d 	bl	8002642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e8:	4a06      	ldr	r2, [pc, #24]	; (8002404 <HAL_InitTick+0x5c>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e000      	b.n	80023f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200000a0 	.word	0x200000a0
 8002400:	200000a8 	.word	0x200000a8
 8002404:	200000a4 	.word	0x200000a4

08002408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_IncTick+0x20>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_IncTick+0x24>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4413      	add	r3, r2
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_IncTick+0x24>)
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	200000a8 	.word	0x200000a8
 800242c:	20000a38 	.word	0x20000a38

08002430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return uwTick;
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_GetTick+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000a38 	.word	0x20000a38

08002448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff ffee 	bl	8002430 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d005      	beq.n	800246e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_Delay+0x40>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800246e:	bf00      	nop
 8002470:	f7ff ffde 	bl	8002430 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	429a      	cmp	r2, r3
 800247e:	d8f7      	bhi.n	8002470 <HAL_Delay+0x28>
  {
  }
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	200000a8 	.word	0x200000a8

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db0b      	blt.n	800251a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4907      	ldr	r1, [pc, #28]	; (8002528 <__NVIC_EnableIRQ+0x38>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100

0800252c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	; (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	; (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f8:	d301      	bcc.n	80025fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00f      	b.n	800261e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <SysTick_Config+0x40>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002606:	210f      	movs	r1, #15
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	f7ff ff8e 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <SysTick_Config+0x40>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <SysTick_Config+0x40>)
 8002618:	2207      	movs	r2, #7
 800261a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	e000e010 	.word	0xe000e010

0800262c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff29 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002654:	f7ff ff3e 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7ff ff8e 	bl	8002580 <NVIC_EncodePriority>
 8002664:	4602      	mov	r2, r0
 8002666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff5d 	bl	800252c <__NVIC_SetPriority>
}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff31 	bl	80024f0 <__NVIC_EnableIRQ>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffa2 	bl	80025e8 <SysTick_Config>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	e159      	b.n	8002980 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f040 8148 	bne.w	800297a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d00b      	beq.n	800270a <HAL_GPIO_Init+0x5a>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026fe:	2b11      	cmp	r3, #17
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b12      	cmp	r3, #18
 8002708:	d130      	bne.n	800276c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	2203      	movs	r2, #3
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002740:	2201      	movs	r2, #1
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 0201 	and.w	r2, r3, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0xfc>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b12      	cmp	r3, #18
 80027aa:	d123      	bne.n	80027f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	08da      	lsrs	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3208      	adds	r2, #8
 80027b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	69b9      	ldr	r1, [r7, #24]
 80027f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a2 	beq.w	800297a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b56      	ldr	r3, [pc, #344]	; (8002994 <HAL_GPIO_Init+0x2e4>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	4a55      	ldr	r2, [pc, #340]	; (8002994 <HAL_GPIO_Init+0x2e4>)
 8002840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002844:	6453      	str	r3, [r2, #68]	; 0x44
 8002846:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_GPIO_Init+0x2e4>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002852:	4a51      	ldr	r2, [pc, #324]	; (8002998 <HAL_GPIO_Init+0x2e8>)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a48      	ldr	r2, [pc, #288]	; (800299c <HAL_GPIO_Init+0x2ec>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d019      	beq.n	80028b2 <HAL_GPIO_Init+0x202>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a47      	ldr	r2, [pc, #284]	; (80029a0 <HAL_GPIO_Init+0x2f0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_GPIO_Init+0x1fe>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a46      	ldr	r2, [pc, #280]	; (80029a4 <HAL_GPIO_Init+0x2f4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00d      	beq.n	80028aa <HAL_GPIO_Init+0x1fa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a45      	ldr	r2, [pc, #276]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <HAL_GPIO_Init+0x1f6>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a44      	ldr	r2, [pc, #272]	; (80029ac <HAL_GPIO_Init+0x2fc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_GPIO_Init+0x1f2>
 800289e:	2304      	movs	r3, #4
 80028a0:	e008      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028a6:	2303      	movs	r3, #3
 80028a8:	e004      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028b2:	2300      	movs	r3, #0
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f002 0203 	and.w	r2, r2, #3
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	4093      	lsls	r3, r2
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c4:	4934      	ldr	r1, [pc, #208]	; (8002998 <HAL_GPIO_Init+0x2e8>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <HAL_GPIO_Init+0x300>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f6:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <HAL_GPIO_Init+0x300>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028fc:	4b2c      	ldr	r3, [pc, #176]	; (80029b0 <HAL_GPIO_Init+0x300>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002920:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <HAL_GPIO_Init+0x300>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <HAL_GPIO_Init+0x300>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294a:	4a19      	ldr	r2, [pc, #100]	; (80029b0 <HAL_GPIO_Init+0x300>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002950:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <HAL_GPIO_Init+0x300>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002974:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <HAL_GPIO_Init+0x300>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	f67f aea2 	bls.w	80026cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002988:	bf00      	nop
 800298a:	3724      	adds	r7, #36	; 0x24
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40023800 	.word	0x40023800
 8002998:	40013800 	.word	0x40013800
 800299c:	40020000 	.word	0x40020000
 80029a0:	40020400 	.word	0x40020400
 80029a4:	40020800 	.word	0x40020800
 80029a8:	40020c00 	.word	0x40020c00
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40013c00 	.word	0x40013c00

080029b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	887b      	ldrh	r3, [r7, #2]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e001      	b.n	80029d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a00:	e003      	b.n	8002a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	041a      	lsls	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	619a      	str	r2, [r3, #24]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a2e:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe faaa 	bl	8000f90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40013c00 	.word	0x40013c00

08002a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e11f      	b.n	8002c9a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fd fe12 	bl	8000698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	; 0x24
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002aac:	f002 fad0 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 8002ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4a7b      	ldr	r2, [pc, #492]	; (8002ca4 <HAL_I2C_Init+0x25c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d807      	bhi.n	8002acc <HAL_I2C_Init+0x84>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a7a      	ldr	r2, [pc, #488]	; (8002ca8 <HAL_I2C_Init+0x260>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	bf94      	ite	ls
 8002ac4:	2301      	movls	r3, #1
 8002ac6:	2300      	movhi	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e006      	b.n	8002ada <HAL_I2C_Init+0x92>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4a77      	ldr	r2, [pc, #476]	; (8002cac <HAL_I2C_Init+0x264>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	bf94      	ite	ls
 8002ad4:	2301      	movls	r3, #1
 8002ad6:	2300      	movhi	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0db      	b.n	8002c9a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a72      	ldr	r2, [pc, #456]	; (8002cb0 <HAL_I2C_Init+0x268>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0c9b      	lsrs	r3, r3, #18
 8002aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a64      	ldr	r2, [pc, #400]	; (8002ca4 <HAL_I2C_Init+0x25c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d802      	bhi.n	8002b1c <HAL_I2C_Init+0xd4>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	e009      	b.n	8002b30 <HAL_I2C_Init+0xe8>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	4a63      	ldr	r2, [pc, #396]	; (8002cb4 <HAL_I2C_Init+0x26c>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	099b      	lsrs	r3, r3, #6
 8002b2e:	3301      	adds	r3, #1
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4956      	ldr	r1, [pc, #344]	; (8002ca4 <HAL_I2C_Init+0x25c>)
 8002b4c:	428b      	cmp	r3, r1
 8002b4e:	d80d      	bhi.n	8002b6c <HAL_I2C_Init+0x124>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1e59      	subs	r1, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	bf38      	it	cc
 8002b68:	2304      	movcc	r3, #4
 8002b6a:	e04f      	b.n	8002c0c <HAL_I2C_Init+0x1c4>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d111      	bne.n	8002b98 <HAL_I2C_Init+0x150>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1e58      	subs	r0, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	440b      	add	r3, r1
 8002b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e012      	b.n	8002bbe <HAL_I2C_Init+0x176>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1e58      	subs	r0, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	0099      	lsls	r1, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Init+0x17e>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e022      	b.n	8002c0c <HAL_I2C_Init+0x1c4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10e      	bne.n	8002bec <HAL_I2C_Init+0x1a4>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1e58      	subs	r0, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	440b      	add	r3, r1
 8002bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be0:	3301      	adds	r3, #1
 8002be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bea:	e00f      	b.n	8002c0c <HAL_I2C_Init+0x1c4>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e58      	subs	r0, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	0099      	lsls	r1, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	6809      	ldr	r1, [r1, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6911      	ldr	r1, [r2, #16]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68d2      	ldr	r2, [r2, #12]
 8002c46:	4311      	orrs	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	000186a0 	.word	0x000186a0
 8002ca8:	001e847f 	.word	0x001e847f
 8002cac:	003d08ff 	.word	0x003d08ff
 8002cb0:	431bde83 	.word	0x431bde83
 8002cb4:	10624dd3 	.word	0x10624dd3

08002cb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	817b      	strh	r3, [r7, #10]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff fbb0 	bl	8002430 <HAL_GetTick>
 8002cd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	f040 80e0 	bne.w	8002ea0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2319      	movs	r3, #25
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4970      	ldr	r1, [pc, #448]	; (8002eac <HAL_I2C_Master_Transmit+0x1f4>)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fa92 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e0d3      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2C_Master_Transmit+0x50>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0cc      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d007      	beq.n	8002d2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	893a      	ldrh	r2, [r7, #8]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a50      	ldr	r2, [pc, #320]	; (8002eb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f9ca 	bl	8003110 <I2C_MasterRequestWrite>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e08d      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d9c:	e066      	b.n	8002e6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	6a39      	ldr	r1, [r7, #32]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fb0c 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d107      	bne.n	8002dc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e06b      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d11b      	bne.n	8002e40 <HAL_I2C_Master_Transmit+0x188>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d017      	beq.n	8002e40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	781a      	ldrb	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	6a39      	ldr	r1, [r7, #32]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fafc 	bl	8003442 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d107      	bne.n	8002e68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e01a      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d194      	bne.n	8002d9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e000      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	00100002 	.word	0x00100002
 8002eb0:	ffff0000 	.word	0xffff0000

08002eb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff fab4 	bl	8002430 <HAL_GetTick>
 8002ec8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	f040 8111 	bne.w	80030fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2319      	movs	r3, #25
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	4988      	ldr	r1, [pc, #544]	; (8003108 <HAL_I2C_IsDeviceReady+0x254>)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f994 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e104      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_I2C_IsDeviceReady+0x50>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e0fd      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d007      	beq.n	8002f2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2224      	movs	r2, #36	; 0x24
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a70      	ldr	r2, [pc, #448]	; (800310c <HAL_I2C_IsDeviceReady+0x258>)
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f952 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f84:	d103      	bne.n	8002f8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0b6      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7ff fa45 	bl	8002430 <HAL_GetTick>
 8002fa6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fd6:	e025      	b.n	8003024 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fd8:	f7ff fa2a 	bl	8002430 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d302      	bcc.n	8002fee <HAL_I2C_IsDeviceReady+0x13a>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	22a0      	movs	r2, #160	; 0xa0
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2ba0      	cmp	r3, #160	; 0xa0
 800302e:	d005      	beq.n	800303c <HAL_I2C_IsDeviceReady+0x188>
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_I2C_IsDeviceReady+0x188>
 8003036:	7dbb      	ldrb	r3, [r7, #22]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0cd      	beq.n	8002fd8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d129      	bne.n	80030a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003060:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2319      	movs	r3, #25
 800307e:	2201      	movs	r2, #1
 8003080:	4921      	ldr	r1, [pc, #132]	; (8003108 <HAL_I2C_IsDeviceReady+0x254>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f8c6 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e036      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e02c      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2319      	movs	r3, #25
 80030c6:	2201      	movs	r2, #1
 80030c8:	490f      	ldr	r1, [pc, #60]	; (8003108 <HAL_I2C_IsDeviceReady+0x254>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f8a2 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e012      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	3301      	adds	r3, #1
 80030de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f4ff af32 	bcc.w	8002f4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	00100002 	.word	0x00100002
 800310c:	ffff0000 	.word	0xffff0000

08003110 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	460b      	mov	r3, r1
 800311e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d006      	beq.n	800313a <I2C_MasterRequestWrite+0x2a>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d003      	beq.n	800313a <I2C_MasterRequestWrite+0x2a>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003138:	d108      	bne.n	800314c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e00b      	b.n	8003164 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	2b12      	cmp	r3, #18
 8003152:	d107      	bne.n	8003164 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003162:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f84f 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800318a:	d103      	bne.n	8003194 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e035      	b.n	8003204 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a0:	d108      	bne.n	80031b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031a2:	897b      	ldrh	r3, [r7, #10]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031b0:	611a      	str	r2, [r3, #16]
 80031b2:	e01b      	b.n	80031ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031b4:	897b      	ldrh	r3, [r7, #10]
 80031b6:	11db      	asrs	r3, r3, #7
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f003 0306 	and.w	r3, r3, #6
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f063 030f 	orn	r3, r3, #15
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	490e      	ldr	r1, [pc, #56]	; (800320c <I2C_MasterRequestWrite+0xfc>)
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f875 	bl	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e010      	b.n	8003204 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031e2:	897b      	ldrh	r3, [r7, #10]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4907      	ldr	r1, [pc, #28]	; (8003210 <I2C_MasterRequestWrite+0x100>)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f865 	bl	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	00010008 	.word	0x00010008
 8003210:	00010002 	.word	0x00010002

08003214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003224:	e025      	b.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d021      	beq.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322e:	f7ff f8ff 	bl	8002430 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d302      	bcc.n	8003244 <I2C_WaitOnFlagUntilTimeout+0x30>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d116      	bne.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e023      	b.n	80032ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10d      	bne.n	8003298 <I2C_WaitOnFlagUntilTimeout+0x84>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4013      	ands	r3, r2
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	e00c      	b.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf0c      	ite	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	2300      	movne	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d0b6      	beq.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d0:	e051      	b.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e0:	d123      	bne.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0204 	orr.w	r2, r3, #4
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e046      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d021      	beq.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003332:	f7ff f87d 	bl	8002430 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	429a      	cmp	r2, r3
 8003340:	d302      	bcc.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d116      	bne.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e020      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	0c1b      	lsrs	r3, r3, #16
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10c      	bne.n	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	43da      	mvns	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4013      	ands	r3, r2
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	bf14      	ite	ne
 8003392:	2301      	movne	r3, #1
 8003394:	2300      	moveq	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	e00b      	b.n	80033b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	43da      	mvns	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4013      	ands	r3, r2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d18d      	bne.n	80032d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033cc:	e02d      	b.n	800342a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f878 	bl	80034c4 <I2C_IsAcknowledgeFailed>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e02d      	b.n	800343a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d021      	beq.n	800342a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7ff f823 	bl	8002430 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d116      	bne.n	800342a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e007      	b.n	800343a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b80      	cmp	r3, #128	; 0x80
 8003436:	d1ca      	bne.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800344e:	e02d      	b.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f837 	bl	80034c4 <I2C_IsAcknowledgeFailed>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e02d      	b.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d021      	beq.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003468:	f7fe ffe2 	bl	8002430 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	d302      	bcc.n	800347e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e007      	b.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d1ca      	bne.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034da:	d11b      	bne.n	8003514 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0204 	orr.w	r2, r3, #4
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003524:	b08f      	sub	sp, #60	; 0x3c
 8003526:	af0a      	add	r7, sp, #40	; 0x28
 8003528:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e10f      	b.n	8003754 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f006 f97a 	bl	8009848 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2203      	movs	r2, #3
 8003558:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f002 ff2b 	bl	80063ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	687e      	ldr	r6, [r7, #4]
 8003580:	466d      	mov	r5, sp
 8003582:	f106 0410 	add.w	r4, r6, #16
 8003586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800358c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003592:	e885 0003 	stmia.w	r5, {r0, r1}
 8003596:	1d33      	adds	r3, r6, #4
 8003598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800359a:	6838      	ldr	r0, [r7, #0]
 800359c:	f002 fe02 	bl	80061a4 <USB_CoreInit>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0d0      	b.n	8003754 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f002 ff19 	bl	80063f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	e04a      	b.n	800365a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	333d      	adds	r3, #61	; 0x3d
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	333c      	adds	r3, #60	; 0x3c
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	b298      	uxth	r0, r3
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3342      	adds	r3, #66	; 0x42
 8003600:	4602      	mov	r2, r0
 8003602:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	333f      	adds	r3, #63	; 0x3f
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3344      	adds	r3, #68	; 0x44
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	3348      	adds	r3, #72	; 0x48
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3350      	adds	r3, #80	; 0x50
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	3301      	adds	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	d3af      	bcc.n	80035c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]
 8003668:	e044      	b.n	80036f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	3301      	adds	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d3b5      	bcc.n	800366a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	687e      	ldr	r6, [r7, #4]
 8003706:	466d      	mov	r5, sp
 8003708:	f106 0410 	add.w	r4, r6, #16
 800370c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003714:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003718:	e885 0003 	stmia.w	r5, {r0, r1}
 800371c:	1d33      	adds	r3, r6, #4
 800371e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003720:	6838      	ldr	r0, [r7, #0]
 8003722:	f002 fe8f 	bl	8006444 <USB_DevInit>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e00d      	b.n	8003754 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f003 fed7 	bl	8007500 <USB_DevDisconnect>

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800375c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_PCD_Start+0x1c>
 8003774:	2302      	movs	r3, #2
 8003776:	e020      	b.n	80037ba <HAL_PCD_Start+0x5e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	2b01      	cmp	r3, #1
 8003786:	d109      	bne.n	800379c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800378c:	2b01      	cmp	r3, #1
 800378e:	d005      	beq.n	800379c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f002 fe03 	bl	80063ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 fe87 	bl	80074be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037c2:	b590      	push	{r4, r7, lr}
 80037c4:	b08d      	sub	sp, #52	; 0x34
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 ff45 	bl	8007668 <USB_GetMode>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f040 839d 	bne.w	8003f20 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f003 fea9 	bl	8007542 <USB_ReadInterrupts>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8393 	beq.w	8003f1e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f003 fea0 	bl	8007542 <USB_ReadInterrupts>
 8003802:	4603      	mov	r3, r0
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b02      	cmp	r3, #2
 800380a:	d107      	bne.n	800381c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f002 0202 	and.w	r2, r2, #2
 800381a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f003 fe8e 	bl	8007542 <USB_ReadInterrupts>
 8003826:	4603      	mov	r3, r0
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b10      	cmp	r3, #16
 800382e:	d161      	bne.n	80038f4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0210 	bic.w	r2, r2, #16
 800383e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 020f 	and.w	r2, r3, #15
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	3304      	adds	r3, #4
 800385e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	0c5b      	lsrs	r3, r3, #17
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	2b02      	cmp	r3, #2
 800386a:	d124      	bne.n	80038b6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d035      	beq.n	80038e4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003886:	b29b      	uxth	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	6a38      	ldr	r0, [r7, #32]
 800388c:	f003 fcf4 	bl	8007278 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800389c:	441a      	add	r2, r3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ae:	441a      	add	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	619a      	str	r2, [r3, #24]
 80038b4:	e016      	b.n	80038e4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	0c5b      	lsrs	r3, r3, #17
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d110      	bne.n	80038e4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038c8:	2208      	movs	r2, #8
 80038ca:	4619      	mov	r1, r3
 80038cc:	6a38      	ldr	r0, [r7, #32]
 80038ce:	f003 fcd3 	bl	8007278 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038de:	441a      	add	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0210 	orr.w	r2, r2, #16
 80038f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fe22 	bl	8007542 <USB_ReadInterrupts>
 80038fe:	4603      	mov	r3, r0
 8003900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003904:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003908:	d16e      	bne.n	80039e8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f003 fe28 	bl	8007568 <USB_ReadDevAllOutEpInterrupt>
 8003918:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800391a:	e062      	b.n	80039e2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d057      	beq.n	80039d6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f003 fe4d 	bl	80075d0 <USB_ReadDevOutEPInterrupt>
 8003936:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	461a      	mov	r2, r3
 8003950:	2301      	movs	r3, #1
 8003952:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fdb0 	bl	80044bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00c      	beq.n	8003980 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	461a      	mov	r2, r3
 8003974:	2308      	movs	r3, #8
 8003976:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 feaa 	bl	80046d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0310 	and.w	r3, r3, #16
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	461a      	mov	r2, r3
 8003998:	2310      	movs	r3, #16
 800399a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b2:	461a      	mov	r2, r3
 80039b4:	2320      	movs	r3, #32
 80039b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	461a      	mov	r2, r3
 80039d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	3301      	adds	r3, #1
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d199      	bne.n	800391c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f003 fda8 	bl	8007542 <USB_ReadInterrupts>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039fc:	f040 80c0 	bne.w	8003b80 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f003 fdc9 	bl	800759c <USB_ReadDevAllInEpInterrupt>
 8003a0a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a10:	e0b2      	b.n	8003b78 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80a7 	beq.w	8003b6c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f003 fdef 	bl	800760c <USB_ReadDevInEPInterrupt>
 8003a2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d057      	beq.n	8003aea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	2201      	movs	r2, #1
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69f9      	ldr	r1, [r7, #28]
 8003a56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d132      	bne.n	8003ade <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3348      	adds	r3, #72	; 0x48
 8003a88:	6819      	ldr	r1, [r3, #0]
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4403      	add	r3, r0
 8003a98:	3344      	adds	r3, #68	; 0x44
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4419      	add	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4403      	add	r3, r0
 8003aac:	3348      	adds	r3, #72	; 0x48
 8003aae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d113      	bne.n	8003ade <HAL_PCD_IRQHandler+0x31c>
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3350      	adds	r3, #80	; 0x50
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d108      	bne.n	8003ade <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2101      	movs	r1, #1
 8003ada:	f003 fdf7 	bl	80076cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f005 ff30 	bl	800994a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	461a      	mov	r2, r3
 8003b02:	2308      	movs	r3, #8
 8003b04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2310      	movs	r3, #16
 8003b20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2340      	movs	r3, #64	; 0x40
 8003b3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	461a      	mov	r2, r3
 8003b56:	2302      	movs	r3, #2
 8003b58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fc1b 	bl	80043a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	3301      	adds	r3, #1
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f47f af49 	bne.w	8003a12 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f003 fcdc 	bl	8007542 <USB_ReadInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b94:	d122      	bne.n	8003bdc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d108      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fe26 	bl	8004810 <HAL_PCDEx_LPM_Callback>
 8003bc4:	e002      	b.n	8003bcc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f005 ff2c 	bl	8009a24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 fcae 	bl	8007542 <USB_ReadInterrupts>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf0:	d112      	bne.n	8003c18 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d102      	bne.n	8003c08 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f005 fee8 	bl	80099d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c16:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f003 fc90 	bl	8007542 <USB_ReadInterrupts>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2c:	f040 80c7 	bne.w	8003dbe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2110      	movs	r1, #16
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f002 fd5e 	bl	800670c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c54:	e056      	b.n	8003d04 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	461a      	mov	r2, r3
 8003c64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7a:	0151      	lsls	r1, r2, #5
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	440a      	add	r2, r1
 8003c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c88:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9a:	0151      	lsls	r1, r2, #5
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	440a      	add	r2, r1
 8003ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ca8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cbc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cce:	0151      	lsls	r1, r2, #5
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	440a      	add	r2, r1
 8003cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cdc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cfc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	3301      	adds	r3, #1
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d3a3      	bcc.n	8003c56 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d3a:	f043 030b 	orr.w	r3, r3, #11
 8003d3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d50:	f043 030b 	orr.w	r3, r3, #11
 8003d54:	6453      	str	r3, [r2, #68]	; 0x44
 8003d56:	e015      	b.n	8003d84 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d6a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d6e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7e:	f043 030b 	orr.w	r3, r3, #11
 8003d82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003da8:	461a      	mov	r2, r3
 8003daa:	f003 fc8f 	bl	80076cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695a      	ldr	r2, [r3, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f003 fbbd 	bl	8007542 <USB_ReadInterrupts>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd2:	d124      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f003 fc53 	bl	8007684 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f002 fcf3 	bl	80067ce <USB_GetDevSpeed>
 8003de8:	4603      	mov	r3, r0
 8003dea:	461a      	mov	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681c      	ldr	r4, [r3, #0]
 8003df4:	f001 f920 	bl	8005038 <HAL_RCC_GetHCLKFreq>
 8003df8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	4620      	mov	r0, r4
 8003e04:	f002 fa30 	bl	8006268 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f005 fdc6 	bl	800999a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f003 fb8d 	bl	8007542 <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d10a      	bne.n	8003e48 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f005 fda3 	bl	800997e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f002 0208 	and.w	r2, r2, #8
 8003e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f003 fb78 	bl	8007542 <USB_ReadInterrupts>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5c:	d10f      	bne.n	8003e7e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f005 fdfb 	bl	8009a64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f003 fb5d 	bl	8007542 <USB_ReadInterrupts>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e92:	d10f      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f005 fdce 	bl	8009a40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f003 fb42 	bl	8007542 <USB_ReadInterrupts>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f005 fddc 	bl	8009a88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f003 fb2c 	bl	8007542 <USB_ReadInterrupts>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d115      	bne.n	8003f20 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f005 fdcc 	bl	8009aa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
 8003f1c:	e000      	b.n	8003f20 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003f1e:	bf00      	nop
    }
  }
}
 8003f20:	3734      	adds	r7, #52	; 0x34
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd90      	pop	{r4, r7, pc}

08003f26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_PCD_SetAddress+0x1a>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e013      	b.n	8003f68 <HAL_PCD_SetAddress+0x42>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	78fa      	ldrb	r2, [r7, #3]
 8003f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f003 fa8a 	bl	8007472 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	70fb      	strb	r3, [r7, #3]
 8003f82:	460b      	mov	r3, r1
 8003f84:	803b      	strh	r3, [r7, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	da0f      	bge.n	8003fb6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	f003 020f 	and.w	r2, r3, #15
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	3338      	adds	r3, #56	; 0x38
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	3304      	adds	r3, #4
 8003fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	705a      	strb	r2, [r3, #1]
 8003fb4:	e00f      	b.n	8003fd6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	f003 020f 	and.w	r2, r3, #15
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	4413      	add	r3, r2
 8003fcc:	3304      	adds	r3, #4
 8003fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fe2:	883a      	ldrh	r2, [r7, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	78ba      	ldrb	r2, [r7, #2]
 8003fec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	785b      	ldrb	r3, [r3, #1]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004000:	78bb      	ldrb	r3, [r7, #2]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d102      	bne.n	800400c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_PCD_EP_Open+0xaa>
 8004016:	2302      	movs	r3, #2
 8004018:	e00e      	b.n	8004038 <HAL_PCD_EP_Open+0xc8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	4618      	mov	r0, r3
 800402a:	f002 fbf5 	bl	8006818 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004036:	7afb      	ldrb	r3, [r7, #11]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800404c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004050:	2b00      	cmp	r3, #0
 8004052:	da0f      	bge.n	8004074 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	f003 020f 	and.w	r2, r3, #15
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	3338      	adds	r3, #56	; 0x38
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	705a      	strb	r2, [r3, #1]
 8004072:	e00f      	b.n	8004094 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 020f 	and.w	r2, r3, #15
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	3304      	adds	r3, #4
 800408c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	b2da      	uxtb	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_PCD_EP_Close+0x6e>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e00e      	b.n	80040cc <HAL_PCD_EP_Close+0x8c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	4618      	mov	r0, r3
 80040be:	f002 fc33 	bl	8006928 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	460b      	mov	r3, r1
 80040e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e4:	7afb      	ldrb	r3, [r7, #11]
 80040e6:	f003 020f 	and.w	r2, r3, #15
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004116:	7afb      	ldrb	r3, [r7, #11]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	b2da      	uxtb	r2, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d102      	bne.n	8004130 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004130:	7afb      	ldrb	r3, [r7, #11]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	6979      	ldr	r1, [r7, #20]
 8004148:	f002 ff0e 	bl	8006f68 <USB_EP0StartXfer>
 800414c:	e008      	b.n	8004160 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	6979      	ldr	r1, [r7, #20]
 800415c:	f002 fcc0 	bl	8006ae0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	460b      	mov	r3, r1
 8004174:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	f003 020f 	and.w	r2, r3, #15
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800418c:	681b      	ldr	r3, [r3, #0]
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b086      	sub	sp, #24
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	460b      	mov	r3, r1
 80041a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041aa:	7afb      	ldrb	r3, [r7, #11]
 80041ac:	f003 020f 	and.w	r2, r3, #15
 80041b0:	4613      	mov	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	3338      	adds	r3, #56	; 0x38
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	3304      	adds	r3, #4
 80041c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2201      	movs	r2, #1
 80041d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041da:	7afb      	ldrb	r3, [r7, #11]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d102      	bne.n	80041f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041f4:	7afb      	ldrb	r3, [r7, #11]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	6979      	ldr	r1, [r7, #20]
 800420c:	f002 feac 	bl	8006f68 <USB_EP0StartXfer>
 8004210:	e008      	b.n	8004224 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	6979      	ldr	r1, [r7, #20]
 8004220:	f002 fc5e 	bl	8006ae0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	460b      	mov	r3, r1
 8004238:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	f003 020f 	and.w	r2, r3, #15
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d901      	bls.n	800424c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e050      	b.n	80042ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800424c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004250:	2b00      	cmp	r3, #0
 8004252:	da0f      	bge.n	8004274 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	f003 020f 	and.w	r2, r3, #15
 800425a:	4613      	mov	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	3338      	adds	r3, #56	; 0x38
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	3304      	adds	r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	705a      	strb	r2, [r3, #1]
 8004272:	e00d      	b.n	8004290 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	4613      	mov	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	4413      	add	r3, r2
 8004286:	3304      	adds	r3, #4
 8004288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	b2da      	uxtb	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_PCD_EP_SetStall+0x82>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e01e      	b.n	80042ee <HAL_PCD_EP_SetStall+0xc0>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68f9      	ldr	r1, [r7, #12]
 80042be:	4618      	mov	r0, r3
 80042c0:	f003 f803 	bl	80072ca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	b2d9      	uxtb	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042de:	461a      	mov	r2, r3
 80042e0:	f003 f9f4 	bl	80076cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	460b      	mov	r3, r1
 8004300:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	f003 020f 	and.w	r2, r3, #15
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	d901      	bls.n	8004314 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e042      	b.n	800439a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004318:	2b00      	cmp	r3, #0
 800431a:	da0f      	bge.n	800433c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	3338      	adds	r3, #56	; 0x38
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	705a      	strb	r2, [r3, #1]
 800433a:	e00f      	b.n	800435c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	3304      	adds	r3, #4
 8004354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_PCD_EP_ClrStall+0x86>
 8004378:	2302      	movs	r3, #2
 800437a:	e00e      	b.n	800439a <HAL_PCD_EP_ClrStall+0xa4>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68f9      	ldr	r1, [r7, #12]
 800438a:	4618      	mov	r0, r3
 800438c:	f003 f80b 	bl	80073a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b08a      	sub	sp, #40	; 0x28
 80043a6:	af02      	add	r7, sp, #8
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	3338      	adds	r3, #56	; 0x38
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	3304      	adds	r3, #4
 80043c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d901      	bls.n	80043da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e06c      	b.n	80044b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d902      	bls.n	80043f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3303      	adds	r3, #3
 80043fa:	089b      	lsrs	r3, r3, #2
 80043fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043fe:	e02b      	b.n	8004458 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	695a      	ldr	r2, [r3, #20]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	429a      	cmp	r2, r3
 8004414:	d902      	bls.n	800441c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	3303      	adds	r3, #3
 8004420:	089b      	lsrs	r3, r3, #2
 8004422:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68d9      	ldr	r1, [r3, #12]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004434:	b2db      	uxtb	r3, r3
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	4603      	mov	r3, r0
 800443a:	6978      	ldr	r0, [r7, #20]
 800443c:	f002 fee7 	bl	800720e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	441a      	add	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	441a      	add	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	b29b      	uxth	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	429a      	cmp	r2, r3
 800446c:	d809      	bhi.n	8004482 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004476:	429a      	cmp	r2, r3
 8004478:	d203      	bcs.n	8004482 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1be      	bne.n	8004400 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	429a      	cmp	r2, r3
 800448c:	d811      	bhi.n	80044b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	2201      	movs	r2, #1
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	6939      	ldr	r1, [r7, #16]
 80044aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ae:	4013      	ands	r3, r2
 80044b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	333c      	adds	r3, #60	; 0x3c
 80044d4:	3304      	adds	r3, #4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	f040 80a0 	bne.w	8004634 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d015      	beq.n	800452a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a72      	ldr	r2, [pc, #456]	; (80046cc <PCD_EP_OutXfrComplete_int+0x210>)
 8004502:	4293      	cmp	r3, r2
 8004504:	f240 80dd 	bls.w	80046c2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80d7 	beq.w	80046c2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004520:	461a      	mov	r2, r3
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	6093      	str	r3, [r2, #8]
 8004528:	e0cb      	b.n	80046c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b00      	cmp	r3, #0
 8004532:	d009      	beq.n	8004548 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004540:	461a      	mov	r2, r3
 8004542:	2320      	movs	r3, #32
 8004544:	6093      	str	r3, [r2, #8]
 8004546:	e0bc      	b.n	80046c2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800454e:	2b00      	cmp	r3, #0
 8004550:	f040 80b7 	bne.w	80046c2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a5d      	ldr	r2, [pc, #372]	; (80046cc <PCD_EP_OutXfrComplete_int+0x210>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d90f      	bls.n	800457c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004572:	461a      	mov	r2, r3
 8004574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004578:	6093      	str	r3, [r2, #8]
 800457a:	e0a2      	b.n	80046c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800458e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	0159      	lsls	r1, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	440b      	add	r3, r1
 8004598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80045a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4403      	add	r3, r0
 80045b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80045b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045ca:	6819      	ldr	r1, [r3, #0]
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4403      	add	r3, r0
 80045da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4419      	add	r1, r3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	4613      	mov	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4403      	add	r3, r0
 80045f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d114      	bne.n	8004626 <PCD_EP_OutXfrComplete_int+0x16a>
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d108      	bne.n	8004626 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800461e:	461a      	mov	r2, r3
 8004620:	2101      	movs	r1, #1
 8004622:	f003 f853 	bl	80076cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f005 f971 	bl	8009914 <HAL_PCD_DataOutStageCallback>
 8004632:	e046      	b.n	80046c2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <PCD_EP_OutXfrComplete_int+0x214>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d124      	bne.n	8004686 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004652:	461a      	mov	r2, r3
 8004654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004658:	6093      	str	r3, [r2, #8]
 800465a:	e032      	b.n	80046c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004672:	461a      	mov	r2, r3
 8004674:	2320      	movs	r3, #32
 8004676:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f005 f948 	bl	8009914 <HAL_PCD_DataOutStageCallback>
 8004684:	e01d      	b.n	80046c2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d114      	bne.n	80046b6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d108      	bne.n	80046b6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046ae:	461a      	mov	r2, r3
 80046b0:	2100      	movs	r1, #0
 80046b2:	f003 f80b 	bl	80076cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	4619      	mov	r1, r3
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f005 f929 	bl	8009914 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	4f54300a 	.word	0x4f54300a
 80046d0:	4f54310a 	.word	0x4f54310a

080046d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	333c      	adds	r3, #60	; 0x3c
 80046ec:	3304      	adds	r3, #4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a15      	ldr	r2, [pc, #84]	; (800475c <PCD_EP_OutSetupPacket_int+0x88>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d90e      	bls.n	8004728 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004720:	461a      	mov	r2, r3
 8004722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004726:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f005 f8e1 	bl	80098f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a0a      	ldr	r2, [pc, #40]	; (800475c <PCD_EP_OutSetupPacket_int+0x88>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d90c      	bls.n	8004750 <PCD_EP_OutSetupPacket_int+0x7c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d108      	bne.n	8004750 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004748:	461a      	mov	r2, r3
 800474a:	2101      	movs	r1, #1
 800474c:	f002 ffbe 	bl	80076cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	4f54300a 	.word	0x4f54300a

08004760 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
 800476c:	4613      	mov	r3, r2
 800476e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d107      	bne.n	800478e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800477e:	883b      	ldrh	r3, [r7, #0]
 8004780:	0419      	lsls	r1, r3, #16
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	430a      	orrs	r2, r1
 800478a:	629a      	str	r2, [r3, #40]	; 0x28
 800478c:	e028      	b.n	80047e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	4413      	add	r3, r2
 800479a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800479c:	2300      	movs	r3, #0
 800479e:	73fb      	strb	r3, [r7, #15]
 80047a0:	e00d      	b.n	80047be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	3340      	adds	r3, #64	; 0x40
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4413      	add	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	3301      	adds	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
 80047be:	7bfa      	ldrb	r2, [r7, #15]
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d3ec      	bcc.n	80047a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047c8:	883b      	ldrh	r3, [r7, #0]
 80047ca:	0418      	lsls	r0, r3, #16
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6819      	ldr	r1, [r3, #0]
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	4302      	orrs	r2, r0
 80047d8:	3340      	adds	r3, #64	; 0x40
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	460b      	mov	r3, r1
 80047f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	887a      	ldrh	r2, [r7, #2]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e25b      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d075      	beq.n	8004932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004846:	4ba3      	ldr	r3, [pc, #652]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
 800484e:	2b04      	cmp	r3, #4
 8004850:	d00c      	beq.n	800486c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004852:	4ba0      	ldr	r3, [pc, #640]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800485a:	2b08      	cmp	r3, #8
 800485c:	d112      	bne.n	8004884 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800485e:	4b9d      	ldr	r3, [pc, #628]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800486a:	d10b      	bne.n	8004884 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800486c:	4b99      	ldr	r3, [pc, #612]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d05b      	beq.n	8004930 <HAL_RCC_OscConfig+0x108>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d157      	bne.n	8004930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e236      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488c:	d106      	bne.n	800489c <HAL_RCC_OscConfig+0x74>
 800488e:	4b91      	ldr	r3, [pc, #580]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a90      	ldr	r2, [pc, #576]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e01d      	b.n	80048d8 <HAL_RCC_OscConfig+0xb0>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x98>
 80048a6:	4b8b      	ldr	r3, [pc, #556]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a8a      	ldr	r2, [pc, #552]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4b88      	ldr	r3, [pc, #544]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a87      	ldr	r2, [pc, #540]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e00b      	b.n	80048d8 <HAL_RCC_OscConfig+0xb0>
 80048c0:	4b84      	ldr	r3, [pc, #528]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a83      	ldr	r2, [pc, #524]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80048c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	4b81      	ldr	r3, [pc, #516]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a80      	ldr	r2, [pc, #512]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80048d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d013      	beq.n	8004908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fd fda6 	bl	8002430 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e8:	f7fd fda2 	bl	8002430 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	; 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e1fb      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	4b76      	ldr	r3, [pc, #472]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0xc0>
 8004906:	e014      	b.n	8004932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7fd fd92 	bl	8002430 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004910:	f7fd fd8e 	bl	8002430 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b64      	cmp	r3, #100	; 0x64
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e1e7      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004922:	4b6c      	ldr	r3, [pc, #432]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0xe8>
 800492e:	e000      	b.n	8004932 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d063      	beq.n	8004a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800493e:	4b65      	ldr	r3, [pc, #404]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494a:	4b62      	ldr	r3, [pc, #392]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004952:	2b08      	cmp	r3, #8
 8004954:	d11c      	bne.n	8004990 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004956:	4b5f      	ldr	r3, [pc, #380]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d116      	bne.n	8004990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004962:	4b5c      	ldr	r3, [pc, #368]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <HAL_RCC_OscConfig+0x152>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d001      	beq.n	800497a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e1bb      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497a:	4b56      	ldr	r3, [pc, #344]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4952      	ldr	r1, [pc, #328]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498e:	e03a      	b.n	8004a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d020      	beq.n	80049da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004998:	4b4f      	ldr	r3, [pc, #316]	; (8004ad8 <HAL_RCC_OscConfig+0x2b0>)
 800499a:	2201      	movs	r2, #1
 800499c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499e:	f7fd fd47 	bl	8002430 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049a6:	f7fd fd43 	bl	8002430 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e19c      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b8:	4b46      	ldr	r3, [pc, #280]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c4:	4b43      	ldr	r3, [pc, #268]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	4940      	ldr	r1, [pc, #256]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]
 80049d8:	e015      	b.n	8004a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049da:	4b3f      	ldr	r3, [pc, #252]	; (8004ad8 <HAL_RCC_OscConfig+0x2b0>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fd fd26 	bl	8002430 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e8:	f7fd fd22 	bl	8002430 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e17b      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fa:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d030      	beq.n	8004a74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d016      	beq.n	8004a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a1a:	4b30      	ldr	r3, [pc, #192]	; (8004adc <HAL_RCC_OscConfig+0x2b4>)
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fd fd06 	bl	8002430 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a28:	f7fd fd02 	bl	8002430 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e15b      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x200>
 8004a46:	e015      	b.n	8004a74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <HAL_RCC_OscConfig+0x2b4>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4e:	f7fd fcef 	bl	8002430 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a56:	f7fd fceb 	bl	8002430 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e144      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a68:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f0      	bne.n	8004a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80a0 	beq.w	8004bc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a82:	2300      	movs	r3, #0
 8004a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a86:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a0e      	ldr	r2, [pc, #56]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <HAL_RCC_OscConfig+0x2ac>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_RCC_OscConfig+0x2b8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d121      	bne.n	8004b02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004abe:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <HAL_RCC_OscConfig+0x2b8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <HAL_RCC_OscConfig+0x2b8>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aca:	f7fd fcb1 	bl	8002430 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	e011      	b.n	8004af6 <HAL_RCC_OscConfig+0x2ce>
 8004ad2:	bf00      	nop
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	42470000 	.word	0x42470000
 8004adc:	42470e80 	.word	0x42470e80
 8004ae0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae4:	f7fd fca4 	bl	8002430 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e0fd      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af6:	4b81      	ldr	r3, [pc, #516]	; (8004cfc <HAL_RCC_OscConfig+0x4d4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d106      	bne.n	8004b18 <HAL_RCC_OscConfig+0x2f0>
 8004b0a:	4b7d      	ldr	r3, [pc, #500]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	4a7c      	ldr	r2, [pc, #496]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	6713      	str	r3, [r2, #112]	; 0x70
 8004b16:	e01c      	b.n	8004b52 <HAL_RCC_OscConfig+0x32a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b05      	cmp	r3, #5
 8004b1e:	d10c      	bne.n	8004b3a <HAL_RCC_OscConfig+0x312>
 8004b20:	4b77      	ldr	r3, [pc, #476]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	4a76      	ldr	r2, [pc, #472]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004b26:	f043 0304 	orr.w	r3, r3, #4
 8004b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2c:	4b74      	ldr	r3, [pc, #464]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	4a73      	ldr	r2, [pc, #460]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6713      	str	r3, [r2, #112]	; 0x70
 8004b38:	e00b      	b.n	8004b52 <HAL_RCC_OscConfig+0x32a>
 8004b3a:	4b71      	ldr	r3, [pc, #452]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	4a70      	ldr	r2, [pc, #448]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	6713      	str	r3, [r2, #112]	; 0x70
 8004b46:	4b6e      	ldr	r3, [pc, #440]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	4a6d      	ldr	r2, [pc, #436]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004b4c:	f023 0304 	bic.w	r3, r3, #4
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d015      	beq.n	8004b86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5a:	f7fd fc69 	bl	8002430 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b60:	e00a      	b.n	8004b78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b62:	f7fd fc65 	bl	8002430 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e0bc      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b78:	4b61      	ldr	r3, [pc, #388]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0ee      	beq.n	8004b62 <HAL_RCC_OscConfig+0x33a>
 8004b84:	e014      	b.n	8004bb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b86:	f7fd fc53 	bl	8002430 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b8c:	e00a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b8e:	f7fd fc4f 	bl	8002430 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e0a6      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba4:	4b56      	ldr	r3, [pc, #344]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1ee      	bne.n	8004b8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d105      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb6:	4b52      	ldr	r3, [pc, #328]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	4a51      	ldr	r2, [pc, #324]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 8092 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bcc:	4b4c      	ldr	r3, [pc, #304]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 030c 	and.w	r3, r3, #12
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d05c      	beq.n	8004c92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d141      	bne.n	8004c64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be0:	4b48      	ldr	r3, [pc, #288]	; (8004d04 <HAL_RCC_OscConfig+0x4dc>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be6:	f7fd fc23 	bl	8002430 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bee:	f7fd fc1f 	bl	8002430 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e078      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c00:	4b3f      	ldr	r3, [pc, #252]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f0      	bne.n	8004bee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	019b      	lsls	r3, r3, #6
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	3b01      	subs	r3, #1
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	061b      	lsls	r3, r3, #24
 8004c30:	4933      	ldr	r1, [pc, #204]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c36:	4b33      	ldr	r3, [pc, #204]	; (8004d04 <HAL_RCC_OscConfig+0x4dc>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fd fbf8 	bl	8002430 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fd fbf4 	bl	8002430 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e04d      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c56:	4b2a      	ldr	r3, [pc, #168]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x41c>
 8004c62:	e045      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c64:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <HAL_RCC_OscConfig+0x4dc>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fd fbe1 	bl	8002430 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c72:	f7fd fbdd 	bl	8002430 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e036      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c84:	4b1e      	ldr	r3, [pc, #120]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f0      	bne.n	8004c72 <HAL_RCC_OscConfig+0x44a>
 8004c90:	e02e      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e029      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c9e:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <HAL_RCC_OscConfig+0x4d8>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d11c      	bne.n	8004cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d115      	bne.n	8004cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10d      	bne.n	8004cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d106      	bne.n	8004cec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	40023800 	.word	0x40023800
 8004d04:	42470060 	.word	0x42470060

08004d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0cc      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d1c:	4b68      	ldr	r3, [pc, #416]	; (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d90c      	bls.n	8004d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2a:	4b65      	ldr	r3, [pc, #404]	; (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b63      	ldr	r3, [pc, #396]	; (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0b8      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d020      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d5c:	4b59      	ldr	r3, [pc, #356]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4a58      	ldr	r2, [pc, #352]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d74:	4b53      	ldr	r3, [pc, #332]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4a52      	ldr	r2, [pc, #328]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d80:	4b50      	ldr	r3, [pc, #320]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	494d      	ldr	r1, [pc, #308]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d044      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d107      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da6:	4b47      	ldr	r3, [pc, #284]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d119      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e07f      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d003      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc6:	4b3f      	ldr	r3, [pc, #252]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e06f      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd6:	4b3b      	ldr	r3, [pc, #236]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e067      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004de6:	4b37      	ldr	r3, [pc, #220]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f023 0203 	bic.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4934      	ldr	r1, [pc, #208]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004df8:	f7fd fb1a 	bl	8002430 <HAL_GetTick>
 8004dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e00:	f7fd fb16 	bl	8002430 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e04f      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e16:	4b2b      	ldr	r3, [pc, #172]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 020c 	and.w	r2, r3, #12
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d1eb      	bne.n	8004e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e28:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d20c      	bcs.n	8004e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e36:	4b22      	ldr	r3, [pc, #136]	; (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3e:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e032      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4916      	ldr	r1, [pc, #88]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e7a:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	490e      	ldr	r1, [pc, #56]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e8e:	f000 f821 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8004e92:	4601      	mov	r1, r0
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ea0:	5cd3      	ldrb	r3, [r2, r3]
 8004ea2:	fa21 f303 	lsr.w	r3, r1, r3
 8004ea6:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <HAL_RCC_ClockConfig+0x1c4>)
 8004ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fd fa7a 	bl	80023a8 <HAL_InitTick>

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023c00 	.word	0x40023c00
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	0800ae7c 	.word	0x0800ae7c
 8004ecc:	200000a0 	.word	0x200000a0
 8004ed0:	200000a4 	.word	0x200000a4

08004ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	607b      	str	r3, [r7, #4]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eea:	4b50      	ldr	r3, [pc, #320]	; (800502c <HAL_RCC_GetSysClockFreq+0x158>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 030c 	and.w	r3, r3, #12
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d007      	beq.n	8004f06 <HAL_RCC_GetSysClockFreq+0x32>
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d008      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0x38>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f040 808d 	bne.w	800501a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f00:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004f02:	60bb      	str	r3, [r7, #8]
       break;
 8004f04:	e08c      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f06:	4b4b      	ldr	r3, [pc, #300]	; (8005034 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f08:	60bb      	str	r3, [r7, #8]
      break;
 8004f0a:	e089      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f0c:	4b47      	ldr	r3, [pc, #284]	; (800502c <HAL_RCC_GetSysClockFreq+0x158>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f16:	4b45      	ldr	r3, [pc, #276]	; (800502c <HAL_RCC_GetSysClockFreq+0x158>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d023      	beq.n	8004f6a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f22:	4b42      	ldr	r3, [pc, #264]	; (800502c <HAL_RCC_GetSysClockFreq+0x158>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	f04f 0400 	mov.w	r4, #0
 8004f2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	ea03 0501 	and.w	r5, r3, r1
 8004f38:	ea04 0602 	and.w	r6, r4, r2
 8004f3c:	4a3d      	ldr	r2, [pc, #244]	; (8005034 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f3e:	fb02 f106 	mul.w	r1, r2, r6
 8004f42:	2200      	movs	r2, #0
 8004f44:	fb02 f205 	mul.w	r2, r2, r5
 8004f48:	440a      	add	r2, r1
 8004f4a:	493a      	ldr	r1, [pc, #232]	; (8005034 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f4c:	fba5 0101 	umull	r0, r1, r5, r1
 8004f50:	1853      	adds	r3, r2, r1
 8004f52:	4619      	mov	r1, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f04f 0400 	mov.w	r4, #0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	f7fb f943 	bl	80001e8 <__aeabi_uldivmod>
 8004f62:	4603      	mov	r3, r0
 8004f64:	460c      	mov	r4, r1
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e049      	b.n	8004ffe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f6a:	4b30      	ldr	r3, [pc, #192]	; (800502c <HAL_RCC_GetSysClockFreq+0x158>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	099b      	lsrs	r3, r3, #6
 8004f70:	f04f 0400 	mov.w	r4, #0
 8004f74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	ea03 0501 	and.w	r5, r3, r1
 8004f80:	ea04 0602 	and.w	r6, r4, r2
 8004f84:	4629      	mov	r1, r5
 8004f86:	4632      	mov	r2, r6
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	f04f 0400 	mov.w	r4, #0
 8004f90:	0154      	lsls	r4, r2, #5
 8004f92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f96:	014b      	lsls	r3, r1, #5
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	1b49      	subs	r1, r1, r5
 8004f9e:	eb62 0206 	sbc.w	r2, r2, r6
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	f04f 0400 	mov.w	r4, #0
 8004faa:	0194      	lsls	r4, r2, #6
 8004fac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fb0:	018b      	lsls	r3, r1, #6
 8004fb2:	1a5b      	subs	r3, r3, r1
 8004fb4:	eb64 0402 	sbc.w	r4, r4, r2
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	00e2      	lsls	r2, r4, #3
 8004fc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fc6:	00d9      	lsls	r1, r3, #3
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4614      	mov	r4, r2
 8004fcc:	195b      	adds	r3, r3, r5
 8004fce:	eb44 0406 	adc.w	r4, r4, r6
 8004fd2:	f04f 0100 	mov.w	r1, #0
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	02a2      	lsls	r2, r4, #10
 8004fdc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004fe0:	0299      	lsls	r1, r3, #10
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	4621      	mov	r1, r4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f04f 0400 	mov.w	r4, #0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4623      	mov	r3, r4
 8004ff4:	f7fb f8f8 	bl	80001e8 <__aeabi_uldivmod>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	; (800502c <HAL_RCC_GetSysClockFreq+0x158>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	0c1b      	lsrs	r3, r3, #16
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	3301      	adds	r3, #1
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	60bb      	str	r3, [r7, #8]
      break;
 8005018:	e002      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_RCC_GetSysClockFreq+0x15c>)
 800501c:	60bb      	str	r3, [r7, #8]
      break;
 800501e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005020:	68bb      	ldr	r3, [r7, #8]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	00f42400 	.word	0x00f42400
 8005034:	017d7840 	.word	0x017d7840

08005038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800503c:	4b03      	ldr	r3, [pc, #12]	; (800504c <HAL_RCC_GetHCLKFreq+0x14>)
 800503e:	681b      	ldr	r3, [r3, #0]
}
 8005040:	4618      	mov	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	200000a0 	.word	0x200000a0

08005050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005054:	f7ff fff0 	bl	8005038 <HAL_RCC_GetHCLKFreq>
 8005058:	4601      	mov	r1, r0
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	0a9b      	lsrs	r3, r3, #10
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	4a03      	ldr	r2, [pc, #12]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005066:	5cd3      	ldrb	r3, [r2, r3]
 8005068:	fa21 f303 	lsr.w	r3, r1, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40023800 	.word	0x40023800
 8005074:	0800ae8c 	.word	0x0800ae8c

08005078 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e056      	b.n	8005138 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fc f895 	bl	80011d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	ea42 0103 	orr.w	r1, r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	0c1b      	lsrs	r3, r3, #16
 8005108:	f003 0104 	and.w	r1, r3, #4
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69da      	ldr	r2, [r3, #28]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005126:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_SPI_Transmit+0x22>
 800515e:	2302      	movs	r3, #2
 8005160:	e11e      	b.n	80053a0 <HAL_SPI_Transmit+0x260>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800516a:	f7fd f961 	bl	8002430 <HAL_GetTick>
 800516e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d002      	beq.n	8005186 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005180:	2302      	movs	r3, #2
 8005182:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005184:	e103      	b.n	800538e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <HAL_SPI_Transmit+0x52>
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005196:	e0fa      	b.n	800538e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2203      	movs	r2, #3
 800519c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	88fa      	ldrh	r2, [r7, #6]
 80051b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	88fa      	ldrh	r2, [r7, #6]
 80051b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051de:	d107      	bne.n	80051f0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fa:	2b40      	cmp	r3, #64	; 0x40
 80051fc:	d007      	beq.n	800520e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800520c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005216:	d14b      	bne.n	80052b0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <HAL_SPI_Transmit+0xe6>
 8005220:	8afb      	ldrh	r3, [r7, #22]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d13e      	bne.n	80052a4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	1c9a      	adds	r2, r3, #2
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800524a:	e02b      	b.n	80052a4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d112      	bne.n	8005280 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	1c9a      	adds	r2, r3, #2
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	86da      	strh	r2, [r3, #54]	; 0x36
 800527e:	e011      	b.n	80052a4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005280:	f7fd f8d6 	bl	8002430 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d803      	bhi.n	8005298 <HAL_SPI_Transmit+0x158>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d102      	bne.n	800529e <HAL_SPI_Transmit+0x15e>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d102      	bne.n	80052a4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052a2:	e074      	b.n	800538e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ce      	bne.n	800524c <HAL_SPI_Transmit+0x10c>
 80052ae:	e04c      	b.n	800534a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_SPI_Transmit+0x17e>
 80052b8:	8afb      	ldrh	r3, [r7, #22]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d140      	bne.n	8005340 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	7812      	ldrb	r2, [r2, #0]
 80052ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052e4:	e02c      	b.n	8005340 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d113      	bne.n	800531c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	330c      	adds	r3, #12
 80052fe:	7812      	ldrb	r2, [r2, #0]
 8005300:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	86da      	strh	r2, [r3, #54]	; 0x36
 800531a:	e011      	b.n	8005340 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800531c:	f7fd f888 	bl	8002430 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d803      	bhi.n	8005334 <HAL_SPI_Transmit+0x1f4>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d102      	bne.n	800533a <HAL_SPI_Transmit+0x1fa>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800533e:	e026      	b.n	800538e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1cd      	bne.n	80052e6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fba4 	bl	8005a9c <SPI_EndRxTxTransaction>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005368:	2300      	movs	r3, #0
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e000      	b.n	800538e <HAL_SPI_Transmit+0x24e>
  }

error:
 800538c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800539e:	7ffb      	ldrb	r3, [r7, #31]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053c4:	d112      	bne.n	80053ec <HAL_SPI_Receive+0x44>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10e      	bne.n	80053ec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2204      	movs	r2, #4
 80053d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f8e9 	bl	80055ba <HAL_SPI_TransmitReceive>
 80053e8:	4603      	mov	r3, r0
 80053ea:	e0e2      	b.n	80055b2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_SPI_Receive+0x52>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e0db      	b.n	80055b2 <HAL_SPI_Receive+0x20a>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005402:	f7fd f815 	bl	8002430 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b01      	cmp	r3, #1
 8005412:	d002      	beq.n	800541a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005414:	2302      	movs	r3, #2
 8005416:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005418:	e0c2      	b.n	80055a0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_SPI_Receive+0x7e>
 8005420:	88fb      	ldrh	r3, [r7, #6]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	75fb      	strb	r3, [r7, #23]
    goto error;
 800542a:	e0b9      	b.n	80055a0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2204      	movs	r2, #4
 8005430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	88fa      	ldrh	r2, [r7, #6]
 8005444:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	88fa      	ldrh	r2, [r7, #6]
 800544a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005472:	d107      	bne.n	8005484 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005482:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b40      	cmp	r3, #64	; 0x40
 8005490:	d007      	beq.n	80054a2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d162      	bne.n	8005570 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80054aa:	e02e      	b.n	800550a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d115      	bne.n	80054e6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f103 020c 	add.w	r2, r3, #12
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054e4:	e011      	b.n	800550a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e6:	f7fc ffa3 	bl	8002430 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d803      	bhi.n	80054fe <HAL_SPI_Receive+0x156>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d102      	bne.n	8005504 <HAL_SPI_Receive+0x15c>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d102      	bne.n	800550a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005508:	e04a      	b.n	80055a0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1cb      	bne.n	80054ac <HAL_SPI_Receive+0x104>
 8005514:	e031      	b.n	800557a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b01      	cmp	r3, #1
 8005522:	d113      	bne.n	800554c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	b292      	uxth	r2, r2
 8005530:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	1c9a      	adds	r2, r3, #2
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	87da      	strh	r2, [r3, #62]	; 0x3e
 800554a:	e011      	b.n	8005570 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800554c:	f7fc ff70 	bl	8002430 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d803      	bhi.n	8005564 <HAL_SPI_Receive+0x1bc>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005562:	d102      	bne.n	800556a <HAL_SPI_Receive+0x1c2>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d102      	bne.n	8005570 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800556e:	e017      	b.n	80055a0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1cd      	bne.n	8005516 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 fa27 	bl	80059d2 <SPI_EndRxTransaction>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	75fb      	strb	r3, [r7, #23]
 800559c:	e000      	b.n	80055a0 <HAL_SPI_Receive+0x1f8>
  }

error :
 800559e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b08c      	sub	sp, #48	; 0x30
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055c8:	2301      	movs	r3, #1
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x26>
 80055dc:	2302      	movs	r3, #2
 80055de:	e18a      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x33c>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055e8:	f7fc ff22 	bl	8002430 <HAL_GetTick>
 80055ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055fe:	887b      	ldrh	r3, [r7, #2]
 8005600:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005606:	2b01      	cmp	r3, #1
 8005608:	d00f      	beq.n	800562a <HAL_SPI_TransmitReceive+0x70>
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005610:	d107      	bne.n	8005622 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d103      	bne.n	8005622 <HAL_SPI_TransmitReceive+0x68>
 800561a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800561e:	2b04      	cmp	r3, #4
 8005620:	d003      	beq.n	800562a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005622:	2302      	movs	r3, #2
 8005624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005628:	e15b      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_SPI_TransmitReceive+0x82>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_SPI_TransmitReceive+0x82>
 8005636:	887b      	ldrh	r3, [r7, #2]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005642:	e14e      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b04      	cmp	r3, #4
 800564e:	d003      	beq.n	8005658 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2205      	movs	r2, #5
 8005654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	887a      	ldrh	r2, [r7, #2]
 8005668:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	887a      	ldrh	r2, [r7, #2]
 800566e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	887a      	ldrh	r2, [r7, #2]
 800567a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	d007      	beq.n	80056ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b4:	d178      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_SPI_TransmitReceive+0x10a>
 80056be:	8b7b      	ldrh	r3, [r7, #26]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d166      	bne.n	8005792 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	881a      	ldrh	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	1c9a      	adds	r2, r3, #2
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056e8:	e053      	b.n	8005792 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d11b      	bne.n	8005730 <HAL_SPI_TransmitReceive+0x176>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d016      	beq.n	8005730 <HAL_SPI_TransmitReceive+0x176>
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d113      	bne.n	8005730 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	881a      	ldrh	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	1c9a      	adds	r2, r3, #2
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b01      	cmp	r3, #1
 800573c:	d119      	bne.n	8005772 <HAL_SPI_TransmitReceive+0x1b8>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d014      	beq.n	8005772 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	b292      	uxth	r2, r2
 8005754:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	1c9a      	adds	r2, r3, #2
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800576e:	2301      	movs	r3, #1
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005772:	f7fc fe5d 	bl	8002430 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800577e:	429a      	cmp	r2, r3
 8005780:	d807      	bhi.n	8005792 <HAL_SPI_TransmitReceive+0x1d8>
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d003      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005790:	e0a7      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1a6      	bne.n	80056ea <HAL_SPI_TransmitReceive+0x130>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1a1      	bne.n	80056ea <HAL_SPI_TransmitReceive+0x130>
 80057a6:	e07c      	b.n	80058a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_SPI_TransmitReceive+0x1fc>
 80057b0:	8b7b      	ldrh	r3, [r7, #26]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d16b      	bne.n	800588e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	7812      	ldrb	r2, [r2, #0]
 80057c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057dc:	e057      	b.n	800588e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d11c      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x26c>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d017      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x26c>
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d114      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	7812      	ldrb	r2, [r2, #0]
 8005808:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d119      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x2ae>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d014      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005864:	2301      	movs	r3, #1
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005868:	f7fc fde2 	bl	8002430 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005874:	429a      	cmp	r2, r3
 8005876:	d803      	bhi.n	8005880 <HAL_SPI_TransmitReceive+0x2c6>
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d102      	bne.n	8005886 <HAL_SPI_TransmitReceive+0x2cc>
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800588c:	e029      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1a2      	bne.n	80057de <HAL_SPI_TransmitReceive+0x224>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d19d      	bne.n	80057de <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f8f8 	bl	8005a9c <SPI_EndRxTxTransaction>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058be:	e010      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10b      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	e000      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80058e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3730      	adds	r7, #48	; 0x30
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	4613      	mov	r3, r2
 800590c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800590e:	e04c      	b.n	80059aa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d048      	beq.n	80059aa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005918:	f7fc fd8a 	bl	8002430 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d902      	bls.n	800592e <SPI_WaitFlagStateUntilTimeout+0x30>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d13d      	bne.n	80059aa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800593c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005946:	d111      	bne.n	800596c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005950:	d004      	beq.n	800595c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595a:	d107      	bne.n	800596c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005974:	d10f      	bne.n	8005996 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005994:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e00f      	b.n	80059ca <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4013      	ands	r3, r2
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	bf0c      	ite	eq
 80059ba:	2301      	moveq	r3, #1
 80059bc:	2300      	movne	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1a3      	bne.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af02      	add	r7, sp, #8
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059e6:	d111      	bne.n	8005a0c <SPI_EndRxTransaction+0x3a>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059f0:	d004      	beq.n	80059fc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fa:	d107      	bne.n	8005a0c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a14:	d12a      	bne.n	8005a6c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1e:	d012      	beq.n	8005a46 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2200      	movs	r2, #0
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f7ff ff67 	bl	80058fe <SPI_WaitFlagStateUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d02d      	beq.n	8005a92 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3a:	f043 0220 	orr.w	r2, r3, #32
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e026      	b.n	8005a94 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2101      	movs	r1, #1
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff ff54 	bl	80058fe <SPI_WaitFlagStateUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01a      	beq.n	8005a92 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a60:	f043 0220 	orr.w	r2, r3, #32
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e013      	b.n	8005a94 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2200      	movs	r2, #0
 8005a74:	2101      	movs	r1, #1
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7ff ff41 	bl	80058fe <SPI_WaitFlagStateUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	f043 0220 	orr.w	r2, r3, #32
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e000      	b.n	8005a94 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <SPI_EndRxTxTransaction+0x7c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <SPI_EndRxTxTransaction+0x80>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	0d5b      	lsrs	r3, r3, #21
 8005ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ab8:	fb02 f303 	mul.w	r3, r2, r3
 8005abc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac6:	d112      	bne.n	8005aee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2180      	movs	r1, #128	; 0x80
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff ff13 	bl	80058fe <SPI_WaitFlagStateUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d016      	beq.n	8005b0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	f043 0220 	orr.w	r2, r3, #32
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e00f      	b.n	8005b0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b04:	2b80      	cmp	r3, #128	; 0x80
 8005b06:	d0f2      	beq.n	8005aee <SPI_EndRxTxTransaction+0x52>
 8005b08:	e000      	b.n	8005b0c <SPI_EndRxTxTransaction+0x70>
        break;
 8005b0a:	bf00      	nop
  }

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200000a0 	.word	0x200000a0
 8005b1c:	165e9f81 	.word	0x165e9f81

08005b20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e083      	b.n	8005c3c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7fc f8af 	bl	8001cac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6812      	ldr	r2, [r2, #0]
 8005b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b64:	f023 0307 	bic.w	r3, r3, #7
 8005b68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4619      	mov	r1, r3
 8005b74:	4610      	mov	r0, r2
 8005b76:	f000 f9ed 	bl	8005f54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba2:	f023 0303 	bic.w	r3, r3, #3
 8005ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005bc0:	f023 030c 	bic.w	r3, r3, #12
 8005bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	011a      	lsls	r2, r3, #4
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	031b      	lsls	r3, r3, #12
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	4313      	orrs	r3, r2
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_TIM_Encoder_Start_IT+0x16>
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d010      	beq.n	8005c7a <HAL_TIM_Encoder_Start_IT+0x36>
 8005c58:	e01f      	b.n	8005c9a <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	2100      	movs	r1, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f9f6 	bl	8006054 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0202 	orr.w	r2, r2, #2
 8005c76:	60da      	str	r2, [r3, #12]
      break;
 8005c78:	e02e      	b.n	8005cd8 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	2104      	movs	r1, #4
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f9e6 	bl	8006054 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0204 	orr.w	r2, r2, #4
 8005c96:	60da      	str	r2, [r3, #12]
      break;
 8005c98:	e01e      	b.n	8005cd8 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 f9d6 	bl	8006054 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2201      	movs	r2, #1
 8005cae:	2104      	movs	r1, #4
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 f9cf 	bl	8006054 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0202 	orr.w	r2, r2, #2
 8005cc4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0204 	orr.w	r2, r2, #4
 8005cd4:	60da      	str	r2, [r3, #12]
      break;
 8005cd6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d122      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d11b      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f06f 0202 	mvn.w	r2, #2
 8005d1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7fb f8dd 	bl	8000ef4 <HAL_TIM_IC_CaptureCallback>
 8005d3a:	e005      	b.n	8005d48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f8ea 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f8f1 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d122      	bne.n	8005da2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d11b      	bne.n	8005da2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f06f 0204 	mvn.w	r2, #4
 8005d72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fb f8b3 	bl	8000ef4 <HAL_TIM_IC_CaptureCallback>
 8005d8e:	e005      	b.n	8005d9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f8c0 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f8c7 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d122      	bne.n	8005df6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d11b      	bne.n	8005df6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f06f 0208 	mvn.w	r2, #8
 8005dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fb f889 	bl	8000ef4 <HAL_TIM_IC_CaptureCallback>
 8005de2:	e005      	b.n	8005df0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f896 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f89d 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b10      	cmp	r3, #16
 8005e02:	d122      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f003 0310 	and.w	r3, r3, #16
 8005e0e:	2b10      	cmp	r3, #16
 8005e10:	d11b      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f06f 0210 	mvn.w	r2, #16
 8005e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2208      	movs	r2, #8
 8005e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7fb f85f 	bl	8000ef4 <HAL_TIM_IC_CaptureCallback>
 8005e36:	e005      	b.n	8005e44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f86c 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f873 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d10e      	bne.n	8005e76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d107      	bne.n	8005e76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f06f 0201 	mvn.w	r2, #1
 8005e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f846 	bl	8005f02 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e80:	2b80      	cmp	r3, #128	; 0x80
 8005e82:	d10e      	bne.n	8005ea2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8e:	2b80      	cmp	r3, #128	; 0x80
 8005e90:	d107      	bne.n	8005ea2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f977 	bl	8006190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d10e      	bne.n	8005ece <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d107      	bne.n	8005ece <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f838 	bl	8005f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d10e      	bne.n	8005efa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	d107      	bne.n	8005efa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f06f 0220 	mvn.w	r2, #32
 8005ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f941 	bl	800617c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a34      	ldr	r2, [pc, #208]	; (8006038 <TIM_Base_SetConfig+0xe4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00f      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d00b      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a31      	ldr	r2, [pc, #196]	; (800603c <TIM_Base_SetConfig+0xe8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d007      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a30      	ldr	r2, [pc, #192]	; (8006040 <TIM_Base_SetConfig+0xec>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d003      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a2f      	ldr	r2, [pc, #188]	; (8006044 <TIM_Base_SetConfig+0xf0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d108      	bne.n	8005f9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a25      	ldr	r2, [pc, #148]	; (8006038 <TIM_Base_SetConfig+0xe4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01b      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fac:	d017      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a22      	ldr	r2, [pc, #136]	; (800603c <TIM_Base_SetConfig+0xe8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a21      	ldr	r2, [pc, #132]	; (8006040 <TIM_Base_SetConfig+0xec>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00f      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a20      	ldr	r2, [pc, #128]	; (8006044 <TIM_Base_SetConfig+0xf0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00b      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a1f      	ldr	r2, [pc, #124]	; (8006048 <TIM_Base_SetConfig+0xf4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d007      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a1e      	ldr	r2, [pc, #120]	; (800604c <TIM_Base_SetConfig+0xf8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d003      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1d      	ldr	r2, [pc, #116]	; (8006050 <TIM_Base_SetConfig+0xfc>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a08      	ldr	r2, [pc, #32]	; (8006038 <TIM_Base_SetConfig+0xe4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d103      	bne.n	8006024 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	615a      	str	r2, [r3, #20]
}
 800602a:	bf00      	nop
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40000c00 	.word	0x40000c00
 8006048:	40014000 	.word	0x40014000
 800604c:	40014400 	.word	0x40014400
 8006050:	40014800 	.word	0x40014800

08006054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	2201      	movs	r2, #1
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1a      	ldr	r2, [r3, #32]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	43db      	mvns	r3, r3
 8006076:	401a      	ands	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a1a      	ldr	r2, [r3, #32]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	431a      	orrs	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e050      	b.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006104:	d013      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a18      	ldr	r2, [pc, #96]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a16      	ldr	r2, [pc, #88]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a15      	ldr	r2, [pc, #84]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a13      	ldr	r2, [pc, #76]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d10c      	bne.n	8006148 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	4313      	orrs	r3, r2
 800613e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40010000 	.word	0x40010000
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800
 8006174:	40000c00 	.word	0x40000c00
 8006178:	40014000 	.word	0x40014000

0800617c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061a4:	b084      	sub	sp, #16
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	f107 001c 	add.w	r0, r7, #28
 80061b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d122      	bne.n	8006202 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d105      	bne.n	80061f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 fac6 	bl	8007788 <USB_CoreReset>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]
 8006200:	e01a      	b.n	8006238 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 faba 	bl	8007788 <USB_CoreReset>
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	639a      	str	r2, [r3, #56]	; 0x38
 800622a:	e005      	b.n	8006238 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	2b01      	cmp	r3, #1
 800623c:	d10b      	bne.n	8006256 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f043 0206 	orr.w	r2, r3, #6
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f043 0220 	orr.w	r2, r3, #32
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006262:	b004      	add	sp, #16
 8006264:	4770      	bx	lr
	...

08006268 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d165      	bne.n	8006348 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a41      	ldr	r2, [pc, #260]	; (8006384 <USB_SetTurnaroundTime+0x11c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d906      	bls.n	8006292 <USB_SetTurnaroundTime+0x2a>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a40      	ldr	r2, [pc, #256]	; (8006388 <USB_SetTurnaroundTime+0x120>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d802      	bhi.n	8006292 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800628c:	230f      	movs	r3, #15
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e062      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4a3c      	ldr	r2, [pc, #240]	; (8006388 <USB_SetTurnaroundTime+0x120>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d906      	bls.n	80062a8 <USB_SetTurnaroundTime+0x40>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a3b      	ldr	r2, [pc, #236]	; (800638c <USB_SetTurnaroundTime+0x124>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d802      	bhi.n	80062a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062a2:	230e      	movs	r3, #14
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	e057      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4a38      	ldr	r2, [pc, #224]	; (800638c <USB_SetTurnaroundTime+0x124>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d906      	bls.n	80062be <USB_SetTurnaroundTime+0x56>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4a37      	ldr	r2, [pc, #220]	; (8006390 <USB_SetTurnaroundTime+0x128>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d802      	bhi.n	80062be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062b8:	230d      	movs	r3, #13
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e04c      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4a33      	ldr	r2, [pc, #204]	; (8006390 <USB_SetTurnaroundTime+0x128>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d906      	bls.n	80062d4 <USB_SetTurnaroundTime+0x6c>
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4a32      	ldr	r2, [pc, #200]	; (8006394 <USB_SetTurnaroundTime+0x12c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d802      	bhi.n	80062d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062ce:	230c      	movs	r3, #12
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	e041      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a2f      	ldr	r2, [pc, #188]	; (8006394 <USB_SetTurnaroundTime+0x12c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d906      	bls.n	80062ea <USB_SetTurnaroundTime+0x82>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a2e      	ldr	r2, [pc, #184]	; (8006398 <USB_SetTurnaroundTime+0x130>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d802      	bhi.n	80062ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062e4:	230b      	movs	r3, #11
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e036      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4a2a      	ldr	r2, [pc, #168]	; (8006398 <USB_SetTurnaroundTime+0x130>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d906      	bls.n	8006300 <USB_SetTurnaroundTime+0x98>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4a29      	ldr	r2, [pc, #164]	; (800639c <USB_SetTurnaroundTime+0x134>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d802      	bhi.n	8006300 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062fa:	230a      	movs	r3, #10
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	e02b      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4a26      	ldr	r2, [pc, #152]	; (800639c <USB_SetTurnaroundTime+0x134>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d906      	bls.n	8006316 <USB_SetTurnaroundTime+0xae>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4a25      	ldr	r2, [pc, #148]	; (80063a0 <USB_SetTurnaroundTime+0x138>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d802      	bhi.n	8006316 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006310:	2309      	movs	r3, #9
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	e020      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4a21      	ldr	r2, [pc, #132]	; (80063a0 <USB_SetTurnaroundTime+0x138>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d906      	bls.n	800632c <USB_SetTurnaroundTime+0xc4>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	4a20      	ldr	r2, [pc, #128]	; (80063a4 <USB_SetTurnaroundTime+0x13c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d802      	bhi.n	800632c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006326:	2308      	movs	r3, #8
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	e015      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4a1d      	ldr	r2, [pc, #116]	; (80063a4 <USB_SetTurnaroundTime+0x13c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d906      	bls.n	8006342 <USB_SetTurnaroundTime+0xda>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4a1c      	ldr	r2, [pc, #112]	; (80063a8 <USB_SetTurnaroundTime+0x140>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d802      	bhi.n	8006342 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800633c:	2307      	movs	r3, #7
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e00a      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006342:	2306      	movs	r3, #6
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e007      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d102      	bne.n	8006354 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800634e:	2309      	movs	r3, #9
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	e001      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006354:	2309      	movs	r3, #9
 8006356:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	029b      	lsls	r3, r3, #10
 800636c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006370:	431a      	orrs	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	00d8acbf 	.word	0x00d8acbf
 8006388:	00e4e1bf 	.word	0x00e4e1bf
 800638c:	00f423ff 	.word	0x00f423ff
 8006390:	0106737f 	.word	0x0106737f
 8006394:	011a499f 	.word	0x011a499f
 8006398:	01312cff 	.word	0x01312cff
 800639c:	014ca43f 	.word	0x014ca43f
 80063a0:	016e35ff 	.word	0x016e35ff
 80063a4:	01a6ab1f 	.word	0x01a6ab1f
 80063a8:	01e847ff 	.word	0x01e847ff

080063ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f043 0201 	orr.w	r2, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f023 0201 	bic.w	r2, r3, #1
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d106      	bne.n	800641c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	e00b      	b.n	8006434 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	60da      	str	r2, [r3, #12]
 800642e:	e001      	b.n	8006434 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e003      	b.n	800643c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006434:	2032      	movs	r0, #50	; 0x32
 8006436:	f7fc f807 	bl	8002448 <HAL_Delay>

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006444:	b084      	sub	sp, #16
 8006446:	b580      	push	{r7, lr}
 8006448:	b086      	sub	sp, #24
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	e009      	b.n	8006478 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	3340      	adds	r3, #64	; 0x40
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	2200      	movs	r2, #0
 8006470:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	3301      	adds	r3, #1
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	2b0e      	cmp	r3, #14
 800647c:	d9f2      	bls.n	8006464 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800647e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11c      	bne.n	80064be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006492:	f043 0302 	orr.w	r3, r3, #2
 8006496:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38
 80064bc:	e00b      	b.n	80064d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064dc:	461a      	mov	r2, r3
 80064de:	2300      	movs	r3, #0
 80064e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e8:	4619      	mov	r1, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f0:	461a      	mov	r2, r3
 80064f2:	680b      	ldr	r3, [r1, #0]
 80064f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d10c      	bne.n	8006516 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006502:	2100      	movs	r1, #0
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f949 	bl	800679c <USB_SetDevSpeed>
 800650a:	e008      	b.n	800651e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800650c:	2101      	movs	r1, #1
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f944 	bl	800679c <USB_SetDevSpeed>
 8006514:	e003      	b.n	800651e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006516:	2103      	movs	r1, #3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f93f 	bl	800679c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800651e:	2110      	movs	r1, #16
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f8f3 	bl	800670c <USB_FlushTxFifo>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f911 	bl	8006758 <USB_FlushRxFifo>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006546:	461a      	mov	r2, r3
 8006548:	2300      	movs	r3, #0
 800654a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006552:	461a      	mov	r2, r3
 8006554:	2300      	movs	r3, #0
 8006556:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	461a      	mov	r2, r3
 8006560:	2300      	movs	r3, #0
 8006562:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006564:	2300      	movs	r3, #0
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	e043      	b.n	80065f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800657c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006580:	d118      	bne.n	80065b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006594:	461a      	mov	r2, r3
 8006596:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	e013      	b.n	80065c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065aa:	461a      	mov	r2, r3
 80065ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	e008      	b.n	80065c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c0:	461a      	mov	r2, r3
 80065c2:	2300      	movs	r3, #0
 80065c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d2:	461a      	mov	r2, r3
 80065d4:	2300      	movs	r3, #0
 80065d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e4:	461a      	mov	r2, r3
 80065e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	3301      	adds	r3, #1
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d3b7      	bcc.n	800656a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065fa:	2300      	movs	r3, #0
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	e043      	b.n	8006688 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006616:	d118      	bne.n	800664a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662a:	461a      	mov	r2, r3
 800662c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	e013      	b.n	800665c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006640:	461a      	mov	r2, r3
 8006642:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	e008      	b.n	800665c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	461a      	mov	r2, r3
 8006658:	2300      	movs	r3, #0
 800665a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006668:	461a      	mov	r2, r3
 800666a:	2300      	movs	r3, #0
 800666c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	461a      	mov	r2, r3
 800667c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006680:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	3301      	adds	r3, #1
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	429a      	cmp	r2, r3
 800668e:	d3b7      	bcc.n	8006600 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800669e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d105      	bne.n	80066c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	f043 0210 	orr.w	r2, r3, #16
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	699a      	ldr	r2, [r3, #24]
 80066c8:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <USB_DevInit+0x2c4>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d005      	beq.n	80066e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f043 0208 	orr.w	r2, r3, #8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d107      	bne.n	80066f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066f0:	f043 0304 	orr.w	r3, r3, #4
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006704:	b004      	add	sp, #16
 8006706:	4770      	bx	lr
 8006708:	803c3800 	.word	0x803c3800

0800670c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	019b      	lsls	r3, r3, #6
 800671e:	f043 0220 	orr.w	r2, r3, #32
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3301      	adds	r3, #1
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a09      	ldr	r2, [pc, #36]	; (8006754 <USB_FlushTxFifo+0x48>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d901      	bls.n	8006738 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e006      	b.n	8006746 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b20      	cmp	r3, #32
 8006742:	d0f0      	beq.n	8006726 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	00030d40 	.word	0x00030d40

08006758 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2210      	movs	r2, #16
 8006768:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3301      	adds	r3, #1
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a09      	ldr	r2, [pc, #36]	; (8006798 <USB_FlushRxFifo+0x40>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d901      	bls.n	800677c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e006      	b.n	800678a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b10      	cmp	r3, #16
 8006786:	d0f0      	beq.n	800676a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	00030d40 	.word	0x00030d40

0800679c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	68f9      	ldr	r1, [r7, #12]
 80067b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067bc:	4313      	orrs	r3, r2
 80067be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b087      	sub	sp, #28
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0306 	and.w	r3, r3, #6
 80067e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
 80067f2:	e00a      	b.n	800680a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d002      	beq.n	8006800 <USB_GetDevSpeed+0x32>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b06      	cmp	r3, #6
 80067fe:	d102      	bne.n	8006806 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006800:	2302      	movs	r3, #2
 8006802:	75fb      	strb	r3, [r7, #23]
 8006804:	e001      	b.n	800680a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006806:	230f      	movs	r3, #15
 8006808:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
}
 800680c:	4618      	mov	r0, r3
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d13a      	bne.n	80068aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	2101      	movs	r1, #1
 8006846:	fa01 f303 	lsl.w	r3, r1, r3
 800684a:	b29b      	uxth	r3, r3
 800684c:	68f9      	ldr	r1, [r7, #12]
 800684e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006852:	4313      	orrs	r3, r2
 8006854:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d155      	bne.n	8006918 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	78db      	ldrb	r3, [r3, #3]
 8006886:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006888:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	059b      	lsls	r3, r3, #22
 800688e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006890:	4313      	orrs	r3, r2
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	e036      	b.n	8006918 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b0:	69da      	ldr	r2, [r3, #28]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	2101      	movs	r1, #1
 80068bc:	fa01 f303 	lsl.w	r3, r1, r3
 80068c0:	041b      	lsls	r3, r3, #16
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c8:	4313      	orrs	r3, r2
 80068ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d11a      	bne.n	8006918 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	78db      	ldrb	r3, [r3, #3]
 80068fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068fe:	430b      	orrs	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006916:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d161      	bne.n	8006a08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800695a:	d11f      	bne.n	800699c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800697a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800699a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	2101      	movs	r1, #1
 80069ae:	fa01 f303 	lsl.w	r3, r1, r3
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	43db      	mvns	r3, r3
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069bc:	4013      	ands	r3, r2
 80069be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	2101      	movs	r1, #1
 80069d2:	fa01 f303 	lsl.w	r3, r1, r3
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	43db      	mvns	r3, r3
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e0:	4013      	ands	r3, r2
 80069e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	0159      	lsls	r1, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	440b      	add	r3, r1
 80069fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fe:	4619      	mov	r1, r3
 8006a00:	4b35      	ldr	r3, [pc, #212]	; (8006ad8 <USB_DeactivateEndpoint+0x1b0>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	600b      	str	r3, [r1, #0]
 8006a06:	e060      	b.n	8006aca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1e:	d11f      	bne.n	8006a60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	2101      	movs	r1, #1
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a80:	4013      	ands	r3, r2
 8006a82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	2101      	movs	r1, #1
 8006a96:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9a:	041b      	lsls	r3, r3, #16
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	0159      	lsls	r1, r3, #5
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	440b      	add	r3, r1
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <USB_DeactivateEndpoint+0x1b4>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	ec337800 	.word	0xec337800
 8006adc:	eff37800 	.word	0xeff37800

08006ae0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08a      	sub	sp, #40	; 0x28
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	f040 815c 	bne.w	8006dba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d132      	bne.n	8006b70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	69fa      	ldr	r2, [r7, #28]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b68:	0cdb      	lsrs	r3, r3, #19
 8006b6a:	04db      	lsls	r3, r3, #19
 8006b6c:	6113      	str	r3, [r2, #16]
 8006b6e:	e074      	b.n	8006c5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8a:	0cdb      	lsrs	r3, r3, #19
 8006b8c:	04db      	lsls	r3, r3, #19
 8006b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006baa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	6959      	ldr	r1, [r3, #20]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	440b      	add	r3, r1
 8006bcc:	1e59      	subs	r1, r3, #1
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bd6:	04d9      	lsls	r1, r3, #19
 8006bd8:	4b9d      	ldr	r3, [pc, #628]	; (8006e50 <USB_EPStartXfer+0x370>)
 8006bda:	400b      	ands	r3, r1
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	0148      	lsls	r0, r1, #5
 8006be0:	69f9      	ldr	r1, [r7, #28]
 8006be2:	4401      	add	r1, r0
 8006be4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006be8:	4313      	orrs	r3, r2
 8006bea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c02:	69b9      	ldr	r1, [r7, #24]
 8006c04:	0148      	lsls	r0, r1, #5
 8006c06:	69f9      	ldr	r1, [r7, #28]
 8006c08:	4401      	add	r1, r0
 8006c0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	78db      	ldrb	r3, [r3, #3]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d11f      	bne.n	8006c5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d14b      	bne.n	8006cf8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d009      	beq.n	8006c7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	461a      	mov	r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	78db      	ldrb	r3, [r3, #3]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d128      	bne.n	8006cd6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d110      	bne.n	8006cb6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	e00f      	b.n	8006cd6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	0151      	lsls	r1, r2, #5
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	440a      	add	r2, r1
 8006cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	e12f      	b.n	8006f58 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	78db      	ldrb	r3, [r3, #3]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d015      	beq.n	8006d4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8117 	beq.w	8006f58 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d40:	69f9      	ldr	r1, [r7, #28]
 8006d42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d46:	4313      	orrs	r3, r2
 8006d48:	634b      	str	r3, [r1, #52]	; 0x34
 8006d4a:	e105      	b.n	8006f58 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d110      	bne.n	8006d7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	e00f      	b.n	8006d9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	68d9      	ldr	r1, [r3, #12]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	781a      	ldrb	r2, [r3, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	b298      	uxth	r0, r3
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	4603      	mov	r3, r0
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 fa2b 	bl	800720e <USB_WritePacket>
 8006db8:	e0ce      	b.n	8006f58 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd4:	0cdb      	lsrs	r3, r3, #19
 8006dd6:	04db      	lsls	r3, r3, #19
 8006dd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006df8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dfc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d126      	bne.n	8006e54 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e1c:	69b9      	ldr	r1, [r7, #24]
 8006e1e:	0148      	lsls	r0, r1, #5
 8006e20:	69f9      	ldr	r1, [r7, #28]
 8006e22:	4401      	add	r1, r0
 8006e24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e4a:	6113      	str	r3, [r2, #16]
 8006e4c:	e036      	b.n	8006ebc <USB_EPStartXfer+0x3dc>
 8006e4e:	bf00      	nop
 8006e50:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	695a      	ldr	r2, [r3, #20]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e68:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	8afb      	ldrh	r3, [r7, #22]
 8006e7a:	04d9      	lsls	r1, r3, #19
 8006e7c:	4b39      	ldr	r3, [pc, #228]	; (8006f64 <USB_EPStartXfer+0x484>)
 8006e7e:	400b      	ands	r3, r1
 8006e80:	69b9      	ldr	r1, [r7, #24]
 8006e82:	0148      	lsls	r0, r1, #5
 8006e84:	69f9      	ldr	r1, [r7, #28]
 8006e86:	4401      	add	r1, r0
 8006e88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9c:	691a      	ldr	r2, [r3, #16]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	8af9      	ldrh	r1, [r7, #22]
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eac:	69b9      	ldr	r1, [r7, #24]
 8006eae:	0148      	lsls	r0, r1, #5
 8006eb0:	69f9      	ldr	r1, [r7, #28]
 8006eb2:	4401      	add	r1, r0
 8006eb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d10d      	bne.n	8006ede <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d009      	beq.n	8006ede <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	68d9      	ldr	r1, [r3, #12]
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eda:	460a      	mov	r2, r1
 8006edc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	78db      	ldrb	r3, [r3, #3]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d128      	bne.n	8006f38 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d110      	bne.n	8006f18 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	e00f      	b.n	8006f38 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	0151      	lsls	r1, r2, #5
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	440a      	add	r2, r1
 8006f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	1ff80000 	.word	0x1ff80000

08006f68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	785b      	ldrb	r3, [r3, #1]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	f040 80cd 	bne.w	8007124 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d132      	bne.n	8006ff8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	0151      	lsls	r1, r2, #5
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	440a      	add	r2, r1
 8006fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff0:	0cdb      	lsrs	r3, r3, #19
 8006ff2:	04db      	lsls	r3, r3, #19
 8006ff4:	6113      	str	r3, [r2, #16]
 8006ff6:	e04e      	b.n	8007096 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	440a      	add	r2, r1
 800700e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007012:	0cdb      	lsrs	r3, r3, #19
 8007014:	04db      	lsls	r3, r3, #19
 8007016:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007032:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007036:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800703a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	695a      	ldr	r2, [r3, #20]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	429a      	cmp	r2, r3
 8007046:	d903      	bls.n	8007050 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	0151      	lsls	r1, r2, #5
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	440a      	add	r2, r1
 8007066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800706e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	691a      	ldr	r2, [r3, #16]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007086:	6939      	ldr	r1, [r7, #16]
 8007088:	0148      	lsls	r0, r1, #5
 800708a:	6979      	ldr	r1, [r7, #20]
 800708c:	4401      	add	r1, r0
 800708e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007092:	4313      	orrs	r3, r2
 8007094:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d11e      	bne.n	80070da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d009      	beq.n	80070b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	461a      	mov	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	e092      	b.n	8007200 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	0151      	lsls	r1, r2, #5
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	440a      	add	r2, r1
 80070f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d07e      	beq.n	8007200 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	2101      	movs	r1, #1
 8007114:	fa01 f303 	lsl.w	r3, r1, r3
 8007118:	6979      	ldr	r1, [r7, #20]
 800711a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800711e:	4313      	orrs	r3, r2
 8007120:	634b      	str	r3, [r1, #52]	; 0x34
 8007122:	e06d      	b.n	8007200 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	440a      	add	r2, r1
 800713a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713e:	0cdb      	lsrs	r3, r3, #19
 8007140:	04db      	lsls	r3, r3, #19
 8007142:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007162:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007166:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	440a      	add	r2, r1
 800718e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007192:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007196:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a4:	691a      	ldr	r2, [r3, #16]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ae:	6939      	ldr	r1, [r7, #16]
 80071b0:	0148      	lsls	r0, r1, #5
 80071b2:	6979      	ldr	r1, [r7, #20]
 80071b4:	4401      	add	r1, r0
 80071b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071ba:	4313      	orrs	r3, r2
 80071bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d10d      	bne.n	80071e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d009      	beq.n	80071e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	68d9      	ldr	r1, [r3, #12]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071dc:	460a      	mov	r2, r1
 80071de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	0151      	lsls	r1, r2, #5
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	440a      	add	r2, r1
 80071f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800720e:	b480      	push	{r7}
 8007210:	b089      	sub	sp, #36	; 0x24
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	4611      	mov	r1, r2
 800721a:	461a      	mov	r2, r3
 800721c:	460b      	mov	r3, r1
 800721e:	71fb      	strb	r3, [r7, #7]
 8007220:	4613      	mov	r3, r2
 8007222:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800722c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007230:	2b00      	cmp	r3, #0
 8007232:	d11a      	bne.n	800726a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007234:	88bb      	ldrh	r3, [r7, #4]
 8007236:	3303      	adds	r3, #3
 8007238:	089b      	lsrs	r3, r3, #2
 800723a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800723c:	2300      	movs	r3, #0
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	e00f      	b.n	8007262 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	031a      	lsls	r2, r3, #12
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	4413      	add	r3, r2
 800724a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724e:	461a      	mov	r2, r3
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	3304      	adds	r3, #4
 800725a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	3301      	adds	r3, #1
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	429a      	cmp	r2, r3
 8007268:	d3eb      	bcc.n	8007242 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3724      	adds	r7, #36	; 0x24
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007278:	b480      	push	{r7}
 800727a:	b089      	sub	sp, #36	; 0x24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	4613      	mov	r3, r2
 8007284:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800728e:	88fb      	ldrh	r3, [r7, #6]
 8007290:	3303      	adds	r3, #3
 8007292:	089b      	lsrs	r3, r3, #2
 8007294:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007296:	2300      	movs	r3, #0
 8007298:	61bb      	str	r3, [r7, #24]
 800729a:	e00b      	b.n	80072b4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	3304      	adds	r3, #4
 80072ac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	3301      	adds	r3, #1
 80072b2:	61bb      	str	r3, [r7, #24]
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d3ef      	bcc.n	800729c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80072bc:	69fb      	ldr	r3, [r7, #28]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3724      	adds	r7, #36	; 0x24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	785b      	ldrb	r3, [r3, #1]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d12c      	bne.n	8007340 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	db12      	blt.n	800731e <USB_EPSetStall+0x54>
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00f      	beq.n	800731e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	0151      	lsls	r1, r2, #5
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	440a      	add	r2, r1
 8007314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007318:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800731c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	440a      	add	r2, r1
 8007334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	e02b      	b.n	8007398 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	db12      	blt.n	8007378 <USB_EPSetStall+0xae>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00f      	beq.n	8007378 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	440a      	add	r2, r1
 800736e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007372:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007376:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	0151      	lsls	r1, r2, #5
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	440a      	add	r2, r1
 800738e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007396:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	785b      	ldrb	r3, [r3, #1]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d128      	bne.n	8007414 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	0151      	lsls	r1, r2, #5
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	440a      	add	r2, r1
 80073d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	78db      	ldrb	r3, [r3, #3]
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d003      	beq.n	80073f2 <USB_EPClearStall+0x4c>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	78db      	ldrb	r3, [r3, #3]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d138      	bne.n	8007464 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	440a      	add	r2, r1
 8007408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	e027      	b.n	8007464 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	0151      	lsls	r1, r2, #5
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	440a      	add	r2, r1
 800742a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007432:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	78db      	ldrb	r3, [r3, #3]
 8007438:	2b03      	cmp	r3, #3
 800743a:	d003      	beq.n	8007444 <USB_EPClearStall+0x9e>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	78db      	ldrb	r3, [r3, #3]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d10f      	bne.n	8007464 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007462:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007472:	b480      	push	{r7}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007490:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007494:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80074a6:	68f9      	ldr	r1, [r7, #12]
 80074a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074ac:	4313      	orrs	r3, r2
 80074ae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074be:	b480      	push	{r7}
 80074c0:	b085      	sub	sp, #20
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074d8:	f023 0303 	bic.w	r3, r3, #3
 80074dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ec:	f023 0302 	bic.w	r3, r3, #2
 80074f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800751a:	f023 0303 	bic.w	r3, r3, #3
 800751e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800752e:	f043 0302 	orr.w	r3, r3, #2
 8007532:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007542:	b480      	push	{r7}
 8007544:	b085      	sub	sp, #20
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4013      	ands	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800755a:	68fb      	ldr	r3, [r7, #12]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	4013      	ands	r3, r2
 800758a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	0c1b      	lsrs	r3, r3, #16
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	4013      	ands	r3, r2
 80075be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	b29b      	uxth	r3, r3
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	4013      	ands	r3, r2
 80075fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075fe:	68bb      	ldr	r3, [r7, #8]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
 800763c:	01db      	lsls	r3, r3, #7
 800763e:	b2db      	uxtb	r3, r3
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	4313      	orrs	r3, r2
 8007644:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4013      	ands	r3, r2
 8007658:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800765a:	68bb      	ldr	r3, [r7, #8]
}
 800765c:	4618      	mov	r0, r3
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	f003 0301 	and.w	r3, r3, #1
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076a2:	f023 0307 	bic.w	r3, r3, #7
 80076a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
	...

080076cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	460b      	mov	r3, r1
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	333c      	adds	r3, #60	; 0x3c
 80076e2:	3304      	adds	r3, #4
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	4a26      	ldr	r2, [pc, #152]	; (8007784 <USB_EP0_OutStart+0xb8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d90a      	bls.n	8007706 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007700:	d101      	bne.n	8007706 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	e037      	b.n	8007776 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770c:	461a      	mov	r2, r3
 800770e:	2300      	movs	r3, #0
 8007710:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007720:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007724:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007734:	f043 0318 	orr.w	r3, r3, #24
 8007738:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007748:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800774c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800774e:	7afb      	ldrb	r3, [r7, #11]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d10f      	bne.n	8007774 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775a:	461a      	mov	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800776e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007772:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	4f54300a 	.word	0x4f54300a

08007788 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3301      	adds	r3, #1
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4a13      	ldr	r2, [pc, #76]	; (80077ec <USB_CoreReset+0x64>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d901      	bls.n	80077a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e01b      	b.n	80077de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	daf2      	bge.n	8007794 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f043 0201 	orr.w	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4a09      	ldr	r2, [pc, #36]	; (80077ec <USB_CoreReset+0x64>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d901      	bls.n	80077d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e006      	b.n	80077de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d0f0      	beq.n	80077be <USB_CoreReset+0x36>

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	00030d40 	.word	0x00030d40

080077f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007800:	f002 fb3e 	bl	8009e80 <malloc>
 8007804:	4603      	mov	r3, r0
 8007806:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007816:	2302      	movs	r3, #2
 8007818:	e066      	b.n	80078e8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	7c1b      	ldrb	r3, [r3, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d119      	bne.n	800785e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800782a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800782e:	2202      	movs	r2, #2
 8007830:	2181      	movs	r1, #129	; 0x81
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f002 f9ab 	bl	8009b8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800783e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007842:	2202      	movs	r2, #2
 8007844:	2101      	movs	r1, #1
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f002 f9a1 	bl	8009b8e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2210      	movs	r2, #16
 8007858:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800785c:	e016      	b.n	800788c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800785e:	2340      	movs	r3, #64	; 0x40
 8007860:	2202      	movs	r2, #2
 8007862:	2181      	movs	r1, #129	; 0x81
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f002 f992 	bl	8009b8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007870:	2340      	movs	r3, #64	; 0x40
 8007872:	2202      	movs	r2, #2
 8007874:	2101      	movs	r1, #1
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f002 f989 	bl	8009b8e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2210      	movs	r2, #16
 8007888:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800788c:	2308      	movs	r3, #8
 800788e:	2203      	movs	r2, #3
 8007890:	2182      	movs	r1, #130	; 0x82
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f002 f97b 	bl	8009b8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	7c1b      	ldrb	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078cc:	2101      	movs	r1, #1
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f002 fa4c 	bl	8009d6c <USBD_LL_PrepareReceive>
 80078d4:	e007      	b.n	80078e6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	2101      	movs	r1, #1
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f002 fa43 	bl	8009d6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007900:	2181      	movs	r1, #129	; 0x81
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f002 f969 	bl	8009bda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800790e:	2101      	movs	r1, #1
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f002 f962 	bl	8009bda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800791e:	2182      	movs	r1, #130	; 0x82
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f002 f95a 	bl	8009bda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00e      	beq.n	800795e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007950:	4618      	mov	r0, r3
 8007952:	f002 fa9d 	bl	8009e90 <free>
    pdev->pClassData = NULL;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800795e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007978:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800798e:	2b00      	cmp	r3, #0
 8007990:	d03a      	beq.n	8007a08 <USBD_CDC_Setup+0xa0>
 8007992:	2b20      	cmp	r3, #32
 8007994:	f040 8097 	bne.w	8007ac6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	88db      	ldrh	r3, [r3, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d029      	beq.n	80079f4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	b25b      	sxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	da11      	bge.n	80079ce <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80079b6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	88d2      	ldrh	r2, [r2, #6]
 80079bc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079be:	6939      	ldr	r1, [r7, #16]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	88db      	ldrh	r3, [r3, #6]
 80079c4:	461a      	mov	r2, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 fc63 	bl	8009292 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80079cc:	e082      	b.n	8007ad4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	785a      	ldrb	r2, [r3, #1]
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	88db      	ldrh	r3, [r3, #6]
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079e4:	6939      	ldr	r1, [r7, #16]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	88db      	ldrh	r3, [r3, #6]
 80079ea:	461a      	mov	r2, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 fc7c 	bl	80092ea <USBD_CtlPrepareRx>
    break;
 80079f2:	e06f      	b.n	8007ad4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	7850      	ldrb	r0, [r2, #1]
 8007a00:	2200      	movs	r2, #0
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	4798      	blx	r3
    break;
 8007a06:	e065      	b.n	8007ad4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	785b      	ldrb	r3, [r3, #1]
 8007a0c:	2b0b      	cmp	r3, #11
 8007a0e:	d84f      	bhi.n	8007ab0 <USBD_CDC_Setup+0x148>
 8007a10:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <USBD_CDC_Setup+0xb0>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a49 	.word	0x08007a49
 8007a1c:	08007abf 	.word	0x08007abf
 8007a20:	08007ab1 	.word	0x08007ab1
 8007a24:	08007ab1 	.word	0x08007ab1
 8007a28:	08007ab1 	.word	0x08007ab1
 8007a2c:	08007ab1 	.word	0x08007ab1
 8007a30:	08007ab1 	.word	0x08007ab1
 8007a34:	08007ab1 	.word	0x08007ab1
 8007a38:	08007ab1 	.word	0x08007ab1
 8007a3c:	08007ab1 	.word	0x08007ab1
 8007a40:	08007a71 	.word	0x08007a71
 8007a44:	08007a99 	.word	0x08007a99
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d107      	bne.n	8007a62 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a52:	f107 030c 	add.w	r3, r7, #12
 8007a56:	2202      	movs	r2, #2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 fc19 	bl	8009292 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007a60:	e030      	b.n	8007ac4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 fba3 	bl	80091b0 <USBD_CtlError>
        ret = USBD_FAIL;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a6e:	e029      	b.n	8007ac4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d107      	bne.n	8007a8a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a7a:	f107 030f 	add.w	r3, r7, #15
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 fc05 	bl	8009292 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007a88:	e01c      	b.n	8007ac4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fb8f 	bl	80091b0 <USBD_CtlError>
        ret = USBD_FAIL;
 8007a92:	2303      	movs	r3, #3
 8007a94:	75fb      	strb	r3, [r7, #23]
      break;
 8007a96:	e015      	b.n	8007ac4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d00f      	beq.n	8007ac2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 fb83 	bl	80091b0 <USBD_CtlError>
        ret = USBD_FAIL;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007aae:	e008      	b.n	8007ac2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 fb7c 	bl	80091b0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	75fb      	strb	r3, [r7, #23]
      break;
 8007abc:	e002      	b.n	8007ac4 <USBD_CDC_Setup+0x15c>
      break;
 8007abe:	bf00      	nop
 8007ac0:	e008      	b.n	8007ad4 <USBD_CDC_Setup+0x16c>
      break;
 8007ac2:	bf00      	nop
    }
    break;
 8007ac4:	e006      	b.n	8007ad4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 fb71 	bl	80091b0 <USBD_CtlError>
    ret = USBD_FAIL;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	75fb      	strb	r3, [r7, #23]
    break;
 8007ad2:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop

08007ae0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007af2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e049      	b.n	8007b96 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	440b      	add	r3, r1
 8007b18:	3318      	adds	r3, #24
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d029      	beq.n	8007b74 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	4613      	mov	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	440b      	add	r3, r1
 8007b2e:	3318      	adds	r3, #24
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	78f9      	ldrb	r1, [r7, #3]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	460b      	mov	r3, r1
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	1a5b      	subs	r3, r3, r1
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4403      	add	r3, r0
 8007b40:	3344      	adds	r3, #68	; 0x44
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b48:	fb03 f301 	mul.w	r3, r3, r1
 8007b4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d110      	bne.n	8007b74 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b52:	78fa      	ldrb	r2, [r7, #3]
 8007b54:	6879      	ldr	r1, [r7, #4]
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	440b      	add	r3, r1
 8007b60:	3318      	adds	r3, #24
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b66:	78f9      	ldrb	r1, [r7, #3]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f002 f8dc 	bl	8009d2a <USBD_LL_Transmit>
 8007b72:	e00f      	b.n	8007b94 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b90:	78fa      	ldrb	r2, [r7, #3]
 8007b92:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e015      	b.n	8007bec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f002 f8f2 	bl	8009dae <USBD_LL_GetRxDataSize>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007be6:	4611      	mov	r1, r2
 8007be8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c02:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d015      	beq.n	8007c3a <USBD_CDC_EP0_RxReady+0x46>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c14:	2bff      	cmp	r3, #255	; 0xff
 8007c16:	d010      	beq.n	8007c3a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007c26:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c2e:	b292      	uxth	r2, r2
 8007c30:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	22ff      	movs	r2, #255	; 0xff
 8007c36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2243      	movs	r2, #67	; 0x43
 8007c50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007c52:	4b03      	ldr	r3, [pc, #12]	; (8007c60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	20000134 	.word	0x20000134

08007c64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2243      	movs	r2, #67	; 0x43
 8007c70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007c72:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	200000f0 	.word	0x200000f0

08007c84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2243      	movs	r2, #67	; 0x43
 8007c90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007c92:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	20000178 	.word	0x20000178

08007ca4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	220a      	movs	r2, #10
 8007cb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007cb2:	4b03      	ldr	r3, [pc, #12]	; (8007cc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	200000ac 	.word	0x200000ac

08007cc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e004      	b.n	8007ce2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b087      	sub	sp, #28
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d00:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d30:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d56:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e01a      	b.n	8007da0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d114      	bne.n	8007d9e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d92:	2181      	movs	r1, #129	; 0x81
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 ffc8 	bl	8009d2a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007db6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e016      	b.n	8007df4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	7c1b      	ldrb	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d109      	bne.n	8007de2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dd8:	2101      	movs	r1, #1
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f001 ffc6 	bl	8009d6c <USBD_LL_PrepareReceive>
 8007de0:	e007      	b.n	8007df2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007de8:	2340      	movs	r3, #64	; 0x40
 8007dea:	2101      	movs	r1, #1
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 ffbd 	bl	8009d6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	USBD_HID_HandleTypeDef *hhid;

	hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007e08:	2010      	movs	r0, #16
 8007e0a:	f002 f839 	bl	8009e80 <malloc>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d105      	bne.n	8007e24 <USBD_HID_Init+0x28>
	{
		pdev->pClassData = NULL;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		return (uint8_t)USBD_EMEM;
 8007e20:	2302      	movs	r3, #2
 8007e22:	e01b      	b.n	8007e5c <USBD_HID_Init+0x60>
	}

	pdev->pClassData = (void *)hhid;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	7c1b      	ldrb	r3, [r3, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d103      	bne.n	8007e3c <USBD_HID_Init+0x40>
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2207      	movs	r2, #7
 8007e38:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007e3a:	e002      	b.n	8007e42 <USBD_HID_Init+0x46>
	}
	else   /* LOW and FULL-speed endpoints */
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	220a      	movs	r2, #10
 8007e40:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	/* Open EP IN */
	(void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007e42:	2304      	movs	r3, #4
 8007e44:	2203      	movs	r2, #3
 8007e46:	2181      	movs	r1, #129	; 0x81
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 fea0 	bl	8009b8e <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	871a      	strh	r2, [r3, #56]	; 0x38

	hhid->state = HID_IDLE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_HID_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	/* Close HID EPs */
	(void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007e70:	2181      	movs	r1, #129	; 0x81
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f001 feb1 	bl	8009bda <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	871a      	strh	r2, [r3, #56]	; 0x38
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	875a      	strh	r2, [r3, #58]	; 0x3a

	/* FRee allocated memory */
	if (pdev->pClassData != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d009      	beq.n	8007ea2 <USBD_HID_DeInit+0x3e>
	{
		(void)USBD_free(pdev->pClassData);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 fffb 	bl	8009e90 <free>
		pdev->pClassData = NULL;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t)USBD_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ebc:	60fb      	str	r3, [r7, #12]
	USBD_StatusTypeDef ret = USBD_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	817b      	strh	r3, [r7, #10]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d045      	beq.n	8007f5e <USBD_HID_Setup+0xb2>
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	f040 80d4 	bne.w	8008080 <USBD_HID_Setup+0x1d4>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	785b      	ldrb	r3, [r3, #1]
 8007edc:	3b02      	subs	r3, #2
 8007ede:	2b09      	cmp	r3, #9
 8007ee0:	d835      	bhi.n	8007f4e <USBD_HID_Setup+0xa2>
 8007ee2:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <USBD_HID_Setup+0x3c>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f3f 	.word	0x08007f3f
 8007eec:	08007f1f 	.word	0x08007f1f
 8007ef0:	08007f4f 	.word	0x08007f4f
 8007ef4:	08007f4f 	.word	0x08007f4f
 8007ef8:	08007f4f 	.word	0x08007f4f
 8007efc:	08007f4f 	.word	0x08007f4f
 8007f00:	08007f4f 	.word	0x08007f4f
 8007f04:	08007f4f 	.word	0x08007f4f
 8007f08:	08007f2d 	.word	0x08007f2d
 8007f0c:	08007f11 	.word	0x08007f11
		{
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	885b      	ldrh	r3, [r3, #2]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	461a      	mov	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	601a      	str	r2, [r3, #0]
			break;
 8007f1c:	e01e      	b.n	8007f5c <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 f9b4 	bl	8009292 <USBD_CtlSendData>
			break;
 8007f2a:	e017      	b.n	8007f5c <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	885b      	ldrh	r3, [r3, #2]
 8007f30:	0a1b      	lsrs	r3, r3, #8
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	461a      	mov	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	605a      	str	r2, [r3, #4]
			break;
 8007f3c:	e00e      	b.n	8007f5c <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3304      	adds	r3, #4
 8007f42:	2201      	movs	r2, #1
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 f9a3 	bl	8009292 <USBD_CtlSendData>
			break;
 8007f4c:	e006      	b.n	8007f5c <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f92d 	bl	80091b0 <USBD_CtlError>
			ret = USBD_FAIL;
 8007f56:	2303      	movs	r3, #3
 8007f58:	75fb      	strb	r3, [r7, #23]
			break;
 8007f5a:	bf00      	nop
		}
		break;
 8007f5c:	e097      	b.n	800808e <USBD_HID_Setup+0x1e2>
		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	2b0b      	cmp	r3, #11
 8007f64:	f200 8083 	bhi.w	800806e <USBD_HID_Setup+0x1c2>
 8007f68:	a201      	add	r2, pc, #4	; (adr r2, 8007f70 <USBD_HID_Setup+0xc4>)
 8007f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6e:	bf00      	nop
 8007f70:	08007fa1 	.word	0x08007fa1
 8007f74:	0800807d 	.word	0x0800807d
 8007f78:	0800806f 	.word	0x0800806f
 8007f7c:	0800806f 	.word	0x0800806f
 8007f80:	0800806f 	.word	0x0800806f
 8007f84:	0800806f 	.word	0x0800806f
 8007f88:	08007fc9 	.word	0x08007fc9
 8007f8c:	0800806f 	.word	0x0800806f
 8007f90:	0800806f 	.word	0x0800806f
 8007f94:	0800806f 	.word	0x0800806f
 8007f98:	08008021 	.word	0x08008021
 8007f9c:	08008049 	.word	0x08008049
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d107      	bne.n	8007fba <USBD_HID_Setup+0x10e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007faa:	f107 030a 	add.w	r3, r7, #10
 8007fae:	2202      	movs	r2, #2
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 f96d 	bl	8009292 <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8007fb8:	e061      	b.n	800807e <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 f8f7 	bl	80091b0 <USBD_CtlError>
					ret = USBD_FAIL;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	75fb      	strb	r3, [r7, #23]
				break;
 8007fc6:	e05a      	b.n	800807e <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_DESCRIPTOR:
				if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	885b      	ldrh	r3, [r3, #2]
 8007fcc:	0a1b      	lsrs	r3, r3, #8
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	2b22      	cmp	r3, #34	; 0x22
 8007fd2:	d108      	bne.n	8007fe6 <USBD_HID_Setup+0x13a>
				{
					len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	88db      	ldrh	r3, [r3, #6]
 8007fd8:	2b3f      	cmp	r3, #63	; 0x3f
 8007fda:	bf28      	it	cs
 8007fdc:	233f      	movcs	r3, #63	; 0x3f
 8007fde:	82bb      	strh	r3, [r7, #20]
					pbuf = HID_MOUSE_ReportDesc;
 8007fe0:	4b2d      	ldr	r3, [pc, #180]	; (8008098 <USBD_HID_Setup+0x1ec>)
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	e015      	b.n	8008012 <USBD_HID_Setup+0x166>
				}
				else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	0a1b      	lsrs	r3, r3, #8
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	2b21      	cmp	r3, #33	; 0x21
 8007ff0:	d108      	bne.n	8008004 <USBD_HID_Setup+0x158>
				{
					pbuf = USBD_HID_Desc;
 8007ff2:	4b2a      	ldr	r3, [pc, #168]	; (800809c <USBD_HID_Setup+0x1f0>)
 8007ff4:	613b      	str	r3, [r7, #16]
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	88db      	ldrh	r3, [r3, #6]
 8007ffa:	2b09      	cmp	r3, #9
 8007ffc:	bf28      	it	cs
 8007ffe:	2309      	movcs	r3, #9
 8008000:	82bb      	strh	r3, [r7, #20]
 8008002:	e006      	b.n	8008012 <USBD_HID_Setup+0x166>
				}
				else
				{
					USBD_CtlError(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 f8d2 	bl	80091b0 <USBD_CtlError>
					ret = USBD_FAIL;
 800800c:	2303      	movs	r3, #3
 800800e:	75fb      	strb	r3, [r7, #23]
					break;
 8008010:	e035      	b.n	800807e <USBD_HID_Setup+0x1d2>
				}
				(void)USBD_CtlSendData(pdev, pbuf, len);
 8008012:	8abb      	ldrh	r3, [r7, #20]
 8008014:	461a      	mov	r2, r3
 8008016:	6939      	ldr	r1, [r7, #16]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 f93a 	bl	8009292 <USBD_CtlSendData>
				break;
 800801e:	e02e      	b.n	800807e <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008026:	2b03      	cmp	r3, #3
 8008028:	d107      	bne.n	800803a <USBD_HID_Setup+0x18e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	3308      	adds	r3, #8
 800802e:	2201      	movs	r2, #1
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 f92d 	bl	8009292 <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8008038:	e021      	b.n	800807e <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 f8b7 	bl	80091b0 <USBD_CtlError>
					ret = USBD_FAIL;
 8008042:	2303      	movs	r3, #3
 8008044:	75fb      	strb	r3, [r7, #23]
				break;
 8008046:	e01a      	b.n	800807e <USBD_HID_Setup+0x1d2>

			case USB_REQ_SET_INTERFACE:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804e:	2b03      	cmp	r3, #3
 8008050:	d106      	bne.n	8008060 <USBD_HID_Setup+0x1b4>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	885b      	ldrh	r3, [r3, #2]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	461a      	mov	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	609a      	str	r2, [r3, #8]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 800805e:	e00e      	b.n	800807e <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 f8a4 	bl	80091b0 <USBD_CtlError>
					ret = USBD_FAIL;
 8008068:	2303      	movs	r3, #3
 800806a:	75fb      	strb	r3, [r7, #23]
				break;
 800806c:	e007      	b.n	800807e <USBD_HID_Setup+0x1d2>

			case USB_REQ_CLEAR_FEATURE:
				break;

			default:
				USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f89d 	bl	80091b0 <USBD_CtlError>
				ret = USBD_FAIL;
 8008076:	2303      	movs	r3, #3
 8008078:	75fb      	strb	r3, [r7, #23]
				break;
 800807a:	e000      	b.n	800807e <USBD_HID_Setup+0x1d2>
				break;
 800807c:	bf00      	nop
			}
			break;
 800807e:	e006      	b.n	800808e <USBD_HID_Setup+0x1e2>

			default:
				USBD_CtlError(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 f894 	bl	80091b0 <USBD_CtlError>
				ret = USBD_FAIL;
 8008088:	2303      	movs	r3, #3
 800808a:	75fb      	strb	r3, [r7, #23]
				break;
 800808c:	bf00      	nop
	}

	return (uint8_t)ret;
 800808e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000278 	.word	0x20000278
 800809c:	20000260 	.word	0x20000260

080080a0 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	4613      	mov	r3, r2
 80080ac:	80fb      	strh	r3, [r7, #6]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080b4:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d10c      	bne.n	80080da <USBD_HID_SendReport+0x3a>
	{
		if (hhid->state == HID_IDLE)
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	7b1b      	ldrb	r3, [r3, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d108      	bne.n	80080da <USBD_HID_SendReport+0x3a>
		{
			hhid->state = HID_BUSY;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2201      	movs	r2, #1
 80080cc:	731a      	strb	r2, [r3, #12]
			(void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	2181      	movs	r1, #129	; 0x81
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f001 fe28 	bl	8009d2a <USBD_LL_Transmit>
		}
	}

	return (uint8_t)USBD_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2222      	movs	r2, #34	; 0x22
 80080f0:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgFSDesc;
 80080f2:	4b03      	ldr	r3, [pc, #12]	; (8008100 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	200001f4 	.word	0x200001f4

08008104 <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2222      	movs	r2, #34	; 0x22
 8008110:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgHSDesc;
 8008112:	4b03      	ldr	r3, [pc, #12]	; (8008120 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008114:	4618      	mov	r0, r3
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	20000218 	.word	0x20000218

08008124 <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2222      	movs	r2, #34	; 0x22
 8008130:	801a      	strh	r2, [r3, #0]

	return USBD_HID_OtherSpeedCfgDesc;
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	2000023c 	.word	0x2000023c

08008144 <USBD_HID_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
	UNUSED(epnum);
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008156:	2200      	movs	r2, #0
 8008158:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	220a      	movs	r2, #10
 8008174:	801a      	strh	r2, [r3, #0]

	return USBD_HID_DeviceQualifierDesc;
 8008176:	4b03      	ldr	r3, [pc, #12]	; (8008184 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008178:	4618      	mov	r0, r3
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	2000026c 	.word	0x2000026c

08008188 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4613      	mov	r3, r2
 8008194:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800819c:	2303      	movs	r3, #3
 800819e:	e025      	b.n	80081ec <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	79fa      	ldrb	r2, [r7, #7]
 80081de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f001 fc6d 	bl	8009ac0 <USBD_LL_Init>
 80081e6:	4603      	mov	r3, r0
 80081e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008208:	2303      	movs	r3, #3
 800820a:	e010      	b.n	800822e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821c:	f107 020e 	add.w	r2, r7, #14
 8008220:	4610      	mov	r0, r2
 8008222:	4798      	blx	r3
 8008224:	4602      	mov	r2, r0
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 fc8a 	bl	8009b58 <USBD_LL_Start>
 8008244:	4603      	mov	r3, r0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008270:	2303      	movs	r3, #3
 8008272:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827a:	2b00      	cmp	r3, #0
 800827c:	d009      	beq.n	8008292 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	78fa      	ldrb	r2, [r7, #3]
 8008288:	4611      	mov	r1, r2
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
 800828e:	4603      	mov	r3, r0
 8008290:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008292:	7bfb      	ldrb	r3, [r7, #15]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d007      	beq.n	80082c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	4611      	mov	r1, r2
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
  }

  return USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 ff2c 	bl	800913c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80082f2:	461a      	mov	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008300:	f003 031f 	and.w	r3, r3, #31
 8008304:	2b01      	cmp	r3, #1
 8008306:	d00e      	beq.n	8008326 <USBD_LL_SetupStage+0x5a>
 8008308:	2b01      	cmp	r3, #1
 800830a:	d302      	bcc.n	8008312 <USBD_LL_SetupStage+0x46>
 800830c:	2b02      	cmp	r3, #2
 800830e:	d014      	beq.n	800833a <USBD_LL_SetupStage+0x6e>
 8008310:	e01d      	b.n	800834e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa18 	bl	8008750 <USBD_StdDevReq>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]
      break;
 8008324:	e020      	b.n	8008368 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa7c 	bl	800882c <USBD_StdItfReq>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
      break;
 8008338:	e016      	b.n	8008368 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fab8 	bl	80088b8 <USBD_StdEPReq>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]
      break;
 800834c:	e00c      	b.n	8008368 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008354:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008358:	b2db      	uxtb	r3, r3
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 fc5b 	bl	8009c18 <USBD_LL_StallEP>
 8008362:	4603      	mov	r3, r0
 8008364:	73fb      	strb	r3, [r7, #15]
      break;
 8008366:	bf00      	nop
  }

  return ret;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b086      	sub	sp, #24
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	460b      	mov	r3, r1
 800837c:	607a      	str	r2, [r7, #4]
 800837e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d137      	bne.n	80083f6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800838c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008394:	2b03      	cmp	r3, #3
 8008396:	d14a      	bne.n	800842e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d913      	bls.n	80083cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	1ad2      	subs	r2, r2, r3
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	4293      	cmp	r3, r2
 80083bc:	bf28      	it	cs
 80083be:	4613      	movcs	r3, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 ffad 	bl	8009324 <USBD_CtlContinueRx>
 80083ca:	e030      	b.n	800842e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00a      	beq.n	80083ee <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d105      	bne.n	80083ee <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 ffa9 	bl	8009346 <USBD_CtlSendStatus>
 80083f4:	e01b      	b.n	800842e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d013      	beq.n	800842a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008408:	2b03      	cmp	r3, #3
 800840a:	d10e      	bne.n	800842a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	7afa      	ldrb	r2, [r7, #11]
 8008416:	4611      	mov	r1, r2
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	4798      	blx	r3
 800841c:	4603      	mov	r3, r0
 800841e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008426:	7dfb      	ldrb	r3, [r7, #23]
 8008428:	e002      	b.n	8008430 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800842a:	2303      	movs	r3, #3
 800842c:	e000      	b.n	8008430 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	460b      	mov	r3, r1
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d16a      	bne.n	8008522 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3314      	adds	r3, #20
 8008450:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008458:	2b02      	cmp	r3, #2
 800845a:	d155      	bne.n	8008508 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	429a      	cmp	r2, r3
 8008466:	d914      	bls.n	8008492 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	1ad2      	subs	r2, r2, r3
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	461a      	mov	r2, r3
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 ff22 	bl	80092c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008484:	2300      	movs	r3, #0
 8008486:	2200      	movs	r2, #0
 8008488:	2100      	movs	r1, #0
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f001 fc6e 	bl	8009d6c <USBD_LL_PrepareReceive>
 8008490:	e03a      	b.n	8008508 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	429a      	cmp	r2, r3
 800849c:	d11c      	bne.n	80084d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d316      	bcc.n	80084d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d20f      	bcs.n	80084d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084b8:	2200      	movs	r2, #0
 80084ba:	2100      	movs	r1, #0
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 ff03 	bl	80092c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084ca:	2300      	movs	r3, #0
 80084cc:	2200      	movs	r2, #0
 80084ce:	2100      	movs	r1, #0
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f001 fc4b 	bl	8009d6c <USBD_LL_PrepareReceive>
 80084d6:	e017      	b.n	8008508 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d105      	bne.n	80084fa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084fa:	2180      	movs	r1, #128	; 0x80
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f001 fb8b 	bl	8009c18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f000 ff32 	bl	800936c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800850e:	2b01      	cmp	r3, #1
 8008510:	d123      	bne.n	800855a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff fe9b 	bl	800824e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008520:	e01b      	b.n	800855a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d013      	beq.n	8008556 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008534:	2b03      	cmp	r3, #3
 8008536:	d10e      	bne.n	8008556 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	7afa      	ldrb	r2, [r7, #11]
 8008542:	4611      	mov	r1, r2
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	4798      	blx	r3
 8008548:	4603      	mov	r3, r0
 800854a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800854c:	7dfb      	ldrb	r3, [r7, #23]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	e002      	b.n	800855c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008556:	2303      	movs	r3, #3
 8008558:	e000      	b.n	800855c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008590:	2b00      	cmp	r3, #0
 8008592:	d009      	beq.n	80085a8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6852      	ldr	r2, [r2, #4]
 80085a0:	b2d2      	uxtb	r2, r2
 80085a2:	4611      	mov	r1, r2
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085a8:	2340      	movs	r3, #64	; 0x40
 80085aa:	2200      	movs	r2, #0
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 faed 	bl	8009b8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2240      	movs	r2, #64	; 0x40
 80085c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085c4:	2340      	movs	r3, #64	; 0x40
 80085c6:	2200      	movs	r2, #0
 80085c8:	2180      	movs	r1, #128	; 0x80
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f001 fadf 	bl	8009b8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2240      	movs	r2, #64	; 0x40
 80085da:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	460b      	mov	r3, r1
 80085f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	78fa      	ldrb	r2, [r7, #3]
 80085f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2204      	movs	r2, #4
 800861e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863e:	2b04      	cmp	r3, #4
 8008640:	d105      	bne.n	800864e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800866a:	2b03      	cmp	r3, #3
 800866c:	d10b      	bne.n	8008686 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d005      	beq.n	8008686 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	460b      	mov	r3, r1
 80086b4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d009      	beq.n	8008708 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	6852      	ldr	r2, [r2, #4]
 8008700:	b2d2      	uxtb	r2, r2
 8008702:	4611      	mov	r1, r2
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	4798      	blx	r3
  }

  return USBD_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008712:	b480      	push	{r7}
 8008714:	b087      	sub	sp, #28
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	3301      	adds	r3, #1
 8008728:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008730:	8a3b      	ldrh	r3, [r7, #16]
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	b21a      	sxth	r2, r3
 8008736:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800873a:	4313      	orrs	r3, r2
 800873c:	b21b      	sxth	r3, r3
 800873e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008740:	89fb      	ldrh	r3, [r7, #14]
}
 8008742:	4618      	mov	r0, r3
 8008744:	371c      	adds	r7, #28
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
	...

08008750 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008766:	2b20      	cmp	r3, #32
 8008768:	d004      	beq.n	8008774 <USBD_StdDevReq+0x24>
 800876a:	2b40      	cmp	r3, #64	; 0x40
 800876c:	d002      	beq.n	8008774 <USBD_StdDevReq+0x24>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <USBD_StdDevReq+0x38>
 8008772:	e050      	b.n	8008816 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]
    break;
 8008786:	e04b      	b.n	8008820 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	2b09      	cmp	r3, #9
 800878e:	d83c      	bhi.n	800880a <USBD_StdDevReq+0xba>
 8008790:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <USBD_StdDevReq+0x48>)
 8008792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008796:	bf00      	nop
 8008798:	080087ed 	.word	0x080087ed
 800879c:	08008801 	.word	0x08008801
 80087a0:	0800880b 	.word	0x0800880b
 80087a4:	080087f7 	.word	0x080087f7
 80087a8:	0800880b 	.word	0x0800880b
 80087ac:	080087cb 	.word	0x080087cb
 80087b0:	080087c1 	.word	0x080087c1
 80087b4:	0800880b 	.word	0x0800880b
 80087b8:	080087e3 	.word	0x080087e3
 80087bc:	080087d5 	.word	0x080087d5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f9ce 	bl	8008b64 <USBD_GetDescriptor>
      break;
 80087c8:	e024      	b.n	8008814 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fb33 	bl	8008e38 <USBD_SetAddress>
      break;
 80087d2:	e01f      	b.n	8008814 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fb70 	bl	8008ebc <USBD_SetConfig>
 80087dc:	4603      	mov	r3, r0
 80087de:	73fb      	strb	r3, [r7, #15]
      break;
 80087e0:	e018      	b.n	8008814 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fc0d 	bl	8009004 <USBD_GetConfig>
      break;
 80087ea:	e013      	b.n	8008814 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fc3c 	bl	800906c <USBD_GetStatus>
      break;
 80087f4:	e00e      	b.n	8008814 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fc6a 	bl	80090d2 <USBD_SetFeature>
      break;
 80087fe:	e009      	b.n	8008814 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fc79 	bl	80090fa <USBD_ClrFeature>
      break;
 8008808:	e004      	b.n	8008814 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fccf 	bl	80091b0 <USBD_CtlError>
      break;
 8008812:	bf00      	nop
    }
    break;
 8008814:	e004      	b.n	8008820 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fcc9 	bl	80091b0 <USBD_CtlError>
    break;
 800881e:	bf00      	nop
  }

  return ret;
 8008820:	7bfb      	ldrb	r3, [r7, #15]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop

0800882c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008842:	2b20      	cmp	r3, #32
 8008844:	d003      	beq.n	800884e <USBD_StdItfReq+0x22>
 8008846:	2b40      	cmp	r3, #64	; 0x40
 8008848:	d001      	beq.n	800884e <USBD_StdItfReq+0x22>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d12a      	bne.n	80088a4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008854:	3b01      	subs	r3, #1
 8008856:	2b02      	cmp	r3, #2
 8008858:	d81d      	bhi.n	8008896 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	889b      	ldrh	r3, [r3, #4]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b01      	cmp	r3, #1
 8008862:	d813      	bhi.n	800888c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4798      	blx	r3
 8008872:	4603      	mov	r3, r0
 8008874:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	88db      	ldrh	r3, [r3, #6]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d110      	bne.n	80088a0 <USBD_StdItfReq+0x74>
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10d      	bne.n	80088a0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fd5e 	bl	8009346 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800888a:	e009      	b.n	80088a0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fc8e 	bl	80091b0 <USBD_CtlError>
      break;
 8008894:	e004      	b.n	80088a0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc89 	bl	80091b0 <USBD_CtlError>
      break;
 800889e:	e000      	b.n	80088a2 <USBD_StdItfReq+0x76>
      break;
 80088a0:	bf00      	nop
    }
    break;
 80088a2:	e004      	b.n	80088ae <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fc82 	bl	80091b0 <USBD_CtlError>
    break;
 80088ac:	bf00      	nop
  }

  return ret;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	889b      	ldrh	r3, [r3, #4]
 80088ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	d004      	beq.n	80088e2 <USBD_StdEPReq+0x2a>
 80088d8:	2b40      	cmp	r3, #64	; 0x40
 80088da:	d002      	beq.n	80088e2 <USBD_StdEPReq+0x2a>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <USBD_StdEPReq+0x3e>
 80088e0:	e135      	b.n	8008b4e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
 80088f0:	4603      	mov	r3, r0
 80088f2:	73fb      	strb	r3, [r7, #15]
    break;
 80088f4:	e130      	b.n	8008b58 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d03e      	beq.n	800897c <USBD_StdEPReq+0xc4>
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d002      	beq.n	8008908 <USBD_StdEPReq+0x50>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d077      	beq.n	80089f6 <USBD_StdEPReq+0x13e>
 8008906:	e11c      	b.n	8008b42 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890e:	2b02      	cmp	r3, #2
 8008910:	d002      	beq.n	8008918 <USBD_StdEPReq+0x60>
 8008912:	2b03      	cmp	r3, #3
 8008914:	d015      	beq.n	8008942 <USBD_StdEPReq+0x8a>
 8008916:	e02b      	b.n	8008970 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00c      	beq.n	8008938 <USBD_StdEPReq+0x80>
 800891e:	7bbb      	ldrb	r3, [r7, #14]
 8008920:	2b80      	cmp	r3, #128	; 0x80
 8008922:	d009      	beq.n	8008938 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 f975 	bl	8009c18 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800892e:	2180      	movs	r1, #128	; 0x80
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 f971 	bl	8009c18 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008936:	e020      	b.n	800897a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fc38 	bl	80091b0 <USBD_CtlError>
        break;
 8008940:	e01b      	b.n	800897a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	885b      	ldrh	r3, [r3, #2]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10e      	bne.n	8008968 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00b      	beq.n	8008968 <USBD_StdEPReq+0xb0>
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	2b80      	cmp	r3, #128	; 0x80
 8008954:	d008      	beq.n	8008968 <USBD_StdEPReq+0xb0>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	88db      	ldrh	r3, [r3, #6]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d104      	bne.n	8008968 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 f958 	bl	8009c18 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fcec 	bl	8009346 <USBD_CtlSendStatus>

        break;
 800896e:	e004      	b.n	800897a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fc1c 	bl	80091b0 <USBD_CtlError>
        break;
 8008978:	bf00      	nop
      }
      break;
 800897a:	e0e7      	b.n	8008b4c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008982:	2b02      	cmp	r3, #2
 8008984:	d002      	beq.n	800898c <USBD_StdEPReq+0xd4>
 8008986:	2b03      	cmp	r3, #3
 8008988:	d015      	beq.n	80089b6 <USBD_StdEPReq+0xfe>
 800898a:	e02d      	b.n	80089e8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00c      	beq.n	80089ac <USBD_StdEPReq+0xf4>
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	2b80      	cmp	r3, #128	; 0x80
 8008996:	d009      	beq.n	80089ac <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 f93b 	bl	8009c18 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089a2:	2180      	movs	r1, #128	; 0x80
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f001 f937 	bl	8009c18 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80089aa:	e023      	b.n	80089f4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fbfe 	bl	80091b0 <USBD_CtlError>
        break;
 80089b4:	e01e      	b.n	80089f4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	885b      	ldrh	r3, [r3, #2]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d119      	bne.n	80089f2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 f942 	bl	8009c56 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fcb7 	bl	8009346 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
        }
        break;
 80089e6:	e004      	b.n	80089f2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fbe0 	bl	80091b0 <USBD_CtlError>
        break;
 80089f0:	e000      	b.n	80089f4 <USBD_StdEPReq+0x13c>
        break;
 80089f2:	bf00      	nop
      }
      break;
 80089f4:	e0aa      	b.n	8008b4c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d002      	beq.n	8008a06 <USBD_StdEPReq+0x14e>
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d032      	beq.n	8008a6a <USBD_StdEPReq+0x1b2>
 8008a04:	e097      	b.n	8008b36 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <USBD_StdEPReq+0x164>
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b80      	cmp	r3, #128	; 0x80
 8008a10:	d004      	beq.n	8008a1c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fbcb 	bl	80091b0 <USBD_CtlError>
          break;
 8008a1a:	e091      	b.n	8008b40 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	da0b      	bge.n	8008a3c <USBD_StdEPReq+0x184>
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	3310      	adds	r3, #16
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	4413      	add	r3, r2
 8008a38:	3304      	adds	r3, #4
 8008a3a:	e00b      	b.n	8008a54 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	4413      	add	r3, r2
 8008a52:	3304      	adds	r3, #4
 8008a54:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fc15 	bl	8009292 <USBD_CtlSendData>
        break;
 8008a68:	e06a      	b.n	8008b40 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008a6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	da11      	bge.n	8008a96 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	f003 020f 	and.w	r2, r3, #15
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	440b      	add	r3, r1
 8008a84:	3324      	adds	r3, #36	; 0x24
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d117      	bne.n	8008abc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fb8e 	bl	80091b0 <USBD_CtlError>
            break;
 8008a94:	e054      	b.n	8008b40 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	f003 020f 	and.w	r2, r3, #15
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	440b      	add	r3, r1
 8008aa8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d104      	bne.n	8008abc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fb7b 	bl	80091b0 <USBD_CtlError>
            break;
 8008aba:	e041      	b.n	8008b40 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	da0b      	bge.n	8008adc <USBD_StdEPReq+0x224>
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
 8008ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aca:	4613      	mov	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4413      	add	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	3310      	adds	r3, #16
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	3304      	adds	r3, #4
 8008ada:	e00b      	b.n	8008af4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	4413      	add	r3, r2
 8008af2:	3304      	adds	r3, #4
 8008af4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <USBD_StdEPReq+0x24a>
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	2b80      	cmp	r3, #128	; 0x80
 8008b00:	d103      	bne.n	8008b0a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	e00e      	b.n	8008b28 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f001 f8c0 	bl	8009c94 <USBD_LL_IsStallEP>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	e002      	b.n	8008b28 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fbaf 	bl	8009292 <USBD_CtlSendData>
          break;
 8008b34:	e004      	b.n	8008b40 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fb39 	bl	80091b0 <USBD_CtlError>
        break;
 8008b3e:	bf00      	nop
      }
      break;
 8008b40:	e004      	b.n	8008b4c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fb33 	bl	80091b0 <USBD_CtlError>
      break;
 8008b4a:	bf00      	nop
    }
    break;
 8008b4c:	e004      	b.n	8008b58 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fb2d 	bl	80091b0 <USBD_CtlError>
    break;
 8008b56:	bf00      	nop
  }

  return ret;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	0a1b      	lsrs	r3, r3, #8
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	3b01      	subs	r3, #1
 8008b84:	2b06      	cmp	r3, #6
 8008b86:	f200 8128 	bhi.w	8008dda <USBD_GetDescriptor+0x276>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <USBD_GetDescriptor+0x2c>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008bad 	.word	0x08008bad
 8008b94:	08008bc5 	.word	0x08008bc5
 8008b98:	08008c05 	.word	0x08008c05
 8008b9c:	08008ddb 	.word	0x08008ddb
 8008ba0:	08008ddb 	.word	0x08008ddb
 8008ba4:	08008d7b 	.word	0x08008d7b
 8008ba8:	08008da7 	.word	0x08008da7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	7c12      	ldrb	r2, [r2, #16]
 8008bb8:	f107 0108 	add.w	r1, r7, #8
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
 8008bc0:	60f8      	str	r0, [r7, #12]
    break;
 8008bc2:	e112      	b.n	8008dea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	7c1b      	ldrb	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10d      	bne.n	8008be8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd4:	f107 0208 	add.w	r2, r7, #8
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
 8008bdc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3301      	adds	r3, #1
 8008be2:	2202      	movs	r2, #2
 8008be4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008be6:	e100      	b.n	8008dea <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	f107 0208 	add.w	r2, r7, #8
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4798      	blx	r3
 8008bf8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	2202      	movs	r2, #2
 8008c00:	701a      	strb	r2, [r3, #0]
    break;
 8008c02:	e0f2      	b.n	8008dea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	885b      	ldrh	r3, [r3, #2]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	f200 80ac 	bhi.w	8008d68 <USBD_GetDescriptor+0x204>
 8008c10:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <USBD_GetDescriptor+0xb4>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c31 	.word	0x08008c31
 8008c1c:	08008c65 	.word	0x08008c65
 8008c20:	08008c99 	.word	0x08008c99
 8008c24:	08008ccd 	.word	0x08008ccd
 8008c28:	08008d01 	.word	0x08008d01
 8008c2c:	08008d35 	.word	0x08008d35
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00b      	beq.n	8008c54 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	7c12      	ldrb	r2, [r2, #16]
 8008c48:	f107 0108 	add.w	r1, r7, #8
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4798      	blx	r3
 8008c50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c52:	e091      	b.n	8008d78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 faaa 	bl	80091b0 <USBD_CtlError>
        err++;
 8008c5c:	7afb      	ldrb	r3, [r7, #11]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	72fb      	strb	r3, [r7, #11]
      break;
 8008c62:	e089      	b.n	8008d78 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00b      	beq.n	8008c88 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	7c12      	ldrb	r2, [r2, #16]
 8008c7c:	f107 0108 	add.w	r1, r7, #8
 8008c80:	4610      	mov	r0, r2
 8008c82:	4798      	blx	r3
 8008c84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c86:	e077      	b.n	8008d78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa90 	bl	80091b0 <USBD_CtlError>
        err++;
 8008c90:	7afb      	ldrb	r3, [r7, #11]
 8008c92:	3301      	adds	r3, #1
 8008c94:	72fb      	strb	r3, [r7, #11]
      break;
 8008c96:	e06f      	b.n	8008d78 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	7c12      	ldrb	r2, [r2, #16]
 8008cb0:	f107 0108 	add.w	r1, r7, #8
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	4798      	blx	r3
 8008cb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cba:	e05d      	b.n	8008d78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fa76 	bl	80091b0 <USBD_CtlError>
        err++;
 8008cc4:	7afb      	ldrb	r3, [r7, #11]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	72fb      	strb	r3, [r7, #11]
      break;
 8008cca:	e055      	b.n	8008d78 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00b      	beq.n	8008cf0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	7c12      	ldrb	r2, [r2, #16]
 8008ce4:	f107 0108 	add.w	r1, r7, #8
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4798      	blx	r3
 8008cec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cee:	e043      	b.n	8008d78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fa5c 	bl	80091b0 <USBD_CtlError>
        err++;
 8008cf8:	7afb      	ldrb	r3, [r7, #11]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	72fb      	strb	r3, [r7, #11]
      break;
 8008cfe:	e03b      	b.n	8008d78 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	7c12      	ldrb	r2, [r2, #16]
 8008d18:	f107 0108 	add.w	r1, r7, #8
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d22:	e029      	b.n	8008d78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fa42 	bl	80091b0 <USBD_CtlError>
        err++;
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	72fb      	strb	r3, [r7, #11]
      break;
 8008d32:	e021      	b.n	8008d78 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	7c12      	ldrb	r2, [r2, #16]
 8008d4c:	f107 0108 	add.w	r1, r7, #8
 8008d50:	4610      	mov	r0, r2
 8008d52:	4798      	blx	r3
 8008d54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d56:	e00f      	b.n	8008d78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fa28 	bl	80091b0 <USBD_CtlError>
        err++;
 8008d60:	7afb      	ldrb	r3, [r7, #11]
 8008d62:	3301      	adds	r3, #1
 8008d64:	72fb      	strb	r3, [r7, #11]
      break;
 8008d66:	e007      	b.n	8008d78 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa20 	bl	80091b0 <USBD_CtlError>
      err++;
 8008d70:	7afb      	ldrb	r3, [r7, #11]
 8008d72:	3301      	adds	r3, #1
 8008d74:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008d76:	bf00      	nop
    }
    break;
 8008d78:	e037      	b.n	8008dea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	7c1b      	ldrb	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d109      	bne.n	8008d96 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8a:	f107 0208 	add.w	r2, r7, #8
 8008d8e:	4610      	mov	r0, r2
 8008d90:	4798      	blx	r3
 8008d92:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d94:	e029      	b.n	8008dea <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fa09 	bl	80091b0 <USBD_CtlError>
      err++;
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	3301      	adds	r3, #1
 8008da2:	72fb      	strb	r3, [r7, #11]
    break;
 8008da4:	e021      	b.n	8008dea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	7c1b      	ldrb	r3, [r3, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10d      	bne.n	8008dca <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db6:	f107 0208 	add.w	r2, r7, #8
 8008dba:	4610      	mov	r0, r2
 8008dbc:	4798      	blx	r3
 8008dbe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	2207      	movs	r2, #7
 8008dc6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008dc8:	e00f      	b.n	8008dea <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f9ef 	bl	80091b0 <USBD_CtlError>
      err++;
 8008dd2:	7afb      	ldrb	r3, [r7, #11]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	72fb      	strb	r3, [r7, #11]
    break;
 8008dd8:	e007      	b.n	8008dea <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f9e7 	bl	80091b0 <USBD_CtlError>
    err++;
 8008de2:	7afb      	ldrb	r3, [r7, #11]
 8008de4:	3301      	adds	r3, #1
 8008de6:	72fb      	strb	r3, [r7, #11]
    break;
 8008de8:	bf00      	nop
  }

  if (err != 0U)
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d11e      	bne.n	8008e2e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	88db      	ldrh	r3, [r3, #6]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d016      	beq.n	8008e26 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008df8:	893b      	ldrh	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00e      	beq.n	8008e1c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	88da      	ldrh	r2, [r3, #6]
 8008e02:	893b      	ldrh	r3, [r7, #8]
 8008e04:	4293      	cmp	r3, r2
 8008e06:	bf28      	it	cs
 8008e08:	4613      	movcs	r3, r2
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e0e:	893b      	ldrh	r3, [r7, #8]
 8008e10:	461a      	mov	r2, r3
 8008e12:	68f9      	ldr	r1, [r7, #12]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fa3c 	bl	8009292 <USBD_CtlSendData>
 8008e1a:	e009      	b.n	8008e30 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f9c6 	bl	80091b0 <USBD_CtlError>
 8008e24:	e004      	b.n	8008e30 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fa8d 	bl	8009346 <USBD_CtlSendStatus>
 8008e2c:	e000      	b.n	8008e30 <USBD_GetDescriptor+0x2cc>
    return;
 8008e2e:	bf00      	nop
    }
  }
}
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop

08008e38 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	889b      	ldrh	r3, [r3, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d130      	bne.n	8008eac <USBD_SetAddress+0x74>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	88db      	ldrh	r3, [r3, #6]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d12c      	bne.n	8008eac <USBD_SetAddress+0x74>
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	885b      	ldrh	r3, [r3, #2]
 8008e56:	2b7f      	cmp	r3, #127	; 0x7f
 8008e58:	d828      	bhi.n	8008eac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	885b      	ldrh	r3, [r3, #2]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d104      	bne.n	8008e7a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f99c 	bl	80091b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e78:	e01c      	b.n	8008eb4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	7bfa      	ldrb	r2, [r7, #15]
 8008e7e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 ff30 	bl	8009cec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fa5a 	bl	8009346 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d004      	beq.n	8008ea2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea0:	e008      	b.n	8008eb4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eaa:	e003      	b.n	8008eb4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f97e 	bl	80091b0 <USBD_CtlError>
  }
}
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	885b      	ldrh	r3, [r3, #2]
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	4b4b      	ldr	r3, [pc, #300]	; (8009000 <USBD_SetConfig+0x144>)
 8008ed2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ed4:	4b4a      	ldr	r3, [pc, #296]	; (8009000 <USBD_SetConfig+0x144>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d905      	bls.n	8008ee8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f966 	bl	80091b0 <USBD_CtlError>
    return USBD_FAIL;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e087      	b.n	8008ff8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d002      	beq.n	8008ef8 <USBD_SetConfig+0x3c>
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d025      	beq.n	8008f42 <USBD_SetConfig+0x86>
 8008ef6:	e071      	b.n	8008fdc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008ef8:	4b41      	ldr	r3, [pc, #260]	; (8009000 <USBD_SetConfig+0x144>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d01c      	beq.n	8008f3a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008f00:	4b3f      	ldr	r3, [pc, #252]	; (8009000 <USBD_SetConfig+0x144>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f0a:	4b3d      	ldr	r3, [pc, #244]	; (8009000 <USBD_SetConfig+0x144>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff f9a7 	bl	8008264 <USBD_SetClassConfig>
 8008f16:	4603      	mov	r3, r0
 8008f18:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f944 	bl	80091b0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f28:	e065      	b.n	8008ff6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fa0b 	bl	8009346 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2203      	movs	r2, #3
 8008f34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f38:	e05d      	b.n	8008ff6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fa03 	bl	8009346 <USBD_CtlSendStatus>
    break;
 8008f40:	e059      	b.n	8008ff6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008f42:	4b2f      	ldr	r3, [pc, #188]	; (8009000 <USBD_SetConfig+0x144>)
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d112      	bne.n	8008f70 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008f52:	4b2b      	ldr	r3, [pc, #172]	; (8009000 <USBD_SetConfig+0x144>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f5c:	4b28      	ldr	r3, [pc, #160]	; (8009000 <USBD_SetConfig+0x144>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff f99a 	bl	800829c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f9ec 	bl	8009346 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f6e:	e042      	b.n	8008ff6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008f70:	4b23      	ldr	r3, [pc, #140]	; (8009000 <USBD_SetConfig+0x144>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	461a      	mov	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d02a      	beq.n	8008fd4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff f988 	bl	800829c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008f8c:	4b1c      	ldr	r3, [pc, #112]	; (8009000 <USBD_SetConfig+0x144>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f96:	4b1a      	ldr	r3, [pc, #104]	; (8009000 <USBD_SetConfig+0x144>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff f961 	bl	8008264 <USBD_SetClassConfig>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00f      	beq.n	8008fcc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f8fe 	bl	80091b0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff f96d 	bl	800829c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008fca:	e014      	b.n	8008ff6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f9ba 	bl	8009346 <USBD_CtlSendStatus>
    break;
 8008fd2:	e010      	b.n	8008ff6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f9b6 	bl	8009346 <USBD_CtlSendStatus>
    break;
 8008fda:	e00c      	b.n	8008ff6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f8e6 	bl	80091b0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fe4:	4b06      	ldr	r3, [pc, #24]	; (8009000 <USBD_SetConfig+0x144>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff f956 	bl	800829c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff4:	bf00      	nop
  }

  return ret;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20000824 	.word	0x20000824

08009004 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	88db      	ldrh	r3, [r3, #6]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d004      	beq.n	8009020 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f8c9 	bl	80091b0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800901e:	e021      	b.n	8009064 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009026:	2b01      	cmp	r3, #1
 8009028:	db17      	blt.n	800905a <USBD_GetConfig+0x56>
 800902a:	2b02      	cmp	r3, #2
 800902c:	dd02      	ble.n	8009034 <USBD_GetConfig+0x30>
 800902e:	2b03      	cmp	r3, #3
 8009030:	d00b      	beq.n	800904a <USBD_GetConfig+0x46>
 8009032:	e012      	b.n	800905a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	3308      	adds	r3, #8
 800903e:	2201      	movs	r2, #1
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f925 	bl	8009292 <USBD_CtlSendData>
      break;
 8009048:	e00c      	b.n	8009064 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3304      	adds	r3, #4
 800904e:	2201      	movs	r2, #1
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f91d 	bl	8009292 <USBD_CtlSendData>
      break;
 8009058:	e004      	b.n	8009064 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f8a7 	bl	80091b0 <USBD_CtlError>
      break;
 8009062:	bf00      	nop
}
 8009064:	bf00      	nop
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800907c:	3b01      	subs	r3, #1
 800907e:	2b02      	cmp	r3, #2
 8009080:	d81e      	bhi.n	80090c0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	88db      	ldrh	r3, [r3, #6]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d004      	beq.n	8009094 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f88f 	bl	80091b0 <USBD_CtlError>
      break;
 8009092:	e01a      	b.n	80090ca <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f043 0202 	orr.w	r2, r3, #2
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	330c      	adds	r3, #12
 80090b4:	2202      	movs	r2, #2
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f8ea 	bl	8009292 <USBD_CtlSendData>
    break;
 80090be:	e004      	b.n	80090ca <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f874 	bl	80091b0 <USBD_CtlError>
    break;
 80090c8:	bf00      	nop
  }
}
 80090ca:	bf00      	nop
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	885b      	ldrh	r3, [r3, #2]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d106      	bne.n	80090f2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f92a 	bl	8009346 <USBD_CtlSendStatus>
  }
}
 80090f2:	bf00      	nop
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b082      	sub	sp, #8
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800910a:	3b01      	subs	r3, #1
 800910c:	2b02      	cmp	r3, #2
 800910e:	d80b      	bhi.n	8009128 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	885b      	ldrh	r3, [r3, #2]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d10c      	bne.n	8009132 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f910 	bl	8009346 <USBD_CtlSendStatus>
      }
      break;
 8009126:	e004      	b.n	8009132 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f840 	bl	80091b0 <USBD_CtlError>
      break;
 8009130:	e000      	b.n	8009134 <USBD_ClrFeature+0x3a>
      break;
 8009132:	bf00      	nop
  }
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	781a      	ldrb	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3301      	adds	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	781a      	ldrb	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3301      	adds	r3, #1
 8009164:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f7ff fad3 	bl	8008712 <SWAPBYTE>
 800916c:	4603      	mov	r3, r0
 800916e:	461a      	mov	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3301      	adds	r3, #1
 8009178:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3301      	adds	r3, #1
 800917e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f7ff fac6 	bl	8008712 <SWAPBYTE>
 8009186:	4603      	mov	r3, r0
 8009188:	461a      	mov	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3301      	adds	r3, #1
 8009192:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3301      	adds	r3, #1
 8009198:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f7ff fab9 	bl	8008712 <SWAPBYTE>
 80091a0:	4603      	mov	r3, r0
 80091a2:	461a      	mov	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	80da      	strh	r2, [r3, #6]
}
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091ba:	2180      	movs	r1, #128	; 0x80
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fd2b 	bl	8009c18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091c2:	2100      	movs	r1, #0
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fd27 	bl	8009c18 <USBD_LL_StallEP>
}
 80091ca:	bf00      	nop
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b086      	sub	sp, #24
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d036      	beq.n	8009256 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091ec:	6938      	ldr	r0, [r7, #16]
 80091ee:	f000 f836 	bl	800925e <USBD_GetLen>
 80091f2:	4603      	mov	r3, r0
 80091f4:	3301      	adds	r3, #1
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009200:	7dfb      	ldrb	r3, [r7, #23]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	4413      	add	r3, r2
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	7812      	ldrb	r2, [r2, #0]
 800920a:	701a      	strb	r2, [r3, #0]
  idx++;
 800920c:	7dfb      	ldrb	r3, [r7, #23]
 800920e:	3301      	adds	r3, #1
 8009210:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	4413      	add	r3, r2
 8009218:	2203      	movs	r2, #3
 800921a:	701a      	strb	r2, [r3, #0]
  idx++;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	3301      	adds	r3, #1
 8009220:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009222:	e013      	b.n	800924c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	4413      	add	r3, r2
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	7812      	ldrb	r2, [r2, #0]
 800922e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	3301      	adds	r3, #1
 8009234:	613b      	str	r3, [r7, #16]
    idx++;
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	3301      	adds	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	4413      	add	r3, r2
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
    idx++;
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	3301      	adds	r3, #1
 800924a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e7      	bne.n	8009224 <USBD_GetString+0x52>
 8009254:	e000      	b.n	8009258 <USBD_GetString+0x86>
    return;
 8009256:	bf00      	nop
  }
}
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800925e:	b480      	push	{r7}
 8009260:	b085      	sub	sp, #20
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800926e:	e005      	b.n	800927c <USBD_GetLen+0x1e>
  {
    len++;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	3301      	adds	r3, #1
 8009274:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	3301      	adds	r3, #1
 800927a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1f5      	bne.n	8009270 <USBD_GetLen+0x12>
  }

  return len;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2202      	movs	r2, #2
 80092a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	2100      	movs	r1, #0
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 fd36 	bl	8009d2a <USBD_LL_Transmit>

  return USBD_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	2100      	movs	r1, #0
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 fd25 	bl	8009d2a <USBD_LL_Transmit>

  return USBD_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b084      	sub	sp, #16
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	60b9      	str	r1, [r7, #8]
 80092f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2203      	movs	r2, #3
 80092fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	2100      	movs	r1, #0
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fd29 	bl	8009d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	2100      	movs	r1, #0
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fd18 	bl	8009d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2204      	movs	r2, #4
 8009352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009356:	2300      	movs	r3, #0
 8009358:	2200      	movs	r2, #0
 800935a:	2100      	movs	r1, #0
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fce4 	bl	8009d2a <USBD_LL_Transmit>

  return USBD_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2205      	movs	r2, #5
 8009378:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800937c:	2300      	movs	r3, #0
 800937e:	2200      	movs	r2, #0
 8009380:	2100      	movs	r1, #0
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fcf2 	bl	8009d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
	...

08009394 <MX_USB_DEVICE_Init>:
/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(uint8_t flag)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if(flag){
 800939e:	79fb      	ldrb	r3, [r7, #7]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d024      	beq.n	80093ee <MX_USB_DEVICE_Init+0x5a>
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc_SETUP, DEVICE_FS) != USBD_OK)
 80093a4:	2200      	movs	r2, #0
 80093a6:	4922      	ldr	r1, [pc, #136]	; (8009430 <MX_USB_DEVICE_Init+0x9c>)
 80093a8:	4822      	ldr	r0, [pc, #136]	; (8009434 <MX_USB_DEVICE_Init+0xa0>)
 80093aa:	f7fe feed 	bl	8008188 <USBD_Init>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <MX_USB_DEVICE_Init+0x24>
		{
			Error_Handler();
 80093b4:	f7f7 fed0 	bl	8001158 <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093b8:	491f      	ldr	r1, [pc, #124]	; (8009438 <MX_USB_DEVICE_Init+0xa4>)
 80093ba:	481e      	ldr	r0, [pc, #120]	; (8009434 <MX_USB_DEVICE_Init+0xa0>)
 80093bc:	f7fe ff1a 	bl	80081f4 <USBD_RegisterClass>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <MX_USB_DEVICE_Init+0x36>
		{
			Error_Handler();
 80093c6:	f7f7 fec7 	bl	8001158 <Error_Handler>
		}
		if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093ca:	491c      	ldr	r1, [pc, #112]	; (800943c <MX_USB_DEVICE_Init+0xa8>)
 80093cc:	4819      	ldr	r0, [pc, #100]	; (8009434 <MX_USB_DEVICE_Init+0xa0>)
 80093ce:	f7fe fc79 	bl	8007cc4 <USBD_CDC_RegisterInterface>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <MX_USB_DEVICE_Init+0x48>
		{
			Error_Handler();
 80093d8:	f7f7 febe 	bl	8001158 <Error_Handler>
		}
		if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093dc:	4815      	ldr	r0, [pc, #84]	; (8009434 <MX_USB_DEVICE_Init+0xa0>)
 80093de:	f7fe ff2a 	bl	8008236 <USBD_Start>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01e      	beq.n	8009426 <MX_USB_DEVICE_Init+0x92>
		{
			Error_Handler();
 80093e8:	f7f7 feb6 	bl	8001158 <Error_Handler>
		}
		return;
 80093ec:	e01b      	b.n	8009426 <MX_USB_DEVICE_Init+0x92>
	}

	/* USER CODE END USB_DEVICE_Init_PreTreatment */

	/* Init Device Library, add supported class and start the library. */
	if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093ee:	2200      	movs	r2, #0
 80093f0:	4913      	ldr	r1, [pc, #76]	; (8009440 <MX_USB_DEVICE_Init+0xac>)
 80093f2:	4810      	ldr	r0, [pc, #64]	; (8009434 <MX_USB_DEVICE_Init+0xa0>)
 80093f4:	f7fe fec8 	bl	8008188 <USBD_Init>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <MX_USB_DEVICE_Init+0x6e>
	{
		Error_Handler();
 80093fe:	f7f7 feab 	bl	8001158 <Error_Handler>
	}
	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009402:	4910      	ldr	r1, [pc, #64]	; (8009444 <MX_USB_DEVICE_Init+0xb0>)
 8009404:	480b      	ldr	r0, [pc, #44]	; (8009434 <MX_USB_DEVICE_Init+0xa0>)
 8009406:	f7fe fef5 	bl	80081f4 <USBD_RegisterClass>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <MX_USB_DEVICE_Init+0x80>
	{
		Error_Handler();
 8009410:	f7f7 fea2 	bl	8001158 <Error_Handler>
	}
	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009414:	4807      	ldr	r0, [pc, #28]	; (8009434 <MX_USB_DEVICE_Init+0xa0>)
 8009416:	f7fe ff0e 	bl	8008236 <USBD_Start>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d003      	beq.n	8009428 <MX_USB_DEVICE_Init+0x94>
	{
		Error_Handler();
 8009420:	f7f7 fe9a 	bl	8001158 <Error_Handler>
 8009424:	e000      	b.n	8009428 <MX_USB_DEVICE_Init+0x94>
		return;
 8009426:	bf00      	nop
	}

	/* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

	/* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	200002e8 	.word	0x200002e8
 8009434:	20000a3c 	.word	0x20000a3c
 8009438:	200000b8 	.word	0x200000b8
 800943c:	200002b8 	.word	0x200002b8
 8009440:	200002cc 	.word	0x200002cc
 8009444:	200001bc 	.word	0x200001bc

08009448 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800944c:	2200      	movs	r2, #0
 800944e:	4905      	ldr	r1, [pc, #20]	; (8009464 <CDC_Init_FS+0x1c>)
 8009450:	4805      	ldr	r0, [pc, #20]	; (8009468 <CDC_Init_FS+0x20>)
 8009452:	f7fe fc4c 	bl	8007cee <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009456:	4905      	ldr	r1, [pc, #20]	; (800946c <CDC_Init_FS+0x24>)
 8009458:	4803      	ldr	r0, [pc, #12]	; (8009468 <CDC_Init_FS+0x20>)
 800945a:	f7fe fc61 	bl	8007d20 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800945e:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8009460:	4618      	mov	r0, r3
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20000d4c 	.word	0x20000d4c
 8009468:	20000a3c 	.word	0x20000a3c
 800946c:	20000d0c 	.word	0x20000d0c

08009470 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009474:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8009476:	4618      	mov	r0, r3
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	6039      	str	r1, [r7, #0]
 800948a:	71fb      	strb	r3, [r7, #7]
 800948c:	4613      	mov	r3, r2
 800948e:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	2b23      	cmp	r3, #35	; 0x23
 8009494:	d84a      	bhi.n	800952c <CDC_Control_FS+0xac>
 8009496:	a201      	add	r2, pc, #4	; (adr r2, 800949c <CDC_Control_FS+0x1c>)
 8009498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949c:	0800952d 	.word	0x0800952d
 80094a0:	0800952d 	.word	0x0800952d
 80094a4:	0800952d 	.word	0x0800952d
 80094a8:	0800952d 	.word	0x0800952d
 80094ac:	0800952d 	.word	0x0800952d
 80094b0:	0800952d 	.word	0x0800952d
 80094b4:	0800952d 	.word	0x0800952d
 80094b8:	0800952d 	.word	0x0800952d
 80094bc:	0800952d 	.word	0x0800952d
 80094c0:	0800952d 	.word	0x0800952d
 80094c4:	0800952d 	.word	0x0800952d
 80094c8:	0800952d 	.word	0x0800952d
 80094cc:	0800952d 	.word	0x0800952d
 80094d0:	0800952d 	.word	0x0800952d
 80094d4:	0800952d 	.word	0x0800952d
 80094d8:	0800952d 	.word	0x0800952d
 80094dc:	0800952d 	.word	0x0800952d
 80094e0:	0800952d 	.word	0x0800952d
 80094e4:	0800952d 	.word	0x0800952d
 80094e8:	0800952d 	.word	0x0800952d
 80094ec:	0800952d 	.word	0x0800952d
 80094f0:	0800952d 	.word	0x0800952d
 80094f4:	0800952d 	.word	0x0800952d
 80094f8:	0800952d 	.word	0x0800952d
 80094fc:	0800952d 	.word	0x0800952d
 8009500:	0800952d 	.word	0x0800952d
 8009504:	0800952d 	.word	0x0800952d
 8009508:	0800952d 	.word	0x0800952d
 800950c:	0800952d 	.word	0x0800952d
 8009510:	0800952d 	.word	0x0800952d
 8009514:	0800952d 	.word	0x0800952d
 8009518:	0800952d 	.word	0x0800952d
 800951c:	0800952d 	.word	0x0800952d
 8009520:	0800952d 	.word	0x0800952d
 8009524:	0800952d 	.word	0x0800952d
 8009528:	0800952d 	.word	0x0800952d
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800952c:	bf00      	nop
	}

	return (USBD_OK);
 800952e:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4810      	ldr	r0, [pc, #64]	; (800958c <CDC_Receive_FS+0x50>)
 800954a:	f7fe fbe9 	bl	8007d20 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800954e:	480f      	ldr	r0, [pc, #60]	; (800958c <CDC_Receive_FS+0x50>)
 8009550:	f7fe fc2a 	bl	8007da8 <USBD_CDC_ReceivePacket>
	memset (ReceivedData, '\0', 64);
 8009554:	2240      	movs	r2, #64	; 0x40
 8009556:	2100      	movs	r1, #0
 8009558:	480d      	ldr	r0, [pc, #52]	; (8009590 <CDC_Receive_FS+0x54>)
 800955a:	f000 fcac 	bl	8009eb6 <memset>
	uint8_t len = (uint8_t)*Len;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	73fb      	strb	r3, [r7, #15]
	memcpy(ReceivedData, Buf, len);
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	461a      	mov	r2, r3
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	4809      	ldr	r0, [pc, #36]	; (8009590 <CDC_Receive_FS+0x54>)
 800956c:	f000 fc98 	bl	8009ea0 <memcpy>
	memset(Buf, '\0', len);
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	461a      	mov	r2, r3
 8009574:	2100      	movs	r1, #0
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fc9d 	bl	8009eb6 <memset>
	ReceivedDataFlag = 1;
 800957c:	4b05      	ldr	r3, [pc, #20]	; (8009594 <CDC_Receive_FS+0x58>)
 800957e:	2201      	movs	r2, #1
 8009580:	701a      	strb	r2, [r3, #0]
			ReceivedDataFlag = 1;
			ReceivedIter = 0;
		}
	}*/

	return (USBD_OK);
 8009582:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	20000a3c 	.word	0x20000a3c
 8009590:	20000934 	.word	0x20000934
 8009594:	20000400 	.word	0x20000400

08009598 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80095a8:	4b0d      	ldr	r3, [pc, #52]	; (80095e0 <CDC_Transmit_FS+0x48>)
 80095aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095ae:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e00b      	b.n	80095d6 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80095be:	887b      	ldrh	r3, [r7, #2]
 80095c0:	461a      	mov	r2, r3
 80095c2:	6879      	ldr	r1, [r7, #4]
 80095c4:	4806      	ldr	r0, [pc, #24]	; (80095e0 <CDC_Transmit_FS+0x48>)
 80095c6:	f7fe fb92 	bl	8007cee <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80095ca:	4805      	ldr	r0, [pc, #20]	; (80095e0 <CDC_Transmit_FS+0x48>)
 80095cc:	f7fe fbbc 	bl	8007d48 <USBD_CDC_TransmitPacket>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000a3c 	.word	0x20000a3c

080095e4 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b087      	sub	sp, #28
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4613      	mov	r3, r2
 80095f0:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 80095f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
	...

08009608 <USBD_FS_DeviceDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	4603      	mov	r3, r0
 8009610:	6039      	str	r1, [r7, #0]
 8009612:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_FS_DeviceDesc);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2212      	movs	r2, #18
 8009618:	801a      	strh	r2, [r3, #0]
	return USBD_FS_DeviceDesc;
 800961a:	4b03      	ldr	r3, [pc, #12]	; (8009628 <USBD_FS_DeviceDescriptor+0x20>)
}
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	20000304 	.word	0x20000304

0800962c <USBD_FS_DeviceDescriptor_SETUP>:
// wpisywanie hasel descriptor
uint8_t * USBD_FS_DeviceDescriptor_SETUP(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	6039      	str	r1, [r7, #0]
 8009636:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_FS_DeviceDesc_SETUP);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2212      	movs	r2, #18
 800963c:	801a      	strh	r2, [r3, #0]
	return USBD_FS_DeviceDesc_SETUP;
 800963e:	4b03      	ldr	r3, [pc, #12]	; (800964c <USBD_FS_DeviceDescriptor_SETUP+0x20>)
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	20000318 	.word	0x20000318

08009650 <USBD_FS_LangIDStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	6039      	str	r1, [r7, #0]
 800965a:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_LangIDDesc);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2204      	movs	r2, #4
 8009660:	801a      	strh	r2, [r3, #0]
	return USBD_LangIDDesc;
 8009662:	4b03      	ldr	r3, [pc, #12]	; (8009670 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	2000032c 	.word	0x2000032c

08009674 <USBD_FS_ProductStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
	if(speed == 0)
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d105      	bne.n	8009692 <USBD_FS_ProductStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	4907      	ldr	r1, [pc, #28]	; (80096a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800968a:	4808      	ldr	r0, [pc, #32]	; (80096ac <USBD_FS_ProductStrDescriptor+0x38>)
 800968c:	f7ff fda1 	bl	80091d2 <USBD_GetString>
 8009690:	e004      	b.n	800969c <USBD_FS_ProductStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	4904      	ldr	r1, [pc, #16]	; (80096a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009696:	4805      	ldr	r0, [pc, #20]	; (80096ac <USBD_FS_ProductStrDescriptor+0x38>)
 8009698:	f7ff fd9b 	bl	80091d2 <USBD_GetString>
	}
	return USBD_StrDesc;
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000d74 	.word	0x20000d74
 80096ac:	0800a0d8 	.word	0x0800a0d8

080096b0 <USBD_FS_ManufacturerStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	6039      	str	r1, [r7, #0]
 80096ba:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	4904      	ldr	r1, [pc, #16]	; (80096d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80096c0:	4804      	ldr	r0, [pc, #16]	; (80096d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80096c2:	f7ff fd86 	bl	80091d2 <USBD_GetString>
	return USBD_StrDesc;
 80096c6:	4b02      	ldr	r3, [pc, #8]	; (80096d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	20000d74 	.word	0x20000d74
 80096d4:	0800a0f0 	.word	0x0800a0f0

080096d8 <USBD_FS_SerialStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	6039      	str	r1, [r7, #0]
 80096e2:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = USB_SIZ_STRING_SERIAL;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	221a      	movs	r2, #26
 80096e8:	801a      	strh	r2, [r3, #0]

	/* Update the serial number string descriptor with the data from the unique
	 * ID */
	Get_SerialNum();
 80096ea:	f000 f843 	bl	8009774 <Get_SerialNum>
	/* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

	/* USER CODE END USBD_FS_SerialStrDescriptor */
	return (uint8_t *) USBD_StringSerial;
 80096ee:	4b02      	ldr	r3, [pc, #8]	; (80096f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20000330 	.word	0x20000330

080096fc <USBD_FS_ConfigStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	6039      	str	r1, [r7, #0]
 8009706:	71fb      	strb	r3, [r7, #7]
	if(speed == USBD_SPEED_HIGH)
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d105      	bne.n	800971a <USBD_FS_ConfigStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	4907      	ldr	r1, [pc, #28]	; (8009730 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009712:	4808      	ldr	r0, [pc, #32]	; (8009734 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009714:	f7ff fd5d 	bl	80091d2 <USBD_GetString>
 8009718:	e004      	b.n	8009724 <USBD_FS_ConfigStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	4904      	ldr	r1, [pc, #16]	; (8009730 <USBD_FS_ConfigStrDescriptor+0x34>)
 800971e:	4805      	ldr	r0, [pc, #20]	; (8009734 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009720:	f7ff fd57 	bl	80091d2 <USBD_GetString>
	}
	return USBD_StrDesc;
 8009724:	4b02      	ldr	r3, [pc, #8]	; (8009730 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20000d74 	.word	0x20000d74
 8009734:	0800a104 	.word	0x0800a104

08009738 <USBD_FS_InterfaceStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	6039      	str	r1, [r7, #0]
 8009742:	71fb      	strb	r3, [r7, #7]
	if(speed == 0)
 8009744:	79fb      	ldrb	r3, [r7, #7]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d105      	bne.n	8009756 <USBD_FS_InterfaceStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	4907      	ldr	r1, [pc, #28]	; (800976c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800974e:	4808      	ldr	r0, [pc, #32]	; (8009770 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009750:	f7ff fd3f 	bl	80091d2 <USBD_GetString>
 8009754:	e004      	b.n	8009760 <USBD_FS_InterfaceStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	4904      	ldr	r1, [pc, #16]	; (800976c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800975a:	4805      	ldr	r0, [pc, #20]	; (8009770 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800975c:	f7ff fd39 	bl	80091d2 <USBD_GetString>
	}
	return USBD_StrDesc;
 8009760:	4b02      	ldr	r3, [pc, #8]	; (800976c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000d74 	.word	0x20000d74
 8009770:	0800a110 	.word	0x0800a110

08009774 <Get_SerialNum>:
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
	uint32_t deviceserial0, deviceserial1, deviceserial2;

	deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800977a:	4b0f      	ldr	r3, [pc, #60]	; (80097b8 <Get_SerialNum+0x44>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	60fb      	str	r3, [r7, #12]
	deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009780:	4b0e      	ldr	r3, [pc, #56]	; (80097bc <Get_SerialNum+0x48>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	60bb      	str	r3, [r7, #8]
	deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009786:	4b0e      	ldr	r3, [pc, #56]	; (80097c0 <Get_SerialNum+0x4c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	607b      	str	r3, [r7, #4]

	deviceserial0 += deviceserial2;
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4413      	add	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]

	if (deviceserial0 != 0)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d009      	beq.n	80097ae <Get_SerialNum+0x3a>
	{
		IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800979a:	2208      	movs	r2, #8
 800979c:	4909      	ldr	r1, [pc, #36]	; (80097c4 <Get_SerialNum+0x50>)
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 f814 	bl	80097cc <IntToUnicode>
		IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80097a4:	2204      	movs	r2, #4
 80097a6:	4908      	ldr	r1, [pc, #32]	; (80097c8 <Get_SerialNum+0x54>)
 80097a8:	68b8      	ldr	r0, [r7, #8]
 80097aa:	f000 f80f 	bl	80097cc <IntToUnicode>
	}
}
 80097ae:	bf00      	nop
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	1fff7a10 	.word	0x1fff7a10
 80097bc:	1fff7a14 	.word	0x1fff7a14
 80097c0:	1fff7a18 	.word	0x1fff7a18
 80097c4:	20000332 	.word	0x20000332
 80097c8:	20000342 	.word	0x20000342

080097cc <IntToUnicode>:
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b087      	sub	sp, #28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	4613      	mov	r3, r2
 80097d8:	71fb      	strb	r3, [r7, #7]
	uint8_t idx = 0;
 80097da:	2300      	movs	r3, #0
 80097dc:	75fb      	strb	r3, [r7, #23]

	for (idx = 0; idx < len; idx++)
 80097de:	2300      	movs	r3, #0
 80097e0:	75fb      	strb	r3, [r7, #23]
 80097e2:	e027      	b.n	8009834 <IntToUnicode+0x68>
	{
		if (((value >> 28)) < 0xA)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	0f1b      	lsrs	r3, r3, #28
 80097e8:	2b09      	cmp	r3, #9
 80097ea:	d80b      	bhi.n	8009804 <IntToUnicode+0x38>
		{
			pbuf[2 * idx] = (value >> 28) + '0';
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	0f1b      	lsrs	r3, r3, #28
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	4619      	mov	r1, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	440b      	add	r3, r1
 80097fc:	3230      	adds	r2, #48	; 0x30
 80097fe:	b2d2      	uxtb	r2, r2
 8009800:	701a      	strb	r2, [r3, #0]
 8009802:	e00a      	b.n	800981a <IntToUnicode+0x4e>
		}
		else
		{
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	0f1b      	lsrs	r3, r3, #28
 8009808:	b2da      	uxtb	r2, r3
 800980a:	7dfb      	ldrb	r3, [r7, #23]
 800980c:	005b      	lsls	r3, r3, #1
 800980e:	4619      	mov	r1, r3
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	440b      	add	r3, r1
 8009814:	3237      	adds	r2, #55	; 0x37
 8009816:	b2d2      	uxtb	r2, r2
 8009818:	701a      	strb	r2, [r3, #0]
		}

		value = value << 4;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	011b      	lsls	r3, r3, #4
 800981e:	60fb      	str	r3, [r7, #12]

		pbuf[2 * idx + 1] = 0;
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	005b      	lsls	r3, r3, #1
 8009824:	3301      	adds	r3, #1
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	4413      	add	r3, r2
 800982a:	2200      	movs	r2, #0
 800982c:	701a      	strb	r2, [r3, #0]
	for (idx = 0; idx < len; idx++)
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	3301      	adds	r3, #1
 8009832:	75fb      	strb	r3, [r7, #23]
 8009834:	7dfa      	ldrb	r2, [r7, #23]
 8009836:	79fb      	ldrb	r3, [r7, #7]
 8009838:	429a      	cmp	r2, r3
 800983a:	d3d3      	bcc.n	80097e4 <IntToUnicode+0x18>
	}
}
 800983c:	bf00      	nop
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08a      	sub	sp, #40	; 0x28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009850:	f107 0314 	add.w	r3, r7, #20
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	605a      	str	r2, [r3, #4]
 800985a:	609a      	str	r2, [r3, #8]
 800985c:	60da      	str	r2, [r3, #12]
 800985e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009868:	d13a      	bne.n	80098e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800986a:	2300      	movs	r3, #0
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	4b1e      	ldr	r3, [pc, #120]	; (80098e8 <HAL_PCD_MspInit+0xa0>)
 8009870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009872:	4a1d      	ldr	r2, [pc, #116]	; (80098e8 <HAL_PCD_MspInit+0xa0>)
 8009874:	f043 0301 	orr.w	r3, r3, #1
 8009878:	6313      	str	r3, [r2, #48]	; 0x30
 800987a:	4b1b      	ldr	r3, [pc, #108]	; (80098e8 <HAL_PCD_MspInit+0xa0>)
 800987c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	613b      	str	r3, [r7, #16]
 8009884:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009886:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800988a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800988c:	2302      	movs	r3, #2
 800988e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009890:	2300      	movs	r3, #0
 8009892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009894:	2303      	movs	r3, #3
 8009896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009898:	230a      	movs	r3, #10
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800989c:	f107 0314 	add.w	r3, r7, #20
 80098a0:	4619      	mov	r1, r3
 80098a2:	4812      	ldr	r0, [pc, #72]	; (80098ec <HAL_PCD_MspInit+0xa4>)
 80098a4:	f7f8 ff04 	bl	80026b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80098a8:	4b0f      	ldr	r3, [pc, #60]	; (80098e8 <HAL_PCD_MspInit+0xa0>)
 80098aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ac:	4a0e      	ldr	r2, [pc, #56]	; (80098e8 <HAL_PCD_MspInit+0xa0>)
 80098ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b2:	6353      	str	r3, [r2, #52]	; 0x34
 80098b4:	2300      	movs	r3, #0
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <HAL_PCD_MspInit+0xa0>)
 80098ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098bc:	4a0a      	ldr	r2, [pc, #40]	; (80098e8 <HAL_PCD_MspInit+0xa0>)
 80098be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098c2:	6453      	str	r3, [r2, #68]	; 0x44
 80098c4:	4b08      	ldr	r3, [pc, #32]	; (80098e8 <HAL_PCD_MspInit+0xa0>)
 80098c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098cc:	60fb      	str	r3, [r7, #12]
 80098ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80098d0:	2200      	movs	r2, #0
 80098d2:	2100      	movs	r1, #0
 80098d4:	2043      	movs	r0, #67	; 0x43
 80098d6:	f7f8 feb4 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098da:	2043      	movs	r0, #67	; 0x43
 80098dc:	f7f8 fecd 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098e0:	bf00      	nop
 80098e2:	3728      	adds	r7, #40	; 0x28
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	40023800 	.word	0x40023800
 80098ec:	40020000 	.word	0x40020000

080098f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f7fe fce0 	bl	80082cc <USBD_LL_SetupStage>
}
 800990c:	bf00      	nop
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009926:	78fa      	ldrb	r2, [r7, #3]
 8009928:	6879      	ldr	r1, [r7, #4]
 800992a:	4613      	mov	r3, r2
 800992c:	00db      	lsls	r3, r3, #3
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	440b      	add	r3, r1
 8009934:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	78fb      	ldrb	r3, [r7, #3]
 800993c:	4619      	mov	r1, r3
 800993e:	f7fe fd18 	bl	8008372 <USBD_LL_DataOutStage>
}
 8009942:	bf00      	nop
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b082      	sub	sp, #8
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	460b      	mov	r3, r1
 8009954:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800995c:	78fa      	ldrb	r2, [r7, #3]
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	4613      	mov	r3, r2
 8009962:	00db      	lsls	r3, r3, #3
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	440b      	add	r3, r1
 800996a:	3348      	adds	r3, #72	; 0x48
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	78fb      	ldrb	r3, [r7, #3]
 8009970:	4619      	mov	r1, r3
 8009972:	f7fe fd61 	bl	8008438 <USBD_LL_DataInStage>
}
 8009976:	bf00      	nop
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b082      	sub	sp, #8
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe fe65 	bl	800865c <USBD_LL_SOF>
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099a2:	2301      	movs	r3, #1
 80099a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d001      	beq.n	80099b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80099ae:	f7f7 fbd3 	bl	8001158 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099b8:	7bfa      	ldrb	r2, [r7, #15]
 80099ba:	4611      	mov	r1, r2
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fe fe12 	bl	80085e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fe fdcb 	bl	8008564 <USBD_LL_Reset>
}
 80099ce:	bf00      	nop
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
	...

080099d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe fe0d 	bl	8008606 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	6812      	ldr	r2, [r2, #0]
 80099fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099fe:	f043 0301 	orr.w	r3, r3, #1
 8009a02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d005      	beq.n	8009a18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a0c:	4b04      	ldr	r3, [pc, #16]	; (8009a20 <HAL_PCD_SuspendCallback+0x48>)
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	4a03      	ldr	r2, [pc, #12]	; (8009a20 <HAL_PCD_SuspendCallback+0x48>)
 8009a12:	f043 0306 	orr.w	r3, r3, #6
 8009a16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a18:	bf00      	nop
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	e000ed00 	.word	0xe000ed00

08009a24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe fdfc 	bl	8008630 <USBD_LL_Resume>
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a52:	78fa      	ldrb	r2, [r7, #3]
 8009a54:	4611      	mov	r1, r2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe fe27 	bl	80086aa <USBD_LL_IsoOUTIncomplete>
}
 8009a5c:	bf00      	nop
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a76:	78fa      	ldrb	r2, [r7, #3]
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe fe08 	bl	8008690 <USBD_LL_IsoINIncomplete>
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fe14 	bl	80086c4 <USBD_LL_DevConnected>
}
 8009a9c:	bf00      	nop
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fe11 	bl	80086da <USBD_LL_DevDisconnected>
}
 8009ab8:	bf00      	nop
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d13c      	bne.n	8009b4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ad0:	4a20      	ldr	r2, [pc, #128]	; (8009b54 <USBD_LL_Init+0x94>)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a1e      	ldr	r2, [pc, #120]	; (8009b54 <USBD_LL_Init+0x94>)
 8009adc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ae0:	4b1c      	ldr	r3, [pc, #112]	; (8009b54 <USBD_LL_Init+0x94>)
 8009ae2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009ae6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009ae8:	4b1a      	ldr	r3, [pc, #104]	; (8009b54 <USBD_LL_Init+0x94>)
 8009aea:	2204      	movs	r2, #4
 8009aec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009aee:	4b19      	ldr	r3, [pc, #100]	; (8009b54 <USBD_LL_Init+0x94>)
 8009af0:	2202      	movs	r2, #2
 8009af2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009af4:	4b17      	ldr	r3, [pc, #92]	; (8009b54 <USBD_LL_Init+0x94>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009afa:	4b16      	ldr	r3, [pc, #88]	; (8009b54 <USBD_LL_Init+0x94>)
 8009afc:	2202      	movs	r2, #2
 8009afe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b00:	4b14      	ldr	r3, [pc, #80]	; (8009b54 <USBD_LL_Init+0x94>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b06:	4b13      	ldr	r3, [pc, #76]	; (8009b54 <USBD_LL_Init+0x94>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b0c:	4b11      	ldr	r3, [pc, #68]	; (8009b54 <USBD_LL_Init+0x94>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009b12:	4b10      	ldr	r3, [pc, #64]	; (8009b54 <USBD_LL_Init+0x94>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b18:	4b0e      	ldr	r3, [pc, #56]	; (8009b54 <USBD_LL_Init+0x94>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b1e:	480d      	ldr	r0, [pc, #52]	; (8009b54 <USBD_LL_Init+0x94>)
 8009b20:	f7f9 fcff 	bl	8003522 <HAL_PCD_Init>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b2a:	f7f7 fb15 	bl	8001158 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b2e:	2180      	movs	r1, #128	; 0x80
 8009b30:	4808      	ldr	r0, [pc, #32]	; (8009b54 <USBD_LL_Init+0x94>)
 8009b32:	f7fa fe5c 	bl	80047ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b36:	2240      	movs	r2, #64	; 0x40
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4806      	ldr	r0, [pc, #24]	; (8009b54 <USBD_LL_Init+0x94>)
 8009b3c:	f7fa fe10 	bl	8004760 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009b40:	2280      	movs	r2, #128	; 0x80
 8009b42:	2101      	movs	r1, #1
 8009b44:	4803      	ldr	r0, [pc, #12]	; (8009b54 <USBD_LL_Init+0x94>)
 8009b46:	f7fa fe0b 	bl	8004760 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	20000f74 	.word	0x20000f74

08009b58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7f9 fdf4 	bl	800375c <HAL_PCD_Start>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 f92a 	bl	8009dd4 <USBD_Get_USB_Status>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b084      	sub	sp, #16
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	4608      	mov	r0, r1
 8009b98:	4611      	mov	r1, r2
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	70fb      	strb	r3, [r7, #3]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70bb      	strb	r3, [r7, #2]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009bb6:	78bb      	ldrb	r3, [r7, #2]
 8009bb8:	883a      	ldrh	r2, [r7, #0]
 8009bba:	78f9      	ldrb	r1, [r7, #3]
 8009bbc:	f7fa f9d8 	bl	8003f70 <HAL_PCD_EP_Open>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 f904 	bl	8009dd4 <USBD_Get_USB_Status>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	460b      	mov	r3, r1
 8009be4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bf4:	78fa      	ldrb	r2, [r7, #3]
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fa fa21 	bl	8004040 <HAL_PCD_EP_Close>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 f8e5 	bl	8009dd4 <USBD_Get_USB_Status>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c32:	78fa      	ldrb	r2, [r7, #3]
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fa faf9 	bl	800422e <HAL_PCD_EP_SetStall>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 f8c6 	bl	8009dd4 <USBD_Get_USB_Status>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c70:	78fa      	ldrb	r2, [r7, #3]
 8009c72:	4611      	mov	r1, r2
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fa fb3e 	bl	80042f6 <HAL_PCD_EP_ClrStall>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 f8a7 	bl	8009dd4 <USBD_Get_USB_Status>
 8009c86:	4603      	mov	r3, r0
 8009c88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ca6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	da0b      	bge.n	8009cc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	1a9b      	subs	r3, r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	440b      	add	r3, r1
 8009cc2:	333e      	adds	r3, #62	; 0x3e
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	e00b      	b.n	8009ce0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cc8:	78fb      	ldrb	r3, [r7, #3]
 8009cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cce:	68f9      	ldr	r1, [r7, #12]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	00db      	lsls	r3, r3, #3
 8009cd4:	1a9b      	subs	r3, r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	440b      	add	r3, r1
 8009cda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009cde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d06:	78fa      	ldrb	r2, [r7, #3]
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fa f90b 	bl	8003f26 <HAL_PCD_SetAddress>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 f85c 	bl	8009dd4 <USBD_Get_USB_Status>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b086      	sub	sp, #24
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	60f8      	str	r0, [r7, #12]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	603b      	str	r3, [r7, #0]
 8009d36:	460b      	mov	r3, r1
 8009d38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d48:	7af9      	ldrb	r1, [r7, #11]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	f7fa fa24 	bl	800419a <HAL_PCD_EP_Transmit>
 8009d52:	4603      	mov	r3, r0
 8009d54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 f83b 	bl	8009dd4 <USBD_Get_USB_Status>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d62:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3718      	adds	r7, #24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	607a      	str	r2, [r7, #4]
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d8a:	7af9      	ldrb	r1, [r7, #11]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	f7fa f9a0 	bl	80040d4 <HAL_PCD_EP_Receive>
 8009d94:	4603      	mov	r3, r0
 8009d96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 f81a 	bl	8009dd4 <USBD_Get_USB_Status>
 8009da0:	4603      	mov	r3, r0
 8009da2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009da4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dc0:	78fa      	ldrb	r2, [r7, #3]
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fa f9d0 	bl	800416a <HAL_PCD_EP_GetRxCount>
 8009dca:	4603      	mov	r3, r0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dde:	2300      	movs	r3, #0
 8009de0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d817      	bhi.n	8009e18 <USBD_Get_USB_Status+0x44>
 8009de8:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <USBD_Get_USB_Status+0x1c>)
 8009dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dee:	bf00      	nop
 8009df0:	08009e01 	.word	0x08009e01
 8009df4:	08009e07 	.word	0x08009e07
 8009df8:	08009e0d 	.word	0x08009e0d
 8009dfc:	08009e13 	.word	0x08009e13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73fb      	strb	r3, [r7, #15]
    break;
 8009e04:	e00b      	b.n	8009e1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e06:	2303      	movs	r3, #3
 8009e08:	73fb      	strb	r3, [r7, #15]
    break;
 8009e0a:	e008      	b.n	8009e1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e10:	e005      	b.n	8009e1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e12:	2303      	movs	r3, #3
 8009e14:	73fb      	strb	r3, [r7, #15]
    break;
 8009e16:	e002      	b.n	8009e1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e1c:	bf00      	nop
  }
  return usb_status;
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <__errno>:
 8009e2c:	4b01      	ldr	r3, [pc, #4]	; (8009e34 <__errno+0x8>)
 8009e2e:	6818      	ldr	r0, [r3, #0]
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	2000034c 	.word	0x2000034c

08009e38 <__libc_init_array>:
 8009e38:	b570      	push	{r4, r5, r6, lr}
 8009e3a:	4e0d      	ldr	r6, [pc, #52]	; (8009e70 <__libc_init_array+0x38>)
 8009e3c:	4c0d      	ldr	r4, [pc, #52]	; (8009e74 <__libc_init_array+0x3c>)
 8009e3e:	1ba4      	subs	r4, r4, r6
 8009e40:	10a4      	asrs	r4, r4, #2
 8009e42:	2500      	movs	r5, #0
 8009e44:	42a5      	cmp	r5, r4
 8009e46:	d109      	bne.n	8009e5c <__libc_init_array+0x24>
 8009e48:	4e0b      	ldr	r6, [pc, #44]	; (8009e78 <__libc_init_array+0x40>)
 8009e4a:	4c0c      	ldr	r4, [pc, #48]	; (8009e7c <__libc_init_array+0x44>)
 8009e4c:	f000 f8f6 	bl	800a03c <_init>
 8009e50:	1ba4      	subs	r4, r4, r6
 8009e52:	10a4      	asrs	r4, r4, #2
 8009e54:	2500      	movs	r5, #0
 8009e56:	42a5      	cmp	r5, r4
 8009e58:	d105      	bne.n	8009e66 <__libc_init_array+0x2e>
 8009e5a:	bd70      	pop	{r4, r5, r6, pc}
 8009e5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e60:	4798      	blx	r3
 8009e62:	3501      	adds	r5, #1
 8009e64:	e7ee      	b.n	8009e44 <__libc_init_array+0xc>
 8009e66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e6a:	4798      	blx	r3
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	e7f2      	b.n	8009e56 <__libc_init_array+0x1e>
 8009e70:	0800ae9c 	.word	0x0800ae9c
 8009e74:	0800ae9c 	.word	0x0800ae9c
 8009e78:	0800ae9c 	.word	0x0800ae9c
 8009e7c:	0800aea0 	.word	0x0800aea0

08009e80 <malloc>:
 8009e80:	4b02      	ldr	r3, [pc, #8]	; (8009e8c <malloc+0xc>)
 8009e82:	4601      	mov	r1, r0
 8009e84:	6818      	ldr	r0, [r3, #0]
 8009e86:	f000 b86d 	b.w	8009f64 <_malloc_r>
 8009e8a:	bf00      	nop
 8009e8c:	2000034c 	.word	0x2000034c

08009e90 <free>:
 8009e90:	4b02      	ldr	r3, [pc, #8]	; (8009e9c <free+0xc>)
 8009e92:	4601      	mov	r1, r0
 8009e94:	6818      	ldr	r0, [r3, #0]
 8009e96:	f000 b817 	b.w	8009ec8 <_free_r>
 8009e9a:	bf00      	nop
 8009e9c:	2000034c 	.word	0x2000034c

08009ea0 <memcpy>:
 8009ea0:	b510      	push	{r4, lr}
 8009ea2:	1e43      	subs	r3, r0, #1
 8009ea4:	440a      	add	r2, r1
 8009ea6:	4291      	cmp	r1, r2
 8009ea8:	d100      	bne.n	8009eac <memcpy+0xc>
 8009eaa:	bd10      	pop	{r4, pc}
 8009eac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eb4:	e7f7      	b.n	8009ea6 <memcpy+0x6>

08009eb6 <memset>:
 8009eb6:	4402      	add	r2, r0
 8009eb8:	4603      	mov	r3, r0
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d100      	bne.n	8009ec0 <memset+0xa>
 8009ebe:	4770      	bx	lr
 8009ec0:	f803 1b01 	strb.w	r1, [r3], #1
 8009ec4:	e7f9      	b.n	8009eba <memset+0x4>
	...

08009ec8 <_free_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	4605      	mov	r5, r0
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	d045      	beq.n	8009f5c <_free_r+0x94>
 8009ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ed4:	1f0c      	subs	r4, r1, #4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bfb8      	it	lt
 8009eda:	18e4      	addlt	r4, r4, r3
 8009edc:	f000 f8ac 	bl	800a038 <__malloc_lock>
 8009ee0:	4a1f      	ldr	r2, [pc, #124]	; (8009f60 <_free_r+0x98>)
 8009ee2:	6813      	ldr	r3, [r2, #0]
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	b933      	cbnz	r3, 8009ef6 <_free_r+0x2e>
 8009ee8:	6063      	str	r3, [r4, #4]
 8009eea:	6014      	str	r4, [r2, #0]
 8009eec:	4628      	mov	r0, r5
 8009eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ef2:	f000 b8a2 	b.w	800a03a <__malloc_unlock>
 8009ef6:	42a3      	cmp	r3, r4
 8009ef8:	d90c      	bls.n	8009f14 <_free_r+0x4c>
 8009efa:	6821      	ldr	r1, [r4, #0]
 8009efc:	1862      	adds	r2, r4, r1
 8009efe:	4293      	cmp	r3, r2
 8009f00:	bf04      	itt	eq
 8009f02:	681a      	ldreq	r2, [r3, #0]
 8009f04:	685b      	ldreq	r3, [r3, #4]
 8009f06:	6063      	str	r3, [r4, #4]
 8009f08:	bf04      	itt	eq
 8009f0a:	1852      	addeq	r2, r2, r1
 8009f0c:	6022      	streq	r2, [r4, #0]
 8009f0e:	6004      	str	r4, [r0, #0]
 8009f10:	e7ec      	b.n	8009eec <_free_r+0x24>
 8009f12:	4613      	mov	r3, r2
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	b10a      	cbz	r2, 8009f1c <_free_r+0x54>
 8009f18:	42a2      	cmp	r2, r4
 8009f1a:	d9fa      	bls.n	8009f12 <_free_r+0x4a>
 8009f1c:	6819      	ldr	r1, [r3, #0]
 8009f1e:	1858      	adds	r0, r3, r1
 8009f20:	42a0      	cmp	r0, r4
 8009f22:	d10b      	bne.n	8009f3c <_free_r+0x74>
 8009f24:	6820      	ldr	r0, [r4, #0]
 8009f26:	4401      	add	r1, r0
 8009f28:	1858      	adds	r0, r3, r1
 8009f2a:	4282      	cmp	r2, r0
 8009f2c:	6019      	str	r1, [r3, #0]
 8009f2e:	d1dd      	bne.n	8009eec <_free_r+0x24>
 8009f30:	6810      	ldr	r0, [r2, #0]
 8009f32:	6852      	ldr	r2, [r2, #4]
 8009f34:	605a      	str	r2, [r3, #4]
 8009f36:	4401      	add	r1, r0
 8009f38:	6019      	str	r1, [r3, #0]
 8009f3a:	e7d7      	b.n	8009eec <_free_r+0x24>
 8009f3c:	d902      	bls.n	8009f44 <_free_r+0x7c>
 8009f3e:	230c      	movs	r3, #12
 8009f40:	602b      	str	r3, [r5, #0]
 8009f42:	e7d3      	b.n	8009eec <_free_r+0x24>
 8009f44:	6820      	ldr	r0, [r4, #0]
 8009f46:	1821      	adds	r1, r4, r0
 8009f48:	428a      	cmp	r2, r1
 8009f4a:	bf04      	itt	eq
 8009f4c:	6811      	ldreq	r1, [r2, #0]
 8009f4e:	6852      	ldreq	r2, [r2, #4]
 8009f50:	6062      	str	r2, [r4, #4]
 8009f52:	bf04      	itt	eq
 8009f54:	1809      	addeq	r1, r1, r0
 8009f56:	6021      	streq	r1, [r4, #0]
 8009f58:	605c      	str	r4, [r3, #4]
 8009f5a:	e7c7      	b.n	8009eec <_free_r+0x24>
 8009f5c:	bd38      	pop	{r3, r4, r5, pc}
 8009f5e:	bf00      	nop
 8009f60:	20000828 	.word	0x20000828

08009f64 <_malloc_r>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	1ccd      	adds	r5, r1, #3
 8009f68:	f025 0503 	bic.w	r5, r5, #3
 8009f6c:	3508      	adds	r5, #8
 8009f6e:	2d0c      	cmp	r5, #12
 8009f70:	bf38      	it	cc
 8009f72:	250c      	movcc	r5, #12
 8009f74:	2d00      	cmp	r5, #0
 8009f76:	4606      	mov	r6, r0
 8009f78:	db01      	blt.n	8009f7e <_malloc_r+0x1a>
 8009f7a:	42a9      	cmp	r1, r5
 8009f7c:	d903      	bls.n	8009f86 <_malloc_r+0x22>
 8009f7e:	230c      	movs	r3, #12
 8009f80:	6033      	str	r3, [r6, #0]
 8009f82:	2000      	movs	r0, #0
 8009f84:	bd70      	pop	{r4, r5, r6, pc}
 8009f86:	f000 f857 	bl	800a038 <__malloc_lock>
 8009f8a:	4a21      	ldr	r2, [pc, #132]	; (800a010 <_malloc_r+0xac>)
 8009f8c:	6814      	ldr	r4, [r2, #0]
 8009f8e:	4621      	mov	r1, r4
 8009f90:	b991      	cbnz	r1, 8009fb8 <_malloc_r+0x54>
 8009f92:	4c20      	ldr	r4, [pc, #128]	; (800a014 <_malloc_r+0xb0>)
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	b91b      	cbnz	r3, 8009fa0 <_malloc_r+0x3c>
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f000 f83d 	bl	800a018 <_sbrk_r>
 8009f9e:	6020      	str	r0, [r4, #0]
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f000 f838 	bl	800a018 <_sbrk_r>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d124      	bne.n	8009ff6 <_malloc_r+0x92>
 8009fac:	230c      	movs	r3, #12
 8009fae:	6033      	str	r3, [r6, #0]
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f000 f842 	bl	800a03a <__malloc_unlock>
 8009fb6:	e7e4      	b.n	8009f82 <_malloc_r+0x1e>
 8009fb8:	680b      	ldr	r3, [r1, #0]
 8009fba:	1b5b      	subs	r3, r3, r5
 8009fbc:	d418      	bmi.n	8009ff0 <_malloc_r+0x8c>
 8009fbe:	2b0b      	cmp	r3, #11
 8009fc0:	d90f      	bls.n	8009fe2 <_malloc_r+0x7e>
 8009fc2:	600b      	str	r3, [r1, #0]
 8009fc4:	50cd      	str	r5, [r1, r3]
 8009fc6:	18cc      	adds	r4, r1, r3
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f000 f836 	bl	800a03a <__malloc_unlock>
 8009fce:	f104 000b 	add.w	r0, r4, #11
 8009fd2:	1d23      	adds	r3, r4, #4
 8009fd4:	f020 0007 	bic.w	r0, r0, #7
 8009fd8:	1ac3      	subs	r3, r0, r3
 8009fda:	d0d3      	beq.n	8009f84 <_malloc_r+0x20>
 8009fdc:	425a      	negs	r2, r3
 8009fde:	50e2      	str	r2, [r4, r3]
 8009fe0:	e7d0      	b.n	8009f84 <_malloc_r+0x20>
 8009fe2:	428c      	cmp	r4, r1
 8009fe4:	684b      	ldr	r3, [r1, #4]
 8009fe6:	bf16      	itet	ne
 8009fe8:	6063      	strne	r3, [r4, #4]
 8009fea:	6013      	streq	r3, [r2, #0]
 8009fec:	460c      	movne	r4, r1
 8009fee:	e7eb      	b.n	8009fc8 <_malloc_r+0x64>
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	6849      	ldr	r1, [r1, #4]
 8009ff4:	e7cc      	b.n	8009f90 <_malloc_r+0x2c>
 8009ff6:	1cc4      	adds	r4, r0, #3
 8009ff8:	f024 0403 	bic.w	r4, r4, #3
 8009ffc:	42a0      	cmp	r0, r4
 8009ffe:	d005      	beq.n	800a00c <_malloc_r+0xa8>
 800a000:	1a21      	subs	r1, r4, r0
 800a002:	4630      	mov	r0, r6
 800a004:	f000 f808 	bl	800a018 <_sbrk_r>
 800a008:	3001      	adds	r0, #1
 800a00a:	d0cf      	beq.n	8009fac <_malloc_r+0x48>
 800a00c:	6025      	str	r5, [r4, #0]
 800a00e:	e7db      	b.n	8009fc8 <_malloc_r+0x64>
 800a010:	20000828 	.word	0x20000828
 800a014:	2000082c 	.word	0x2000082c

0800a018 <_sbrk_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4c06      	ldr	r4, [pc, #24]	; (800a034 <_sbrk_r+0x1c>)
 800a01c:	2300      	movs	r3, #0
 800a01e:	4605      	mov	r5, r0
 800a020:	4608      	mov	r0, r1
 800a022:	6023      	str	r3, [r4, #0]
 800a024:	f7f7 fda2 	bl	8001b6c <_sbrk>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_sbrk_r+0x1a>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_sbrk_r+0x1a>
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	2000137c 	.word	0x2000137c

0800a038 <__malloc_lock>:
 800a038:	4770      	bx	lr

0800a03a <__malloc_unlock>:
 800a03a:	4770      	bx	lr

0800a03c <_init>:
 800a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03e:	bf00      	nop
 800a040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a042:	bc08      	pop	{r3}
 800a044:	469e      	mov	lr, r3
 800a046:	4770      	bx	lr

0800a048 <_fini>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	bf00      	nop
 800a04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04e:	bc08      	pop	{r3}
 800a050:	469e      	mov	lr, r3
 800a052:	4770      	bx	lr
