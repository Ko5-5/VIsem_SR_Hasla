
SR_MHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f70  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f10  08009f10  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  08009f10  08009f10  00019f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f18  08009f18  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f18  08009f18  00019f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f1c  08009f1c  00019f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08009f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001078  20000254  0800a174  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012cc  0800a174  000212cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4b9  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f69  00000000  00000000  0003e73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001728  00000000  00000000  000426a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b0  00000000  00000000  00043dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001abf7  00000000  00000000  00045380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000153c4  00000000  00000000  0005ff77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093868  00000000  00000000  0007533b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108ba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b0  00000000  00000000  00108c20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000254 	.word	0x20000254
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080090f0 	.word	0x080090f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000258 	.word	0x20000258
 80001d4:	080090f0 	.word	0x080090f0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
 80004f2:	4b4a      	ldr	r3, [pc, #296]	; (800061c <MX_GPIO_Init+0x144>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a49      	ldr	r2, [pc, #292]	; (800061c <MX_GPIO_Init+0x144>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b47      	ldr	r3, [pc, #284]	; (800061c <MX_GPIO_Init+0x144>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	4b43      	ldr	r3, [pc, #268]	; (800061c <MX_GPIO_Init+0x144>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a42      	ldr	r2, [pc, #264]	; (800061c <MX_GPIO_Init+0x144>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b40      	ldr	r3, [pc, #256]	; (800061c <MX_GPIO_Init+0x144>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	4b3c      	ldr	r3, [pc, #240]	; (800061c <MX_GPIO_Init+0x144>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a3b      	ldr	r2, [pc, #236]	; (800061c <MX_GPIO_Init+0x144>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b39      	ldr	r3, [pc, #228]	; (800061c <MX_GPIO_Init+0x144>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b35      	ldr	r3, [pc, #212]	; (800061c <MX_GPIO_Init+0x144>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a34      	ldr	r2, [pc, #208]	; (800061c <MX_GPIO_Init+0x144>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b32      	ldr	r3, [pc, #200]	; (800061c <MX_GPIO_Init+0x144>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000564:	482e      	ldr	r0, [pc, #184]	; (8000620 <MX_GPIO_Init+0x148>)
 8000566:	f002 f84b 	bl	8002600 <HAL_GPIO_WritePin>
                          |CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000570:	482c      	ldr	r0, [pc, #176]	; (8000624 <MX_GPIO_Init+0x14c>)
 8000572:	f002 f845 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin;
 8000576:	231c      	movs	r3, #28
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <MX_GPIO_Init+0x150>)
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4825      	ldr	r0, [pc, #148]	; (8000620 <MX_GPIO_Init+0x148>)
 800058a:	f001 fe9f 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800058e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000592:	617b      	str	r3, [r7, #20]
                          |CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	481e      	ldr	r0, [pc, #120]	; (8000620 <MX_GPIO_Init+0x148>)
 80005a8:	f001 fe90 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_BUT_Pin;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4819      	ldr	r0, [pc, #100]	; (8000624 <MX_GPIO_Init+0x14c>)
 80005c0:	f001 fe84 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 80005c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4811      	ldr	r0, [pc, #68]	; (8000624 <MX_GPIO_Init+0x14c>)
 80005de:	f001 fe75 	bl	80022cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	2008      	movs	r0, #8
 80005e8:	f001 fe39 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005ec:	2008      	movs	r0, #8
 80005ee:	f001 fe52 	bl	8002296 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2009      	movs	r0, #9
 80005f8:	f001 fe31 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005fc:	2009      	movs	r0, #9
 80005fe:	f001 fe4a 	bl	8002296 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	200a      	movs	r0, #10
 8000608:	f001 fe29 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800060c:	200a      	movs	r0, #10
 800060e:	f001 fe42 	bl	8002296 <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40020000 	.word	0x40020000
 8000624:	40020400 	.word	0x40020400
 8000628:	10110000 	.word	0x10110000

0800062c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C1_Init+0x50>)
 800066a:	f001 fffb 	bl	8002664 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 fc48 	bl	8000f08 <Error_Handler>
  }

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200006cc 	.word	0x200006cc
 8000680:	40005400 	.word	0x40005400
 8000684:	00061a80 	.word	0x00061a80

08000688 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a19      	ldr	r2, [pc, #100]	; (800070c <HAL_I2C_MspInit+0x84>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d12b      	bne.n	8000702 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a17      	ldr	r2, [pc, #92]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006c6:	23c0      	movs	r3, #192	; 0xc0
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ca:	2312      	movs	r3, #18
 80006cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006d6:	2304      	movs	r3, #4
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <HAL_I2C_MspInit+0x8c>)
 80006e2:	f001 fdf3 	bl	80022cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f4:	6413      	str	r3, [r2, #64]	; 0x40
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40005400 	.word	0x40005400
 8000710:	40023800 	.word	0x40023800
 8000714:	40020400 	.word	0x40020400

08000718 <OLED_page_sc>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void OLED_page_sc(){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 800071e:	f001 fc95 	bl	800204c <HAL_GetTick>
 8000722:	4602      	mov	r2, r0
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <OLED_page_sc+0xcc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800072e:	d955      	bls.n	80007dc <OLED_page_sc+0xc4>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000730:	2000      	movs	r0, #0
 8000732:	f000 fd61 	bl	80011f8 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 8000736:	2106      	movs	r1, #6
 8000738:	2004      	movs	r0, #4
 800073a:	f000 fdd5 	bl	80012e8 <SSD1306_GotoXY>
		SSD1306_Puts ("--MHS--", &Font_11x18, 1);
 800073e:	2201      	movs	r2, #1
 8000740:	4929      	ldr	r1, [pc, #164]	; (80007e8 <OLED_page_sc+0xd0>)
 8000742:	482a      	ldr	r0, [pc, #168]	; (80007ec <OLED_page_sc+0xd4>)
 8000744:	f000 fe66 	bl	8001414 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000748:	2119      	movs	r1, #25
 800074a:	2004      	movs	r0, #4
 800074c:	f000 fdcc 	bl	80012e8 <SSD1306_GotoXY>
		SSD1306_Puts ("PAGE", &Font_11x18, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	4925      	ldr	r1, [pc, #148]	; (80007e8 <OLED_page_sc+0xd0>)
 8000754:	4826      	ldr	r0, [pc, #152]	; (80007f0 <OLED_page_sc+0xd8>)
 8000756:	f000 fe5d 	bl	8001414 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 800075a:	212c      	movs	r1, #44	; 0x2c
 800075c:	2004      	movs	r0, #4
 800075e:	f000 fdc3 	bl	80012e8 <SSD1306_GotoXY>
		SSD1306_Puts ("NUMBER:", &Font_11x18, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	4920      	ldr	r1, [pc, #128]	; (80007e8 <OLED_page_sc+0xd0>)
 8000766:	4823      	ldr	r0, [pc, #140]	; (80007f4 <OLED_page_sc+0xdc>)
 8000768:	f000 fe54 	bl	8001414 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 800076c:	2301      	movs	r3, #1
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2301      	movs	r3, #1
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	2101      	movs	r1, #1
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fe71 	bl	800145e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 800077c:	2301      	movs	r3, #1
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2340      	movs	r3, #64	; 0x40
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2000      	movs	r0, #0
 8000788:	f000 fe69 	bl	800145e <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 800078c:	2301      	movs	r3, #1
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	2100      	movs	r1, #0
 8000796:	2080      	movs	r0, #128	; 0x80
 8000798:	f000 fe61 	bl	800145e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 800079c:	2301      	movs	r3, #1
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2340      	movs	r3, #64	; 0x40
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 fe59 	bl	800145e <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 80007ac:	2301      	movs	r3, #1
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	233e      	movs	r3, #62	; 0x3e
 80007b2:	221b      	movs	r2, #27
 80007b4:	2102      	movs	r1, #2
 80007b6:	2064      	movs	r0, #100	; 0x64
 80007b8:	f000 ff4c 	bl	8001654 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 80007bc:	2119      	movs	r1, #25
 80007be:	206e      	movs	r0, #110	; 0x6e
 80007c0:	f000 fd92 	bl	80012e8 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(pageNumber+'0'), &Font_11x18, 1);
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <OLED_page_sc+0xe0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	3330      	adds	r3, #48	; 0x30
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2201      	movs	r2, #1
 80007d0:	4905      	ldr	r1, [pc, #20]	; (80007e8 <OLED_page_sc+0xd0>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fd9e 	bl	8001314 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 80007d8:	f000 fce0 	bl	800119c <SSD1306_UpdateScreen>
	}
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200002a8 	.word	0x200002a8
 80007e8:	20000000 	.word	0x20000000
 80007ec:	08009108 	.word	0x08009108
 80007f0:	08009110 	.word	0x08009110
 80007f4:	08009118 	.word	0x08009118
 80007f8:	200002a4 	.word	0x200002a4

080007fc <OLED_login_sc>:

void OLED_login_sc(){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000802:	f001 fc23 	bl	800204c <HAL_GetTick>
 8000806:	4602      	mov	r2, r0
 8000808:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <OLED_login_sc+0xc8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000812:	d954      	bls.n	80008be <OLED_login_sc+0xc2>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fcef 	bl	80011f8 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 800081a:	2106      	movs	r1, #6
 800081c:	2004      	movs	r0, #4
 800081e:	f000 fd63 	bl	80012e8 <SSD1306_GotoXY>
		SSD1306_Puts ("-ENTER-", &Font_11x18, 1);
 8000822:	2201      	movs	r2, #1
 8000824:	4928      	ldr	r1, [pc, #160]	; (80008c8 <OLED_login_sc+0xcc>)
 8000826:	4829      	ldr	r0, [pc, #164]	; (80008cc <OLED_login_sc+0xd0>)
 8000828:	f000 fdf4 	bl	8001414 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 800082c:	2119      	movs	r1, #25
 800082e:	2004      	movs	r0, #4
 8000830:	f000 fd5a 	bl	80012e8 <SSD1306_GotoXY>
		SSD1306_Puts ("PASSWORD", &Font_11x18, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	4924      	ldr	r1, [pc, #144]	; (80008c8 <OLED_login_sc+0xcc>)
 8000838:	4825      	ldr	r0, [pc, #148]	; (80008d0 <OLED_login_sc+0xd4>)
 800083a:	f000 fdeb 	bl	8001414 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 800083e:	212c      	movs	r1, #44	; 0x2c
 8000840:	2004      	movs	r0, #4
 8000842:	f000 fd51 	bl	80012e8 <SSD1306_GotoXY>
		SSD1306_Puts ("TRIES:", &Font_11x18, 1);
 8000846:	2201      	movs	r2, #1
 8000848:	491f      	ldr	r1, [pc, #124]	; (80008c8 <OLED_login_sc+0xcc>)
 800084a:	4822      	ldr	r0, [pc, #136]	; (80008d4 <OLED_login_sc+0xd8>)
 800084c:	f000 fde2 	bl	8001414 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000850:	2301      	movs	r3, #1
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	2101      	movs	r1, #1
 800085a:	2000      	movs	r0, #0
 800085c:	f000 fdff 	bl	800145e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000860:	2301      	movs	r3, #1
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fdf7 	bl	800145e <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000870:	2301      	movs	r3, #1
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2340      	movs	r3, #64	; 0x40
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	2100      	movs	r1, #0
 800087a:	2080      	movs	r0, #128	; 0x80
 800087c:	f000 fdef 	bl	800145e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000880:	2301      	movs	r3, #1
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	2000      	movs	r0, #0
 800088c:	f000 fde7 	bl	800145e <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 8000890:	2301      	movs	r3, #1
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	233e      	movs	r3, #62	; 0x3e
 8000896:	221b      	movs	r2, #27
 8000898:	2102      	movs	r1, #2
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f000 feda 	bl	8001654 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 80008a0:	2119      	movs	r1, #25
 80008a2:	206e      	movs	r0, #110	; 0x6e
 80008a4:	f000 fd20 	bl	80012e8 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(loginTries+'0'), &Font_11x18, 1);
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <OLED_login_sc+0xdc>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	3330      	adds	r3, #48	; 0x30
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2201      	movs	r2, #1
 80008b2:	4905      	ldr	r1, [pc, #20]	; (80008c8 <OLED_login_sc+0xcc>)
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fd2d 	bl	8001314 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 80008ba:	f000 fc6f 	bl	800119c <SSD1306_UpdateScreen>
	}
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200002ac 	.word	0x200002ac
 80008c8:	20000000 	.word	0x20000000
 80008cc:	08009120 	.word	0x08009120
 80008d0:	08009128 	.word	0x08009128
 80008d4:	08009134 	.word	0x08009134
 80008d8:	20000092 	.word	0x20000092

080008dc <OLED_block_sc>:

void OLED_block_sc(){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 80008e2:	f001 fbb3 	bl	800204c <HAL_GetTick>
 80008e6:	4602      	mov	r2, r0
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <OLED_block_sc+0x8c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008f2:	d936      	bls.n	8000962 <OLED_block_sc+0x86>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 fc7f 	bl	80011f8 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 80008fa:	2106      	movs	r1, #6
 80008fc:	2004      	movs	r0, #4
 80008fe:	f000 fcf3 	bl	80012e8 <SSD1306_GotoXY>
		SSD1306_Puts ("- DEVICE  -", &Font_11x18, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	4919      	ldr	r1, [pc, #100]	; (800096c <OLED_block_sc+0x90>)
 8000906:	481a      	ldr	r0, [pc, #104]	; (8000970 <OLED_block_sc+0x94>)
 8000908:	f000 fd84 	bl	8001414 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 800090c:	2119      	movs	r1, #25
 800090e:	2004      	movs	r0, #4
 8000910:	f000 fcea 	bl	80012e8 <SSD1306_GotoXY>
		SSD1306_Puts ("- BLOCKED -", &Font_11x18, 1);
 8000914:	2201      	movs	r2, #1
 8000916:	4915      	ldr	r1, [pc, #84]	; (800096c <OLED_block_sc+0x90>)
 8000918:	4816      	ldr	r0, [pc, #88]	; (8000974 <OLED_block_sc+0x98>)
 800091a:	f000 fd7b 	bl	8001414 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 800091e:	2301      	movs	r3, #1
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2301      	movs	r3, #1
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	2101      	movs	r1, #1
 8000928:	2000      	movs	r0, #0
 800092a:	f000 fd98 	bl	800145e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 800092e:	2301      	movs	r3, #1
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2000      	movs	r0, #0
 800093a:	f000 fd90 	bl	800145e <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 800093e:	2301      	movs	r3, #1
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	2100      	movs	r1, #0
 8000948:	2080      	movs	r0, #128	; 0x80
 800094a:	f000 fd88 	bl	800145e <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 800094e:	2301      	movs	r3, #1
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2340      	movs	r3, #64	; 0x40
 8000954:	2280      	movs	r2, #128	; 0x80
 8000956:	2140      	movs	r1, #64	; 0x40
 8000958:	2000      	movs	r0, #0
 800095a:	f000 fd80 	bl	800145e <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 800095e:	f000 fc1d 	bl	800119c <SSD1306_UpdateScreen>
	}
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200002b0 	.word	0x200002b0
 800096c:	20000000 	.word	0x20000000
 8000970:	0800913c 	.word	0x0800913c
 8000974:	08009148 	.word	0x08009148

08000978 <sendUSB>:
		keyPressed = 9;
	}
	HAL_Delay(200);
}

void sendUSB(uint8_t *pass){
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	while(*pass != '\0'){
 8000980:	e066      	b.n	8000a50 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	e060      	b.n	8000a4a <sendUSB+0xd2>
			if(*pass == keys[i].value){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7819      	ldrb	r1, [r3, #0]
 800098c:	4834      	ldr	r0, [pc, #208]	; (8000a60 <sendUSB+0xe8>)
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	4613      	mov	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	4403      	add	r3, r0
 8000998:	3301      	adds	r3, #1
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4299      	cmp	r1, r3
 800099e:	d11f      	bne.n	80009e0 <sendUSB+0x68>
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 80009a0:	492f      	ldr	r1, [pc, #188]	; (8000a60 <sendUSB+0xe8>)
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	440b      	add	r3, r1
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <sendUSB+0xec>)
 80009b0:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 80009b2:	2208      	movs	r2, #8
 80009b4:	492b      	ldr	r1, [pc, #172]	; (8000a64 <sendUSB+0xec>)
 80009b6:	482c      	ldr	r0, [pc, #176]	; (8000a68 <sendUSB+0xf0>)
 80009b8:	f006 fd2e 	bl	8007418 <USBD_HID_SendReport>
				HAL_Delay(50);
 80009bc:	2032      	movs	r0, #50	; 0x32
 80009be:	f001 fb51 	bl	8002064 <HAL_Delay>
				keyboardhid.KEYCODE1 = 0x00;
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <sendUSB+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 80009c8:	2208      	movs	r2, #8
 80009ca:	4926      	ldr	r1, [pc, #152]	; (8000a64 <sendUSB+0xec>)
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <sendUSB+0xf0>)
 80009ce:	f006 fd23 	bl	8007418 <USBD_HID_SendReport>
				HAL_Delay(50);
 80009d2:	2032      	movs	r0, #50	; 0x32
 80009d4:	f001 fb46 	bl	8002064 <HAL_Delay>
				pass++;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3301      	adds	r3, #1
 80009dc:	607b      	str	r3, [r7, #4]
				break;
 80009de:	e037      	b.n	8000a50 <sendUSB+0xd8>
			}
			else if(*pass == keys[i].shiftValue){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7819      	ldrb	r1, [r3, #0]
 80009e4:	481e      	ldr	r0, [pc, #120]	; (8000a60 <sendUSB+0xe8>)
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	4403      	add	r3, r0
 80009f0:	3302      	adds	r3, #2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4299      	cmp	r1, r3
 80009f6:	d125      	bne.n	8000a44 <sendUSB+0xcc>
				keyboardhid.MODIFIER = 0x02; // lewy Shift naciśniety
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <sendUSB+0xec>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 80009fe:	4918      	ldr	r1, [pc, #96]	; (8000a60 <sendUSB+0xe8>)
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	781a      	ldrb	r2, [r3, #0]
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <sendUSB+0xec>)
 8000a0e:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000a10:	2208      	movs	r2, #8
 8000a12:	4914      	ldr	r1, [pc, #80]	; (8000a64 <sendUSB+0xec>)
 8000a14:	4814      	ldr	r0, [pc, #80]	; (8000a68 <sendUSB+0xf0>)
 8000a16:	f006 fcff 	bl	8007418 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000a1a:	2032      	movs	r0, #50	; 0x32
 8000a1c:	f001 fb22 	bl	8002064 <HAL_Delay>
				keyboardhid.MODIFIER = 0x00; // lewy Shift puszczony
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <sendUSB+0xec>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = 0x00;
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <sendUSB+0xec>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <sendUSB+0xec>)
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <sendUSB+0xf0>)
 8000a32:	f006 fcf1 	bl	8007418 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000a36:	2032      	movs	r0, #50	; 0x32
 8000a38:	f001 fb14 	bl	8002064 <HAL_Delay>
				pass++;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
				break;
 8000a42:	e005      	b.n	8000a50 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3301      	adds	r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8000a4e:	dd9b      	ble.n	8000988 <sendUSB+0x10>
	while(*pass != '\0'){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d194      	bne.n	8000982 <sendUSB+0xa>
			}
		}
	}
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000008 	.word	0x20000008
 8000a64:	2000029c 	.word	0x2000029c
 8000a68:	200009f0 	.word	0x200009f0

08000a6c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a70:	f001 fa86 	bl	8001f80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a74:	f000 f8b0 	bl	8000bd8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a78:	f7ff fd2e 	bl	80004d8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a7c:	f7ff fdd6 	bl	800062c <MX_I2C1_Init>
	MX_SPI3_Init();
 8000a80:	f000 fa4a 	bl	8000f18 <MX_SPI3_Init>
	MX_TIM2_Init();
 8000a84:	f000 ff96 	bl	80019b4 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000a88:	f007 fe22 	bl	80086d0 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	//---- Inicjalizacja wyświetlacza OLED ----
	SSD1306_Init();
 8000a8c:	f000 fac2 	bl	8001014 <SSD1306_Init>

	//---- Inicjalizacja obsługi enkodera ----
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000a90:	213c      	movs	r1, #60	; 0x3c
 8000a92:	4845      	ldr	r0, [pc, #276]	; (8000ba8 <main+0x13c>)
 8000a94:	f004 fd98 	bl	80055c8 <HAL_TIM_Encoder_Start_IT>

	//---- Inicjalizacja pamięci FLASH ----
	W25qxx_Init();
 8000a98:	f001 f8fc 	bl	8001c94 <W25qxx_Init>
	W25qxx_WritePage(passwordWrite, 9, 0, 256);
	memcpy(passwordWrite, "0\0", sizeof(passwordWrite));
	W25qxx_WritePage(passwordWrite, 10, 0, 256);*/

	//---- Inicjalizacja obsługi macierzy przycisków
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	4842      	ldr	r0, [pc, #264]	; (8000bac <main+0x140>)
 8000aa2:	f001 fdad 	bl	8002600 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	4840      	ldr	r0, [pc, #256]	; (8000bac <main+0x140>)
 8000aac:	f001 fda8 	bl	8002600 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	483d      	ldr	r0, [pc, #244]	; (8000bac <main+0x140>)
 8000ab6:	f001 fda3 	bl	8002600 <HAL_GPIO_WritePin>

	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	483b      	ldr	r0, [pc, #236]	; (8000bb0 <main+0x144>)
 8000ac2:	f001 fd9d 	bl	8002600 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(deviceState == 0){
 8000ac6:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <main+0x148>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d148      	bne.n	8000b60 <main+0xf4>
			OLED_login_sc();
 8000ace:	f7ff fe95 	bl	80007fc <OLED_login_sc>
			if(keyFlag){
 8000ad2:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <main+0x14c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d010      	beq.n	8000afe <main+0x92>
				loginBuff[loginCounter] = keyPressed;
 8000adc:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <main+0x150>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <main+0x154>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b2d9      	uxtb	r1, r3
 8000ae8:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <main+0x158>)
 8000aea:	5499      	strb	r1, [r3, r2]
				loginCounter++;
 8000aec:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <main+0x150>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <main+0x150>)
 8000af6:	701a      	strb	r2, [r3, #0]
				keyFlag = 0;
 8000af8:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <main+0x14c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
			}
			if(loginCounter == 4){
 8000afe:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <main+0x150>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	d124      	bne.n	8000b50 <main+0xe4>
				if(login[0] == loginBuff[0] && login[1] == loginBuff[1] && login[2] == loginBuff[2] && login[3] == loginBuff[3]){
 8000b06:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <main+0x15c>)
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <main+0x158>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d115      	bne.n	8000b3e <main+0xd2>
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <main+0x15c>)
 8000b14:	785a      	ldrb	r2, [r3, #1]
 8000b16:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <main+0x158>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d10f      	bne.n	8000b3e <main+0xd2>
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <main+0x15c>)
 8000b20:	789a      	ldrb	r2, [r3, #2]
 8000b22:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <main+0x158>)
 8000b24:	789b      	ldrb	r3, [r3, #2]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d109      	bne.n	8000b3e <main+0xd2>
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <main+0x15c>)
 8000b2c:	78da      	ldrb	r2, [r3, #3]
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <main+0x158>)
 8000b30:	78db      	ldrb	r3, [r3, #3]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d103      	bne.n	8000b3e <main+0xd2>
					deviceState = 1;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <main+0x148>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e008      	b.n	8000b50 <main+0xe4>
				}else{
					loginCounter = 0;
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <main+0x150>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
					loginTries--;
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <main+0x160>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <main+0x160>)
 8000b4e:	701a      	strb	r2, [r3, #0]
				}
			}
			if(loginTries == 0){
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <main+0x160>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1b6      	bne.n	8000ac6 <main+0x5a>
				deviceState = 99;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <main+0x148>)
 8000b5a:	2263      	movs	r2, #99	; 0x63
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	e7b2      	b.n	8000ac6 <main+0x5a>
			}
		}
		else if(deviceState == 99){
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <main+0x148>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b63      	cmp	r3, #99	; 0x63
 8000b66:	d102      	bne.n	8000b6e <main+0x102>
			OLED_block_sc();
 8000b68:	f7ff feb8 	bl	80008dc <OLED_block_sc>
 8000b6c:	e7ab      	b.n	8000ac6 <main+0x5a>
		}
		else{
			OLED_page_sc();
 8000b6e:	f7ff fdd3 	bl	8000718 <OLED_page_sc>
			if(keyFlag){
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <main+0x14c>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0a4      	beq.n	8000ac6 <main+0x5a>
				W25qxx_ReadPage(passwordRead, pageNumber*9+keyPressed, 0, 255);
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <main+0x164>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4613      	mov	r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	4413      	add	r3, r2
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <main+0x154>)
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	1899      	adds	r1, r3, r2
 8000b8e:	23ff      	movs	r3, #255	; 0xff
 8000b90:	2200      	movs	r2, #0
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <main+0x168>)
 8000b94:	f001 f94a 	bl	8001e2c <W25qxx_ReadPage>
				sendUSB(passwordRead);
 8000b98:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <main+0x168>)
 8000b9a:	f7ff feed 	bl	8000978 <sendUSB>
				keyFlag = 0;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <main+0x14c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
		if(deviceState == 0){
 8000ba4:	e78f      	b.n	8000ac6 <main+0x5a>
 8000ba6:	bf00      	nop
 8000ba8:	20000984 	.word	0x20000984
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	20000270 	.word	0x20000270
 8000bb8:	20000289 	.word	0x20000289
 8000bbc:	20000271 	.word	0x20000271
 8000bc0:	20000288 	.word	0x20000288
 8000bc4:	20000928 	.word	0x20000928
 8000bc8:	20000094 	.word	0x20000094
 8000bcc:	20000092 	.word	0x20000092
 8000bd0:	200002a4 	.word	0x200002a4
 8000bd4:	20000728 	.word	0x20000728

08000bd8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b094      	sub	sp, #80	; 0x50
 8000bdc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	2230      	movs	r2, #48	; 0x30
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f008 f9c0 	bl	8008f6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <SystemClock_Config+0xc8>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <SystemClock_Config+0xc8>)
 8000c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0c:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <SystemClock_Config+0xc8>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <SystemClock_Config+0xcc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <SystemClock_Config+0xcc>)
 8000c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <SystemClock_Config+0xcc>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000c48:	2319      	movs	r3, #25
 8000c4a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000c4c:	23c0      	movs	r3, #192	; 0xc0
 8000c4e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c54:	2304      	movs	r3, #4
 8000c56:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0320 	add.w	r3, r7, #32
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 fbd9 	bl	8004414 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000c68:	f000 f94e 	bl	8000f08 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	2302      	movs	r3, #2
 8000c72:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2103      	movs	r1, #3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fe33 	bl	80048f4 <HAL_RCC_ClockConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000c94:	f000 f938 	bl	8000f08 <Error_Handler>
	}
}
 8000c98:	bf00      	nop
 8000c9a:	3750      	adds	r7, #80	; 0x50
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40007000 	.word	0x40007000

08000ca8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000cb8:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000cc2:	801a      	strh	r2, [r3, #0]
	if(count - old_count > 5)
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	dd0e      	ble.n	8000cf6 <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(pageNumber > 0)
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d004      	beq.n	8000cea <HAL_TIM_IC_CaptureCallback+0x42>
			pageNumber--;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ce8:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000cec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000cf2:	801a      	strh	r2, [r3, #0]
		if(pageNumber < 9)
			pageNumber++;
		old_count = count;
	}

}
 8000cf4:	e018      	b.n	8000d28 <HAL_TIM_IC_CaptureCallback+0x80>
	}else if(count - old_count < -5)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	f113 0f05 	cmn.w	r3, #5
 8000d0a:	da0d      	bge.n	8000d28 <HAL_TIM_IC_CaptureCallback+0x80>
		if(pageNumber < 9)
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b08      	cmp	r3, #8
 8000d12:	d804      	bhi.n	8000d1e <HAL_TIM_IC_CaptureCallback+0x76>
			pageNumber++;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000d1c:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000d20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000d26:	801a      	strh	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	20000294 	.word	0x20000294
 8000d38:	20000298 	.word	0x20000298
 8000d3c:	2000029a 	.word	0x2000029a
 8000d40:	200002a4 	.word	0x200002a4

08000d44 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000d4e:	f001 f97d 	bl	800204c <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	4b65      	ldr	r3, [pc, #404]	; (8000eec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000d56:	601a      	str	r2, [r3, #0]
	if(currentMillis - previousMillis > 200)
 8000d58:	4b64      	ldr	r3, [pc, #400]	; (8000eec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b64      	ldr	r3, [pc, #400]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2bc8      	cmp	r3, #200	; 0xc8
 8000d64:	f240 80be 	bls.w	8000ee4 <HAL_GPIO_EXTI_Callback+0x1a0>
	{
		GPIO_InitStructPrivate.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000d68:	4b62      	ldr	r3, [pc, #392]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000d6a:	221c      	movs	r2, #28
 8000d6c:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000d6e:	4b61      	ldr	r3, [pc, #388]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000d74:	4b5f      	ldr	r3, [pc, #380]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	4b5e      	ldr	r3, [pc, #376]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000d80:	495c      	ldr	r1, [pc, #368]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000d82:	485d      	ldr	r0, [pc, #372]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000d84:	f001 faa2 	bl	80022cc <HAL_GPIO_Init>

		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	485a      	ldr	r0, [pc, #360]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000d8e:	f001 fc37 	bl	8002600 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	4858      	ldr	r0, [pc, #352]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000d98:	f001 fc32 	bl	8002600 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	4855      	ldr	r0, [pc, #340]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000da2:	f001 fc2d 	bl	8002600 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8000da6:	2110      	movs	r1, #16
 8000da8:	4853      	ldr	r0, [pc, #332]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000daa:	f001 fc11 	bl	80025d0 <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_EXTI_Callback+0x78>
			keyPressed = 1;
 8000db4:	4b51      	ldr	r3, [pc, #324]	; (8000efc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e014      	b.n	8000de6 <HAL_GPIO_EXTI_Callback+0xa2>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	484e      	ldr	r0, [pc, #312]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000dc0:	f001 fc06 	bl	80025d0 <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_EXTI_Callback+0x8e>
			keyPressed = 4;
 8000dca:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e009      	b.n	8000de6 <HAL_GPIO_EXTI_Callback+0xa2>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	4848      	ldr	r0, [pc, #288]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000dd6:	f001 fbfb 	bl	80025d0 <HAL_GPIO_ReadPin>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <HAL_GPIO_EXTI_Callback+0xa2>
			keyPressed = 7;
 8000de0:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000de2:	2207      	movs	r2, #7
 8000de4:	701a      	strb	r2, [r3, #0]

		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2120      	movs	r1, #32
 8000dea:	4843      	ldr	r0, [pc, #268]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000dec:	f001 fc08 	bl	8002600 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	4840      	ldr	r0, [pc, #256]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000df6:	f001 fc03 	bl	8002600 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	483e      	ldr	r0, [pc, #248]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000e00:	f001 fbfe 	bl	8002600 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8000e04:	2110      	movs	r1, #16
 8000e06:	483c      	ldr	r0, [pc, #240]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000e08:	f001 fbe2 	bl	80025d0 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_EXTI_Callback+0xd6>
			keyPressed = 2;
 8000e12:	4b3a      	ldr	r3, [pc, #232]	; (8000efc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000e14:	2202      	movs	r2, #2
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e014      	b.n	8000e44 <HAL_GPIO_EXTI_Callback+0x100>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8000e1a:	2108      	movs	r1, #8
 8000e1c:	4836      	ldr	r0, [pc, #216]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000e1e:	f001 fbd7 	bl	80025d0 <HAL_GPIO_ReadPin>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_EXTI_Callback+0xec>
			keyPressed = 5;
 8000e28:	4b34      	ldr	r3, [pc, #208]	; (8000efc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000e2a:	2205      	movs	r2, #5
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e009      	b.n	8000e44 <HAL_GPIO_EXTI_Callback+0x100>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8000e30:	2104      	movs	r1, #4
 8000e32:	4831      	ldr	r0, [pc, #196]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000e34:	f001 fbcc 	bl	80025d0 <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <HAL_GPIO_EXTI_Callback+0x100>
			keyPressed = 8;
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000e40:	2208      	movs	r2, #8
 8000e42:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2120      	movs	r1, #32
 8000e48:	482b      	ldr	r0, [pc, #172]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000e4a:	f001 fbd9 	bl	8002600 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2140      	movs	r1, #64	; 0x40
 8000e52:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000e54:	f001 fbd4 	bl	8002600 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	4826      	ldr	r0, [pc, #152]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000e5e:	f001 fbcf 	bl	8002600 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8000e62:	2110      	movs	r1, #16
 8000e64:	4824      	ldr	r0, [pc, #144]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000e66:	f001 fbb3 	bl	80025d0 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_EXTI_Callback+0x134>
			keyPressed = 3;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000e72:	2203      	movs	r2, #3
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e014      	b.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x15e>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8000e78:	2108      	movs	r1, #8
 8000e7a:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000e7c:	f001 fba8 	bl	80025d0 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_EXTI_Callback+0x14a>
			keyPressed = 6;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000e88:	2206      	movs	r2, #6
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	e009      	b.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x15e>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000e92:	f001 fb9d 	bl	80025d0 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x15e>
			keyPressed = 9;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000e9e:	2209      	movs	r2, #9
 8000ea0:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000ea8:	f001 fbaa 	bl	8002600 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2140      	movs	r1, #64	; 0x40
 8000eb0:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000eb2:	f001 fba5 	bl	8002600 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	480f      	ldr	r0, [pc, #60]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000ebc:	f001 fba0 	bl	8002600 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000ec4:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000ecc:	4909      	ldr	r1, [pc, #36]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000ece:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000ed0:	f001 f9fc 	bl	80022cc <HAL_GPIO_Init>


		keyFlag = 1;
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
		previousMillis = HAL_GetTick();
 8000eda:	f001 f8b7 	bl	800204c <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000ee2:	601a      	str	r2, [r3, #0]
	}

}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000290 	.word	0x20000290
 8000ef0:	2000028c 	.word	0x2000028c
 8000ef4:	20000274 	.word	0x20000274
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	20000288 	.word	0x20000288
 8000f00:	10110000 	.word	0x10110000
 8000f04:	20000289 	.word	0x20000289

08000f08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f1e:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <MX_SPI3_Init+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f48:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f64:	220a      	movs	r2, #10
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_SPI3_Init+0x64>)
 8000f6a:	f003 fe7b 	bl	8004c64 <HAL_SPI_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000f74:	f7ff ffc8 	bl	8000f08 <Error_Handler>
  }

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000092c 	.word	0x2000092c
 8000f80:	40003c00 	.word	0x40003c00

08000f84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a19      	ldr	r2, [pc, #100]	; (8001008 <HAL_SPI_MspInit+0x84>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d12b      	bne.n	8000ffe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fde:	2338      	movs	r3, #56	; 0x38
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_SPI_MspInit+0x8c>)
 8000ffa:	f001 f967 	bl	80022cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40003c00 	.word	0x40003c00
 800100c:	40023800 	.word	0x40023800
 8001010:	40020400 	.word	0x40020400

08001014 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800101a:	f000 fb85 	bl	8001728 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800101e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001022:	2201      	movs	r2, #1
 8001024:	2178      	movs	r1, #120	; 0x78
 8001026:	485b      	ldr	r0, [pc, #364]	; (8001194 <SSD1306_Init+0x180>)
 8001028:	f001 fd52 	bl	8002ad0 <HAL_I2C_IsDeviceReady>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001032:	2300      	movs	r3, #0
 8001034:	e0a9      	b.n	800118a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001036:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800103a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800103c:	e002      	b.n	8001044 <SSD1306_Init+0x30>
		p--;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3b01      	subs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f9      	bne.n	800103e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800104a:	22ae      	movs	r2, #174	; 0xae
 800104c:	2100      	movs	r1, #0
 800104e:	2078      	movs	r0, #120	; 0x78
 8001050:	f000 fbc6 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001054:	2220      	movs	r2, #32
 8001056:	2100      	movs	r1, #0
 8001058:	2078      	movs	r0, #120	; 0x78
 800105a:	f000 fbc1 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800105e:	2210      	movs	r2, #16
 8001060:	2100      	movs	r1, #0
 8001062:	2078      	movs	r0, #120	; 0x78
 8001064:	f000 fbbc 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001068:	22b0      	movs	r2, #176	; 0xb0
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	; 0x78
 800106e:	f000 fbb7 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001072:	22c8      	movs	r2, #200	; 0xc8
 8001074:	2100      	movs	r1, #0
 8001076:	2078      	movs	r0, #120	; 0x78
 8001078:	f000 fbb2 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2078      	movs	r0, #120	; 0x78
 8001082:	f000 fbad 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001086:	2210      	movs	r2, #16
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	; 0x78
 800108c:	f000 fba8 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001090:	2240      	movs	r2, #64	; 0x40
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	; 0x78
 8001096:	f000 fba3 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800109a:	2281      	movs	r2, #129	; 0x81
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	; 0x78
 80010a0:	f000 fb9e 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010a4:	22ff      	movs	r2, #255	; 0xff
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	; 0x78
 80010aa:	f000 fb99 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010ae:	22a1      	movs	r2, #161	; 0xa1
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	; 0x78
 80010b4:	f000 fb94 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010b8:	22a6      	movs	r2, #166	; 0xa6
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	; 0x78
 80010be:	f000 fb8f 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010c2:	22a8      	movs	r2, #168	; 0xa8
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	; 0x78
 80010c8:	f000 fb8a 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010cc:	223f      	movs	r2, #63	; 0x3f
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	; 0x78
 80010d2:	f000 fb85 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010d6:	22a4      	movs	r2, #164	; 0xa4
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 fb80 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80010e0:	22d3      	movs	r2, #211	; 0xd3
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	; 0x78
 80010e6:	f000 fb7b 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	; 0x78
 80010f0:	f000 fb76 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80010f4:	22d5      	movs	r2, #213	; 0xd5
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	; 0x78
 80010fa:	f000 fb71 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80010fe:	22f0      	movs	r2, #240	; 0xf0
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	; 0x78
 8001104:	f000 fb6c 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001108:	22d9      	movs	r2, #217	; 0xd9
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 fb67 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001112:	2222      	movs	r2, #34	; 0x22
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	; 0x78
 8001118:	f000 fb62 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800111c:	22da      	movs	r2, #218	; 0xda
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	; 0x78
 8001122:	f000 fb5d 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001126:	2212      	movs	r2, #18
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	; 0x78
 800112c:	f000 fb58 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001130:	22db      	movs	r2, #219	; 0xdb
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	; 0x78
 8001136:	f000 fb53 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800113a:	2220      	movs	r2, #32
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	; 0x78
 8001140:	f000 fb4e 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001144:	228d      	movs	r2, #141	; 0x8d
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	; 0x78
 800114a:	f000 fb49 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800114e:	2214      	movs	r2, #20
 8001150:	2100      	movs	r1, #0
 8001152:	2078      	movs	r0, #120	; 0x78
 8001154:	f000 fb44 	bl	80017e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001158:	22af      	movs	r2, #175	; 0xaf
 800115a:	2100      	movs	r1, #0
 800115c:	2078      	movs	r0, #120	; 0x78
 800115e:	f000 fb3f 	bl	80017e0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001162:	222e      	movs	r2, #46	; 0x2e
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	; 0x78
 8001168:	f000 fb3a 	bl	80017e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800116c:	2000      	movs	r0, #0
 800116e:	f000 f843 	bl	80011f8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001172:	f000 f813 	bl	800119c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <SSD1306_Init+0x184>)
 8001178:	2200      	movs	r2, #0
 800117a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SSD1306_Init+0x184>)
 800117e:	2200      	movs	r2, #0
 8001180:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SSD1306_Init+0x184>)
 8001184:	2201      	movs	r2, #1
 8001186:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001188:	2301      	movs	r3, #1
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200006cc 	.word	0x200006cc
 8001198:	200006b4 	.word	0x200006b4

0800119c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	e01d      	b.n	80011e4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	3b50      	subs	r3, #80	; 0x50
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	2100      	movs	r1, #0
 80011b2:	2078      	movs	r0, #120	; 0x78
 80011b4:	f000 fb14 	bl	80017e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	2078      	movs	r0, #120	; 0x78
 80011be:	f000 fb0f 	bl	80017e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80011c2:	2210      	movs	r2, #16
 80011c4:	2100      	movs	r1, #0
 80011c6:	2078      	movs	r0, #120	; 0x78
 80011c8:	f000 fb0a 	bl	80017e0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	01db      	lsls	r3, r3, #7
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <SSD1306_UpdateScreen+0x58>)
 80011d2:	441a      	add	r2, r3
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	2140      	movs	r1, #64	; 0x40
 80011d8:	2078      	movs	r0, #120	; 0x78
 80011da:	f000 fab9 	bl	8001750 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	3301      	adds	r3, #1
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b07      	cmp	r3, #7
 80011e8:	d9de      	bls.n	80011a8 <SSD1306_UpdateScreen+0xc>
	}
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200002b4 	.word	0x200002b4

080011f8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <SSD1306_Fill+0x14>
 8001208:	2300      	movs	r3, #0
 800120a:	e000      	b.n	800120e <SSD1306_Fill+0x16>
 800120c:	23ff      	movs	r3, #255	; 0xff
 800120e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001212:	4619      	mov	r1, r3
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <SSD1306_Fill+0x2c>)
 8001216:	f007 fea9 	bl	8008f6c <memset>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200002b4 	.word	0x200002b4

08001228 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
 8001232:	460b      	mov	r3, r1
 8001234:	80bb      	strh	r3, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	70fb      	strb	r3, [r7, #3]
	if (
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	2b7f      	cmp	r3, #127	; 0x7f
 800123e:	d848      	bhi.n	80012d2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	2b3f      	cmp	r3, #63	; 0x3f
 8001244:	d845      	bhi.n	80012d2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <SSD1306_DrawPixel+0xb8>)
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf0c      	ite	eq
 8001254:	2301      	moveq	r3, #1
 8001256:	2300      	movne	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d11a      	bne.n	8001298 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001262:	88fa      	ldrh	r2, [r7, #6]
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	b298      	uxth	r0, r3
 800126a:	4603      	mov	r3, r0
 800126c:	01db      	lsls	r3, r3, #7
 800126e:	4413      	add	r3, r2
 8001270:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <SSD1306_DrawPixel+0xbc>)
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	b25a      	sxtb	r2, r3
 8001276:	88bb      	ldrh	r3, [r7, #4]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	2101      	movs	r1, #1
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	b25b      	sxtb	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b259      	sxtb	r1, r3
 8001288:	88fa      	ldrh	r2, [r7, #6]
 800128a:	4603      	mov	r3, r0
 800128c:	01db      	lsls	r3, r3, #7
 800128e:	4413      	add	r3, r2
 8001290:	b2c9      	uxtb	r1, r1
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <SSD1306_DrawPixel+0xbc>)
 8001294:	54d1      	strb	r1, [r2, r3]
 8001296:	e01d      	b.n	80012d4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	88bb      	ldrh	r3, [r7, #4]
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	b298      	uxth	r0, r3
 80012a0:	4603      	mov	r3, r0
 80012a2:	01db      	lsls	r3, r3, #7
 80012a4:	4413      	add	r3, r2
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <SSD1306_DrawPixel+0xbc>)
 80012a8:	5cd3      	ldrb	r3, [r2, r3]
 80012aa:	b25a      	sxtb	r2, r3
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	2101      	movs	r1, #1
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	4013      	ands	r3, r2
 80012c0:	b259      	sxtb	r1, r3
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	4603      	mov	r3, r0
 80012c6:	01db      	lsls	r3, r3, #7
 80012c8:	4413      	add	r3, r2
 80012ca:	b2c9      	uxtb	r1, r1
 80012cc:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <SSD1306_DrawPixel+0xbc>)
 80012ce:	54d1      	strb	r1, [r2, r3]
 80012d0:	e000      	b.n	80012d4 <SSD1306_DrawPixel+0xac>
		return;
 80012d2:	bf00      	nop
	}
}
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	200006b4 	.word	0x200006b4
 80012e4:	200002b4 	.word	0x200002b4

080012e8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	80fb      	strh	r3, [r7, #6]
 80012f4:	4613      	mov	r3, r2
 80012f6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80012f8:	4a05      	ldr	r2, [pc, #20]	; (8001310 <SSD1306_GotoXY+0x28>)
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <SSD1306_GotoXY+0x28>)
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	8053      	strh	r3, [r2, #2]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	200006b4 	.word	0x200006b4

08001314 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	4613      	mov	r3, r2
 8001322:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001324:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <SSD1306_Putc+0xfc>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
	if (
 8001330:	2b7f      	cmp	r3, #127	; 0x7f
 8001332:	dc07      	bgt.n	8001344 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <SSD1306_Putc+0xfc>)
 8001336:	885b      	ldrh	r3, [r3, #2]
 8001338:	461a      	mov	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	785b      	ldrb	r3, [r3, #1]
 800133e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001340:	2b3f      	cmp	r3, #63	; 0x3f
 8001342:	dd01      	ble.n	8001348 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001344:	2300      	movs	r3, #0
 8001346:	e05e      	b.n	8001406 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e04b      	b.n	80013e6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	3b20      	subs	r3, #32
 8001356:	6839      	ldr	r1, [r7, #0]
 8001358:	7849      	ldrb	r1, [r1, #1]
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	4619      	mov	r1, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	440b      	add	r3, r1
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	e030      	b.n	80013d4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d010      	beq.n	80013a4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001382:	4b23      	ldr	r3, [pc, #140]	; (8001410 <SSD1306_Putc+0xfc>)
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b298      	uxth	r0, r3
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <SSD1306_Putc+0xfc>)
 8001390:	885a      	ldrh	r2, [r3, #2]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	b29b      	uxth	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	b29b      	uxth	r3, r3
 800139a:	79ba      	ldrb	r2, [r7, #6]
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff ff43 	bl	8001228 <SSD1306_DrawPixel>
 80013a2:	e014      	b.n	80013ce <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <SSD1306_Putc+0xfc>)
 80013a6:	881a      	ldrh	r2, [r3, #0]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	4413      	add	r3, r2
 80013ae:	b298      	uxth	r0, r3
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <SSD1306_Putc+0xfc>)
 80013b2:	885a      	ldrh	r2, [r3, #2]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	b299      	uxth	r1, r3
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	bf0c      	ite	eq
 80013c2:	2301      	moveq	r3, #1
 80013c4:	2300      	movne	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	f7ff ff2d 	bl	8001228 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	3301      	adds	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4293      	cmp	r3, r2
 80013de:	d3c8      	bcc.n	8001372 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	461a      	mov	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d3ad      	bcc.n	800134e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <SSD1306_Putc+0xfc>)
 80013f4:	881a      	ldrh	r2, [r3, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <SSD1306_Putc+0xfc>)
 8001402:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001404:	79fb      	ldrb	r3, [r7, #7]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200006b4 	.word	0x200006b4

08001414 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	4613      	mov	r3, r2
 8001420:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001422:	e012      	b.n	800144a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	79fa      	ldrb	r2, [r7, #7]
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff71 	bl	8001314 <SSD1306_Putc>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d002      	beq.n	8001444 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	e008      	b.n	8001456 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3301      	adds	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1e8      	bne.n	8001424 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	781b      	ldrb	r3, [r3, #0]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800145e:	b590      	push	{r4, r7, lr}
 8001460:	b087      	sub	sp, #28
 8001462:	af00      	add	r7, sp, #0
 8001464:	4604      	mov	r4, r0
 8001466:	4608      	mov	r0, r1
 8001468:	4611      	mov	r1, r2
 800146a:	461a      	mov	r2, r3
 800146c:	4623      	mov	r3, r4
 800146e:	80fb      	strh	r3, [r7, #6]
 8001470:	4603      	mov	r3, r0
 8001472:	80bb      	strh	r3, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	2b7f      	cmp	r3, #127	; 0x7f
 8001480:	d901      	bls.n	8001486 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001482:	237f      	movs	r3, #127	; 0x7f
 8001484:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	2b7f      	cmp	r3, #127	; 0x7f
 800148a:	d901      	bls.n	8001490 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 800148c:	237f      	movs	r3, #127	; 0x7f
 800148e:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	2b3f      	cmp	r3, #63	; 0x3f
 8001494:	d901      	bls.n	800149a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001496:	233f      	movs	r3, #63	; 0x3f
 8001498:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800149a:	883b      	ldrh	r3, [r7, #0]
 800149c:	2b3f      	cmp	r3, #63	; 0x3f
 800149e:	d901      	bls.n	80014a4 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80014a0:	233f      	movs	r3, #63	; 0x3f
 80014a2:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80014a4:	88fa      	ldrh	r2, [r7, #6]
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d205      	bcs.n	80014b8 <SSD1306_DrawLine+0x5a>
 80014ac:	887a      	ldrh	r2, [r7, #2]
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	e004      	b.n	80014c2 <SSD1306_DrawLine+0x64>
 80014b8:	88fa      	ldrh	r2, [r7, #6]
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80014c4:	88ba      	ldrh	r2, [r7, #4]
 80014c6:	883b      	ldrh	r3, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d205      	bcs.n	80014d8 <SSD1306_DrawLine+0x7a>
 80014cc:	883a      	ldrh	r2, [r7, #0]
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	e004      	b.n	80014e2 <SSD1306_DrawLine+0x84>
 80014d8:	88ba      	ldrh	r2, [r7, #4]
 80014da:	883b      	ldrh	r3, [r7, #0]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d201      	bcs.n	80014f0 <SSD1306_DrawLine+0x92>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e001      	b.n	80014f4 <SSD1306_DrawLine+0x96>
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80014f6:	88ba      	ldrh	r2, [r7, #4]
 80014f8:	883b      	ldrh	r3, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d201      	bcs.n	8001502 <SSD1306_DrawLine+0xa4>
 80014fe:	2301      	movs	r3, #1
 8001500:	e001      	b.n	8001506 <SSD1306_DrawLine+0xa8>
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001508:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800150c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	dd06      	ble.n	8001522 <SSD1306_DrawLine+0xc4>
 8001514:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001518:	0fda      	lsrs	r2, r3, #31
 800151a:	4413      	add	r3, r2
 800151c:	105b      	asrs	r3, r3, #1
 800151e:	b21b      	sxth	r3, r3
 8001520:	e006      	b.n	8001530 <SSD1306_DrawLine+0xd2>
 8001522:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001526:	425b      	negs	r3, r3
 8001528:	0fda      	lsrs	r2, r3, #31
 800152a:	4413      	add	r3, r2
 800152c:	105b      	asrs	r3, r3, #1
 800152e:	b21b      	sxth	r3, r3
 8001530:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001532:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d129      	bne.n	800158e <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800153a:	883a      	ldrh	r2, [r7, #0]
 800153c:	88bb      	ldrh	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	d205      	bcs.n	800154e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001542:	883b      	ldrh	r3, [r7, #0]
 8001544:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001546:	88bb      	ldrh	r3, [r7, #4]
 8001548:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800154a:	893b      	ldrh	r3, [r7, #8]
 800154c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	429a      	cmp	r2, r3
 8001554:	d205      	bcs.n	8001562 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800155e:	893b      	ldrh	r3, [r7, #8]
 8001560:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	82bb      	strh	r3, [r7, #20]
 8001566:	e00c      	b.n	8001582 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001568:	8ab9      	ldrh	r1, [r7, #20]
 800156a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe59 	bl	8001228 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001576:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800157a:	b29b      	uxth	r3, r3
 800157c:	3301      	adds	r3, #1
 800157e:	b29b      	uxth	r3, r3
 8001580:	82bb      	strh	r3, [r7, #20]
 8001582:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001586:	883b      	ldrh	r3, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	dded      	ble.n	8001568 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 800158c:	e05f      	b.n	800164e <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800158e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d129      	bne.n	80015ea <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001596:	883a      	ldrh	r2, [r7, #0]
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	d205      	bcs.n	80015aa <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800159e:	883b      	ldrh	r3, [r7, #0]
 80015a0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80015a2:	88bb      	ldrh	r3, [r7, #4]
 80015a4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80015a6:	893b      	ldrh	r3, [r7, #8]
 80015a8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d205      	bcs.n	80015be <SSD1306_DrawLine+0x160>
			tmp = x1;
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80015ba:	893b      	ldrh	r3, [r7, #8]
 80015bc:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	82bb      	strh	r3, [r7, #20]
 80015c2:	e00c      	b.n	80015de <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80015c4:	8abb      	ldrh	r3, [r7, #20]
 80015c6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80015ca:	88b9      	ldrh	r1, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fe2b 	bl	8001228 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80015d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	b29b      	uxth	r3, r3
 80015dc:	82bb      	strh	r3, [r7, #20]
 80015de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dded      	ble.n	80015c4 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80015e8:	e031      	b.n	800164e <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80015ea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80015ee:	88b9      	ldrh	r1, [r7, #4]
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe18 	bl	8001228 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80015f8:	88fa      	ldrh	r2, [r7, #6]
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d103      	bne.n	8001608 <SSD1306_DrawLine+0x1aa>
 8001600:	88ba      	ldrh	r2, [r7, #4]
 8001602:	883b      	ldrh	r3, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d021      	beq.n	800164c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001608:	8afb      	ldrh	r3, [r7, #22]
 800160a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800160c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001610:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001614:	425b      	negs	r3, r3
 8001616:	429a      	cmp	r2, r3
 8001618:	dd08      	ble.n	800162c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800161a:	8afa      	ldrh	r2, [r7, #22]
 800161c:	8a3b      	ldrh	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001624:	89fa      	ldrh	r2, [r7, #14]
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	4413      	add	r3, r2
 800162a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 800162c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001630:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	dad8      	bge.n	80015ea <SSD1306_DrawLine+0x18c>
			err += dx;
 8001638:	8afa      	ldrh	r2, [r7, #22]
 800163a:	8a7b      	ldrh	r3, [r7, #18]
 800163c:	4413      	add	r3, r2
 800163e:	b29b      	uxth	r3, r3
 8001640:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001642:	89ba      	ldrh	r2, [r7, #12]
 8001644:	88bb      	ldrh	r3, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800164a:	e7ce      	b.n	80015ea <SSD1306_DrawLine+0x18c>
			break;
 800164c:	bf00      	nop
		} 
	}
}
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd90      	pop	{r4, r7, pc}

08001654 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b085      	sub	sp, #20
 8001658:	af02      	add	r7, sp, #8
 800165a:	4604      	mov	r4, r0
 800165c:	4608      	mov	r0, r1
 800165e:	4611      	mov	r1, r2
 8001660:	461a      	mov	r2, r3
 8001662:	4623      	mov	r3, r4
 8001664:	80fb      	strh	r3, [r7, #6]
 8001666:	4603      	mov	r3, r0
 8001668:	80bb      	strh	r3, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	807b      	strh	r3, [r7, #2]
 800166e:	4613      	mov	r3, r2
 8001670:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	2b7f      	cmp	r3, #127	; 0x7f
 8001676:	d853      	bhi.n	8001720 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001678:	88bb      	ldrh	r3, [r7, #4]
 800167a:	2b3f      	cmp	r3, #63	; 0x3f
 800167c:	d850      	bhi.n	8001720 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800167e:	88fa      	ldrh	r2, [r7, #6]
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	4413      	add	r3, r2
 8001684:	2b7f      	cmp	r3, #127	; 0x7f
 8001686:	dd03      	ble.n	8001690 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800168e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001690:	88ba      	ldrh	r2, [r7, #4]
 8001692:	883b      	ldrh	r3, [r7, #0]
 8001694:	4413      	add	r3, r2
 8001696:	2b3f      	cmp	r3, #63	; 0x3f
 8001698:	dd03      	ble.n	80016a2 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 800169a:	88bb      	ldrh	r3, [r7, #4]
 800169c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80016a0:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 80016a2:	88fa      	ldrh	r2, [r7, #6]
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	4413      	add	r3, r2
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	88bc      	ldrh	r4, [r7, #4]
 80016ac:	88b9      	ldrh	r1, [r7, #4]
 80016ae:	88f8      	ldrh	r0, [r7, #6]
 80016b0:	7e3b      	ldrb	r3, [r7, #24]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4623      	mov	r3, r4
 80016b6:	f7ff fed2 	bl	800145e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 80016ba:	88ba      	ldrh	r2, [r7, #4]
 80016bc:	883b      	ldrh	r3, [r7, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	b299      	uxth	r1, r3
 80016c2:	88fa      	ldrh	r2, [r7, #6]
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	4413      	add	r3, r2
 80016c8:	b29c      	uxth	r4, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	883b      	ldrh	r3, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	88f8      	ldrh	r0, [r7, #6]
 80016d4:	7e3b      	ldrb	r3, [r7, #24]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	4622      	mov	r2, r4
 80016dc:	f7ff febf 	bl	800145e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80016e0:	88ba      	ldrh	r2, [r7, #4]
 80016e2:	883b      	ldrh	r3, [r7, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	b29c      	uxth	r4, r3
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	88b9      	ldrh	r1, [r7, #4]
 80016ec:	88f8      	ldrh	r0, [r7, #6]
 80016ee:	7e3b      	ldrb	r3, [r7, #24]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	4623      	mov	r3, r4
 80016f4:	f7ff feb3 	bl	800145e <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80016f8:	88fa      	ldrh	r2, [r7, #6]
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	4413      	add	r3, r2
 80016fe:	b298      	uxth	r0, r3
 8001700:	88fa      	ldrh	r2, [r7, #6]
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	4413      	add	r3, r2
 8001706:	b29c      	uxth	r4, r3
 8001708:	88ba      	ldrh	r2, [r7, #4]
 800170a:	883b      	ldrh	r3, [r7, #0]
 800170c:	4413      	add	r3, r2
 800170e:	b29a      	uxth	r2, r3
 8001710:	88b9      	ldrh	r1, [r7, #4]
 8001712:	7e3b      	ldrb	r3, [r7, #24]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	4613      	mov	r3, r2
 8001718:	4622      	mov	r2, r4
 800171a:	f7ff fea0 	bl	800145e <SSD1306_DrawLine>
 800171e:	e000      	b.n	8001722 <SSD1306_DrawRectangle+0xce>
		return;
 8001720:	bf00      	nop
}
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}

08001728 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <ssd1306_I2C_Init+0x24>)
 8001730:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001732:	e002      	b.n	800173a <ssd1306_I2C_Init+0x12>
		p--;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	607b      	str	r3, [r7, #4]
	while(p>0)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f9      	bne.n	8001734 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	0003d090 	.word	0x0003d090

08001750 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b0c7      	sub	sp, #284	; 0x11c
 8001754:	af02      	add	r7, sp, #8
 8001756:	4604      	mov	r4, r0
 8001758:	4608      	mov	r0, r1
 800175a:	4639      	mov	r1, r7
 800175c:	600a      	str	r2, [r1, #0]
 800175e:	4619      	mov	r1, r3
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	4622      	mov	r2, r4
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	1dbb      	adds	r3, r7, #6
 8001768:	4602      	mov	r2, r0
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	460a      	mov	r2, r1
 8001770:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	1dba      	adds	r2, r7, #6
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800177c:	2300      	movs	r3, #0
 800177e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001782:	e010      	b.n	80017a6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001784:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001788:	463a      	mov	r2, r7
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	441a      	add	r2, r3
 800178e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001792:	3301      	adds	r3, #1
 8001794:	7811      	ldrb	r1, [r2, #0]
 8001796:	f107 020c 	add.w	r2, r7, #12
 800179a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800179c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017a0:	3301      	adds	r3, #1
 80017a2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80017a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	1d3a      	adds	r2, r7, #4
 80017ae:	8812      	ldrh	r2, [r2, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8e7      	bhi.n	8001784 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80017b4:	1dfb      	adds	r3, r7, #7
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b299      	uxth	r1, r3
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	b298      	uxth	r0, r3
 80017c2:	f107 020c 	add.w	r2, r7, #12
 80017c6:	230a      	movs	r3, #10
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	4603      	mov	r3, r0
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <ssd1306_I2C_WriteMulti+0x8c>)
 80017ce:	f001 f881 	bl	80028d4 <HAL_I2C_Master_Transmit>
}
 80017d2:	bf00      	nop
 80017d4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd90      	pop	{r4, r7, pc}
 80017dc:	200006cc 	.word	0x200006cc

080017e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	460b      	mov	r3, r1
 80017ec:	71bb      	strb	r3, [r7, #6]
 80017ee:	4613      	mov	r3, r2
 80017f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	b299      	uxth	r1, r3
 80017fe:	f107 020c 	add.w	r2, r7, #12
 8001802:	230a      	movs	r3, #10
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2302      	movs	r3, #2
 8001808:	4803      	ldr	r0, [pc, #12]	; (8001818 <ssd1306_I2C_Write+0x38>)
 800180a:	f001 f863 	bl	80028d4 <HAL_I2C_Master_Transmit>
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200006cc 	.word	0x200006cc

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <HAL_MspInit+0x4c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a0f      	ldr	r2, [pc, #60]	; (8001868 <HAL_MspInit+0x4c>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_MspInit+0x4c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_MspInit+0x4c>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f000 fbb0 	bl	8002024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80018cc:	2004      	movs	r0, #4
 80018ce:	f000 feb1 	bl	8002634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80018da:	2008      	movs	r0, #8
 80018dc:	f000 feaa 	bl	8002634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80018e8:	2010      	movs	r0, #16
 80018ea:	f000 fea3 	bl	8002634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <TIM2_IRQHandler+0x10>)
 80018fa:	f003 febc 	bl	8005676 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000984 	.word	0x20000984

08001908 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <OTG_FS_IRQHandler+0x10>)
 800190e:	f001 fd66 	bl	80033de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000ec0 	.word	0x20000ec0

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f007 fad4 	bl	8008ef8 <__errno>
 8001950:	4602      	mov	r2, r0
 8001952:	230c      	movs	r3, #12
 8001954:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20020000 	.word	0x20020000
 800197c:	00000400 	.word	0x00000400
 8001980:	200006bc 	.word	0x200006bc
 8001984:	200012d0 	.word	0x200012d0

08001988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <SystemInit+0x28>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <SystemInit+0x28>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SystemInit+0x28>)
 800199e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a2:	609a      	str	r2, [r3, #8]
#endif
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	2224      	movs	r2, #36	; 0x24
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f007 fad2 	bl	8008f6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019e6:	f04f 32ff 	mov.w	r2, #4294967295
 80019ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019f8:	2303      	movs	r3, #3
 80019fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80019fc:	2302      	movs	r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a00:	2301      	movs	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a08:	230a      	movs	r3, #10
 8001a0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a10:	2301      	movs	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001a18:	230a      	movs	r3, #10
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4619      	mov	r1, r3
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <MX_TIM2_Init+0xa4>)
 8001a24:	f003 fd3e 	bl	80054a4 <HAL_TIM_Encoder_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a2e:	f7ff fa6b 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <MX_TIM2_Init+0xa4>)
 8001a40:	f003 fff0 	bl	8005a24 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a4a:	f7ff fa5d 	bl	8000f08 <Error_Handler>
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3730      	adds	r7, #48	; 0x30
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000984 	.word	0x20000984

08001a5c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d133      	bne.n	8001ae6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4808      	ldr	r0, [pc, #32]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ad2:	f000 fbfb 	bl	80022cc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	201c      	movs	r0, #28
 8001adc:	f000 fbbf 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae0:	201c      	movs	r0, #28
 8001ae2:	f000 fbd8 	bl	8002296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000

08001af8 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001b02:	f107 020f 	add.w	r2, r7, #15
 8001b06:	1df9      	adds	r1, r7, #7
 8001b08:	2364      	movs	r3, #100	; 0x64
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	4804      	ldr	r0, [pc, #16]	; (8001b20 <W25qxx_Spi+0x28>)
 8001b10:	f003 fa15 	bl	8004f3e <HAL_SPI_TransmitReceive>
	return ret;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000092c 	.word	0x2000092c

08001b24 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b40:	4813      	ldr	r0, [pc, #76]	; (8001b90 <W25qxx_ReadID+0x6c>)
 8001b42:	f000 fd5d 	bl	8002600 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001b46:	209f      	movs	r0, #159	; 0x9f
 8001b48:	f7ff ffd6 	bl	8001af8 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001b4c:	20a5      	movs	r0, #165	; 0xa5
 8001b4e:	f7ff ffd3 	bl	8001af8 <W25qxx_Spi>
 8001b52:	4603      	mov	r3, r0
 8001b54:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001b56:	20a5      	movs	r0, #165	; 0xa5
 8001b58:	f7ff ffce 	bl	8001af8 <W25qxx_Spi>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001b60:	20a5      	movs	r0, #165	; 0xa5
 8001b62:	f7ff ffc9 	bl	8001af8 <W25qxx_Spi>
 8001b66:	4603      	mov	r3, r0
 8001b68:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b70:	4807      	ldr	r0, [pc, #28]	; (8001b90 <W25qxx_ReadID+0x6c>)
 8001b72:	f000 fd45 	bl	8002600 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	041a      	lsls	r2, r3, #16
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40020000 	.word	0x40020000

08001b94 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba0:	4816      	ldr	r0, [pc, #88]	; (8001bfc <W25qxx_ReadUniqID+0x68>)
 8001ba2:	f000 fd2d 	bl	8002600 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8001ba6:	204b      	movs	r0, #75	; 0x4b
 8001ba8:	f7ff ffa6 	bl	8001af8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	71fb      	strb	r3, [r7, #7]
 8001bb0:	e005      	b.n	8001bbe <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001bb2:	20a5      	movs	r0, #165	; 0xa5
 8001bb4:	f7ff ffa0 	bl	8001af8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	71fb      	strb	r3, [r7, #7]
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d9f6      	bls.n	8001bb2 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	71bb      	strb	r3, [r7, #6]
 8001bc8:	e00b      	b.n	8001be2 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001bca:	79bc      	ldrb	r4, [r7, #6]
 8001bcc:	20a5      	movs	r0, #165	; 0xa5
 8001bce:	f7ff ff93 	bl	8001af8 <W25qxx_Spi>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <W25qxx_ReadUniqID+0x6c>)
 8001bd8:	4423      	add	r3, r4
 8001bda:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8001bdc:	79bb      	ldrb	r3, [r7, #6]
 8001bde:	3301      	adds	r3, #1
 8001be0:	71bb      	strb	r3, [r7, #6]
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d9f0      	bls.n	8001bca <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <W25qxx_ReadUniqID+0x68>)
 8001bf0:	f000 fd06 	bl	8002600 <HAL_GPIO_WritePin>
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	200009c4 	.word	0x200009c4

08001c04 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c18:	481c      	ldr	r0, [pc, #112]	; (8001c8c <W25qxx_ReadStatusRegister+0x88>)
 8001c1a:	f000 fcf1 	bl	8002600 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10c      	bne.n	8001c3e <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8001c24:	2005      	movs	r0, #5
 8001c26:	f7ff ff67 	bl	8001af8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c2a:	20a5      	movs	r0, #165	; 0xa5
 8001c2c:	f7ff ff64 	bl	8001af8 <W25qxx_Spi>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001c34:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <W25qxx_ReadStatusRegister+0x8c>)
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001c3c:	e01b      	b.n	8001c76 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d10c      	bne.n	8001c5e <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8001c44:	2035      	movs	r0, #53	; 0x35
 8001c46:	f7ff ff57 	bl	8001af8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c4a:	20a5      	movs	r0, #165	; 0xa5
 8001c4c:	f7ff ff54 	bl	8001af8 <W25qxx_Spi>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <W25qxx_ReadStatusRegister+0x8c>)
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001c5c:	e00b      	b.n	8001c76 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001c5e:	2015      	movs	r0, #21
 8001c60:	f7ff ff4a 	bl	8001af8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c64:	20a5      	movs	r0, #165	; 0xa5
 8001c66:	f7ff ff47 	bl	8001af8 <W25qxx_Spi>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001c6e:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <W25qxx_ReadStatusRegister+0x8c>)
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <W25qxx_ReadStatusRegister+0x88>)
 8001c7e:	f000 fcbf 	bl	8002600 <HAL_GPIO_WritePin>
	return status;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	200009c4 	.word	0x200009c4

08001c94 <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8001c9a:	4b62      	ldr	r3, [pc, #392]	; (8001e24 <W25qxx_Init+0x190>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//while (HAL_GetTick() < 100)
	//	W25qxx_Delay(1);
	W25qxx_Delay(100);
 8001ca2:	2064      	movs	r0, #100	; 0x64
 8001ca4:	f000 f9de 	bl	8002064 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cae:	485e      	ldr	r0, [pc, #376]	; (8001e28 <W25qxx_Init+0x194>)
 8001cb0:	f000 fca6 	bl	8002600 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001cb4:	2064      	movs	r0, #100	; 0x64
 8001cb6:	f000 f9d5 	bl	8002064 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8001cba:	f7ff ff33 	bl	8001b24 <W25qxx_ReadID>
 8001cbe:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	3b11      	subs	r3, #17
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	d86b      	bhi.n	8001da2 <W25qxx_Init+0x10e>
 8001cca:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <W25qxx_Init+0x3c>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001d95 	.word	0x08001d95
 8001cd4:	08001d87 	.word	0x08001d87
 8001cd8:	08001d79 	.word	0x08001d79
 8001cdc:	08001d6b 	.word	0x08001d6b
 8001ce0:	08001d5d 	.word	0x08001d5d
 8001ce4:	08001d4f 	.word	0x08001d4f
 8001ce8:	08001d41 	.word	0x08001d41
 8001cec:	08001d31 	.word	0x08001d31
 8001cf0:	08001d21 	.word	0x08001d21
 8001cf4:	08001da3 	.word	0x08001da3
 8001cf8:	08001da3 	.word	0x08001da3
 8001cfc:	08001da3 	.word	0x08001da3
 8001d00:	08001da3 	.word	0x08001da3
 8001d04:	08001da3 	.word	0x08001da3
 8001d08:	08001da3 	.word	0x08001da3
 8001d0c:	08001d11 	.word	0x08001d11
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8001d10:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <W25qxx_Init+0x190>)
 8001d12:	220a      	movs	r2, #10
 8001d14:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <W25qxx_Init+0x190>)
 8001d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8001d1e:	e046      	b.n	8001dae <W25qxx_Init+0x11a>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8001d20:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <W25qxx_Init+0x190>)
 8001d22:	2209      	movs	r2, #9
 8001d24:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8001d26:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <W25qxx_Init+0x190>)
 8001d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d2c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8001d2e:	e03e      	b.n	8001dae <W25qxx_Init+0x11a>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8001d30:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <W25qxx_Init+0x190>)
 8001d32:	2208      	movs	r2, #8
 8001d34:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <W25qxx_Init+0x190>)
 8001d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8001d3e:	e036      	b.n	8001dae <W25qxx_Init+0x11a>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <W25qxx_Init+0x190>)
 8001d42:	2207      	movs	r2, #7
 8001d44:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8001d46:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <W25qxx_Init+0x190>)
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8001d4c:	e02f      	b.n	8001dae <W25qxx_Init+0x11a>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <W25qxx_Init+0x190>)
 8001d50:	2206      	movs	r2, #6
 8001d52:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <W25qxx_Init+0x190>)
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8001d5a:	e028      	b.n	8001dae <W25qxx_Init+0x11a>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <W25qxx_Init+0x190>)
 8001d5e:	2205      	movs	r2, #5
 8001d60:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <W25qxx_Init+0x190>)
 8001d64:	2220      	movs	r2, #32
 8001d66:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8001d68:	e021      	b.n	8001dae <W25qxx_Init+0x11a>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <W25qxx_Init+0x190>)
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8001d70:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <W25qxx_Init+0x190>)
 8001d72:	2210      	movs	r2, #16
 8001d74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8001d76:	e01a      	b.n	8001dae <W25qxx_Init+0x11a>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <W25qxx_Init+0x190>)
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <W25qxx_Init+0x190>)
 8001d80:	2208      	movs	r2, #8
 8001d82:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8001d84:	e013      	b.n	8001dae <W25qxx_Init+0x11a>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8001d86:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <W25qxx_Init+0x190>)
 8001d88:	2202      	movs	r2, #2
 8001d8a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <W25qxx_Init+0x190>)
 8001d8e:	2204      	movs	r2, #4
 8001d90:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8001d92:	e00c      	b.n	8001dae <W25qxx_Init+0x11a>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <W25qxx_Init+0x190>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <W25qxx_Init+0x190>)
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8001da0:	e005      	b.n	8001dae <W25qxx_Init+0x11a>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <W25qxx_Init+0x190>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e036      	b.n	8001e1c <W25qxx_Init+0x188>
	}
	w25qxx.PageSize = 256;
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <W25qxx_Init+0x190>)
 8001db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db4:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <W25qxx_Init+0x190>)
 8001db8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dbc:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <W25qxx_Init+0x190>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <W25qxx_Init+0x190>)
 8001dc6:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <W25qxx_Init+0x190>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	4a15      	ldr	r2, [pc, #84]	; (8001e24 <W25qxx_Init+0x190>)
 8001dce:	6912      	ldr	r2, [r2, #16]
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
 8001dd4:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <W25qxx_Init+0x190>)
 8001dd6:	8952      	ldrh	r2, [r2, #10]
 8001dd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ddc:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <W25qxx_Init+0x190>)
 8001dde:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <W25qxx_Init+0x190>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	4a0f      	ldr	r2, [pc, #60]	; (8001e24 <W25qxx_Init+0x190>)
 8001de8:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <W25qxx_Init+0x190>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <W25qxx_Init+0x190>)
 8001df0:	6912      	ldr	r2, [r2, #16]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	0a9b      	lsrs	r3, r3, #10
 8001df8:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <W25qxx_Init+0x190>)
 8001dfa:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001dfc:	f7ff feca 	bl	8001b94 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001e00:	2001      	movs	r0, #1
 8001e02:	f7ff feff 	bl	8001c04 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001e06:	2002      	movs	r0, #2
 8001e08:	f7ff fefc 	bl	8001c04 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f7ff fef9 	bl	8001c04 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <W25qxx_Init+0x190>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200009c4 	.word	0x200009c4
 8001e28:	40020000 	.word	0x40020000

08001e2c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8001e3a:	e002      	b.n	8001e42 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f000 f911 	bl	8002064 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001e42:	4b37      	ldr	r3, [pc, #220]	; (8001f20 <W25qxx_ReadPage+0xf4>)
 8001e44:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d0f7      	beq.n	8001e3c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <W25qxx_ReadPage+0xf4>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8001e54:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <W25qxx_ReadPage+0xf4>)
 8001e56:	895b      	ldrh	r3, [r3, #10]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d802      	bhi.n	8001e66 <W25qxx_ReadPage+0x3a>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <W25qxx_ReadPage+0xf4>)
 8001e68:	895b      	ldrh	r3, [r3, #10]
 8001e6a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a2b      	ldr	r2, [pc, #172]	; (8001f20 <W25qxx_ReadPage+0xf4>)
 8001e74:	8952      	ldrh	r2, [r2, #10]
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d905      	bls.n	8001e86 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <W25qxx_ReadPage+0xf4>)
 8001e7c:	895b      	ldrh	r3, [r3, #10]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <W25qxx_ReadPage+0xf4>)
 8001e88:	895b      	ldrh	r3, [r3, #10]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	fb03 f302 	mul.w	r3, r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e9e:	4821      	ldr	r0, [pc, #132]	; (8001f24 <W25qxx_ReadPage+0xf8>)
 8001ea0:	f000 fbae 	bl	8002600 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <W25qxx_ReadPage+0xf4>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d909      	bls.n	8001ec0 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 8001eac:	200c      	movs	r0, #12
 8001eae:	f7ff fe23 	bl	8001af8 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	0e1b      	lsrs	r3, r3, #24
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fe1d 	bl	8001af8 <W25qxx_Spi>
 8001ebe:	e002      	b.n	8001ec6 <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8001ec0:	200b      	movs	r0, #11
 8001ec2:	f7ff fe19 	bl	8001af8 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fe13 	bl	8001af8 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fe0d 	bl	8001af8 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fe08 	bl	8001af8 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff fe05 	bl	8001af8 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	2364      	movs	r3, #100	; 0x64
 8001ef4:	68f9      	ldr	r1, [r7, #12]
 8001ef6:	480c      	ldr	r0, [pc, #48]	; (8001f28 <W25qxx_ReadPage+0xfc>)
 8001ef8:	f002 ff18 	bl	8004d2c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001efc:	2201      	movs	r2, #1
 8001efe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f02:	4808      	ldr	r0, [pc, #32]	; (8001f24 <W25qxx_ReadPage+0xf8>)
 8001f04:	f000 fb7c 	bl	8002600 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f000 f8ab 	bl	8002064 <HAL_Delay>
	w25qxx.Lock = 0;
 8001f0e:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <W25qxx_ReadPage+0xf4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200009c4 	.word	0x200009c4
 8001f24:	40020000 	.word	0x40020000
 8001f28:	2000092c 	.word	0x2000092c

08001f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f32:	e003      	b.n	8001f3c <LoopCopyDataInit>

08001f34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f3a:	3104      	adds	r1, #4

08001f3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f3c:	480b      	ldr	r0, [pc, #44]	; (8001f6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f44:	d3f6      	bcc.n	8001f34 <CopyDataInit>
  ldr  r2, =_sbss
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f48:	e002      	b.n	8001f50 <LoopFillZerobss>

08001f4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f4c:	f842 3b04 	str.w	r3, [r2], #4

08001f50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f54:	d3f9      	bcc.n	8001f4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f56:	f7ff fd17 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5a:	f006 ffd3 	bl	8008f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f5e:	f7fe fd85 	bl	8000a6c <main>
  bx  lr    
 8001f62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f68:	08009f20 	.word	0x08009f20
  ldr  r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f70:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 8001f74:	20000254 	.word	0x20000254
  ldr  r3, = _ebss
 8001f78:	200012cc 	.word	0x200012cc

08001f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC_IRQHandler>
	...

08001f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <HAL_Init+0x40>)
 8001f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_Init+0x40>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <HAL_Init+0x40>)
 8001f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_Init+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <HAL_Init+0x40>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f000 f94d 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f000 f808 	bl	8001fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb4:	f7ff fc32 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023c00 	.word	0x40023c00

08001fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x54>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_InitTick+0x58>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f965 	bl	80022b2 <HAL_SYSTICK_Config>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00e      	b.n	8002010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d80a      	bhi.n	800200e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f000 f92d 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002004:	4a06      	ldr	r2, [pc, #24]	; (8002020 <HAL_InitTick+0x5c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000098 	.word	0x20000098
 800201c:	200000a0 	.word	0x200000a0
 8002020:	2000009c 	.word	0x2000009c

08002024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_IncTick+0x20>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_IncTick+0x24>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_IncTick+0x24>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	200000a0 	.word	0x200000a0
 8002048:	200009ec 	.word	0x200009ec

0800204c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <HAL_GetTick+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	200009ec 	.word	0x200009ec

08002064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff ffee 	bl	800204c <HAL_GetTick>
 8002070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d005      	beq.n	800208a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_Delay+0x40>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800208a:	bf00      	nop
 800208c:	f7ff ffde 	bl	800204c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d8f7      	bhi.n	800208c <HAL_Delay+0x28>
  {
  }
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200000a0 	.word	0x200000a0

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db0b      	blt.n	8002136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4907      	ldr	r1, [pc, #28]	; (8002144 <__NVIC_EnableIRQ+0x38>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2001      	movs	r0, #1
 800212e:	fa00 f202 	lsl.w	r2, r0, r2
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	; (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff29 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff3e 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff8e 	bl	800219c <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5d 	bl	8002148 <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff31 	bl	800210c <__NVIC_EnableIRQ>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ffa2 	bl	8002204 <SysTick_Config>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	e159      	b.n	800259c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e8:	2201      	movs	r2, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	429a      	cmp	r2, r3
 8002302:	f040 8148 	bne.w	8002596 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d00b      	beq.n	8002326 <HAL_GPIO_Init+0x5a>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800231a:	2b11      	cmp	r3, #17
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b12      	cmp	r3, #18
 8002324:	d130      	bne.n	8002388 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 0201 	and.w	r2, r3, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0xfc>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b12      	cmp	r3, #18
 80023c6:	d123      	bne.n	8002410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	08da      	lsrs	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3208      	adds	r2, #8
 80023d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	220f      	movs	r2, #15
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	08da      	lsrs	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3208      	adds	r2, #8
 800240a:	69b9      	ldr	r1, [r7, #24]
 800240c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	2203      	movs	r2, #3
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0203 	and.w	r2, r3, #3
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80a2 	beq.w	8002596 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <HAL_GPIO_Init+0x2e4>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	4a55      	ldr	r2, [pc, #340]	; (80025b0 <HAL_GPIO_Init+0x2e4>)
 800245c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002460:	6453      	str	r3, [r2, #68]	; 0x44
 8002462:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_GPIO_Init+0x2e4>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800246e:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <HAL_GPIO_Init+0x2e8>)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	220f      	movs	r2, #15
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_GPIO_Init+0x2ec>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d019      	beq.n	80024ce <HAL_GPIO_Init+0x202>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a47      	ldr	r2, [pc, #284]	; (80025bc <HAL_GPIO_Init+0x2f0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_GPIO_Init+0x1fe>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a46      	ldr	r2, [pc, #280]	; (80025c0 <HAL_GPIO_Init+0x2f4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00d      	beq.n	80024c6 <HAL_GPIO_Init+0x1fa>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a45      	ldr	r2, [pc, #276]	; (80025c4 <HAL_GPIO_Init+0x2f8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <HAL_GPIO_Init+0x1f6>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a44      	ldr	r2, [pc, #272]	; (80025c8 <HAL_GPIO_Init+0x2fc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_GPIO_Init+0x1f2>
 80024ba:	2304      	movs	r3, #4
 80024bc:	e008      	b.n	80024d0 <HAL_GPIO_Init+0x204>
 80024be:	2307      	movs	r3, #7
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x204>
 80024c2:	2303      	movs	r3, #3
 80024c4:	e004      	b.n	80024d0 <HAL_GPIO_Init+0x204>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_Init+0x204>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x204>
 80024ce:	2300      	movs	r3, #0
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	f002 0203 	and.w	r2, r2, #3
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	4093      	lsls	r3, r2
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e0:	4934      	ldr	r1, [pc, #208]	; (80025b4 <HAL_GPIO_Init+0x2e8>)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <HAL_GPIO_Init+0x300>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002512:	4a2e      	ldr	r2, [pc, #184]	; (80025cc <HAL_GPIO_Init+0x300>)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002518:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <HAL_GPIO_Init+0x300>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253c:	4a23      	ldr	r2, [pc, #140]	; (80025cc <HAL_GPIO_Init+0x300>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <HAL_GPIO_Init+0x300>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002566:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_GPIO_Init+0x300>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800256c:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HAL_GPIO_Init+0x300>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_GPIO_Init+0x300>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3301      	adds	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	f67f aea2 	bls.w	80022e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	3724      	adds	r7, #36	; 0x24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020c00 	.word	0x40020c00
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40013c00 	.word	0x40013c00

080025d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e001      	b.n	80025f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800261c:	e003      	b.n	8002626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	041a      	lsls	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	619a      	str	r2, [r3, #24]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fb76 	bl	8000d44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40013c00 	.word	0x40013c00

08002664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e11f      	b.n	80028b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fd fffc 	bl	8000688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026c8:	f002 fab8 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 80026cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4a7b      	ldr	r2, [pc, #492]	; (80028c0 <HAL_I2C_Init+0x25c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d807      	bhi.n	80026e8 <HAL_I2C_Init+0x84>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a7a      	ldr	r2, [pc, #488]	; (80028c4 <HAL_I2C_Init+0x260>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	bf94      	ite	ls
 80026e0:	2301      	movls	r3, #1
 80026e2:	2300      	movhi	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e006      	b.n	80026f6 <HAL_I2C_Init+0x92>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_I2C_Init+0x264>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	bf94      	ite	ls
 80026f0:	2301      	movls	r3, #1
 80026f2:	2300      	movhi	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0db      	b.n	80028b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4a72      	ldr	r2, [pc, #456]	; (80028cc <HAL_I2C_Init+0x268>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0c9b      	lsrs	r3, r3, #18
 8002708:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a64      	ldr	r2, [pc, #400]	; (80028c0 <HAL_I2C_Init+0x25c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d802      	bhi.n	8002738 <HAL_I2C_Init+0xd4>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	3301      	adds	r3, #1
 8002736:	e009      	b.n	800274c <HAL_I2C_Init+0xe8>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	4a63      	ldr	r2, [pc, #396]	; (80028d0 <HAL_I2C_Init+0x26c>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	3301      	adds	r3, #1
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	430b      	orrs	r3, r1
 8002752:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800275e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4956      	ldr	r1, [pc, #344]	; (80028c0 <HAL_I2C_Init+0x25c>)
 8002768:	428b      	cmp	r3, r1
 800276a:	d80d      	bhi.n	8002788 <HAL_I2C_Init+0x124>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1e59      	subs	r1, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	fbb1 f3f3 	udiv	r3, r1, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	2b04      	cmp	r3, #4
 8002782:	bf38      	it	cc
 8002784:	2304      	movcc	r3, #4
 8002786:	e04f      	b.n	8002828 <HAL_I2C_Init+0x1c4>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d111      	bne.n	80027b4 <HAL_I2C_Init+0x150>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1e58      	subs	r0, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	440b      	add	r3, r1
 800279e:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e012      	b.n	80027da <HAL_I2C_Init+0x176>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Init+0x17e>
 80027de:	2301      	movs	r3, #1
 80027e0:	e022      	b.n	8002828 <HAL_I2C_Init+0x1c4>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10e      	bne.n	8002808 <HAL_I2C_Init+0x1a4>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1e58      	subs	r0, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	440b      	add	r3, r1
 80027f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002806:	e00f      	b.n	8002828 <HAL_I2C_Init+0x1c4>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	0099      	lsls	r1, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	fbb0 f3f3 	udiv	r3, r0, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	6809      	ldr	r1, [r1, #0]
 800282c:	4313      	orrs	r3, r2
 800282e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6911      	ldr	r1, [r2, #16]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68d2      	ldr	r2, [r2, #12]
 8002862:	4311      	orrs	r1, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	430b      	orrs	r3, r1
 800286a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	000186a0 	.word	0x000186a0
 80028c4:	001e847f 	.word	0x001e847f
 80028c8:	003d08ff 	.word	0x003d08ff
 80028cc:	431bde83 	.word	0x431bde83
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	461a      	mov	r2, r3
 80028e0:	460b      	mov	r3, r1
 80028e2:	817b      	strh	r3, [r7, #10]
 80028e4:	4613      	mov	r3, r2
 80028e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff fbb0 	bl	800204c <HAL_GetTick>
 80028ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	f040 80e0 	bne.w	8002abc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2319      	movs	r3, #25
 8002902:	2201      	movs	r2, #1
 8002904:	4970      	ldr	r1, [pc, #448]	; (8002ac8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fa92 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
 8002914:	e0d3      	b.n	8002abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_I2C_Master_Transmit+0x50>
 8002920:	2302      	movs	r3, #2
 8002922:	e0cc      	b.n	8002abe <HAL_I2C_Master_Transmit+0x1ea>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d007      	beq.n	800294a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002958:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2221      	movs	r2, #33	; 0x21
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2210      	movs	r2, #16
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	893a      	ldrh	r2, [r7, #8]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a50      	ldr	r2, [pc, #320]	; (8002acc <HAL_I2C_Master_Transmit+0x1f8>)
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800298c:	8979      	ldrh	r1, [r7, #10]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	6a3a      	ldr	r2, [r7, #32]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f9ca 	bl	8002d2c <I2C_MasterRequestWrite>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e08d      	b.n	8002abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029b8:	e066      	b.n	8002a88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	6a39      	ldr	r1, [r7, #32]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fb0c 	bl	8002fdc <I2C_WaitOnTXEFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00d      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d107      	bne.n	80029e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e06b      	b.n	8002abe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d11b      	bne.n	8002a5c <HAL_I2C_Master_Transmit+0x188>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d017      	beq.n	8002a5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	6a39      	ldr	r1, [r7, #32]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fafc 	bl	800305e <I2C_WaitOnBTFFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d107      	bne.n	8002a84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e01a      	b.n	8002abe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d194      	bne.n	80029ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e000      	b.n	8002abe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
  }
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	00100002 	.word	0x00100002
 8002acc:	ffff0000 	.word	0xffff0000

08002ad0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	460b      	mov	r3, r1
 8002ade:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7ff fab4 	bl	800204c <HAL_GetTick>
 8002ae4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	f040 8111 	bne.w	8002d1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2319      	movs	r3, #25
 8002afe:	2201      	movs	r2, #1
 8002b00:	4988      	ldr	r1, [pc, #544]	; (8002d24 <HAL_I2C_IsDeviceReady+0x254>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f994 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e104      	b.n	8002d1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_I2C_IsDeviceReady+0x50>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e0fd      	b.n	8002d1c <HAL_I2C_IsDeviceReady+0x24c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d007      	beq.n	8002b46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2224      	movs	r2, #36	; 0x24
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a70      	ldr	r2, [pc, #448]	; (8002d28 <HAL_I2C_IsDeviceReady+0x258>)
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f952 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba0:	d103      	bne.n	8002baa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e0b6      	b.n	8002d1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bae:	897b      	ldrh	r3, [r7, #10]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002bbe:	f7ff fa45 	bl	800204c <HAL_GetTick>
 8002bc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	bf0c      	ite	eq
 8002bd2:	2301      	moveq	r3, #1
 8002bd4:	2300      	movne	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bf2:	e025      	b.n	8002c40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bf4:	f7ff fa2a 	bl	800204c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <HAL_I2C_IsDeviceReady+0x13a>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	22a0      	movs	r2, #160	; 0xa0
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2ba0      	cmp	r3, #160	; 0xa0
 8002c4a:	d005      	beq.n	8002c58 <HAL_I2C_IsDeviceReady+0x188>
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <HAL_I2C_IsDeviceReady+0x188>
 8002c52:	7dbb      	ldrb	r3, [r7, #22]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0cd      	beq.n	8002bf4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d129      	bne.n	8002cc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	2319      	movs	r3, #25
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	4921      	ldr	r1, [pc, #132]	; (8002d24 <HAL_I2C_IsDeviceReady+0x254>)
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f8c6 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e036      	b.n	8002d1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e02c      	b.n	8002d1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2319      	movs	r3, #25
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	490f      	ldr	r1, [pc, #60]	; (8002d24 <HAL_I2C_IsDeviceReady+0x254>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f8a2 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e012      	b.n	8002d1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f4ff af32 	bcc.w	8002b6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3720      	adds	r7, #32
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	00100002 	.word	0x00100002
 8002d28:	ffff0000 	.word	0xffff0000

08002d2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d006      	beq.n	8002d56 <I2C_MasterRequestWrite+0x2a>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d003      	beq.n	8002d56 <I2C_MasterRequestWrite+0x2a>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d54:	d108      	bne.n	8002d68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e00b      	b.n	8002d80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	2b12      	cmp	r3, #18
 8002d6e:	d107      	bne.n	8002d80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f84f 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00d      	beq.n	8002db4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da6:	d103      	bne.n	8002db0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e035      	b.n	8002e20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dbc:	d108      	bne.n	8002dd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dbe:	897b      	ldrh	r3, [r7, #10]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dcc:	611a      	str	r2, [r3, #16]
 8002dce:	e01b      	b.n	8002e08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dd0:	897b      	ldrh	r3, [r7, #10]
 8002dd2:	11db      	asrs	r3, r3, #7
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f003 0306 	and.w	r3, r3, #6
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f063 030f 	orn	r3, r3, #15
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	490e      	ldr	r1, [pc, #56]	; (8002e28 <I2C_MasterRequestWrite+0xfc>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f875 	bl	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e010      	b.n	8002e20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4907      	ldr	r1, [pc, #28]	; (8002e2c <I2C_MasterRequestWrite+0x100>)
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f865 	bl	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	00010008 	.word	0x00010008
 8002e2c:	00010002 	.word	0x00010002

08002e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e40:	e025      	b.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d021      	beq.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4a:	f7ff f8ff 	bl	800204c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d302      	bcc.n	8002e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d116      	bne.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e023      	b.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d10d      	bne.n	8002eb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bf0c      	ite	eq
 8002eaa:	2301      	moveq	r3, #1
 8002eac:	2300      	movne	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	e00c      	b.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d0b6      	beq.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eec:	e051      	b.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efc:	d123      	bne.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f043 0204 	orr.w	r2, r3, #4
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e046      	b.n	8002fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d021      	beq.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4e:	f7ff f87d 	bl	800204c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d116      	bne.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f043 0220 	orr.w	r2, r3, #32
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e020      	b.n	8002fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10c      	bne.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	e00b      	b.n	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d18d      	bne.n	8002eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe8:	e02d      	b.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f878 	bl	80030e0 <I2C_IsAcknowledgeFailed>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e02d      	b.n	8003056 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d021      	beq.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7ff f823 	bl	800204c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d116      	bne.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e007      	b.n	8003056 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d1ca      	bne.n	8002fea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800306a:	e02d      	b.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f837 	bl	80030e0 <I2C_IsAcknowledgeFailed>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e02d      	b.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d021      	beq.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003084:	f7fe ffe2 	bl	800204c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	429a      	cmp	r2, r3
 8003092:	d302      	bcc.n	800309a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d116      	bne.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e007      	b.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d1ca      	bne.n	800306c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f6:	d11b      	bne.n	8003130 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003100:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0204 	orr.w	r2, r3, #4
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800313e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003140:	b08f      	sub	sp, #60	; 0x3c
 8003142:	af0a      	add	r7, sp, #40	; 0x28
 8003144:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e10f      	b.n	8003370 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f005 fbe4 	bl	8008938 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f002 fddf 	bl	8005d52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	687e      	ldr	r6, [r7, #4]
 800319c:	466d      	mov	r5, sp
 800319e:	f106 0410 	add.w	r4, r6, #16
 80031a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80031b2:	1d33      	adds	r3, r6, #4
 80031b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b6:	6838      	ldr	r0, [r7, #0]
 80031b8:	f002 fcb6 	bl	8005b28 <USB_CoreInit>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0d0      	b.n	8003370 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f002 fdcd 	bl	8005d74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
 80031de:	e04a      	b.n	8003276 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	333d      	adds	r3, #61	; 0x3d
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	333c      	adds	r3, #60	; 0x3c
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	b298      	uxth	r0, r3
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3342      	adds	r3, #66	; 0x42
 800321c:	4602      	mov	r2, r0
 800321e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	333f      	adds	r3, #63	; 0x3f
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3344      	adds	r3, #68	; 0x44
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	3348      	adds	r3, #72	; 0x48
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3350      	adds	r3, #80	; 0x50
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	3301      	adds	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d3af      	bcc.n	80031e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e044      	b.n	8003310 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	3301      	adds	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d3b5      	bcc.n	8003286 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	687e      	ldr	r6, [r7, #4]
 8003322:	466d      	mov	r5, sp
 8003324:	f106 0410 	add.w	r4, r6, #16
 8003328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800332a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800332c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800332e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003330:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003334:	e885 0003 	stmia.w	r5, {r0, r1}
 8003338:	1d33      	adds	r3, r6, #4
 800333a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800333c:	6838      	ldr	r0, [r7, #0]
 800333e:	f002 fd43 	bl	8005dc8 <USB_DevInit>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e00d      	b.n	8003370 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f003 fd8b 	bl	8006e84 <USB_DevDisconnect>

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003378 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_PCD_Start+0x1c>
 8003390:	2302      	movs	r3, #2
 8003392:	e020      	b.n	80033d6 <HAL_PCD_Start+0x5e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d109      	bne.n	80033b8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d005      	beq.n	80033b8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f002 fcb7 	bl	8005d30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 fd3b 	bl	8006e42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033de:	b590      	push	{r4, r7, lr}
 80033e0:	b08d      	sub	sp, #52	; 0x34
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f003 fdf9 	bl	8006fec <USB_GetMode>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 839d 	bne.w	8003b3c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f003 fd5d 	bl	8006ec6 <USB_ReadInterrupts>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8393 	beq.w	8003b3a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f003 fd54 	bl	8006ec6 <USB_ReadInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d107      	bne.n	8003438 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f002 0202 	and.w	r2, r2, #2
 8003436:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f003 fd42 	bl	8006ec6 <USB_ReadInterrupts>
 8003442:	4603      	mov	r3, r0
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b10      	cmp	r3, #16
 800344a:	d161      	bne.n	8003510 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0210 	bic.w	r2, r2, #16
 800345a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f003 020f 	and.w	r2, r3, #15
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	3304      	adds	r3, #4
 800347a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	0c5b      	lsrs	r3, r3, #17
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	2b02      	cmp	r3, #2
 8003486:	d124      	bne.n	80034d2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d035      	beq.n	8003500 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800349e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	6a38      	ldr	r0, [r7, #32]
 80034a8:	f003 fba8 	bl	8006bfc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034b8:	441a      	add	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ca:	441a      	add	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	619a      	str	r2, [r3, #24]
 80034d0:	e016      	b.n	8003500 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	0c5b      	lsrs	r3, r3, #17
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d110      	bne.n	8003500 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034e4:	2208      	movs	r2, #8
 80034e6:	4619      	mov	r1, r3
 80034e8:	6a38      	ldr	r0, [r7, #32]
 80034ea:	f003 fb87 	bl	8006bfc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034fa:	441a      	add	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0210 	orr.w	r2, r2, #16
 800350e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f003 fcd6 	bl	8006ec6 <USB_ReadInterrupts>
 800351a:	4603      	mov	r3, r0
 800351c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003520:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003524:	d16e      	bne.n	8003604 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f003 fcdc 	bl	8006eec <USB_ReadDevAllOutEpInterrupt>
 8003534:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003536:	e062      	b.n	80035fe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d057      	beq.n	80035f2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f003 fd01 	bl	8006f54 <USB_ReadDevOutEPInterrupt>
 8003552:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00c      	beq.n	8003578 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356a:	461a      	mov	r2, r3
 800356c:	2301      	movs	r3, #1
 800356e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fd98 	bl	80040a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	461a      	mov	r2, r3
 8003590:	2308      	movs	r3, #8
 8003592:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fe92 	bl	80042c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b2:	461a      	mov	r2, r3
 80035b4:	2310      	movs	r3, #16
 80035b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ce:	461a      	mov	r2, r3
 80035d0:	2320      	movs	r3, #32
 80035d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ea:	461a      	mov	r2, r3
 80035ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	3301      	adds	r3, #1
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d199      	bne.n	8003538 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f003 fc5c 	bl	8006ec6 <USB_ReadInterrupts>
 800360e:	4603      	mov	r3, r0
 8003610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003614:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003618:	f040 80c0 	bne.w	800379c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f003 fc7d 	bl	8006f20 <USB_ReadDevAllInEpInterrupt>
 8003626:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800362c:	e0b2      	b.n	8003794 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a7 	beq.w	8003788 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f003 fca3 	bl	8006f90 <USB_ReadDevInEPInterrupt>
 800364a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d057      	beq.n	8003706 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	2201      	movs	r2, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	43db      	mvns	r3, r3
 8003670:	69f9      	ldr	r1, [r7, #28]
 8003672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003676:	4013      	ands	r3, r2
 8003678:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003686:	461a      	mov	r2, r3
 8003688:	2301      	movs	r3, #1
 800368a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d132      	bne.n	80036fa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	3348      	adds	r3, #72	; 0x48
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4403      	add	r3, r0
 80036b4:	3344      	adds	r3, #68	; 0x44
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4419      	add	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4403      	add	r3, r0
 80036c8:	3348      	adds	r3, #72	; 0x48
 80036ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d113      	bne.n	80036fa <HAL_PCD_IRQHandler+0x31c>
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3350      	adds	r3, #80	; 0x50
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d108      	bne.n	80036fa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036f2:	461a      	mov	r2, r3
 80036f4:	2101      	movs	r1, #1
 80036f6:	f003 fcab 	bl	8007050 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	4619      	mov	r1, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f005 f99a 	bl	8008a3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371c:	461a      	mov	r2, r3
 800371e:	2308      	movs	r3, #8
 8003720:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003738:	461a      	mov	r2, r3
 800373a:	2310      	movs	r3, #16
 800373c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003754:	461a      	mov	r2, r3
 8003756:	2340      	movs	r3, #64	; 0x40
 8003758:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003770:	461a      	mov	r2, r3
 8003772:	2302      	movs	r3, #2
 8003774:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fc03 	bl	8003f8e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	3301      	adds	r3, #1
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	f47f af49 	bne.w	800362e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f003 fb90 	bl	8006ec6 <USB_ReadInterrupts>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037b0:	d122      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d108      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037d8:	2100      	movs	r1, #0
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fe0e 	bl	80043fc <HAL_PCDEx_LPM_Callback>
 80037e0:	e002      	b.n	80037e8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f005 f996 	bl	8008b14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f003 fb62 	bl	8006ec6 <USB_ReadInterrupts>
 8003802:	4603      	mov	r3, r0
 8003804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380c:	d112      	bne.n	8003834 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f005 f952 	bl	8008ac8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003832:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f003 fb44 	bl	8006ec6 <USB_ReadInterrupts>
 800383e:	4603      	mov	r3, r0
 8003840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	f040 80c7 	bne.w	80039da <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2110      	movs	r1, #16
 8003866:	4618      	mov	r0, r3
 8003868:	f002 fc12 	bl	8006090 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800386c:	2300      	movs	r3, #0
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003870:	e056      	b.n	8003920 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387e:	461a      	mov	r2, r3
 8003880:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003884:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003896:	0151      	lsls	r1, r2, #5
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	440a      	add	r2, r1
 800389c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038a4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b6:	0151      	lsls	r1, r2, #5
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	440a      	add	r2, r1
 80038bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d2:	461a      	mov	r2, r3
 80038d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ea:	0151      	lsls	r1, r2, #5
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	440a      	add	r2, r1
 80038f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800390a:	0151      	lsls	r1, r2, #5
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	440a      	add	r2, r1
 8003910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003914:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003918:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	3301      	adds	r3, #1
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003926:	429a      	cmp	r2, r3
 8003928:	d3a3      	bcc.n	8003872 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003938:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800393c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	2b00      	cmp	r3, #0
 8003944:	d016      	beq.n	8003974 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003956:	f043 030b 	orr.w	r3, r3, #11
 800395a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800396c:	f043 030b 	orr.w	r3, r3, #11
 8003970:	6453      	str	r3, [r2, #68]	; 0x44
 8003972:	e015      	b.n	80039a0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003982:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003986:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800398a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800399a:	f043 030b 	orr.w	r3, r3, #11
 800399e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80039b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039c4:	461a      	mov	r2, r3
 80039c6:	f003 fb43 	bl	8007050 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80039d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 fa71 	bl	8006ec6 <USB_ReadInterrupts>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ee:	d124      	bne.n	8003a3a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f003 fb07 	bl	8007008 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 fba7 	bl	8006152 <USB_GetDevSpeed>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681c      	ldr	r4, [r3, #0]
 8003a10:	f001 f908 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8003a14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f002 f8e4 	bl	8005bec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f005 f830 	bl	8008a8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f003 fa41 	bl	8006ec6 <USB_ReadInterrupts>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d10a      	bne.n	8003a64 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f005 f80d 	bl	8008a6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f002 0208 	and.w	r2, r2, #8
 8003a62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 fa2c 	bl	8006ec6 <USB_ReadInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a78:	d10f      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4619      	mov	r1, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f005 f865 	bl	8008b54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f003 fa11 	bl	8006ec6 <USB_ReadInterrupts>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aae:	d10f      	bne.n	8003ad0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f005 f838 	bl	8008b30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f003 f9f6 	bl	8006ec6 <USB_ReadInterrupts>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d10a      	bne.n	8003afc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f005 f846 	bl	8008b78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f003 f9e0 	bl	8006ec6 <USB_ReadInterrupts>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d115      	bne.n	8003b3c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f005 f836 	bl	8008b94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	e000      	b.n	8003b3c <HAL_PCD_IRQHandler+0x75e>
      return;
 8003b3a:	bf00      	nop
    }
  }
}
 8003b3c:	3734      	adds	r7, #52	; 0x34
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd90      	pop	{r4, r7, pc}

08003b42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_PCD_SetAddress+0x1a>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e013      	b.n	8003b84 <HAL_PCD_SetAddress+0x42>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f003 f93e 	bl	8006df6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	4608      	mov	r0, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	70fb      	strb	r3, [r7, #3]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	803b      	strh	r3, [r7, #0]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	da0f      	bge.n	8003bd2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 020f 	and.w	r2, r3, #15
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	3338      	adds	r3, #56	; 0x38
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	705a      	strb	r2, [r3, #1]
 8003bd0:	e00f      	b.n	8003bf2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bfe:	883a      	ldrh	r2, [r7, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	78ba      	ldrb	r2, [r7, #2]
 8003c08:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	785b      	ldrb	r3, [r3, #1]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d004      	beq.n	8003c1c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c1c:	78bb      	ldrb	r3, [r7, #2]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d102      	bne.n	8003c28 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_PCD_EP_Open+0xaa>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e00e      	b.n	8003c54 <HAL_PCD_EP_Open+0xc8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68f9      	ldr	r1, [r7, #12]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f002 faa9 	bl	800619c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003c52:	7afb      	ldrb	r3, [r7, #11]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	da0f      	bge.n	8003c90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 020f 	and.w	r2, r3, #15
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	3338      	adds	r3, #56	; 0x38
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	3304      	adds	r3, #4
 8003c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	705a      	strb	r2, [r3, #1]
 8003c8e:	e00f      	b.n	8003cb0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_PCD_EP_Close+0x6e>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e00e      	b.n	8003ce8 <HAL_PCD_EP_Close+0x8c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f002 fae7 	bl	80062ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	f003 020f 	and.w	r2, r3, #15
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d32:	7afb      	ldrb	r3, [r7, #11]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d102      	bne.n	8003d4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d4c:	7afb      	ldrb	r3, [r7, #11]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	6979      	ldr	r1, [r7, #20]
 8003d64:	f002 fdc2 	bl	80068ec <USB_EP0StartXfer>
 8003d68:	e008      	b.n	8003d7c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	6979      	ldr	r1, [r7, #20]
 8003d78:	f002 fb74 	bl	8006464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b086      	sub	sp, #24
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	460b      	mov	r3, r1
 8003d94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d96:	7afb      	ldrb	r3, [r7, #11]
 8003d98:	f003 020f 	and.w	r2, r3, #15
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	3338      	adds	r3, #56	; 0x38
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4413      	add	r3, r2
 8003daa:	3304      	adds	r3, #4
 8003dac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d102      	bne.n	8003de0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003de0:	7afb      	ldrb	r3, [r7, #11]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	6979      	ldr	r1, [r7, #20]
 8003df8:	f002 fd78 	bl	80068ec <USB_EP0StartXfer>
 8003dfc:	e008      	b.n	8003e10 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6979      	ldr	r1, [r7, #20]
 8003e0c:	f002 fb2a 	bl	8006464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 020f 	and.w	r2, r3, #15
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d901      	bls.n	8003e38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e050      	b.n	8003eda <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da0f      	bge.n	8003e60 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	3338      	adds	r3, #56	; 0x38
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	3304      	adds	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	705a      	strb	r2, [r3, #1]
 8003e5e:	e00d      	b.n	8003e7c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	3304      	adds	r3, #4
 8003e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_PCD_EP_SetStall+0x82>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e01e      	b.n	8003eda <HAL_PCD_EP_SetStall+0xc0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68f9      	ldr	r1, [r7, #12]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f002 fecf 	bl	8006c4e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	b2d9      	uxtb	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f003 f8c0 	bl	8007050 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	f003 020f 	and.w	r2, r3, #15
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d901      	bls.n	8003f00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e042      	b.n	8003f86 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	da0f      	bge.n	8003f28 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	f003 020f 	and.w	r2, r3, #15
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	3338      	adds	r3, #56	; 0x38
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	705a      	strb	r2, [r3, #1]
 8003f26:	e00f      	b.n	8003f48 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 020f 	and.w	r2, r3, #15
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3304      	adds	r3, #4
 8003f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_PCD_EP_ClrStall+0x86>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e00e      	b.n	8003f86 <HAL_PCD_EP_ClrStall+0xa4>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68f9      	ldr	r1, [r7, #12]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f002 fed7 	bl	8006d2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b08a      	sub	sp, #40	; 0x28
 8003f92:	af02      	add	r7, sp, #8
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	3338      	adds	r3, #56	; 0x38
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d901      	bls.n	8003fc6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e06c      	b.n	80040a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d902      	bls.n	8003fe2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3303      	adds	r3, #3
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fea:	e02b      	b.n	8004044 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d902      	bls.n	8004008 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	3303      	adds	r3, #3
 800400c:	089b      	lsrs	r3, r3, #2
 800400e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68d9      	ldr	r1, [r3, #12]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	b2da      	uxtb	r2, r3
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004020:	b2db      	uxtb	r3, r3
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	4603      	mov	r3, r0
 8004026:	6978      	ldr	r0, [r7, #20]
 8004028:	f002 fdb3 	bl	8006b92 <USB_WritePacket>

    ep->xfer_buff  += len;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	441a      	add	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	441a      	add	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	b29b      	uxth	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	429a      	cmp	r2, r3
 8004058:	d809      	bhi.n	800406e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004062:	429a      	cmp	r2, r3
 8004064:	d203      	bcs.n	800406e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1be      	bne.n	8003fec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	429a      	cmp	r2, r3
 8004078:	d811      	bhi.n	800409e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	2201      	movs	r2, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	43db      	mvns	r3, r3
 8004094:	6939      	ldr	r1, [r7, #16]
 8004096:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800409a:	4013      	ands	r3, r2
 800409c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	333c      	adds	r3, #60	; 0x3c
 80040c0:	3304      	adds	r3, #4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	f040 80a0 	bne.w	8004220 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d015      	beq.n	8004116 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a72      	ldr	r2, [pc, #456]	; (80042b8 <PCD_EP_OutXfrComplete_int+0x210>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	f240 80dd 	bls.w	80042ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 80d7 	beq.w	80042ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004112:	6093      	str	r3, [r2, #8]
 8004114:	e0cb      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412c:	461a      	mov	r2, r3
 800412e:	2320      	movs	r3, #32
 8004130:	6093      	str	r3, [r2, #8]
 8004132:	e0bc      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 80b7 	bne.w	80042ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a5d      	ldr	r2, [pc, #372]	; (80042b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d90f      	bls.n	8004168 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	461a      	mov	r2, r3
 8004160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004164:	6093      	str	r3, [r2, #8]
 8004166:	e0a2      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800417a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	0159      	lsls	r1, r3, #5
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	440b      	add	r3, r1
 8004184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800418e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4403      	add	r3, r0
 800419e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80041a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041b6:	6819      	ldr	r1, [r3, #0]
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4403      	add	r3, r0
 80041c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4419      	add	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4403      	add	r3, r0
 80041dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d114      	bne.n	8004212 <PCD_EP_OutXfrComplete_int+0x16a>
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d108      	bne.n	8004212 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800420a:	461a      	mov	r2, r3
 800420c:	2101      	movs	r1, #1
 800420e:	f002 ff1f 	bl	8007050 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f004 fbf3 	bl	8008a04 <HAL_PCD_DataOutStageCallback>
 800421e:	e046      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4a26      	ldr	r2, [pc, #152]	; (80042bc <PCD_EP_OutXfrComplete_int+0x214>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d124      	bne.n	8004272 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	461a      	mov	r2, r3
 8004240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004244:	6093      	str	r3, [r2, #8]
 8004246:	e032      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	461a      	mov	r2, r3
 8004260:	2320      	movs	r3, #32
 8004262:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f004 fbca 	bl	8008a04 <HAL_PCD_DataOutStageCallback>
 8004270:	e01d      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d114      	bne.n	80042a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d108      	bne.n	80042a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800429a:	461a      	mov	r2, r3
 800429c:	2100      	movs	r1, #0
 800429e:	f002 fed7 	bl	8007050 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	4619      	mov	r1, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f004 fbab 	bl	8008a04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	4f54300a 	.word	0x4f54300a
 80042bc:	4f54310a 	.word	0x4f54310a

080042c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	333c      	adds	r3, #60	; 0x3c
 80042d8:	3304      	adds	r3, #4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4a15      	ldr	r2, [pc, #84]	; (8004348 <PCD_EP_OutSetupPacket_int+0x88>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d90e      	bls.n	8004314 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d009      	beq.n	8004314 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430c:	461a      	mov	r2, r3
 800430e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004312:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f004 fb63 	bl	80089e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <PCD_EP_OutSetupPacket_int+0x88>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d90c      	bls.n	800433c <PCD_EP_OutSetupPacket_int+0x7c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d108      	bne.n	800433c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004334:	461a      	mov	r2, r3
 8004336:	2101      	movs	r1, #1
 8004338:	f002 fe8a 	bl	8007050 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	4f54300a 	.word	0x4f54300a

0800434c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	70fb      	strb	r3, [r7, #3]
 8004358:	4613      	mov	r3, r2
 800435a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d107      	bne.n	800437a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800436a:	883b      	ldrh	r3, [r7, #0]
 800436c:	0419      	lsls	r1, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	430a      	orrs	r2, r1
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
 8004378:	e028      	b.n	80043cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	4413      	add	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	e00d      	b.n	80043aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	3340      	adds	r3, #64	; 0x40
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	4413      	add	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	3301      	adds	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
 80043aa:	7bfa      	ldrb	r2, [r7, #15]
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d3ec      	bcc.n	800438e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043b4:	883b      	ldrh	r3, [r7, #0]
 80043b6:	0418      	lsls	r0, r3, #16
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6819      	ldr	r1, [r3, #0]
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	3b01      	subs	r3, #1
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	4302      	orrs	r2, r0
 80043c4:	3340      	adds	r3, #64	; 0x40
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	887a      	ldrh	r2, [r7, #2]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e25b      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d075      	beq.n	800451e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004432:	4ba3      	ldr	r3, [pc, #652]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b04      	cmp	r3, #4
 800443c:	d00c      	beq.n	8004458 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800443e:	4ba0      	ldr	r3, [pc, #640]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004446:	2b08      	cmp	r3, #8
 8004448:	d112      	bne.n	8004470 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800444a:	4b9d      	ldr	r3, [pc, #628]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004456:	d10b      	bne.n	8004470 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	4b99      	ldr	r3, [pc, #612]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d05b      	beq.n	800451c <HAL_RCC_OscConfig+0x108>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d157      	bne.n	800451c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e236      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d106      	bne.n	8004488 <HAL_RCC_OscConfig+0x74>
 800447a:	4b91      	ldr	r3, [pc, #580]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a90      	ldr	r2, [pc, #576]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e01d      	b.n	80044c4 <HAL_RCC_OscConfig+0xb0>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x98>
 8004492:	4b8b      	ldr	r3, [pc, #556]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a8a      	ldr	r2, [pc, #552]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b88      	ldr	r3, [pc, #544]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a87      	ldr	r2, [pc, #540]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0xb0>
 80044ac:	4b84      	ldr	r3, [pc, #528]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a83      	ldr	r2, [pc, #524]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 80044b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b81      	ldr	r3, [pc, #516]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a80      	ldr	r2, [pc, #512]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 80044be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fd fdbe 	bl	800204c <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fd fdba 	bl	800204c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e1fb      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e6:	4b76      	ldr	r3, [pc, #472]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0xc0>
 80044f2:	e014      	b.n	800451e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fd fdaa 	bl	800204c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fd fda6 	bl	800204c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e1e7      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450e:	4b6c      	ldr	r3, [pc, #432]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0xe8>
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d063      	beq.n	80045f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800452a:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00b      	beq.n	800454e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004536:	4b62      	ldr	r3, [pc, #392]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800453e:	2b08      	cmp	r3, #8
 8004540:	d11c      	bne.n	800457c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004542:	4b5f      	ldr	r3, [pc, #380]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d116      	bne.n	800457c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454e:	4b5c      	ldr	r3, [pc, #368]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_RCC_OscConfig+0x152>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d001      	beq.n	8004566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e1bb      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004566:	4b56      	ldr	r3, [pc, #344]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4952      	ldr	r1, [pc, #328]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457a:	e03a      	b.n	80045f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d020      	beq.n	80045c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004584:	4b4f      	ldr	r3, [pc, #316]	; (80046c4 <HAL_RCC_OscConfig+0x2b0>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fd fd5f 	bl	800204c <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004592:	f7fd fd5b 	bl	800204c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e19c      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a4:	4b46      	ldr	r3, [pc, #280]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b0:	4b43      	ldr	r3, [pc, #268]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4940      	ldr	r1, [pc, #256]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]
 80045c4:	e015      	b.n	80045f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045c6:	4b3f      	ldr	r3, [pc, #252]	; (80046c4 <HAL_RCC_OscConfig+0x2b0>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fd fd3e 	bl	800204c <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d4:	f7fd fd3a 	bl	800204c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e17b      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e6:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d030      	beq.n	8004660 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004606:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <HAL_RCC_OscConfig+0x2b4>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fd fd1e 	bl	800204c <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004614:	f7fd fd1a 	bl	800204c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e15b      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004626:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x200>
 8004632:	e015      	b.n	8004660 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004634:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_RCC_OscConfig+0x2b4>)
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463a:	f7fd fd07 	bl	800204c <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004642:	f7fd fd03 	bl	800204c <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e144      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004654:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f0      	bne.n	8004642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80a0 	beq.w	80047ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466e:	2300      	movs	r3, #0
 8004670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004672:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10f      	bne.n	800469e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468c:	6413      	str	r3, [r2, #64]	; 0x40
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <HAL_RCC_OscConfig+0x2ac>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <HAL_RCC_OscConfig+0x2b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d121      	bne.n	80046ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <HAL_RCC_OscConfig+0x2b8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a07      	ldr	r2, [pc, #28]	; (80046cc <HAL_RCC_OscConfig+0x2b8>)
 80046b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b6:	f7fd fcc9 	bl	800204c <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046bc:	e011      	b.n	80046e2 <HAL_RCC_OscConfig+0x2ce>
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800
 80046c4:	42470000 	.word	0x42470000
 80046c8:	42470e80 	.word	0x42470e80
 80046cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d0:	f7fd fcbc 	bl	800204c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0fd      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e2:	4b81      	ldr	r3, [pc, #516]	; (80048e8 <HAL_RCC_OscConfig+0x4d4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d106      	bne.n	8004704 <HAL_RCC_OscConfig+0x2f0>
 80046f6:	4b7d      	ldr	r3, [pc, #500]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a7c      	ldr	r2, [pc, #496]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	6713      	str	r3, [r2, #112]	; 0x70
 8004702:	e01c      	b.n	800473e <HAL_RCC_OscConfig+0x32a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b05      	cmp	r3, #5
 800470a:	d10c      	bne.n	8004726 <HAL_RCC_OscConfig+0x312>
 800470c:	4b77      	ldr	r3, [pc, #476]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	4a76      	ldr	r2, [pc, #472]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 8004712:	f043 0304 	orr.w	r3, r3, #4
 8004716:	6713      	str	r3, [r2, #112]	; 0x70
 8004718:	4b74      	ldr	r3, [pc, #464]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	4a73      	ldr	r2, [pc, #460]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	6713      	str	r3, [r2, #112]	; 0x70
 8004724:	e00b      	b.n	800473e <HAL_RCC_OscConfig+0x32a>
 8004726:	4b71      	ldr	r3, [pc, #452]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	4a70      	ldr	r2, [pc, #448]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	6713      	str	r3, [r2, #112]	; 0x70
 8004732:	4b6e      	ldr	r3, [pc, #440]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4a6d      	ldr	r2, [pc, #436]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 8004738:	f023 0304 	bic.w	r3, r3, #4
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d015      	beq.n	8004772 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004746:	f7fd fc81 	bl	800204c <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	e00a      	b.n	8004764 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800474e:	f7fd fc7d 	bl	800204c <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f241 3288 	movw	r2, #5000	; 0x1388
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0bc      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004764:	4b61      	ldr	r3, [pc, #388]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ee      	beq.n	800474e <HAL_RCC_OscConfig+0x33a>
 8004770:	e014      	b.n	800479c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004772:	f7fd fc6b 	bl	800204c <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800477a:	f7fd fc67 	bl	800204c <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f241 3288 	movw	r2, #5000	; 0x1388
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e0a6      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004790:	4b56      	ldr	r3, [pc, #344]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ee      	bne.n	800477a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d105      	bne.n	80047ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a2:	4b52      	ldr	r3, [pc, #328]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	4a51      	ldr	r2, [pc, #324]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 80047a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 8092 	beq.w	80048dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047b8:	4b4c      	ldr	r3, [pc, #304]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 030c 	and.w	r3, r3, #12
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d05c      	beq.n	800487e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d141      	bne.n	8004850 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047cc:	4b48      	ldr	r3, [pc, #288]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d2:	f7fd fc3b 	bl	800204c <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047da:	f7fd fc37 	bl	800204c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e078      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ec:	4b3f      	ldr	r3, [pc, #252]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	019b      	lsls	r3, r3, #6
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	3b01      	subs	r3, #1
 8004812:	041b      	lsls	r3, r3, #16
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	4933      	ldr	r1, [pc, #204]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004822:	4b33      	ldr	r3, [pc, #204]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004828:	f7fd fc10 	bl	800204c <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004830:	f7fd fc0c 	bl	800204c <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e04d      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004842:	4b2a      	ldr	r3, [pc, #168]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x41c>
 800484e:	e045      	b.n	80048dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004850:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004856:	f7fd fbf9 	bl	800204c <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485e:	f7fd fbf5 	bl	800204c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e036      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004870:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0x44a>
 800487c:	e02e      	b.n	80048dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e029      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800488a:	4b18      	ldr	r3, [pc, #96]	; (80048ec <HAL_RCC_OscConfig+0x4d8>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	429a      	cmp	r2, r3
 800489c:	d11c      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d115      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048b2:	4013      	ands	r3, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d10d      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d106      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40007000 	.word	0x40007000
 80048ec:	40023800 	.word	0x40023800
 80048f0:	42470060 	.word	0x42470060

080048f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0cc      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004908:	4b68      	ldr	r3, [pc, #416]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d90c      	bls.n	8004930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004916:	4b65      	ldr	r3, [pc, #404]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b63      	ldr	r3, [pc, #396]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0b8      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d020      	beq.n	800497e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004948:	4b59      	ldr	r3, [pc, #356]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4a58      	ldr	r2, [pc, #352]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004960:	4b53      	ldr	r3, [pc, #332]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a52      	ldr	r2, [pc, #328]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800496a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800496c:	4b50      	ldr	r3, [pc, #320]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	494d      	ldr	r1, [pc, #308]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d044      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b47      	ldr	r3, [pc, #284]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d119      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e07f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b2:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e06f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c2:	4b3b      	ldr	r3, [pc, #236]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e067      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049d2:	4b37      	ldr	r3, [pc, #220]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f023 0203 	bic.w	r2, r3, #3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	4934      	ldr	r1, [pc, #208]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049e4:	f7fd fb32 	bl	800204c <HAL_GetTick>
 80049e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ec:	f7fd fb2e 	bl	800204c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e04f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	4b2b      	ldr	r3, [pc, #172]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 020c 	and.w	r2, r3, #12
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d1eb      	bne.n	80049ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a14:	4b25      	ldr	r3, [pc, #148]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d20c      	bcs.n	8004a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	4b20      	ldr	r3, [pc, #128]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e032      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a48:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4916      	ldr	r1, [pc, #88]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a66:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	490e      	ldr	r1, [pc, #56]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a7a:	f000 f821 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004a7e:	4601      	mov	r1, r0
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a8c:	5cd3      	ldrb	r3, [r2, r3]
 8004a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a92:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_RCC_ClockConfig+0x1c8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fd fa92 	bl	8001fc4 <HAL_InitTick>

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40023c00 	.word	0x40023c00
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	08009ef8 	.word	0x08009ef8
 8004ab8:	20000098 	.word	0x20000098
 8004abc:	2000009c 	.word	0x2000009c

08004ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ad6:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d007      	beq.n	8004af2 <HAL_RCC_GetSysClockFreq+0x32>
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d008      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0x38>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 808d 	bne.w	8004c06 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aec:	4b4b      	ldr	r3, [pc, #300]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004aee:	60bb      	str	r3, [r7, #8]
       break;
 8004af0:	e08c      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004af2:	4b4b      	ldr	r3, [pc, #300]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004af4:	60bb      	str	r3, [r7, #8]
      break;
 8004af6:	e089      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af8:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x158>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b02:	4b45      	ldr	r3, [pc, #276]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d023      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0e:	4b42      	ldr	r3, [pc, #264]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	099b      	lsrs	r3, r3, #6
 8004b14:	f04f 0400 	mov.w	r4, #0
 8004b18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	ea03 0501 	and.w	r5, r3, r1
 8004b24:	ea04 0602 	and.w	r6, r4, r2
 8004b28:	4a3d      	ldr	r2, [pc, #244]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b2a:	fb02 f106 	mul.w	r1, r2, r6
 8004b2e:	2200      	movs	r2, #0
 8004b30:	fb02 f205 	mul.w	r2, r2, r5
 8004b34:	440a      	add	r2, r1
 8004b36:	493a      	ldr	r1, [pc, #232]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b38:	fba5 0101 	umull	r0, r1, r5, r1
 8004b3c:	1853      	adds	r3, r2, r1
 8004b3e:	4619      	mov	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f04f 0400 	mov.w	r4, #0
 8004b46:	461a      	mov	r2, r3
 8004b48:	4623      	mov	r3, r4
 8004b4a:	f7fb fb45 	bl	80001d8 <__aeabi_uldivmod>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	460c      	mov	r4, r1
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e049      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b56:	4b30      	ldr	r3, [pc, #192]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	099b      	lsrs	r3, r3, #6
 8004b5c:	f04f 0400 	mov.w	r4, #0
 8004b60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	ea03 0501 	and.w	r5, r3, r1
 8004b6c:	ea04 0602 	and.w	r6, r4, r2
 8004b70:	4629      	mov	r1, r5
 8004b72:	4632      	mov	r2, r6
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	f04f 0400 	mov.w	r4, #0
 8004b7c:	0154      	lsls	r4, r2, #5
 8004b7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b82:	014b      	lsls	r3, r1, #5
 8004b84:	4619      	mov	r1, r3
 8004b86:	4622      	mov	r2, r4
 8004b88:	1b49      	subs	r1, r1, r5
 8004b8a:	eb62 0206 	sbc.w	r2, r2, r6
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	f04f 0400 	mov.w	r4, #0
 8004b96:	0194      	lsls	r4, r2, #6
 8004b98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b9c:	018b      	lsls	r3, r1, #6
 8004b9e:	1a5b      	subs	r3, r3, r1
 8004ba0:	eb64 0402 	sbc.w	r4, r4, r2
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	00e2      	lsls	r2, r4, #3
 8004bae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bb2:	00d9      	lsls	r1, r3, #3
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4614      	mov	r4, r2
 8004bb8:	195b      	adds	r3, r3, r5
 8004bba:	eb44 0406 	adc.w	r4, r4, r6
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	02a2      	lsls	r2, r4, #10
 8004bc8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004bcc:	0299      	lsls	r1, r3, #10
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4614      	mov	r4, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f04f 0400 	mov.w	r4, #0
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4623      	mov	r3, r4
 8004be0:	f7fb fafa 	bl	80001d8 <__aeabi_uldivmod>
 8004be4:	4603      	mov	r3, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x158>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0c1b      	lsrs	r3, r3, #16
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	60bb      	str	r3, [r7, #8]
      break;
 8004c04:	e002      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004c08:	60bb      	str	r3, [r7, #8]
      break;
 8004c0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	00f42400 	.word	0x00f42400
 8004c20:	017d7840 	.word	0x017d7840

08004c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000098 	.word	0x20000098

08004c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c40:	f7ff fff0 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c44:	4601      	mov	r1, r0
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	0a9b      	lsrs	r3, r3, #10
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4a03      	ldr	r2, [pc, #12]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c52:	5cd3      	ldrb	r3, [r2, r3]
 8004c54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08009f08 	.word	0x08009f08

08004c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e056      	b.n	8004d24 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fc f977 	bl	8000f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	ea42 0103 	orr.w	r1, r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	f003 0104 	and.w	r1, r3, #4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69da      	ldr	r2, [r3, #28]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d48:	d112      	bne.n	8004d70 <HAL_SPI_Receive+0x44>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10e      	bne.n	8004d70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2204      	movs	r2, #4
 8004d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f8e9 	bl	8004f3e <HAL_SPI_TransmitReceive>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	e0e2      	b.n	8004f36 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_SPI_Receive+0x52>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e0db      	b.n	8004f36 <HAL_SPI_Receive+0x20a>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d86:	f7fd f961 	bl	800204c <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d002      	beq.n	8004d9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d9c:	e0c2      	b.n	8004f24 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <HAL_SPI_Receive+0x7e>
 8004da4:	88fb      	ldrh	r3, [r7, #6]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dae:	e0b9      	b.n	8004f24 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2204      	movs	r2, #4
 8004db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	88fa      	ldrh	r2, [r7, #6]
 8004dce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df6:	d107      	bne.n	8004e08 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d007      	beq.n	8004e26 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d162      	bne.n	8004ef4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e2e:	e02e      	b.n	8004e8e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d115      	bne.n	8004e6a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f103 020c 	add.w	r2, r3, #12
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e68:	e011      	b.n	8004e8e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6a:	f7fd f8ef 	bl	800204c <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d803      	bhi.n	8004e82 <HAL_SPI_Receive+0x156>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d102      	bne.n	8004e88 <HAL_SPI_Receive+0x15c>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e8c:	e04a      	b.n	8004f24 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1cb      	bne.n	8004e30 <HAL_SPI_Receive+0x104>
 8004e98:	e031      	b.n	8004efe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d113      	bne.n	8004ed0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	b292      	uxth	r2, r2
 8004eb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	1c9a      	adds	r2, r3, #2
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ece:	e011      	b.n	8004ef4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed0:	f7fd f8bc 	bl	800204c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d803      	bhi.n	8004ee8 <HAL_SPI_Receive+0x1bc>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee6:	d102      	bne.n	8004eee <HAL_SPI_Receive+0x1c2>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d102      	bne.n	8004ef4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ef2:	e017      	b.n	8004f24 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1cd      	bne.n	8004e9a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fa27 	bl	8005356 <SPI_EndRxTransaction>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	75fb      	strb	r3, [r7, #23]
 8004f20:	e000      	b.n	8004f24 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004f22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b08c      	sub	sp, #48	; 0x30
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x26>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e18a      	b.n	800527a <HAL_SPI_TransmitReceive+0x33c>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f6c:	f7fd f86e 	bl	800204c <HAL_GetTick>
 8004f70:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f82:	887b      	ldrh	r3, [r7, #2]
 8004f84:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d00f      	beq.n	8004fae <HAL_SPI_TransmitReceive+0x70>
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f94:	d107      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x68>
 8004f9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d003      	beq.n	8004fae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fac:	e15b      	b.n	8005266 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_SPI_TransmitReceive+0x82>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_SPI_TransmitReceive+0x82>
 8004fba:	887b      	ldrh	r3, [r7, #2]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d103      	bne.n	8004fc8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fc6:	e14e      	b.n	8005266 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d003      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2205      	movs	r2, #5
 8004fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	887a      	ldrh	r2, [r7, #2]
 8004ff2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	887a      	ldrh	r2, [r7, #2]
 8004ffe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	887a      	ldrh	r2, [r7, #2]
 8005004:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	d007      	beq.n	8005030 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800502e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005038:	d178      	bne.n	800512c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x10a>
 8005042:	8b7b      	ldrh	r3, [r7, #26]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d166      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	881a      	ldrh	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	1c9a      	adds	r2, r3, #2
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800506c:	e053      	b.n	8005116 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b02      	cmp	r3, #2
 800507a:	d11b      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x176>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x176>
 8005086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d113      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	881a      	ldrh	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d119      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x1b8>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d014      	beq.n	80050f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	b292      	uxth	r2, r2
 80050d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	1c9a      	adds	r2, r3, #2
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050f2:	2301      	movs	r3, #1
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050f6:	f7fc ffa9 	bl	800204c <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005102:	429a      	cmp	r2, r3
 8005104:	d807      	bhi.n	8005116 <HAL_SPI_TransmitReceive+0x1d8>
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d003      	beq.n	8005116 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005114:	e0a7      	b.n	8005266 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1a6      	bne.n	800506e <HAL_SPI_TransmitReceive+0x130>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1a1      	bne.n	800506e <HAL_SPI_TransmitReceive+0x130>
 800512a:	e07c      	b.n	8005226 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_SPI_TransmitReceive+0x1fc>
 8005134:	8b7b      	ldrh	r3, [r7, #26]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d16b      	bne.n	8005212 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	330c      	adds	r3, #12
 8005144:	7812      	ldrb	r2, [r2, #0]
 8005146:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005160:	e057      	b.n	8005212 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b02      	cmp	r3, #2
 800516e:	d11c      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x26c>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d017      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x26c>
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d114      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	7812      	ldrb	r2, [r2, #0]
 800518c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d119      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x2ae>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d014      	beq.n	80051ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051e8:	2301      	movs	r3, #1
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051ec:	f7fc ff2e 	bl	800204c <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d803      	bhi.n	8005204 <HAL_SPI_TransmitReceive+0x2c6>
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d102      	bne.n	800520a <HAL_SPI_TransmitReceive+0x2cc>
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005210:	e029      	b.n	8005266 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1a2      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x224>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d19d      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f8f8 	bl	8005420 <SPI_EndRxTxTransaction>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d006      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005242:	e010      	b.n	8005266 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10b      	bne.n	8005264 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	e000      	b.n	8005266 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005264:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005276:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800527a:	4618      	mov	r0, r3
 800527c:	3730      	adds	r7, #48	; 0x30
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005292:	e04c      	b.n	800532e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d048      	beq.n	800532e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800529c:	f7fc fed6 	bl	800204c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d902      	bls.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d13d      	bne.n	800532e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ca:	d111      	bne.n	80052f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d4:	d004      	beq.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052de:	d107      	bne.n	80052f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f8:	d10f      	bne.n	800531a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005318:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e00f      	b.n	800534e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	429a      	cmp	r2, r3
 800534a:	d1a3      	bne.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b086      	sub	sp, #24
 800535a:	af02      	add	r7, sp, #8
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536a:	d111      	bne.n	8005390 <SPI_EndRxTransaction+0x3a>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005374:	d004      	beq.n	8005380 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537e:	d107      	bne.n	8005390 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005398:	d12a      	bne.n	80053f0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a2:	d012      	beq.n	80053ca <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2200      	movs	r2, #0
 80053ac:	2180      	movs	r1, #128	; 0x80
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff ff67 	bl	8005282 <SPI_WaitFlagStateUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d02d      	beq.n	8005416 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	f043 0220 	orr.w	r2, r3, #32
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e026      	b.n	8005418 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2200      	movs	r2, #0
 80053d2:	2101      	movs	r1, #1
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7ff ff54 	bl	8005282 <SPI_WaitFlagStateUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01a      	beq.n	8005416 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e4:	f043 0220 	orr.w	r2, r3, #32
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e013      	b.n	8005418 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	2101      	movs	r1, #1
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7ff ff41 	bl	8005282 <SPI_WaitFlagStateUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e000      	b.n	8005418 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800542c:	4b1b      	ldr	r3, [pc, #108]	; (800549c <SPI_EndRxTxTransaction+0x7c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1b      	ldr	r2, [pc, #108]	; (80054a0 <SPI_EndRxTxTransaction+0x80>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	0d5b      	lsrs	r3, r3, #21
 8005438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800543c:	fb02 f303 	mul.w	r3, r2, r3
 8005440:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800544a:	d112      	bne.n	8005472 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2200      	movs	r2, #0
 8005454:	2180      	movs	r1, #128	; 0x80
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff ff13 	bl	8005282 <SPI_WaitFlagStateUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005466:	f043 0220 	orr.w	r2, r3, #32
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e00f      	b.n	8005492 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3b01      	subs	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005488:	2b80      	cmp	r3, #128	; 0x80
 800548a:	d0f2      	beq.n	8005472 <SPI_EndRxTxTransaction+0x52>
 800548c:	e000      	b.n	8005490 <SPI_EndRxTxTransaction+0x70>
        break;
 800548e:	bf00      	nop
  }

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000098 	.word	0x20000098
 80054a0:	165e9f81 	.word	0x165e9f81

080054a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e083      	b.n	80055c0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fc fac5 	bl	8001a5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054e8:	f023 0307 	bic.w	r3, r3, #7
 80054ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f000 f9ed 	bl	80058d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	4313      	orrs	r3, r2
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005544:	f023 030c 	bic.w	r3, r3, #12
 8005548:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	4313      	orrs	r3, r2
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	011a      	lsls	r2, r3, #4
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	031b      	lsls	r3, r3, #12
 8005574:	4313      	orrs	r3, r2
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005582:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	4313      	orrs	r3, r2
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_TIM_Encoder_Start_IT+0x16>
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d010      	beq.n	80055fe <HAL_TIM_Encoder_Start_IT+0x36>
 80055dc:	e01f      	b.n	800561e <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2201      	movs	r2, #1
 80055e4:	2100      	movs	r1, #0
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f9f6 	bl	80059d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0202 	orr.w	r2, r2, #2
 80055fa:	60da      	str	r2, [r3, #12]
      break;
 80055fc:	e02e      	b.n	800565c <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2201      	movs	r2, #1
 8005604:	2104      	movs	r1, #4
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f9e6 	bl	80059d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0204 	orr.w	r2, r2, #4
 800561a:	60da      	str	r2, [r3, #12]
      break;
 800561c:	e01e      	b.n	800565c <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	2100      	movs	r1, #0
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f9d6 	bl	80059d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2201      	movs	r2, #1
 8005632:	2104      	movs	r1, #4
 8005634:	4618      	mov	r0, r3
 8005636:	f000 f9cf 	bl	80059d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0202 	orr.w	r2, r2, #2
 8005648:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0204 	orr.w	r2, r2, #4
 8005658:	60da      	str	r2, [r3, #12]
      break;
 800565a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b02      	cmp	r3, #2
 800568a:	d122      	bne.n	80056d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b02      	cmp	r3, #2
 8005698:	d11b      	bne.n	80056d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f06f 0202 	mvn.w	r2, #2
 80056a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fb faf5 	bl	8000ca8 <HAL_TIM_IC_CaptureCallback>
 80056be:	e005      	b.n	80056cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f8ea 	bl	800589a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f8f1 	bl	80058ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d122      	bne.n	8005726 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d11b      	bne.n	8005726 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f06f 0204 	mvn.w	r2, #4
 80056f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7fb facb 	bl	8000ca8 <HAL_TIM_IC_CaptureCallback>
 8005712:	e005      	b.n	8005720 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f8c0 	bl	800589a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f8c7 	bl	80058ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b08      	cmp	r3, #8
 8005732:	d122      	bne.n	800577a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b08      	cmp	r3, #8
 8005740:	d11b      	bne.n	800577a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f06f 0208 	mvn.w	r2, #8
 800574a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2204      	movs	r2, #4
 8005750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fb faa1 	bl	8000ca8 <HAL_TIM_IC_CaptureCallback>
 8005766:	e005      	b.n	8005774 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f896 	bl	800589a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f89d 	bl	80058ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b10      	cmp	r3, #16
 8005786:	d122      	bne.n	80057ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b10      	cmp	r3, #16
 8005794:	d11b      	bne.n	80057ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f06f 0210 	mvn.w	r2, #16
 800579e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2208      	movs	r2, #8
 80057a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fb fa77 	bl	8000ca8 <HAL_TIM_IC_CaptureCallback>
 80057ba:	e005      	b.n	80057c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f86c 	bl	800589a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f873 	bl	80058ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d10e      	bne.n	80057fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d107      	bne.n	80057fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f06f 0201 	mvn.w	r2, #1
 80057f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f846 	bl	8005886 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005804:	2b80      	cmp	r3, #128	; 0x80
 8005806:	d10e      	bne.n	8005826 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005812:	2b80      	cmp	r3, #128	; 0x80
 8005814:	d107      	bne.n	8005826 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800581e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f977 	bl	8005b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d10e      	bne.n	8005852 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d107      	bne.n	8005852 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800584a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f838 	bl	80058c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b20      	cmp	r3, #32
 800585e:	d10e      	bne.n	800587e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b20      	cmp	r3, #32
 800586c:	d107      	bne.n	800587e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f06f 0220 	mvn.w	r2, #32
 8005876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f941 	bl	8005b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a34      	ldr	r2, [pc, #208]	; (80059bc <TIM_Base_SetConfig+0xe4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00f      	beq.n	8005910 <TIM_Base_SetConfig+0x38>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f6:	d00b      	beq.n	8005910 <TIM_Base_SetConfig+0x38>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a31      	ldr	r2, [pc, #196]	; (80059c0 <TIM_Base_SetConfig+0xe8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_Base_SetConfig+0x38>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a30      	ldr	r2, [pc, #192]	; (80059c4 <TIM_Base_SetConfig+0xec>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0x38>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a2f      	ldr	r2, [pc, #188]	; (80059c8 <TIM_Base_SetConfig+0xf0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d108      	bne.n	8005922 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a25      	ldr	r2, [pc, #148]	; (80059bc <TIM_Base_SetConfig+0xe4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01b      	beq.n	8005962 <TIM_Base_SetConfig+0x8a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005930:	d017      	beq.n	8005962 <TIM_Base_SetConfig+0x8a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <TIM_Base_SetConfig+0xe8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <TIM_Base_SetConfig+0x8a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a21      	ldr	r2, [pc, #132]	; (80059c4 <TIM_Base_SetConfig+0xec>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00f      	beq.n	8005962 <TIM_Base_SetConfig+0x8a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a20      	ldr	r2, [pc, #128]	; (80059c8 <TIM_Base_SetConfig+0xf0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00b      	beq.n	8005962 <TIM_Base_SetConfig+0x8a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a1f      	ldr	r2, [pc, #124]	; (80059cc <TIM_Base_SetConfig+0xf4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <TIM_Base_SetConfig+0x8a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a1e      	ldr	r2, [pc, #120]	; (80059d0 <TIM_Base_SetConfig+0xf8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_Base_SetConfig+0x8a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <TIM_Base_SetConfig+0xfc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d108      	bne.n	8005974 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a08      	ldr	r2, [pc, #32]	; (80059bc <TIM_Base_SetConfig+0xe4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d103      	bne.n	80059a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	615a      	str	r2, [r3, #20]
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40014400 	.word	0x40014400
 80059d4:	40014800 	.word	0x40014800

080059d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2201      	movs	r2, #1
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1a      	ldr	r2, [r3, #32]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	43db      	mvns	r3, r3
 80059fa:	401a      	ands	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a1a      	ldr	r2, [r3, #32]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e050      	b.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d018      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a88:	d013      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a16      	ldr	r2, [pc, #88]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a13      	ldr	r2, [pc, #76]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d10c      	bne.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40000c00 	.word	0x40000c00
 8005afc:	40014000 	.word	0x40014000

08005b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b28:	b084      	sub	sp, #16
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	f107 001c 	add.w	r0, r7, #28
 8005b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d122      	bne.n	8005b86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d105      	bne.n	8005b7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 fac6 	bl	800710c <USB_CoreReset>
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]
 8005b84:	e01a      	b.n	8005bbc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 faba 	bl	800710c <USB_CoreReset>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
 8005bae:	e005      	b.n	8005bbc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d10b      	bne.n	8005bda <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f043 0206 	orr.w	r2, r3, #6
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005be6:	b004      	add	sp, #16
 8005be8:	4770      	bx	lr
	...

08005bec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d165      	bne.n	8005ccc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4a41      	ldr	r2, [pc, #260]	; (8005d08 <USB_SetTurnaroundTime+0x11c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d906      	bls.n	8005c16 <USB_SetTurnaroundTime+0x2a>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4a40      	ldr	r2, [pc, #256]	; (8005d0c <USB_SetTurnaroundTime+0x120>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d802      	bhi.n	8005c16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c10:	230f      	movs	r3, #15
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e062      	b.n	8005cdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4a3c      	ldr	r2, [pc, #240]	; (8005d0c <USB_SetTurnaroundTime+0x120>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d906      	bls.n	8005c2c <USB_SetTurnaroundTime+0x40>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4a3b      	ldr	r2, [pc, #236]	; (8005d10 <USB_SetTurnaroundTime+0x124>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d802      	bhi.n	8005c2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c26:	230e      	movs	r3, #14
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e057      	b.n	8005cdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4a38      	ldr	r2, [pc, #224]	; (8005d10 <USB_SetTurnaroundTime+0x124>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d906      	bls.n	8005c42 <USB_SetTurnaroundTime+0x56>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4a37      	ldr	r2, [pc, #220]	; (8005d14 <USB_SetTurnaroundTime+0x128>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d802      	bhi.n	8005c42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c3c:	230d      	movs	r3, #13
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e04c      	b.n	8005cdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4a33      	ldr	r2, [pc, #204]	; (8005d14 <USB_SetTurnaroundTime+0x128>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d906      	bls.n	8005c58 <USB_SetTurnaroundTime+0x6c>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	4a32      	ldr	r2, [pc, #200]	; (8005d18 <USB_SetTurnaroundTime+0x12c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d802      	bhi.n	8005c58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c52:	230c      	movs	r3, #12
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e041      	b.n	8005cdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4a2f      	ldr	r2, [pc, #188]	; (8005d18 <USB_SetTurnaroundTime+0x12c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d906      	bls.n	8005c6e <USB_SetTurnaroundTime+0x82>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4a2e      	ldr	r2, [pc, #184]	; (8005d1c <USB_SetTurnaroundTime+0x130>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d802      	bhi.n	8005c6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c68:	230b      	movs	r3, #11
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e036      	b.n	8005cdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <USB_SetTurnaroundTime+0x130>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d906      	bls.n	8005c84 <USB_SetTurnaroundTime+0x98>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4a29      	ldr	r2, [pc, #164]	; (8005d20 <USB_SetTurnaroundTime+0x134>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d802      	bhi.n	8005c84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c7e:	230a      	movs	r3, #10
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	e02b      	b.n	8005cdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4a26      	ldr	r2, [pc, #152]	; (8005d20 <USB_SetTurnaroundTime+0x134>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d906      	bls.n	8005c9a <USB_SetTurnaroundTime+0xae>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4a25      	ldr	r2, [pc, #148]	; (8005d24 <USB_SetTurnaroundTime+0x138>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d802      	bhi.n	8005c9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c94:	2309      	movs	r3, #9
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	e020      	b.n	8005cdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	4a21      	ldr	r2, [pc, #132]	; (8005d24 <USB_SetTurnaroundTime+0x138>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d906      	bls.n	8005cb0 <USB_SetTurnaroundTime+0xc4>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <USB_SetTurnaroundTime+0x13c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d802      	bhi.n	8005cb0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005caa:	2308      	movs	r3, #8
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	e015      	b.n	8005cdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <USB_SetTurnaroundTime+0x13c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d906      	bls.n	8005cc6 <USB_SetTurnaroundTime+0xda>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <USB_SetTurnaroundTime+0x140>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d802      	bhi.n	8005cc6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005cc0:	2307      	movs	r3, #7
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e00a      	b.n	8005cdc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005cc6:	2306      	movs	r3, #6
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e007      	b.n	8005cdc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005cd2:	2309      	movs	r3, #9
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	e001      	b.n	8005cdc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005cd8:	2309      	movs	r3, #9
 8005cda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	029b      	lsls	r3, r3, #10
 8005cf0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	00d8acbf 	.word	0x00d8acbf
 8005d0c:	00e4e1bf 	.word	0x00e4e1bf
 8005d10:	00f423ff 	.word	0x00f423ff
 8005d14:	0106737f 	.word	0x0106737f
 8005d18:	011a499f 	.word	0x011a499f
 8005d1c:	01312cff 	.word	0x01312cff
 8005d20:	014ca43f 	.word	0x014ca43f
 8005d24:	016e35ff 	.word	0x016e35ff
 8005d28:	01a6ab1f 	.word	0x01a6ab1f
 8005d2c:	01e847ff 	.word	0x01e847ff

08005d30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f043 0201 	orr.w	r2, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f023 0201 	bic.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d106      	bne.n	8005da0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60da      	str	r2, [r3, #12]
 8005d9e:	e00b      	b.n	8005db8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]
 8005db2:	e001      	b.n	8005db8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e003      	b.n	8005dc0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005db8:	2032      	movs	r0, #50	; 0x32
 8005dba:	f7fc f953 	bl	8002064 <HAL_Delay>

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dc8:	b084      	sub	sp, #16
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b086      	sub	sp, #24
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	e009      	b.n	8005dfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	3340      	adds	r3, #64	; 0x40
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	2200      	movs	r2, #0
 8005df4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b0e      	cmp	r3, #14
 8005e00:	d9f2      	bls.n	8005de8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d11c      	bne.n	8005e42 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e16:	f043 0302 	orr.w	r3, r3, #2
 8005e1a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8005e40:	e00b      	b.n	8005e5a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e60:	461a      	mov	r2, r3
 8005e62:	2300      	movs	r3, #0
 8005e64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e74:	461a      	mov	r2, r3
 8005e76:	680b      	ldr	r3, [r1, #0]
 8005e78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d10c      	bne.n	8005e9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d104      	bne.n	8005e90 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e86:	2100      	movs	r1, #0
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f949 	bl	8006120 <USB_SetDevSpeed>
 8005e8e:	e008      	b.n	8005ea2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e90:	2101      	movs	r1, #1
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f944 	bl	8006120 <USB_SetDevSpeed>
 8005e98:	e003      	b.n	8005ea2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e9a:	2103      	movs	r1, #3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f93f 	bl	8006120 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ea2:	2110      	movs	r1, #16
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f8f3 	bl	8006090 <USB_FlushTxFifo>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f911 	bl	80060dc <USB_FlushRxFifo>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eca:	461a      	mov	r2, r3
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	e043      	b.n	8005f76 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f04:	d118      	bne.n	8005f38 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	e013      	b.n	8005f4a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e008      	b.n	8005f4a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	461a      	mov	r2, r3
 8005f46:	2300      	movs	r3, #0
 8005f48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f56:	461a      	mov	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	3301      	adds	r3, #1
 8005f74:	613b      	str	r3, [r7, #16]
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d3b7      	bcc.n	8005eee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	e043      	b.n	800600c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f9a:	d118      	bne.n	8005fce <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e013      	b.n	8005fe0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	e008      	b.n	8005fe0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fec:	461a      	mov	r2, r3
 8005fee:	2300      	movs	r3, #0
 8005ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	461a      	mov	r2, r3
 8006000:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006004:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3301      	adds	r3, #1
 800600a:	613b      	str	r3, [r7, #16]
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	429a      	cmp	r2, r3
 8006012:	d3b7      	bcc.n	8005f84 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006026:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006034:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2b00      	cmp	r3, #0
 800603a:	d105      	bne.n	8006048 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	f043 0210 	orr.w	r2, r3, #16
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699a      	ldr	r2, [r3, #24]
 800604c:	4b0f      	ldr	r3, [pc, #60]	; (800608c <USB_DevInit+0x2c4>)
 800604e:	4313      	orrs	r3, r2
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f043 0208 	orr.w	r2, r3, #8
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006068:	2b01      	cmp	r3, #1
 800606a:	d107      	bne.n	800607c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006074:	f043 0304 	orr.w	r3, r3, #4
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006088:	b004      	add	sp, #16
 800608a:	4770      	bx	lr
 800608c:	803c3800 	.word	0x803c3800

08006090 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	019b      	lsls	r3, r3, #6
 80060a2:	f043 0220 	orr.w	r2, r3, #32
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3301      	adds	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <USB_FlushTxFifo+0x48>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e006      	b.n	80060ca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d0f0      	beq.n	80060aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	00030d40 	.word	0x00030d40

080060dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2210      	movs	r2, #16
 80060ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3301      	adds	r3, #1
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <USB_FlushRxFifo+0x40>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d901      	bls.n	8006100 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e006      	b.n	800610e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b10      	cmp	r3, #16
 800610a:	d0f0      	beq.n	80060ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	00030d40 	.word	0x00030d40

08006120 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006140:	4313      	orrs	r3, r2
 8006142:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006152:	b480      	push	{r7}
 8006154:	b087      	sub	sp, #28
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 0306 	and.w	r3, r3, #6
 800616a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]
 8006176:	e00a      	b.n	800618e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d002      	beq.n	8006184 <USB_GetDevSpeed+0x32>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b06      	cmp	r3, #6
 8006182:	d102      	bne.n	800618a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006184:	2302      	movs	r3, #2
 8006186:	75fb      	strb	r3, [r7, #23]
 8006188:	e001      	b.n	800618e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800618a:	230f      	movs	r3, #15
 800618c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800618e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006190:	4618      	mov	r0, r3
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d13a      	bne.n	800622e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	2101      	movs	r1, #1
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	68f9      	ldr	r1, [r7, #12]
 80061d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061d6:	4313      	orrs	r3, r2
 80061d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d155      	bne.n	800629c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	78db      	ldrb	r3, [r3, #3]
 800620a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800620c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	059b      	lsls	r3, r3, #22
 8006212:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006214:	4313      	orrs	r3, r2
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	440a      	add	r2, r1
 800621e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	e036      	b.n	800629c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	2101      	movs	r1, #1
 8006240:	fa01 f303 	lsl.w	r3, r1, r3
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	68f9      	ldr	r1, [r7, #12]
 8006248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800624c:	4313      	orrs	r3, r2
 800624e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d11a      	bne.n	800629c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	78db      	ldrb	r3, [r3, #3]
 8006280:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006282:	430b      	orrs	r3, r1
 8006284:	4313      	orrs	r3, r2
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	440a      	add	r2, r1
 800628e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d161      	bne.n	800638c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062de:	d11f      	bne.n	8006320 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800631e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	2101      	movs	r1, #1
 8006332:	fa01 f303 	lsl.w	r3, r1, r3
 8006336:	b29b      	uxth	r3, r3
 8006338:	43db      	mvns	r3, r3
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006340:	4013      	ands	r3, r2
 8006342:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	2101      	movs	r1, #1
 8006356:	fa01 f303 	lsl.w	r3, r1, r3
 800635a:	b29b      	uxth	r3, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006364:	4013      	ands	r3, r2
 8006366:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	0159      	lsls	r1, r3, #5
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	440b      	add	r3, r1
 800637e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006382:	4619      	mov	r1, r3
 8006384:	4b35      	ldr	r3, [pc, #212]	; (800645c <USB_DeactivateEndpoint+0x1b0>)
 8006386:	4013      	ands	r3, r2
 8006388:	600b      	str	r3, [r1, #0]
 800638a:	e060      	b.n	800644e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800639e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063a2:	d11f      	bne.n	80063e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	2101      	movs	r1, #1
 80063f6:	fa01 f303 	lsl.w	r3, r1, r3
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	43db      	mvns	r3, r3
 80063fe:	68f9      	ldr	r1, [r7, #12]
 8006400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006404:	4013      	ands	r3, r2
 8006406:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640e:	69da      	ldr	r2, [r3, #28]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	2101      	movs	r1, #1
 800641a:	fa01 f303 	lsl.w	r3, r1, r3
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	43db      	mvns	r3, r3
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006428:	4013      	ands	r3, r2
 800642a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	0159      	lsls	r1, r3, #5
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	440b      	add	r3, r1
 8006442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006446:	4619      	mov	r1, r3
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <USB_DeactivateEndpoint+0x1b4>)
 800644a:	4013      	ands	r3, r2
 800644c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	ec337800 	.word	0xec337800
 8006460:	eff37800 	.word	0xeff37800

08006464 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	; 0x28
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2b01      	cmp	r3, #1
 8006482:	f040 815c 	bne.w	800673e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d132      	bne.n	80064f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	0151      	lsls	r1, r2, #5
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	440a      	add	r2, r1
 80064e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ec:	0cdb      	lsrs	r3, r3, #19
 80064ee:	04db      	lsls	r3, r3, #19
 80064f0:	6113      	str	r3, [r2, #16]
 80064f2:	e074      	b.n	80065de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	0151      	lsls	r1, r2, #5
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	440a      	add	r2, r1
 800650a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650e:	0cdb      	lsrs	r3, r3, #19
 8006510:	04db      	lsls	r3, r3, #19
 8006512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	440a      	add	r2, r1
 800652a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006532:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	6959      	ldr	r1, [r3, #20]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	440b      	add	r3, r1
 8006550:	1e59      	subs	r1, r3, #1
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	fbb1 f3f3 	udiv	r3, r1, r3
 800655a:	04d9      	lsls	r1, r3, #19
 800655c:	4b9d      	ldr	r3, [pc, #628]	; (80067d4 <USB_EPStartXfer+0x370>)
 800655e:	400b      	ands	r3, r1
 8006560:	69b9      	ldr	r1, [r7, #24]
 8006562:	0148      	lsls	r0, r1, #5
 8006564:	69f9      	ldr	r1, [r7, #28]
 8006566:	4401      	add	r1, r0
 8006568:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800656c:	4313      	orrs	r3, r2
 800656e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006586:	69b9      	ldr	r1, [r7, #24]
 8006588:	0148      	lsls	r0, r1, #5
 800658a:	69f9      	ldr	r1, [r7, #28]
 800658c:	4401      	add	r1, r0
 800658e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006592:	4313      	orrs	r3, r2
 8006594:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	78db      	ldrb	r3, [r3, #3]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d11f      	bne.n	80065de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80065bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80065de:	79fb      	ldrb	r3, [r7, #7]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d14b      	bne.n	800667c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f8:	461a      	mov	r2, r3
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	78db      	ldrb	r3, [r3, #3]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d128      	bne.n	800665a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d110      	bne.n	800663a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	440a      	add	r2, r1
 800662e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006632:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	e00f      	b.n	800665a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	69fa      	ldr	r2, [r7, #28]
 800664e:	440a      	add	r2, r1
 8006650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006658:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	0151      	lsls	r1, r2, #5
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	440a      	add	r2, r1
 8006670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006674:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	e12f      	b.n	80068dc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800669a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	78db      	ldrb	r3, [r3, #3]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d015      	beq.n	80066d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8117 	beq.w	80068dc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	2101      	movs	r1, #1
 80066c0:	fa01 f303 	lsl.w	r3, r1, r3
 80066c4:	69f9      	ldr	r1, [r7, #28]
 80066c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ca:	4313      	orrs	r3, r2
 80066cc:	634b      	str	r3, [r1, #52]	; 0x34
 80066ce:	e105      	b.n	80068dc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d110      	bne.n	8006702 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	e00f      	b.n	8006722 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	0151      	lsls	r1, r2, #5
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	440a      	add	r2, r1
 8006718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006720:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	68d9      	ldr	r1, [r3, #12]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	b298      	uxth	r0, r3
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	4603      	mov	r3, r0
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 fa2b 	bl	8006b92 <USB_WritePacket>
 800673c:	e0ce      	b.n	80068dc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	440a      	add	r2, r1
 8006754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006758:	0cdb      	lsrs	r3, r3, #19
 800675a:	04db      	lsls	r3, r3, #19
 800675c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	440a      	add	r2, r1
 8006774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006778:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800677c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006780:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d126      	bne.n	80067d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067a0:	69b9      	ldr	r1, [r7, #24]
 80067a2:	0148      	lsls	r0, r1, #5
 80067a4:	69f9      	ldr	r1, [r7, #28]
 80067a6:	4401      	add	r1, r0
 80067a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067ac:	4313      	orrs	r3, r2
 80067ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067ce:	6113      	str	r3, [r2, #16]
 80067d0:	e036      	b.n	8006840 <USB_EPStartXfer+0x3dc>
 80067d2:	bf00      	nop
 80067d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	4413      	add	r3, r2
 80067e2:	1e5a      	subs	r2, r3, #1
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	8afb      	ldrh	r3, [r7, #22]
 80067fe:	04d9      	lsls	r1, r3, #19
 8006800:	4b39      	ldr	r3, [pc, #228]	; (80068e8 <USB_EPStartXfer+0x484>)
 8006802:	400b      	ands	r3, r1
 8006804:	69b9      	ldr	r1, [r7, #24]
 8006806:	0148      	lsls	r0, r1, #5
 8006808:	69f9      	ldr	r1, [r7, #28]
 800680a:	4401      	add	r1, r0
 800680c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006810:	4313      	orrs	r3, r2
 8006812:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	8af9      	ldrh	r1, [r7, #22]
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006830:	69b9      	ldr	r1, [r7, #24]
 8006832:	0148      	lsls	r0, r1, #5
 8006834:	69f9      	ldr	r1, [r7, #28]
 8006836:	4401      	add	r1, r0
 8006838:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800683c:	4313      	orrs	r3, r2
 800683e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d10d      	bne.n	8006862 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	68d9      	ldr	r1, [r3, #12]
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685e:	460a      	mov	r2, r1
 8006860:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	78db      	ldrb	r3, [r3, #3]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d128      	bne.n	80068bc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006876:	2b00      	cmp	r3, #0
 8006878:	d110      	bne.n	800689c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	440a      	add	r2, r1
 8006890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e00f      	b.n	80068bc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	0151      	lsls	r1, r2, #5
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	440a      	add	r2, r1
 80068d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	1ff80000 	.word	0x1ff80000

080068ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b01      	cmp	r3, #1
 800690a:	f040 80cd 	bne.w	8006aa8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d132      	bne.n	800697c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	440a      	add	r2, r1
 800692c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006930:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006934:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	440a      	add	r2, r1
 8006950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006954:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006974:	0cdb      	lsrs	r3, r3, #19
 8006976:	04db      	lsls	r3, r3, #19
 8006978:	6113      	str	r3, [r2, #16]
 800697a:	e04e      	b.n	8006a1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006996:	0cdb      	lsrs	r3, r3, #19
 8006998:	04db      	lsls	r3, r3, #19
 800699a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	695a      	ldr	r2, [r3, #20]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d903      	bls.n	80069d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a0a:	6939      	ldr	r1, [r7, #16]
 8006a0c:	0148      	lsls	r0, r1, #5
 8006a0e:	6979      	ldr	r1, [r7, #20]
 8006a10:	4401      	add	r1, r0
 8006a12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a16:	4313      	orrs	r3, r2
 8006a18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d11e      	bne.n	8006a5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d009      	beq.n	8006a3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	461a      	mov	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	e092      	b.n	8006b84 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d07e      	beq.n	8006b84 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	f003 030f 	and.w	r3, r3, #15
 8006a96:	2101      	movs	r1, #1
 8006a98:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9c:	6979      	ldr	r1, [r7, #20]
 8006a9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	634b      	str	r3, [r1, #52]	; 0x34
 8006aa6:	e06d      	b.n	8006b84 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac2:	0cdb      	lsrs	r3, r3, #19
 8006ac4:	04db      	lsls	r3, r3, #19
 8006ac6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	0151      	lsls	r1, r2, #5
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	440a      	add	r2, r1
 8006ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ae6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006aea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b32:	6939      	ldr	r1, [r7, #16]
 8006b34:	0148      	lsls	r0, r1, #5
 8006b36:	6979      	ldr	r1, [r7, #20]
 8006b38:	4401      	add	r1, r0
 8006b3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d10d      	bne.n	8006b64 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d009      	beq.n	8006b64 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	68d9      	ldr	r1, [r3, #12]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	460a      	mov	r2, r1
 8006b62:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b089      	sub	sp, #36	; 0x24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	71fb      	strb	r3, [r7, #7]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006bb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d11a      	bne.n	8006bee <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bb8:	88bb      	ldrh	r3, [r7, #4]
 8006bba:	3303      	adds	r3, #3
 8006bbc:	089b      	lsrs	r3, r3, #2
 8006bbe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e00f      	b.n	8006be6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	031a      	lsls	r2, r3, #12
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	3301      	adds	r3, #1
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d3eb      	bcc.n	8006bc6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3724      	adds	r7, #36	; 0x24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b089      	sub	sp, #36	; 0x24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006c12:	88fb      	ldrh	r3, [r7, #6]
 8006c14:	3303      	adds	r3, #3
 8006c16:	089b      	lsrs	r3, r3, #2
 8006c18:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	e00b      	b.n	8006c38 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	3301      	adds	r3, #1
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d3ef      	bcc.n	8006c20 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006c40:	69fb      	ldr	r3, [r7, #28]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3724      	adds	r7, #36	; 0x24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b085      	sub	sp, #20
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	785b      	ldrb	r3, [r3, #1]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d12c      	bne.n	8006cc4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	db12      	blt.n	8006ca2 <USB_EPSetStall+0x54>
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00f      	beq.n	8006ca2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ca0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	e02b      	b.n	8006d1c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	db12      	blt.n	8006cfc <USB_EPSetStall+0xae>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00f      	beq.n	8006cfc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cfa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	0151      	lsls	r1, r2, #5
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	440a      	add	r2, r1
 8006d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d128      	bne.n	8006d98 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	78db      	ldrb	r3, [r3, #3]
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d003      	beq.n	8006d76 <USB_EPClearStall+0x4c>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	78db      	ldrb	r3, [r3, #3]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d138      	bne.n	8006de8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	e027      	b.n	8006de8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006db6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	78db      	ldrb	r3, [r3, #3]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d003      	beq.n	8006dc8 <USB_EPClearStall+0x9e>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	78db      	ldrb	r3, [r3, #3]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d10f      	bne.n	8006de8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	0151      	lsls	r1, r2, #5
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	440a      	add	r2, r1
 8006dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006de6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e18:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e30:	4313      	orrs	r3, r2
 8006e32:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e5c:	f023 0303 	bic.w	r3, r3, #3
 8006e60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e70:	f023 0302 	bic.w	r3, r3, #2
 8006e74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e9e:	f023 0303 	bic.w	r3, r3, #3
 8006ea2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eb2:	f043 0302 	orr.w	r3, r3, #2
 8006eb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4013      	ands	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ede:	68fb      	ldr	r3, [r7, #12]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	0c1b      	lsrs	r3, r3, #16
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	4013      	ands	r3, r2
 8006f42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	b29b      	uxth	r3, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f82:	68bb      	ldr	r3, [r7, #8]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc0:	01db      	lsls	r3, r3, #7
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fde:	68bb      	ldr	r3, [r7, #8]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007022:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007026:	f023 0307 	bic.w	r3, r3, #7
 800702a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800703a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
	...

08007050 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	460b      	mov	r3, r1
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	333c      	adds	r3, #60	; 0x3c
 8007066:	3304      	adds	r3, #4
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	4a26      	ldr	r2, [pc, #152]	; (8007108 <USB_EP0_OutStart+0xb8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d90a      	bls.n	800708a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007084:	d101      	bne.n	800708a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	e037      	b.n	80070fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007090:	461a      	mov	r2, r3
 8007092:	2300      	movs	r3, #0
 8007094:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b8:	f043 0318 	orr.w	r3, r3, #24
 80070bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80070d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d10f      	bne.n	80070f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80070f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	4f54300a 	.word	0x4f54300a

0800710c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3301      	adds	r3, #1
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4a13      	ldr	r2, [pc, #76]	; (8007170 <USB_CoreReset+0x64>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d901      	bls.n	800712a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e01b      	b.n	8007162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	daf2      	bge.n	8007118 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f043 0201 	orr.w	r2, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3301      	adds	r3, #1
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4a09      	ldr	r2, [pc, #36]	; (8007170 <USB_CoreReset+0x64>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d901      	bls.n	8007154 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e006      	b.n	8007162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b01      	cmp	r3, #1
 800715e:	d0f0      	beq.n	8007142 <USB_CoreReset+0x36>

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	00030d40 	.word	0x00030d40

08007174 <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	USBD_HID_HandleTypeDef *hhid;

	hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007180:	2010      	movs	r0, #16
 8007182:	f001 fee3 	bl	8008f4c <malloc>
 8007186:	4603      	mov	r3, r0
 8007188:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d105      	bne.n	800719c <USBD_HID_Init+0x28>
	{
		pdev->pClassData = NULL;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		return (uint8_t)USBD_EMEM;
 8007198:	2302      	movs	r3, #2
 800719a:	e01b      	b.n	80071d4 <USBD_HID_Init+0x60>
	}

	pdev->pClassData = (void *)hhid;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7c1b      	ldrb	r3, [r3, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <USBD_HID_Init+0x40>
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2207      	movs	r2, #7
 80071b0:	875a      	strh	r2, [r3, #58]	; 0x3a
 80071b2:	e002      	b.n	80071ba <USBD_HID_Init+0x46>
	}
	else   /* LOW and FULL-speed endpoints */
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	220a      	movs	r2, #10
 80071b8:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	/* Open EP IN */
	(void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80071ba:	2304      	movs	r3, #4
 80071bc:	2203      	movs	r2, #3
 80071be:	2181      	movs	r1, #129	; 0x81
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 fd5c 	bl	8008c7e <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	871a      	strh	r2, [r3, #56]	; 0x38

	hhid->state = HID_IDLE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_HID_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	/* Close HID EPs */
	(void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80071e8:	2181      	movs	r1, #129	; 0x81
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fd6d 	bl	8008cca <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	871a      	strh	r2, [r3, #56]	; 0x38
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	875a      	strh	r2, [r3, #58]	; 0x3a

	/* FRee allocated memory */
	if (pdev->pClassData != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <USBD_HID_DeInit+0x3e>
	{
		(void)USBD_free(pdev->pClassData);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800720c:	4618      	mov	r0, r3
 800720e:	f001 fea5 	bl	8008f5c <free>
		pdev->pClassData = NULL;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t)USBD_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007234:	60fb      	str	r3, [r7, #12]
	USBD_StatusTypeDef ret = USBD_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	817b      	strh	r3, [r7, #10]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007246:	2b00      	cmp	r3, #0
 8007248:	d045      	beq.n	80072d6 <USBD_HID_Setup+0xb2>
 800724a:	2b20      	cmp	r3, #32
 800724c:	f040 80d4 	bne.w	80073f8 <USBD_HID_Setup+0x1d4>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	3b02      	subs	r3, #2
 8007256:	2b09      	cmp	r3, #9
 8007258:	d835      	bhi.n	80072c6 <USBD_HID_Setup+0xa2>
 800725a:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <USBD_HID_Setup+0x3c>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	080072b7 	.word	0x080072b7
 8007264:	08007297 	.word	0x08007297
 8007268:	080072c7 	.word	0x080072c7
 800726c:	080072c7 	.word	0x080072c7
 8007270:	080072c7 	.word	0x080072c7
 8007274:	080072c7 	.word	0x080072c7
 8007278:	080072c7 	.word	0x080072c7
 800727c:	080072c7 	.word	0x080072c7
 8007280:	080072a5 	.word	0x080072a5
 8007284:	08007289 	.word	0x08007289
		{
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	885b      	ldrh	r3, [r3, #2]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	461a      	mov	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	601a      	str	r2, [r3, #0]
			break;
 8007294:	e01e      	b.n	80072d4 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 f9b4 	bl	800860a <USBD_CtlSendData>
			break;
 80072a2:	e017      	b.n	80072d4 <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	885b      	ldrh	r3, [r3, #2]
 80072a8:	0a1b      	lsrs	r3, r3, #8
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	605a      	str	r2, [r3, #4]
			break;
 80072b4:	e00e      	b.n	80072d4 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3304      	adds	r3, #4
 80072ba:	2201      	movs	r2, #1
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 f9a3 	bl	800860a <USBD_CtlSendData>
			break;
 80072c4:	e006      	b.n	80072d4 <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 f92d 	bl	8008528 <USBD_CtlError>
			ret = USBD_FAIL;
 80072ce:	2303      	movs	r3, #3
 80072d0:	75fb      	strb	r3, [r7, #23]
			break;
 80072d2:	bf00      	nop
		}
		break;
 80072d4:	e097      	b.n	8007406 <USBD_HID_Setup+0x1e2>
		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	2b0b      	cmp	r3, #11
 80072dc:	f200 8083 	bhi.w	80073e6 <USBD_HID_Setup+0x1c2>
 80072e0:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <USBD_HID_Setup+0xc4>)
 80072e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e6:	bf00      	nop
 80072e8:	08007319 	.word	0x08007319
 80072ec:	080073f5 	.word	0x080073f5
 80072f0:	080073e7 	.word	0x080073e7
 80072f4:	080073e7 	.word	0x080073e7
 80072f8:	080073e7 	.word	0x080073e7
 80072fc:	080073e7 	.word	0x080073e7
 8007300:	08007341 	.word	0x08007341
 8007304:	080073e7 	.word	0x080073e7
 8007308:	080073e7 	.word	0x080073e7
 800730c:	080073e7 	.word	0x080073e7
 8007310:	08007399 	.word	0x08007399
 8007314:	080073c1 	.word	0x080073c1
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731e:	2b03      	cmp	r3, #3
 8007320:	d107      	bne.n	8007332 <USBD_HID_Setup+0x10e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007322:	f107 030a 	add.w	r3, r7, #10
 8007326:	2202      	movs	r2, #2
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 f96d 	bl	800860a <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8007330:	e061      	b.n	80073f6 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f001 f8f7 	bl	8008528 <USBD_CtlError>
					ret = USBD_FAIL;
 800733a:	2303      	movs	r3, #3
 800733c:	75fb      	strb	r3, [r7, #23]
				break;
 800733e:	e05a      	b.n	80073f6 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_DESCRIPTOR:
				if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	885b      	ldrh	r3, [r3, #2]
 8007344:	0a1b      	lsrs	r3, r3, #8
 8007346:	b29b      	uxth	r3, r3
 8007348:	2b22      	cmp	r3, #34	; 0x22
 800734a:	d108      	bne.n	800735e <USBD_HID_Setup+0x13a>
				{
					len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	88db      	ldrh	r3, [r3, #6]
 8007350:	2b3f      	cmp	r3, #63	; 0x3f
 8007352:	bf28      	it	cs
 8007354:	233f      	movcs	r3, #63	; 0x3f
 8007356:	82bb      	strh	r3, [r7, #20]
					pbuf = HID_MOUSE_ReportDesc;
 8007358:	4b2d      	ldr	r3, [pc, #180]	; (8007410 <USBD_HID_Setup+0x1ec>)
 800735a:	613b      	str	r3, [r7, #16]
 800735c:	e015      	b.n	800738a <USBD_HID_Setup+0x166>
				}
				else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	885b      	ldrh	r3, [r3, #2]
 8007362:	0a1b      	lsrs	r3, r3, #8
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b21      	cmp	r3, #33	; 0x21
 8007368:	d108      	bne.n	800737c <USBD_HID_Setup+0x158>
				{
					pbuf = USBD_HID_Desc;
 800736a:	4b2a      	ldr	r3, [pc, #168]	; (8007414 <USBD_HID_Setup+0x1f0>)
 800736c:	613b      	str	r3, [r7, #16]
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	88db      	ldrh	r3, [r3, #6]
 8007372:	2b09      	cmp	r3, #9
 8007374:	bf28      	it	cs
 8007376:	2309      	movcs	r3, #9
 8007378:	82bb      	strh	r3, [r7, #20]
 800737a:	e006      	b.n	800738a <USBD_HID_Setup+0x166>
				}
				else
				{
					USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 f8d2 	bl	8008528 <USBD_CtlError>
					ret = USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	75fb      	strb	r3, [r7, #23]
					break;
 8007388:	e035      	b.n	80073f6 <USBD_HID_Setup+0x1d2>
				}
				(void)USBD_CtlSendData(pdev, pbuf, len);
 800738a:	8abb      	ldrh	r3, [r7, #20]
 800738c:	461a      	mov	r2, r3
 800738e:	6939      	ldr	r1, [r7, #16]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 f93a 	bl	800860a <USBD_CtlSendData>
				break;
 8007396:	e02e      	b.n	80073f6 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d107      	bne.n	80073b2 <USBD_HID_Setup+0x18e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3308      	adds	r3, #8
 80073a6:	2201      	movs	r2, #1
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 f92d 	bl	800860a <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 80073b0:	e021      	b.n	80073f6 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 f8b7 	bl	8008528 <USBD_CtlError>
					ret = USBD_FAIL;
 80073ba:	2303      	movs	r3, #3
 80073bc:	75fb      	strb	r3, [r7, #23]
				break;
 80073be:	e01a      	b.n	80073f6 <USBD_HID_Setup+0x1d2>

			case USB_REQ_SET_INTERFACE:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d106      	bne.n	80073d8 <USBD_HID_Setup+0x1b4>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	885b      	ldrh	r3, [r3, #2]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	609a      	str	r2, [r3, #8]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 80073d6:	e00e      	b.n	80073f6 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 f8a4 	bl	8008528 <USBD_CtlError>
					ret = USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	75fb      	strb	r3, [r7, #23]
				break;
 80073e4:	e007      	b.n	80073f6 <USBD_HID_Setup+0x1d2>

			case USB_REQ_CLEAR_FEATURE:
				break;

			default:
				USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 f89d 	bl	8008528 <USBD_CtlError>
				ret = USBD_FAIL;
 80073ee:	2303      	movs	r3, #3
 80073f0:	75fb      	strb	r3, [r7, #23]
				break;
 80073f2:	e000      	b.n	80073f6 <USBD_HID_Setup+0x1d2>
				break;
 80073f4:	bf00      	nop
			}
			break;
 80073f6:	e006      	b.n	8007406 <USBD_HID_Setup+0x1e2>

			default:
				USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 f894 	bl	8008528 <USBD_CtlError>
				ret = USBD_FAIL;
 8007400:	2303      	movs	r3, #3
 8007402:	75fb      	strb	r3, [r7, #23]
				break;
 8007404:	bf00      	nop
	}

	return (uint8_t)ret;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	20000160 	.word	0x20000160
 8007414:	20000148 	.word	0x20000148

08007418 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4613      	mov	r3, r2
 8007424:	80fb      	strh	r3, [r7, #6]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800742c:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007434:	2b03      	cmp	r3, #3
 8007436:	d10c      	bne.n	8007452 <USBD_HID_SendReport+0x3a>
	{
		if (hhid->state == HID_IDLE)
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	7b1b      	ldrb	r3, [r3, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d108      	bne.n	8007452 <USBD_HID_SendReport+0x3a>
		{
			hhid->state = HID_BUSY;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2201      	movs	r2, #1
 8007444:	731a      	strb	r2, [r3, #12]
			(void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007446:	88fb      	ldrh	r3, [r7, #6]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	2181      	movs	r1, #129	; 0x81
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f001 fce4 	bl	8008e1a <USBD_LL_Transmit>
		}
	}

	return (uint8_t)USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2222      	movs	r2, #34	; 0x22
 8007468:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgFSDesc;
 800746a:	4b03      	ldr	r3, [pc, #12]	; (8007478 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	200000dc 	.word	0x200000dc

0800747c <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2222      	movs	r2, #34	; 0x22
 8007488:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgHSDesc;
 800748a:	4b03      	ldr	r3, [pc, #12]	; (8007498 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	20000100 	.word	0x20000100

0800749c <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2222      	movs	r2, #34	; 0x22
 80074a8:	801a      	strh	r2, [r3, #0]

	return USBD_HID_OtherSpeedCfgDesc;
 80074aa:	4b03      	ldr	r3, [pc, #12]	; (80074b8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	20000124 	.word	0x20000124

080074bc <USBD_HID_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
	UNUSED(epnum);
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ce:	2200      	movs	r2, #0
 80074d0:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	220a      	movs	r2, #10
 80074ec:	801a      	strh	r2, [r3, #0]

	return USBD_HID_DeviceQualifierDesc;
 80074ee:	4b03      	ldr	r3, [pc, #12]	; (80074fc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	20000154 	.word	0x20000154

08007500 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	4613      	mov	r3, r2
 800750c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007514:	2303      	movs	r3, #3
 8007516:	e025      	b.n	8007564 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	79fa      	ldrb	r2, [r7, #7]
 8007556:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f001 fb29 	bl	8008bb0 <USBD_LL_Init>
 800755e:	4603      	mov	r3, r0
 8007560:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007562:	7dfb      	ldrb	r3, [r7, #23]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007580:	2303      	movs	r3, #3
 8007582:	e010      	b.n	80075a6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	f107 020e 	add.w	r2, r7, #14
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
 800759c:	4602      	mov	r2, r0
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 fb46 	bl	8008c48 <USBD_LL_Start>
 80075bc:	4603      	mov	r3, r0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80075e8:	2303      	movs	r3, #3
 80075ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d009      	beq.n	800760a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	4611      	mov	r1, r2
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
 8007606:	4603      	mov	r3, r0
 8007608:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d007      	beq.n	800763a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	78fa      	ldrb	r2, [r7, #3]
 8007634:	4611      	mov	r1, r2
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4798      	blx	r3
  }

  return USBD_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 ff2c 	bl	80084b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2b01      	cmp	r3, #1
 800767e:	d00e      	beq.n	800769e <USBD_LL_SetupStage+0x5a>
 8007680:	2b01      	cmp	r3, #1
 8007682:	d302      	bcc.n	800768a <USBD_LL_SetupStage+0x46>
 8007684:	2b02      	cmp	r3, #2
 8007686:	d014      	beq.n	80076b2 <USBD_LL_SetupStage+0x6e>
 8007688:	e01d      	b.n	80076c6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa18 	bl	8007ac8 <USBD_StdDevReq>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
      break;
 800769c:	e020      	b.n	80076e0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fa7c 	bl	8007ba4 <USBD_StdItfReq>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]
      break;
 80076b0:	e016      	b.n	80076e0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fab8 	bl	8007c30 <USBD_StdEPReq>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73fb      	strb	r3, [r7, #15]
      break;
 80076c4:	e00c      	b.n	80076e0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 fb17 	bl	8008d08 <USBD_LL_StallEP>
 80076da:	4603      	mov	r3, r0
 80076dc:	73fb      	strb	r3, [r7, #15]
      break;
 80076de:	bf00      	nop
  }

  return ret;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b086      	sub	sp, #24
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	460b      	mov	r3, r1
 80076f4:	607a      	str	r2, [r7, #4]
 80076f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80076f8:	7afb      	ldrb	r3, [r7, #11]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d137      	bne.n	800776e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007704:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800770c:	2b03      	cmp	r3, #3
 800770e:	d14a      	bne.n	80077a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	429a      	cmp	r2, r3
 800771a:	d913      	bls.n	8007744 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	1ad2      	subs	r2, r2, r3
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	4293      	cmp	r3, r2
 8007734:	bf28      	it	cs
 8007736:	4613      	movcs	r3, r2
 8007738:	461a      	mov	r2, r3
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 ff90 	bl	8008662 <USBD_CtlContinueRx>
 8007742:	e030      	b.n	80077a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007756:	2b03      	cmp	r3, #3
 8007758:	d105      	bne.n	8007766 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 ff8c 	bl	8008684 <USBD_CtlSendStatus>
 800776c:	e01b      	b.n	80077a6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d013      	beq.n	80077a2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007780:	2b03      	cmp	r3, #3
 8007782:	d10e      	bne.n	80077a2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	7afa      	ldrb	r2, [r7, #11]
 800778e:	4611      	mov	r1, r2
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	4798      	blx	r3
 8007794:	4603      	mov	r3, r0
 8007796:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	e002      	b.n	80077a8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e000      	b.n	80077a8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	460b      	mov	r3, r1
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80077be:	7afb      	ldrb	r3, [r7, #11]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d16a      	bne.n	800789a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3314      	adds	r3, #20
 80077c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d155      	bne.n	8007880 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d914      	bls.n	800780a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	1ad2      	subs	r2, r2, r3
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 ff22 	bl	8008640 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077fc:	2300      	movs	r3, #0
 80077fe:	2200      	movs	r2, #0
 8007800:	2100      	movs	r1, #0
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f001 fb2a 	bl	8008e5c <USBD_LL_PrepareReceive>
 8007808:	e03a      	b.n	8007880 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	429a      	cmp	r2, r3
 8007814:	d11c      	bne.n	8007850 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800781e:	429a      	cmp	r2, r3
 8007820:	d316      	bcc.n	8007850 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800782c:	429a      	cmp	r2, r3
 800782e:	d20f      	bcs.n	8007850 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007830:	2200      	movs	r2, #0
 8007832:	2100      	movs	r1, #0
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 ff03 	bl	8008640 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007842:	2300      	movs	r3, #0
 8007844:	2200      	movs	r2, #0
 8007846:	2100      	movs	r1, #0
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f001 fb07 	bl	8008e5c <USBD_LL_PrepareReceive>
 800784e:	e017      	b.n	8007880 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007862:	2b03      	cmp	r3, #3
 8007864:	d105      	bne.n	8007872 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007872:	2180      	movs	r1, #128	; 0x80
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f001 fa47 	bl	8008d08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 ff15 	bl	80086aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007886:	2b01      	cmp	r3, #1
 8007888:	d123      	bne.n	80078d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7ff fe9b 	bl	80075c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007898:	e01b      	b.n	80078d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d013      	beq.n	80078ce <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d10e      	bne.n	80078ce <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	7afa      	ldrb	r2, [r7, #11]
 80078ba:	4611      	mov	r1, r2
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	4798      	blx	r3
 80078c0:	4603      	mov	r3, r0
 80078c2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	e002      	b.n	80078d4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e000      	b.n	80078d4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007908:	2b00      	cmp	r3, #0
 800790a:	d009      	beq.n	8007920 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6852      	ldr	r2, [r2, #4]
 8007918:	b2d2      	uxtb	r2, r2
 800791a:	4611      	mov	r1, r2
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007920:	2340      	movs	r3, #64	; 0x40
 8007922:	2200      	movs	r2, #0
 8007924:	2100      	movs	r1, #0
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 f9a9 	bl	8008c7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2240      	movs	r2, #64	; 0x40
 8007938:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800793c:	2340      	movs	r3, #64	; 0x40
 800793e:	2200      	movs	r2, #0
 8007940:	2180      	movs	r1, #128	; 0x80
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 f99b 	bl	8008c7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2240      	movs	r2, #64	; 0x40
 8007952:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	78fa      	ldrb	r2, [r7, #3]
 800796e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2204      	movs	r2, #4
 8007996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d105      	bne.n	80079c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d10b      	bne.n	80079fe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d009      	beq.n	8007a80 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6852      	ldr	r2, [r2, #4]
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4798      	blx	r3
  }

  return USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b087      	sub	sp, #28
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007aa8:	8a3b      	ldrh	r3, [r7, #16]
 8007aaa:	021b      	lsls	r3, r3, #8
 8007aac:	b21a      	sxth	r2, r3
 8007aae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	b21b      	sxth	r3, r3
 8007ab6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ab8:	89fb      	ldrh	r3, [r7, #14]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	371c      	adds	r7, #28
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
	...

08007ac8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	d004      	beq.n	8007aec <USBD_StdDevReq+0x24>
 8007ae2:	2b40      	cmp	r3, #64	; 0x40
 8007ae4:	d002      	beq.n	8007aec <USBD_StdDevReq+0x24>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <USBD_StdDevReq+0x38>
 8007aea:	e050      	b.n	8007b8e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	4798      	blx	r3
 8007afa:	4603      	mov	r3, r0
 8007afc:	73fb      	strb	r3, [r7, #15]
    break;
 8007afe:	e04b      	b.n	8007b98 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	785b      	ldrb	r3, [r3, #1]
 8007b04:	2b09      	cmp	r3, #9
 8007b06:	d83c      	bhi.n	8007b82 <USBD_StdDevReq+0xba>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <USBD_StdDevReq+0x48>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b65 	.word	0x08007b65
 8007b14:	08007b79 	.word	0x08007b79
 8007b18:	08007b83 	.word	0x08007b83
 8007b1c:	08007b6f 	.word	0x08007b6f
 8007b20:	08007b83 	.word	0x08007b83
 8007b24:	08007b43 	.word	0x08007b43
 8007b28:	08007b39 	.word	0x08007b39
 8007b2c:	08007b83 	.word	0x08007b83
 8007b30:	08007b5b 	.word	0x08007b5b
 8007b34:	08007b4d 	.word	0x08007b4d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f9ce 	bl	8007edc <USBD_GetDescriptor>
      break;
 8007b40:	e024      	b.n	8007b8c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fb33 	bl	80081b0 <USBD_SetAddress>
      break;
 8007b4a:	e01f      	b.n	8007b8c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fb70 	bl	8008234 <USBD_SetConfig>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73fb      	strb	r3, [r7, #15]
      break;
 8007b58:	e018      	b.n	8007b8c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fc0d 	bl	800837c <USBD_GetConfig>
      break;
 8007b62:	e013      	b.n	8007b8c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fc3c 	bl	80083e4 <USBD_GetStatus>
      break;
 8007b6c:	e00e      	b.n	8007b8c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fc6a 	bl	800844a <USBD_SetFeature>
      break;
 8007b76:	e009      	b.n	8007b8c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fc79 	bl	8008472 <USBD_ClrFeature>
      break;
 8007b80:	e004      	b.n	8007b8c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fccf 	bl	8008528 <USBD_CtlError>
      break;
 8007b8a:	bf00      	nop
    }
    break;
 8007b8c:	e004      	b.n	8007b98 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fcc9 	bl	8008528 <USBD_CtlError>
    break;
 8007b96:	bf00      	nop
  }

  return ret;
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop

08007ba4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d003      	beq.n	8007bc6 <USBD_StdItfReq+0x22>
 8007bbe:	2b40      	cmp	r3, #64	; 0x40
 8007bc0:	d001      	beq.n	8007bc6 <USBD_StdItfReq+0x22>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d12a      	bne.n	8007c1c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d81d      	bhi.n	8007c0e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	889b      	ldrh	r3, [r3, #4]
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d813      	bhi.n	8007c04 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	4798      	blx	r3
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	88db      	ldrh	r3, [r3, #6]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d110      	bne.n	8007c18 <USBD_StdItfReq+0x74>
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10d      	bne.n	8007c18 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fd41 	bl	8008684 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007c02:	e009      	b.n	8007c18 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fc8e 	bl	8008528 <USBD_CtlError>
      break;
 8007c0c:	e004      	b.n	8007c18 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fc89 	bl	8008528 <USBD_CtlError>
      break;
 8007c16:	e000      	b.n	8007c1a <USBD_StdItfReq+0x76>
      break;
 8007c18:	bf00      	nop
    }
    break;
 8007c1a:	e004      	b.n	8007c26 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fc82 	bl	8008528 <USBD_CtlError>
    break;
 8007c24:	bf00      	nop
  }

  return ret;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	889b      	ldrh	r3, [r3, #4]
 8007c42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d004      	beq.n	8007c5a <USBD_StdEPReq+0x2a>
 8007c50:	2b40      	cmp	r3, #64	; 0x40
 8007c52:	d002      	beq.n	8007c5a <USBD_StdEPReq+0x2a>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <USBD_StdEPReq+0x3e>
 8007c58:	e135      	b.n	8007ec6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
 8007c68:	4603      	mov	r3, r0
 8007c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c6c:	e130      	b.n	8007ed0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d03e      	beq.n	8007cf4 <USBD_StdEPReq+0xc4>
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d002      	beq.n	8007c80 <USBD_StdEPReq+0x50>
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d077      	beq.n	8007d6e <USBD_StdEPReq+0x13e>
 8007c7e:	e11c      	b.n	8007eba <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d002      	beq.n	8007c90 <USBD_StdEPReq+0x60>
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d015      	beq.n	8007cba <USBD_StdEPReq+0x8a>
 8007c8e:	e02b      	b.n	8007ce8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00c      	beq.n	8007cb0 <USBD_StdEPReq+0x80>
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	2b80      	cmp	r3, #128	; 0x80
 8007c9a:	d009      	beq.n	8007cb0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 f831 	bl	8008d08 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ca6:	2180      	movs	r1, #128	; 0x80
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f001 f82d 	bl	8008d08 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007cae:	e020      	b.n	8007cf2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fc38 	bl	8008528 <USBD_CtlError>
        break;
 8007cb8:	e01b      	b.n	8007cf2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	885b      	ldrh	r3, [r3, #2]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10e      	bne.n	8007ce0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_StdEPReq+0xb0>
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b80      	cmp	r3, #128	; 0x80
 8007ccc:	d008      	beq.n	8007ce0 <USBD_StdEPReq+0xb0>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	88db      	ldrh	r3, [r3, #6]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d104      	bne.n	8007ce0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f001 f814 	bl	8008d08 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fccf 	bl	8008684 <USBD_CtlSendStatus>

        break;
 8007ce6:	e004      	b.n	8007cf2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fc1c 	bl	8008528 <USBD_CtlError>
        break;
 8007cf0:	bf00      	nop
      }
      break;
 8007cf2:	e0e7      	b.n	8007ec4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d002      	beq.n	8007d04 <USBD_StdEPReq+0xd4>
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d015      	beq.n	8007d2e <USBD_StdEPReq+0xfe>
 8007d02:	e02d      	b.n	8007d60 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00c      	beq.n	8007d24 <USBD_StdEPReq+0xf4>
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b80      	cmp	r3, #128	; 0x80
 8007d0e:	d009      	beq.n	8007d24 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fff7 	bl	8008d08 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d1a:	2180      	movs	r1, #128	; 0x80
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fff3 	bl	8008d08 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007d22:	e023      	b.n	8007d6c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fbfe 	bl	8008528 <USBD_CtlError>
        break;
 8007d2c:	e01e      	b.n	8007d6c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	885b      	ldrh	r3, [r3, #2]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d119      	bne.n	8007d6a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d004      	beq.n	8007d4a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fffe 	bl	8008d46 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fc9a 	bl	8008684 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
        }
        break;
 8007d5e:	e004      	b.n	8007d6a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fbe0 	bl	8008528 <USBD_CtlError>
        break;
 8007d68:	e000      	b.n	8007d6c <USBD_StdEPReq+0x13c>
        break;
 8007d6a:	bf00      	nop
      }
      break;
 8007d6c:	e0aa      	b.n	8007ec4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d002      	beq.n	8007d7e <USBD_StdEPReq+0x14e>
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	d032      	beq.n	8007de2 <USBD_StdEPReq+0x1b2>
 8007d7c:	e097      	b.n	8007eae <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <USBD_StdEPReq+0x164>
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	2b80      	cmp	r3, #128	; 0x80
 8007d88:	d004      	beq.n	8007d94 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fbcb 	bl	8008528 <USBD_CtlError>
          break;
 8007d92:	e091      	b.n	8007eb8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	da0b      	bge.n	8007db4 <USBD_StdEPReq+0x184>
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
 8007d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	3310      	adds	r3, #16
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	4413      	add	r3, r2
 8007db0:	3304      	adds	r3, #4
 8007db2:	e00b      	b.n	8007dcc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	4413      	add	r3, r2
 8007dca:	3304      	adds	r3, #4
 8007dcc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fc15 	bl	800860a <USBD_CtlSendData>
        break;
 8007de0:	e06a      	b.n	8007eb8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	da11      	bge.n	8007e0e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	f003 020f 	and.w	r2, r3, #15
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3324      	adds	r3, #36	; 0x24
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d117      	bne.n	8007e34 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fb8e 	bl	8008528 <USBD_CtlError>
            break;
 8007e0c:	e054      	b.n	8007eb8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	f003 020f 	and.w	r2, r3, #15
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	440b      	add	r3, r1
 8007e20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d104      	bne.n	8007e34 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fb7b 	bl	8008528 <USBD_CtlError>
            break;
 8007e32:	e041      	b.n	8007eb8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	da0b      	bge.n	8007e54 <USBD_StdEPReq+0x224>
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	3310      	adds	r3, #16
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	4413      	add	r3, r2
 8007e50:	3304      	adds	r3, #4
 8007e52:	e00b      	b.n	8007e6c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	4413      	add	r3, r2
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <USBD_StdEPReq+0x24a>
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	2b80      	cmp	r3, #128	; 0x80
 8007e78:	d103      	bne.n	8007e82 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	e00e      	b.n	8007ea0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 ff7c 	bl	8008d84 <USBD_LL_IsStallEP>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2201      	movs	r2, #1
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	e002      	b.n	8007ea0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fbaf 	bl	800860a <USBD_CtlSendData>
          break;
 8007eac:	e004      	b.n	8007eb8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fb39 	bl	8008528 <USBD_CtlError>
        break;
 8007eb6:	bf00      	nop
      }
      break;
 8007eb8:	e004      	b.n	8007ec4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fb33 	bl	8008528 <USBD_CtlError>
      break;
 8007ec2:	bf00      	nop
    }
    break;
 8007ec4:	e004      	b.n	8007ed0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fb2d 	bl	8008528 <USBD_CtlError>
    break;
 8007ece:	bf00      	nop
  }

  return ret;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	885b      	ldrh	r3, [r3, #2]
 8007ef6:	0a1b      	lsrs	r3, r3, #8
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	2b06      	cmp	r3, #6
 8007efe:	f200 8128 	bhi.w	8008152 <USBD_GetDescriptor+0x276>
 8007f02:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <USBD_GetDescriptor+0x2c>)
 8007f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f08:	08007f25 	.word	0x08007f25
 8007f0c:	08007f3d 	.word	0x08007f3d
 8007f10:	08007f7d 	.word	0x08007f7d
 8007f14:	08008153 	.word	0x08008153
 8007f18:	08008153 	.word	0x08008153
 8007f1c:	080080f3 	.word	0x080080f3
 8007f20:	0800811f 	.word	0x0800811f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	7c12      	ldrb	r2, [r2, #16]
 8007f30:	f107 0108 	add.w	r1, r7, #8
 8007f34:	4610      	mov	r0, r2
 8007f36:	4798      	blx	r3
 8007f38:	60f8      	str	r0, [r7, #12]
    break;
 8007f3a:	e112      	b.n	8008162 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	7c1b      	ldrb	r3, [r3, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10d      	bne.n	8007f60 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4c:	f107 0208 	add.w	r2, r7, #8
 8007f50:	4610      	mov	r0, r2
 8007f52:	4798      	blx	r3
 8007f54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007f5e:	e100      	b.n	8008162 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	f107 0208 	add.w	r2, r7, #8
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	4798      	blx	r3
 8007f70:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3301      	adds	r3, #1
 8007f76:	2202      	movs	r2, #2
 8007f78:	701a      	strb	r2, [r3, #0]
    break;
 8007f7a:	e0f2      	b.n	8008162 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	885b      	ldrh	r3, [r3, #2]
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	f200 80ac 	bhi.w	80080e0 <USBD_GetDescriptor+0x204>
 8007f88:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <USBD_GetDescriptor+0xb4>)
 8007f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8e:	bf00      	nop
 8007f90:	08007fa9 	.word	0x08007fa9
 8007f94:	08007fdd 	.word	0x08007fdd
 8007f98:	08008011 	.word	0x08008011
 8007f9c:	08008045 	.word	0x08008045
 8007fa0:	08008079 	.word	0x08008079
 8007fa4:	080080ad 	.word	0x080080ad
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	7c12      	ldrb	r2, [r2, #16]
 8007fc0:	f107 0108 	add.w	r1, r7, #8
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4798      	blx	r3
 8007fc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fca:	e091      	b.n	80080f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 faaa 	bl	8008528 <USBD_CtlError>
        err++;
 8007fd4:	7afb      	ldrb	r3, [r7, #11]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	72fb      	strb	r3, [r7, #11]
      break;
 8007fda:	e089      	b.n	80080f0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7c12      	ldrb	r2, [r2, #16]
 8007ff4:	f107 0108 	add.w	r1, r7, #8
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4798      	blx	r3
 8007ffc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ffe:	e077      	b.n	80080f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fa90 	bl	8008528 <USBD_CtlError>
        err++;
 8008008:	7afb      	ldrb	r3, [r7, #11]
 800800a:	3301      	adds	r3, #1
 800800c:	72fb      	strb	r3, [r7, #11]
      break;
 800800e:	e06f      	b.n	80080f0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	7c12      	ldrb	r2, [r2, #16]
 8008028:	f107 0108 	add.w	r1, r7, #8
 800802c:	4610      	mov	r0, r2
 800802e:	4798      	blx	r3
 8008030:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008032:	e05d      	b.n	80080f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fa76 	bl	8008528 <USBD_CtlError>
        err++;
 800803c:	7afb      	ldrb	r3, [r7, #11]
 800803e:	3301      	adds	r3, #1
 8008040:	72fb      	strb	r3, [r7, #11]
      break;
 8008042:	e055      	b.n	80080f0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	7c12      	ldrb	r2, [r2, #16]
 800805c:	f107 0108 	add.w	r1, r7, #8
 8008060:	4610      	mov	r0, r2
 8008062:	4798      	blx	r3
 8008064:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008066:	e043      	b.n	80080f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa5c 	bl	8008528 <USBD_CtlError>
        err++;
 8008070:	7afb      	ldrb	r3, [r7, #11]
 8008072:	3301      	adds	r3, #1
 8008074:	72fb      	strb	r3, [r7, #11]
      break;
 8008076:	e03b      	b.n	80080f0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00b      	beq.n	800809c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	7c12      	ldrb	r2, [r2, #16]
 8008090:	f107 0108 	add.w	r1, r7, #8
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800809a:	e029      	b.n	80080f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fa42 	bl	8008528 <USBD_CtlError>
        err++;
 80080a4:	7afb      	ldrb	r3, [r7, #11]
 80080a6:	3301      	adds	r3, #1
 80080a8:	72fb      	strb	r3, [r7, #11]
      break;
 80080aa:	e021      	b.n	80080f0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7c12      	ldrb	r2, [r2, #16]
 80080c4:	f107 0108 	add.w	r1, r7, #8
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080ce:	e00f      	b.n	80080f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa28 	bl	8008528 <USBD_CtlError>
        err++;
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	3301      	adds	r3, #1
 80080dc:	72fb      	strb	r3, [r7, #11]
      break;
 80080de:	e007      	b.n	80080f0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fa20 	bl	8008528 <USBD_CtlError>
      err++;
 80080e8:	7afb      	ldrb	r3, [r7, #11]
 80080ea:	3301      	adds	r3, #1
 80080ec:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80080ee:	bf00      	nop
    }
    break;
 80080f0:	e037      	b.n	8008162 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	7c1b      	ldrb	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d109      	bne.n	800810e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008102:	f107 0208 	add.w	r2, r7, #8
 8008106:	4610      	mov	r0, r2
 8008108:	4798      	blx	r3
 800810a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800810c:	e029      	b.n	8008162 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fa09 	bl	8008528 <USBD_CtlError>
      err++;
 8008116:	7afb      	ldrb	r3, [r7, #11]
 8008118:	3301      	adds	r3, #1
 800811a:	72fb      	strb	r3, [r7, #11]
    break;
 800811c:	e021      	b.n	8008162 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	7c1b      	ldrb	r3, [r3, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10d      	bne.n	8008142 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812e:	f107 0208 	add.w	r2, r7, #8
 8008132:	4610      	mov	r0, r2
 8008134:	4798      	blx	r3
 8008136:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3301      	adds	r3, #1
 800813c:	2207      	movs	r2, #7
 800813e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008140:	e00f      	b.n	8008162 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f9ef 	bl	8008528 <USBD_CtlError>
      err++;
 800814a:	7afb      	ldrb	r3, [r7, #11]
 800814c:	3301      	adds	r3, #1
 800814e:	72fb      	strb	r3, [r7, #11]
    break;
 8008150:	e007      	b.n	8008162 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f9e7 	bl	8008528 <USBD_CtlError>
    err++;
 800815a:	7afb      	ldrb	r3, [r7, #11]
 800815c:	3301      	adds	r3, #1
 800815e:	72fb      	strb	r3, [r7, #11]
    break;
 8008160:	bf00      	nop
  }

  if (err != 0U)
 8008162:	7afb      	ldrb	r3, [r7, #11]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d11e      	bne.n	80081a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	88db      	ldrh	r3, [r3, #6]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d016      	beq.n	800819e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008170:	893b      	ldrh	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00e      	beq.n	8008194 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	88da      	ldrh	r2, [r3, #6]
 800817a:	893b      	ldrh	r3, [r7, #8]
 800817c:	4293      	cmp	r3, r2
 800817e:	bf28      	it	cs
 8008180:	4613      	movcs	r3, r2
 8008182:	b29b      	uxth	r3, r3
 8008184:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008186:	893b      	ldrh	r3, [r7, #8]
 8008188:	461a      	mov	r2, r3
 800818a:	68f9      	ldr	r1, [r7, #12]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fa3c 	bl	800860a <USBD_CtlSendData>
 8008192:	e009      	b.n	80081a8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f9c6 	bl	8008528 <USBD_CtlError>
 800819c:	e004      	b.n	80081a8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fa70 	bl	8008684 <USBD_CtlSendStatus>
 80081a4:	e000      	b.n	80081a8 <USBD_GetDescriptor+0x2cc>
    return;
 80081a6:	bf00      	nop
    }
  }
}
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop

080081b0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	889b      	ldrh	r3, [r3, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d130      	bne.n	8008224 <USBD_SetAddress+0x74>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	88db      	ldrh	r3, [r3, #6]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d12c      	bne.n	8008224 <USBD_SetAddress+0x74>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	885b      	ldrh	r3, [r3, #2]
 80081ce:	2b7f      	cmp	r3, #127	; 0x7f
 80081d0:	d828      	bhi.n	8008224 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	885b      	ldrh	r3, [r3, #2]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d104      	bne.n	80081f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f99c 	bl	8008528 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f0:	e01c      	b.n	800822c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7bfa      	ldrb	r2, [r7, #15]
 80081f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fdec 	bl	8008ddc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fa3d 	bl	8008684 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008218:	e008      	b.n	800822c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008222:	e003      	b.n	800822c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f97e 	bl	8008528 <USBD_CtlError>
  }
}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	885b      	ldrh	r3, [r3, #2]
 8008246:	b2da      	uxtb	r2, r3
 8008248:	4b4b      	ldr	r3, [pc, #300]	; (8008378 <USBD_SetConfig+0x144>)
 800824a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800824c:	4b4a      	ldr	r3, [pc, #296]	; (8008378 <USBD_SetConfig+0x144>)
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d905      	bls.n	8008260 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f966 	bl	8008528 <USBD_CtlError>
    return USBD_FAIL;
 800825c:	2303      	movs	r3, #3
 800825e:	e087      	b.n	8008370 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008266:	2b02      	cmp	r3, #2
 8008268:	d002      	beq.n	8008270 <USBD_SetConfig+0x3c>
 800826a:	2b03      	cmp	r3, #3
 800826c:	d025      	beq.n	80082ba <USBD_SetConfig+0x86>
 800826e:	e071      	b.n	8008354 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008270:	4b41      	ldr	r3, [pc, #260]	; (8008378 <USBD_SetConfig+0x144>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d01c      	beq.n	80082b2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008278:	4b3f      	ldr	r3, [pc, #252]	; (8008378 <USBD_SetConfig+0x144>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008282:	4b3d      	ldr	r3, [pc, #244]	; (8008378 <USBD_SetConfig+0x144>)
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff f9a7 	bl	80075dc <USBD_SetClassConfig>
 800828e:	4603      	mov	r3, r0
 8008290:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008292:	7bfb      	ldrb	r3, [r7, #15]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d004      	beq.n	80082a2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f944 	bl	8008528 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80082a0:	e065      	b.n	800836e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f9ee 	bl	8008684 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2203      	movs	r2, #3
 80082ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80082b0:	e05d      	b.n	800836e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f9e6 	bl	8008684 <USBD_CtlSendStatus>
    break;
 80082b8:	e059      	b.n	800836e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80082ba:	4b2f      	ldr	r3, [pc, #188]	; (8008378 <USBD_SetConfig+0x144>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d112      	bne.n	80082e8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80082ca:	4b2b      	ldr	r3, [pc, #172]	; (8008378 <USBD_SetConfig+0x144>)
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082d4:	4b28      	ldr	r3, [pc, #160]	; (8008378 <USBD_SetConfig+0x144>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff f99a 	bl	8007614 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f9cf 	bl	8008684 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80082e6:	e042      	b.n	800836e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80082e8:	4b23      	ldr	r3, [pc, #140]	; (8008378 <USBD_SetConfig+0x144>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d02a      	beq.n	800834c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff f988 	bl	8007614 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008304:	4b1c      	ldr	r3, [pc, #112]	; (8008378 <USBD_SetConfig+0x144>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800830e:	4b1a      	ldr	r3, [pc, #104]	; (8008378 <USBD_SetConfig+0x144>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7ff f961 	bl	80075dc <USBD_SetClassConfig>
 800831a:	4603      	mov	r3, r0
 800831c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00f      	beq.n	8008344 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f8fe 	bl	8008528 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff f96d 	bl	8007614 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2202      	movs	r2, #2
 800833e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008342:	e014      	b.n	800836e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f99d 	bl	8008684 <USBD_CtlSendStatus>
    break;
 800834a:	e010      	b.n	800836e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f999 	bl	8008684 <USBD_CtlSendStatus>
    break;
 8008352:	e00c      	b.n	800836e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f8e6 	bl	8008528 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800835c:	4b06      	ldr	r3, [pc, #24]	; (8008378 <USBD_SetConfig+0x144>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff f956 	bl	8007614 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008368:	2303      	movs	r3, #3
 800836a:	73fb      	strb	r3, [r7, #15]
    break;
 800836c:	bf00      	nop
  }

  return ret;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	200006c0 	.word	0x200006c0

0800837c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	88db      	ldrh	r3, [r3, #6]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d004      	beq.n	8008398 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f8c9 	bl	8008528 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008396:	e021      	b.n	80083dc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800839e:	2b01      	cmp	r3, #1
 80083a0:	db17      	blt.n	80083d2 <USBD_GetConfig+0x56>
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	dd02      	ble.n	80083ac <USBD_GetConfig+0x30>
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d00b      	beq.n	80083c2 <USBD_GetConfig+0x46>
 80083aa:	e012      	b.n	80083d2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3308      	adds	r3, #8
 80083b6:	2201      	movs	r2, #1
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f925 	bl	800860a <USBD_CtlSendData>
      break;
 80083c0:	e00c      	b.n	80083dc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3304      	adds	r3, #4
 80083c6:	2201      	movs	r2, #1
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f91d 	bl	800860a <USBD_CtlSendData>
      break;
 80083d0:	e004      	b.n	80083dc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f8a7 	bl	8008528 <USBD_CtlError>
      break;
 80083da:	bf00      	nop
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f4:	3b01      	subs	r3, #1
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d81e      	bhi.n	8008438 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	88db      	ldrh	r3, [r3, #6]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d004      	beq.n	800840c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f88f 	bl	8008528 <USBD_CtlError>
      break;
 800840a:	e01a      	b.n	8008442 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f043 0202 	orr.w	r2, r3, #2
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	330c      	adds	r3, #12
 800842c:	2202      	movs	r2, #2
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f8ea 	bl	800860a <USBD_CtlSendData>
    break;
 8008436:	e004      	b.n	8008442 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f874 	bl	8008528 <USBD_CtlError>
    break;
 8008440:	bf00      	nop
  }
}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	885b      	ldrh	r3, [r3, #2]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d106      	bne.n	800846a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f90d 	bl	8008684 <USBD_CtlSendStatus>
  }
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008482:	3b01      	subs	r3, #1
 8008484:	2b02      	cmp	r3, #2
 8008486:	d80b      	bhi.n	80084a0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	885b      	ldrh	r3, [r3, #2]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d10c      	bne.n	80084aa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f8f3 	bl	8008684 <USBD_CtlSendStatus>
      }
      break;
 800849e:	e004      	b.n	80084aa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f840 	bl	8008528 <USBD_CtlError>
      break;
 80084a8:	e000      	b.n	80084ac <USBD_ClrFeature+0x3a>
      break;
 80084aa:	bf00      	nop
  }
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	781a      	ldrb	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3301      	adds	r3, #1
 80084ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	781a      	ldrb	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3301      	adds	r3, #1
 80084dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f7ff fad3 	bl	8007a8a <SWAPBYTE>
 80084e4:	4603      	mov	r3, r0
 80084e6:	461a      	mov	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	3301      	adds	r3, #1
 80084f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3301      	adds	r3, #1
 80084f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7ff fac6 	bl	8007a8a <SWAPBYTE>
 80084fe:	4603      	mov	r3, r0
 8008500:	461a      	mov	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3301      	adds	r3, #1
 800850a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3301      	adds	r3, #1
 8008510:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff fab9 	bl	8007a8a <SWAPBYTE>
 8008518:	4603      	mov	r3, r0
 800851a:	461a      	mov	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	80da      	strh	r2, [r3, #6]
}
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008532:	2180      	movs	r1, #128	; 0x80
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fbe7 	bl	8008d08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800853a:	2100      	movs	r1, #0
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fbe3 	bl	8008d08 <USBD_LL_StallEP>
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b086      	sub	sp, #24
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d036      	beq.n	80085ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008564:	6938      	ldr	r0, [r7, #16]
 8008566:	f000 f836 	bl	80085d6 <USBD_GetLen>
 800856a:	4603      	mov	r3, r0
 800856c:	3301      	adds	r3, #1
 800856e:	b29b      	uxth	r3, r3
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4413      	add	r3, r2
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	7812      	ldrb	r2, [r2, #0]
 8008582:	701a      	strb	r2, [r3, #0]
  idx++;
 8008584:	7dfb      	ldrb	r3, [r7, #23]
 8008586:	3301      	adds	r3, #1
 8008588:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800858a:	7dfb      	ldrb	r3, [r7, #23]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	4413      	add	r3, r2
 8008590:	2203      	movs	r2, #3
 8008592:	701a      	strb	r2, [r3, #0]
  idx++;
 8008594:	7dfb      	ldrb	r3, [r7, #23]
 8008596:	3301      	adds	r3, #1
 8008598:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800859a:	e013      	b.n	80085c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800859c:	7dfb      	ldrb	r3, [r7, #23]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	4413      	add	r3, r2
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	7812      	ldrb	r2, [r2, #0]
 80085a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	3301      	adds	r3, #1
 80085ac:	613b      	str	r3, [r7, #16]
    idx++;
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	3301      	adds	r3, #1
 80085b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	4413      	add	r3, r2
 80085ba:	2200      	movs	r2, #0
 80085bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	3301      	adds	r3, #1
 80085c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1e7      	bne.n	800859c <USBD_GetString+0x52>
 80085cc:	e000      	b.n	80085d0 <USBD_GetString+0x86>
    return;
 80085ce:	bf00      	nop
  }
}
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b085      	sub	sp, #20
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80085e6:	e005      	b.n	80085f4 <USBD_GetLen+0x1e>
  {
    len++;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	3301      	adds	r3, #1
 80085ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	3301      	adds	r3, #1
 80085f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f5      	bne.n	80085e8 <USBD_GetLen+0x12>
  }

  return len;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2202      	movs	r2, #2
 800861a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	2100      	movs	r1, #0
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 fbf2 	bl	8008e1a <USBD_LL_Transmit>

  return USBD_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	2100      	movs	r1, #0
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 fbe1 	bl	8008e1a <USBD_LL_Transmit>

  return USBD_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	2100      	movs	r1, #0
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 fbf1 	bl	8008e5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2204      	movs	r2, #4
 8008690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008694:	2300      	movs	r3, #0
 8008696:	2200      	movs	r2, #0
 8008698:	2100      	movs	r1, #0
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fbbd 	bl	8008e1a <USBD_LL_Transmit>

  return USBD_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2205      	movs	r2, #5
 80086b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086ba:	2300      	movs	r3, #0
 80086bc:	2200      	movs	r2, #0
 80086be:	2100      	movs	r1, #0
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fbcb 	bl	8008e5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086d4:	2200      	movs	r2, #0
 80086d6:	490e      	ldr	r1, [pc, #56]	; (8008710 <MX_USB_DEVICE_Init+0x40>)
 80086d8:	480e      	ldr	r0, [pc, #56]	; (8008714 <MX_USB_DEVICE_Init+0x44>)
 80086da:	f7fe ff11 	bl	8007500 <USBD_Init>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086e4:	f7f8 fc10 	bl	8000f08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80086e8:	490b      	ldr	r1, [pc, #44]	; (8008718 <MX_USB_DEVICE_Init+0x48>)
 80086ea:	480a      	ldr	r0, [pc, #40]	; (8008714 <MX_USB_DEVICE_Init+0x44>)
 80086ec:	f7fe ff3e 	bl	800756c <USBD_RegisterClass>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086f6:	f7f8 fc07 	bl	8000f08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086fa:	4806      	ldr	r0, [pc, #24]	; (8008714 <MX_USB_DEVICE_Init+0x44>)
 80086fc:	f7fe ff57 	bl	80075ae <USBD_Start>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008706:	f7f8 fbff 	bl	8000f08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200001a0 	.word	0x200001a0
 8008714:	200009f0 	.word	0x200009f0
 8008718:	200000a4 	.word	0x200000a4

0800871c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2212      	movs	r2, #18
 800872c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800872e:	4b03      	ldr	r3, [pc, #12]	; (800873c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	200001bc 	.word	0x200001bc

08008740 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	6039      	str	r1, [r7, #0]
 800874a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2204      	movs	r2, #4
 8008750:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008752:	4b03      	ldr	r3, [pc, #12]	; (8008760 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	200001d0 	.word	0x200001d0

08008764 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	6039      	str	r1, [r7, #0]
 800876e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d105      	bne.n	8008782 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	4907      	ldr	r1, [pc, #28]	; (8008798 <USBD_FS_ProductStrDescriptor+0x34>)
 800877a:	4808      	ldr	r0, [pc, #32]	; (800879c <USBD_FS_ProductStrDescriptor+0x38>)
 800877c:	f7ff fee5 	bl	800854a <USBD_GetString>
 8008780:	e004      	b.n	800878c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	4904      	ldr	r1, [pc, #16]	; (8008798 <USBD_FS_ProductStrDescriptor+0x34>)
 8008786:	4805      	ldr	r0, [pc, #20]	; (800879c <USBD_FS_ProductStrDescriptor+0x38>)
 8008788:	f7ff fedf 	bl	800854a <USBD_GetString>
  }
  return USBD_StrDesc;
 800878c:	4b02      	ldr	r3, [pc, #8]	; (8008798 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800878e:	4618      	mov	r0, r3
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20000cc0 	.word	0x20000cc0
 800879c:	08009154 	.word	0x08009154

080087a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	6039      	str	r1, [r7, #0]
 80087aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	4904      	ldr	r1, [pc, #16]	; (80087c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087b0:	4804      	ldr	r0, [pc, #16]	; (80087c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087b2:	f7ff feca 	bl	800854a <USBD_GetString>
  return USBD_StrDesc;
 80087b6:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	20000cc0 	.word	0x20000cc0
 80087c4:	0800916c 	.word	0x0800916c

080087c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	221a      	movs	r2, #26
 80087d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087da:	f000 f843 	bl	8008864 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087de:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	200001d4 	.word	0x200001d4

080087ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d105      	bne.n	800880a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4907      	ldr	r1, [pc, #28]	; (8008820 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008802:	4808      	ldr	r0, [pc, #32]	; (8008824 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008804:	f7ff fea1 	bl	800854a <USBD_GetString>
 8008808:	e004      	b.n	8008814 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4904      	ldr	r1, [pc, #16]	; (8008820 <USBD_FS_ConfigStrDescriptor+0x34>)
 800880e:	4805      	ldr	r0, [pc, #20]	; (8008824 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008810:	f7ff fe9b 	bl	800854a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000cc0 	.word	0x20000cc0
 8008824:	08009180 	.word	0x08009180

08008828 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d105      	bne.n	8008846 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4907      	ldr	r1, [pc, #28]	; (800885c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800883e:	4808      	ldr	r0, [pc, #32]	; (8008860 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008840:	f7ff fe83 	bl	800854a <USBD_GetString>
 8008844:	e004      	b.n	8008850 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4904      	ldr	r1, [pc, #16]	; (800885c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800884a:	4805      	ldr	r0, [pc, #20]	; (8008860 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800884c:	f7ff fe7d 	bl	800854a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008850:	4b02      	ldr	r3, [pc, #8]	; (800885c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20000cc0 	.word	0x20000cc0
 8008860:	0800918c 	.word	0x0800918c

08008864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800886a:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <Get_SerialNum+0x44>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008870:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <Get_SerialNum+0x48>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008876:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <Get_SerialNum+0x4c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4413      	add	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d009      	beq.n	800889e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800888a:	2208      	movs	r2, #8
 800888c:	4909      	ldr	r1, [pc, #36]	; (80088b4 <Get_SerialNum+0x50>)
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 f814 	bl	80088bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008894:	2204      	movs	r2, #4
 8008896:	4908      	ldr	r1, [pc, #32]	; (80088b8 <Get_SerialNum+0x54>)
 8008898:	68b8      	ldr	r0, [r7, #8]
 800889a:	f000 f80f 	bl	80088bc <IntToUnicode>
  }
}
 800889e:	bf00      	nop
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	1fff7a10 	.word	0x1fff7a10
 80088ac:	1fff7a14 	.word	0x1fff7a14
 80088b0:	1fff7a18 	.word	0x1fff7a18
 80088b4:	200001d6 	.word	0x200001d6
 80088b8:	200001e6 	.word	0x200001e6

080088bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088ce:	2300      	movs	r3, #0
 80088d0:	75fb      	strb	r3, [r7, #23]
 80088d2:	e027      	b.n	8008924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	0f1b      	lsrs	r3, r3, #28
 80088d8:	2b09      	cmp	r3, #9
 80088da:	d80b      	bhi.n	80088f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	0f1b      	lsrs	r3, r3, #28
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	4619      	mov	r1, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	440b      	add	r3, r1
 80088ec:	3230      	adds	r2, #48	; 0x30
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	701a      	strb	r2, [r3, #0]
 80088f2:	e00a      	b.n	800890a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	0f1b      	lsrs	r3, r3, #28
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	4619      	mov	r1, r3
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	440b      	add	r3, r1
 8008904:	3237      	adds	r2, #55	; 0x37
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	3301      	adds	r3, #1
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	4413      	add	r3, r2
 800891a:	2200      	movs	r2, #0
 800891c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	3301      	adds	r3, #1
 8008922:	75fb      	strb	r3, [r7, #23]
 8008924:	7dfa      	ldrb	r2, [r7, #23]
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	429a      	cmp	r2, r3
 800892a:	d3d3      	bcc.n	80088d4 <IntToUnicode+0x18>
  }
}
 800892c:	bf00      	nop
 800892e:	371c      	adds	r7, #28
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008940:	f107 0314 	add.w	r3, r7, #20
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	605a      	str	r2, [r3, #4]
 800894a:	609a      	str	r2, [r3, #8]
 800894c:	60da      	str	r2, [r3, #12]
 800894e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008958:	d13a      	bne.n	80089d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800895a:	2300      	movs	r3, #0
 800895c:	613b      	str	r3, [r7, #16]
 800895e:	4b1e      	ldr	r3, [pc, #120]	; (80089d8 <HAL_PCD_MspInit+0xa0>)
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	4a1d      	ldr	r2, [pc, #116]	; (80089d8 <HAL_PCD_MspInit+0xa0>)
 8008964:	f043 0301 	orr.w	r3, r3, #1
 8008968:	6313      	str	r3, [r2, #48]	; 0x30
 800896a:	4b1b      	ldr	r3, [pc, #108]	; (80089d8 <HAL_PCD_MspInit+0xa0>)
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	613b      	str	r3, [r7, #16]
 8008974:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008976:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800897a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800897c:	2302      	movs	r3, #2
 800897e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008980:	2300      	movs	r3, #0
 8008982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008984:	2303      	movs	r3, #3
 8008986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008988:	230a      	movs	r3, #10
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800898c:	f107 0314 	add.w	r3, r7, #20
 8008990:	4619      	mov	r1, r3
 8008992:	4812      	ldr	r0, [pc, #72]	; (80089dc <HAL_PCD_MspInit+0xa4>)
 8008994:	f7f9 fc9a 	bl	80022cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008998:	4b0f      	ldr	r3, [pc, #60]	; (80089d8 <HAL_PCD_MspInit+0xa0>)
 800899a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899c:	4a0e      	ldr	r2, [pc, #56]	; (80089d8 <HAL_PCD_MspInit+0xa0>)
 800899e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a2:	6353      	str	r3, [r2, #52]	; 0x34
 80089a4:	2300      	movs	r3, #0
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	4b0b      	ldr	r3, [pc, #44]	; (80089d8 <HAL_PCD_MspInit+0xa0>)
 80089aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ac:	4a0a      	ldr	r2, [pc, #40]	; (80089d8 <HAL_PCD_MspInit+0xa0>)
 80089ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089b2:	6453      	str	r3, [r2, #68]	; 0x44
 80089b4:	4b08      	ldr	r3, [pc, #32]	; (80089d8 <HAL_PCD_MspInit+0xa0>)
 80089b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089c0:	2200      	movs	r2, #0
 80089c2:	2100      	movs	r1, #0
 80089c4:	2043      	movs	r0, #67	; 0x43
 80089c6:	f7f9 fc4a 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089ca:	2043      	movs	r0, #67	; 0x43
 80089cc:	f7f9 fc63 	bl	8002296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089d0:	bf00      	nop
 80089d2:	3728      	adds	r7, #40	; 0x28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	40023800 	.word	0x40023800
 80089dc:	40020000 	.word	0x40020000

080089e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f7fe fe24 	bl	8007644 <USBD_LL_SetupStage>
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	1a9b      	subs	r3, r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
 8008a24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	f7fe fe5c 	bl	80076ea <USBD_LL_DataOutStage>
}
 8008a32:	bf00      	nop
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	4613      	mov	r3, r2
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	1a9b      	subs	r3, r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	3348      	adds	r3, #72	; 0x48
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	4619      	mov	r1, r3
 8008a62:	f7fe fea5 	bl	80077b0 <USBD_LL_DataInStage>
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe ffa9 	bl	80079d4 <USBD_LL_SOF>
}
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a92:	2301      	movs	r3, #1
 8008a94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d001      	beq.n	8008aa2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a9e:	f7f8 fa33 	bl	8000f08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008aa8:	7bfa      	ldrb	r2, [r7, #15]
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe ff56 	bl	800795e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe ff0f 	bl	80078dc <USBD_LL_Reset>
}
 8008abe:	bf00      	nop
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe ff51 	bl	800797e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	6812      	ldr	r2, [r2, #0]
 8008aea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d005      	beq.n	8008b08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008afc:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <HAL_PCD_SuspendCallback+0x48>)
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	4a03      	ldr	r2, [pc, #12]	; (8008b10 <HAL_PCD_SuspendCallback+0x48>)
 8008b02:	f043 0306 	orr.w	r3, r3, #6
 8008b06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b08:	bf00      	nop
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	e000ed00 	.word	0xe000ed00

08008b14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe ff40 	bl	80079a8 <USBD_LL_Resume>
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	4611      	mov	r1, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe ff6b 	bl	8007a22 <USBD_LL_IsoOUTIncomplete>
}
 8008b4c:	bf00      	nop
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b66:	78fa      	ldrb	r2, [r7, #3]
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe ff4c 	bl	8007a08 <USBD_LL_IsoINIncomplete>
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe ff58 	bl	8007a3c <USBD_LL_DevConnected>
}
 8008b8c:	bf00      	nop
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fe ff55 	bl	8007a52 <USBD_LL_DevDisconnected>
}
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d13c      	bne.n	8008c3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bc0:	4a20      	ldr	r2, [pc, #128]	; (8008c44 <USBD_LL_Init+0x94>)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a1e      	ldr	r2, [pc, #120]	; (8008c44 <USBD_LL_Init+0x94>)
 8008bcc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bd0:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <USBD_LL_Init+0x94>)
 8008bd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008bd8:	4b1a      	ldr	r3, [pc, #104]	; (8008c44 <USBD_LL_Init+0x94>)
 8008bda:	2204      	movs	r2, #4
 8008bdc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bde:	4b19      	ldr	r3, [pc, #100]	; (8008c44 <USBD_LL_Init+0x94>)
 8008be0:	2202      	movs	r2, #2
 8008be2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008be4:	4b17      	ldr	r3, [pc, #92]	; (8008c44 <USBD_LL_Init+0x94>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bea:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <USBD_LL_Init+0x94>)
 8008bec:	2202      	movs	r2, #2
 8008bee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bf0:	4b14      	ldr	r3, [pc, #80]	; (8008c44 <USBD_LL_Init+0x94>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bf6:	4b13      	ldr	r3, [pc, #76]	; (8008c44 <USBD_LL_Init+0x94>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008bfc:	4b11      	ldr	r3, [pc, #68]	; (8008c44 <USBD_LL_Init+0x94>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c02:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <USBD_LL_Init+0x94>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c08:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <USBD_LL_Init+0x94>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c0e:	480d      	ldr	r0, [pc, #52]	; (8008c44 <USBD_LL_Init+0x94>)
 8008c10:	f7fa fa95 	bl	800313e <HAL_PCD_Init>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c1a:	f7f8 f975 	bl	8000f08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c1e:	2180      	movs	r1, #128	; 0x80
 8008c20:	4808      	ldr	r0, [pc, #32]	; (8008c44 <USBD_LL_Init+0x94>)
 8008c22:	f7fb fbda 	bl	80043da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c26:	2240      	movs	r2, #64	; 0x40
 8008c28:	2100      	movs	r1, #0
 8008c2a:	4806      	ldr	r0, [pc, #24]	; (8008c44 <USBD_LL_Init+0x94>)
 8008c2c:	f7fb fb8e 	bl	800434c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c30:	2280      	movs	r2, #128	; 0x80
 8008c32:	2101      	movs	r1, #1
 8008c34:	4803      	ldr	r0, [pc, #12]	; (8008c44 <USBD_LL_Init+0x94>)
 8008c36:	f7fb fb89 	bl	800434c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20000ec0 	.word	0x20000ec0

08008c48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fa fb8a 	bl	8003378 <HAL_PCD_Start>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 f918 	bl	8008ea0 <USBD_Get_USB_Status>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	4608      	mov	r0, r1
 8008c88:	4611      	mov	r1, r2
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	70fb      	strb	r3, [r7, #3]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70bb      	strb	r3, [r7, #2]
 8008c94:	4613      	mov	r3, r2
 8008c96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ca6:	78bb      	ldrb	r3, [r7, #2]
 8008ca8:	883a      	ldrh	r2, [r7, #0]
 8008caa:	78f9      	ldrb	r1, [r7, #3]
 8008cac:	f7fa ff6e 	bl	8003b8c <HAL_PCD_EP_Open>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 f8f2 	bl	8008ea0 <USBD_Get_USB_Status>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ce4:	78fa      	ldrb	r2, [r7, #3]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fa ffb7 	bl	8003c5c <HAL_PCD_EP_Close>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 f8d3 	bl	8008ea0 <USBD_Get_USB_Status>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d22:	78fa      	ldrb	r2, [r7, #3]
 8008d24:	4611      	mov	r1, r2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fb f877 	bl	8003e1a <HAL_PCD_EP_SetStall>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 f8b4 	bl	8008ea0 <USBD_Get_USB_Status>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d60:	78fa      	ldrb	r2, [r7, #3]
 8008d62:	4611      	mov	r1, r2
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fb f8bc 	bl	8003ee2 <HAL_PCD_EP_ClrStall>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 f895 	bl	8008ea0 <USBD_Get_USB_Status>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	da0b      	bge.n	8008db8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008da6:	68f9      	ldr	r1, [r7, #12]
 8008da8:	4613      	mov	r3, r2
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	440b      	add	r3, r1
 8008db2:	333e      	adds	r3, #62	; 0x3e
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	e00b      	b.n	8008dd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008db8:	78fb      	ldrb	r3, [r7, #3]
 8008dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dbe:	68f9      	ldr	r1, [r7, #12]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	1a9b      	subs	r3, r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	440b      	add	r3, r1
 8008dca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dce:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008df6:	78fa      	ldrb	r2, [r7, #3]
 8008df8:	4611      	mov	r1, r2
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fa fea1 	bl	8003b42 <HAL_PCD_SetAddress>
 8008e00:	4603      	mov	r3, r0
 8008e02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 f84a 	bl	8008ea0 <USBD_Get_USB_Status>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b086      	sub	sp, #24
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	603b      	str	r3, [r7, #0]
 8008e26:	460b      	mov	r3, r1
 8008e28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008e38:	7af9      	ldrb	r1, [r7, #11]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	f7fa ffa2 	bl	8003d86 <HAL_PCD_EP_Transmit>
 8008e42:	4603      	mov	r3, r0
 8008e44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 f829 	bl	8008ea0 <USBD_Get_USB_Status>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e52:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	607a      	str	r2, [r7, #4]
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008e7a:	7af9      	ldrb	r1, [r7, #11]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	f7fa ff36 	bl	8003cf0 <HAL_PCD_EP_Receive>
 8008e84:	4603      	mov	r3, r0
 8008e86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 f808 	bl	8008ea0 <USBD_Get_USB_Status>
 8008e90:	4603      	mov	r3, r0
 8008e92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e94:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eae:	79fb      	ldrb	r3, [r7, #7]
 8008eb0:	2b03      	cmp	r3, #3
 8008eb2:	d817      	bhi.n	8008ee4 <USBD_Get_USB_Status+0x44>
 8008eb4:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <USBD_Get_USB_Status+0x1c>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008ecd 	.word	0x08008ecd
 8008ec0:	08008ed3 	.word	0x08008ed3
 8008ec4:	08008ed9 	.word	0x08008ed9
 8008ec8:	08008edf 	.word	0x08008edf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed0:	e00b      	b.n	8008eea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed6:	e008      	b.n	8008eea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	73fb      	strb	r3, [r7, #15]
    break;
 8008edc:	e005      	b.n	8008eea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee2:	e002      	b.n	8008eea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee8:	bf00      	nop
  }
  return usb_status;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <__errno>:
 8008ef8:	4b01      	ldr	r3, [pc, #4]	; (8008f00 <__errno+0x8>)
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	200001f0 	.word	0x200001f0

08008f04 <__libc_init_array>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	4e0d      	ldr	r6, [pc, #52]	; (8008f3c <__libc_init_array+0x38>)
 8008f08:	4c0d      	ldr	r4, [pc, #52]	; (8008f40 <__libc_init_array+0x3c>)
 8008f0a:	1ba4      	subs	r4, r4, r6
 8008f0c:	10a4      	asrs	r4, r4, #2
 8008f0e:	2500      	movs	r5, #0
 8008f10:	42a5      	cmp	r5, r4
 8008f12:	d109      	bne.n	8008f28 <__libc_init_array+0x24>
 8008f14:	4e0b      	ldr	r6, [pc, #44]	; (8008f44 <__libc_init_array+0x40>)
 8008f16:	4c0c      	ldr	r4, [pc, #48]	; (8008f48 <__libc_init_array+0x44>)
 8008f18:	f000 f8ea 	bl	80090f0 <_init>
 8008f1c:	1ba4      	subs	r4, r4, r6
 8008f1e:	10a4      	asrs	r4, r4, #2
 8008f20:	2500      	movs	r5, #0
 8008f22:	42a5      	cmp	r5, r4
 8008f24:	d105      	bne.n	8008f32 <__libc_init_array+0x2e>
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f2c:	4798      	blx	r3
 8008f2e:	3501      	adds	r5, #1
 8008f30:	e7ee      	b.n	8008f10 <__libc_init_array+0xc>
 8008f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f36:	4798      	blx	r3
 8008f38:	3501      	adds	r5, #1
 8008f3a:	e7f2      	b.n	8008f22 <__libc_init_array+0x1e>
 8008f3c:	08009f18 	.word	0x08009f18
 8008f40:	08009f18 	.word	0x08009f18
 8008f44:	08009f18 	.word	0x08009f18
 8008f48:	08009f1c 	.word	0x08009f1c

08008f4c <malloc>:
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <malloc+0xc>)
 8008f4e:	4601      	mov	r1, r0
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	f000 b861 	b.w	8009018 <_malloc_r>
 8008f56:	bf00      	nop
 8008f58:	200001f0 	.word	0x200001f0

08008f5c <free>:
 8008f5c:	4b02      	ldr	r3, [pc, #8]	; (8008f68 <free+0xc>)
 8008f5e:	4601      	mov	r1, r0
 8008f60:	6818      	ldr	r0, [r3, #0]
 8008f62:	f000 b80b 	b.w	8008f7c <_free_r>
 8008f66:	bf00      	nop
 8008f68:	200001f0 	.word	0x200001f0

08008f6c <memset>:
 8008f6c:	4402      	add	r2, r0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d100      	bne.n	8008f76 <memset+0xa>
 8008f74:	4770      	bx	lr
 8008f76:	f803 1b01 	strb.w	r1, [r3], #1
 8008f7a:	e7f9      	b.n	8008f70 <memset+0x4>

08008f7c <_free_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4605      	mov	r5, r0
 8008f80:	2900      	cmp	r1, #0
 8008f82:	d045      	beq.n	8009010 <_free_r+0x94>
 8008f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f88:	1f0c      	subs	r4, r1, #4
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	bfb8      	it	lt
 8008f8e:	18e4      	addlt	r4, r4, r3
 8008f90:	f000 f8ac 	bl	80090ec <__malloc_lock>
 8008f94:	4a1f      	ldr	r2, [pc, #124]	; (8009014 <_free_r+0x98>)
 8008f96:	6813      	ldr	r3, [r2, #0]
 8008f98:	4610      	mov	r0, r2
 8008f9a:	b933      	cbnz	r3, 8008faa <_free_r+0x2e>
 8008f9c:	6063      	str	r3, [r4, #4]
 8008f9e:	6014      	str	r4, [r2, #0]
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fa6:	f000 b8a2 	b.w	80090ee <__malloc_unlock>
 8008faa:	42a3      	cmp	r3, r4
 8008fac:	d90c      	bls.n	8008fc8 <_free_r+0x4c>
 8008fae:	6821      	ldr	r1, [r4, #0]
 8008fb0:	1862      	adds	r2, r4, r1
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	bf04      	itt	eq
 8008fb6:	681a      	ldreq	r2, [r3, #0]
 8008fb8:	685b      	ldreq	r3, [r3, #4]
 8008fba:	6063      	str	r3, [r4, #4]
 8008fbc:	bf04      	itt	eq
 8008fbe:	1852      	addeq	r2, r2, r1
 8008fc0:	6022      	streq	r2, [r4, #0]
 8008fc2:	6004      	str	r4, [r0, #0]
 8008fc4:	e7ec      	b.n	8008fa0 <_free_r+0x24>
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	b10a      	cbz	r2, 8008fd0 <_free_r+0x54>
 8008fcc:	42a2      	cmp	r2, r4
 8008fce:	d9fa      	bls.n	8008fc6 <_free_r+0x4a>
 8008fd0:	6819      	ldr	r1, [r3, #0]
 8008fd2:	1858      	adds	r0, r3, r1
 8008fd4:	42a0      	cmp	r0, r4
 8008fd6:	d10b      	bne.n	8008ff0 <_free_r+0x74>
 8008fd8:	6820      	ldr	r0, [r4, #0]
 8008fda:	4401      	add	r1, r0
 8008fdc:	1858      	adds	r0, r3, r1
 8008fde:	4282      	cmp	r2, r0
 8008fe0:	6019      	str	r1, [r3, #0]
 8008fe2:	d1dd      	bne.n	8008fa0 <_free_r+0x24>
 8008fe4:	6810      	ldr	r0, [r2, #0]
 8008fe6:	6852      	ldr	r2, [r2, #4]
 8008fe8:	605a      	str	r2, [r3, #4]
 8008fea:	4401      	add	r1, r0
 8008fec:	6019      	str	r1, [r3, #0]
 8008fee:	e7d7      	b.n	8008fa0 <_free_r+0x24>
 8008ff0:	d902      	bls.n	8008ff8 <_free_r+0x7c>
 8008ff2:	230c      	movs	r3, #12
 8008ff4:	602b      	str	r3, [r5, #0]
 8008ff6:	e7d3      	b.n	8008fa0 <_free_r+0x24>
 8008ff8:	6820      	ldr	r0, [r4, #0]
 8008ffa:	1821      	adds	r1, r4, r0
 8008ffc:	428a      	cmp	r2, r1
 8008ffe:	bf04      	itt	eq
 8009000:	6811      	ldreq	r1, [r2, #0]
 8009002:	6852      	ldreq	r2, [r2, #4]
 8009004:	6062      	str	r2, [r4, #4]
 8009006:	bf04      	itt	eq
 8009008:	1809      	addeq	r1, r1, r0
 800900a:	6021      	streq	r1, [r4, #0]
 800900c:	605c      	str	r4, [r3, #4]
 800900e:	e7c7      	b.n	8008fa0 <_free_r+0x24>
 8009010:	bd38      	pop	{r3, r4, r5, pc}
 8009012:	bf00      	nop
 8009014:	200006c4 	.word	0x200006c4

08009018 <_malloc_r>:
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	1ccd      	adds	r5, r1, #3
 800901c:	f025 0503 	bic.w	r5, r5, #3
 8009020:	3508      	adds	r5, #8
 8009022:	2d0c      	cmp	r5, #12
 8009024:	bf38      	it	cc
 8009026:	250c      	movcc	r5, #12
 8009028:	2d00      	cmp	r5, #0
 800902a:	4606      	mov	r6, r0
 800902c:	db01      	blt.n	8009032 <_malloc_r+0x1a>
 800902e:	42a9      	cmp	r1, r5
 8009030:	d903      	bls.n	800903a <_malloc_r+0x22>
 8009032:	230c      	movs	r3, #12
 8009034:	6033      	str	r3, [r6, #0]
 8009036:	2000      	movs	r0, #0
 8009038:	bd70      	pop	{r4, r5, r6, pc}
 800903a:	f000 f857 	bl	80090ec <__malloc_lock>
 800903e:	4a21      	ldr	r2, [pc, #132]	; (80090c4 <_malloc_r+0xac>)
 8009040:	6814      	ldr	r4, [r2, #0]
 8009042:	4621      	mov	r1, r4
 8009044:	b991      	cbnz	r1, 800906c <_malloc_r+0x54>
 8009046:	4c20      	ldr	r4, [pc, #128]	; (80090c8 <_malloc_r+0xb0>)
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	b91b      	cbnz	r3, 8009054 <_malloc_r+0x3c>
 800904c:	4630      	mov	r0, r6
 800904e:	f000 f83d 	bl	80090cc <_sbrk_r>
 8009052:	6020      	str	r0, [r4, #0]
 8009054:	4629      	mov	r1, r5
 8009056:	4630      	mov	r0, r6
 8009058:	f000 f838 	bl	80090cc <_sbrk_r>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d124      	bne.n	80090aa <_malloc_r+0x92>
 8009060:	230c      	movs	r3, #12
 8009062:	6033      	str	r3, [r6, #0]
 8009064:	4630      	mov	r0, r6
 8009066:	f000 f842 	bl	80090ee <__malloc_unlock>
 800906a:	e7e4      	b.n	8009036 <_malloc_r+0x1e>
 800906c:	680b      	ldr	r3, [r1, #0]
 800906e:	1b5b      	subs	r3, r3, r5
 8009070:	d418      	bmi.n	80090a4 <_malloc_r+0x8c>
 8009072:	2b0b      	cmp	r3, #11
 8009074:	d90f      	bls.n	8009096 <_malloc_r+0x7e>
 8009076:	600b      	str	r3, [r1, #0]
 8009078:	50cd      	str	r5, [r1, r3]
 800907a:	18cc      	adds	r4, r1, r3
 800907c:	4630      	mov	r0, r6
 800907e:	f000 f836 	bl	80090ee <__malloc_unlock>
 8009082:	f104 000b 	add.w	r0, r4, #11
 8009086:	1d23      	adds	r3, r4, #4
 8009088:	f020 0007 	bic.w	r0, r0, #7
 800908c:	1ac3      	subs	r3, r0, r3
 800908e:	d0d3      	beq.n	8009038 <_malloc_r+0x20>
 8009090:	425a      	negs	r2, r3
 8009092:	50e2      	str	r2, [r4, r3]
 8009094:	e7d0      	b.n	8009038 <_malloc_r+0x20>
 8009096:	428c      	cmp	r4, r1
 8009098:	684b      	ldr	r3, [r1, #4]
 800909a:	bf16      	itet	ne
 800909c:	6063      	strne	r3, [r4, #4]
 800909e:	6013      	streq	r3, [r2, #0]
 80090a0:	460c      	movne	r4, r1
 80090a2:	e7eb      	b.n	800907c <_malloc_r+0x64>
 80090a4:	460c      	mov	r4, r1
 80090a6:	6849      	ldr	r1, [r1, #4]
 80090a8:	e7cc      	b.n	8009044 <_malloc_r+0x2c>
 80090aa:	1cc4      	adds	r4, r0, #3
 80090ac:	f024 0403 	bic.w	r4, r4, #3
 80090b0:	42a0      	cmp	r0, r4
 80090b2:	d005      	beq.n	80090c0 <_malloc_r+0xa8>
 80090b4:	1a21      	subs	r1, r4, r0
 80090b6:	4630      	mov	r0, r6
 80090b8:	f000 f808 	bl	80090cc <_sbrk_r>
 80090bc:	3001      	adds	r0, #1
 80090be:	d0cf      	beq.n	8009060 <_malloc_r+0x48>
 80090c0:	6025      	str	r5, [r4, #0]
 80090c2:	e7db      	b.n	800907c <_malloc_r+0x64>
 80090c4:	200006c4 	.word	0x200006c4
 80090c8:	200006c8 	.word	0x200006c8

080090cc <_sbrk_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4c06      	ldr	r4, [pc, #24]	; (80090e8 <_sbrk_r+0x1c>)
 80090d0:	2300      	movs	r3, #0
 80090d2:	4605      	mov	r5, r0
 80090d4:	4608      	mov	r0, r1
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	f7f8 fc20 	bl	800191c <_sbrk>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d102      	bne.n	80090e6 <_sbrk_r+0x1a>
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	b103      	cbz	r3, 80090e6 <_sbrk_r+0x1a>
 80090e4:	602b      	str	r3, [r5, #0]
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	200012c8 	.word	0x200012c8

080090ec <__malloc_lock>:
 80090ec:	4770      	bx	lr

080090ee <__malloc_unlock>:
 80090ee:	4770      	bx	lr

080090f0 <_init>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	bf00      	nop
 80090f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f6:	bc08      	pop	{r3}
 80090f8:	469e      	mov	lr, r3
 80090fa:	4770      	bx	lr

080090fc <_fini>:
 80090fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fe:	bf00      	nop
 8009100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009102:	bc08      	pop	{r3}
 8009104:	469e      	mov	lr, r3
 8009106:	4770      	bx	lr
