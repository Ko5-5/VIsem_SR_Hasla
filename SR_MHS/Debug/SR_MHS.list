
SR_MHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009380  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e54  08009518  08009518  00019518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a36c  0800a36c  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a36c  0800a36c  0001a36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a374  0800a374  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a378  0800a378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800a37c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000105c  200001d0  0800a54c  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000122c  0800a54c  0002122c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e401  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f3b  00000000  00000000  0003e601  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001718  00000000  00000000  00042540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015a0  00000000  00000000  00043c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001abf7  00000000  00000000  000451f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015379  00000000  00000000  0005fdef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093813  00000000  00000000  00075168  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010897b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006190  00000000  00000000  001089f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001d0 	.word	0x200001d0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009500 	.word	0x08009500

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001d4 	.word	0x200001d4
 80001d4:	08009500 	.word	0x08009500

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
 80004f2:	4b4a      	ldr	r3, [pc, #296]	; (800061c <MX_GPIO_Init+0x144>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a49      	ldr	r2, [pc, #292]	; (800061c <MX_GPIO_Init+0x144>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b47      	ldr	r3, [pc, #284]	; (800061c <MX_GPIO_Init+0x144>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	4b43      	ldr	r3, [pc, #268]	; (800061c <MX_GPIO_Init+0x144>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a42      	ldr	r2, [pc, #264]	; (800061c <MX_GPIO_Init+0x144>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b40      	ldr	r3, [pc, #256]	; (800061c <MX_GPIO_Init+0x144>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	4b3c      	ldr	r3, [pc, #240]	; (800061c <MX_GPIO_Init+0x144>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a3b      	ldr	r2, [pc, #236]	; (800061c <MX_GPIO_Init+0x144>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b39      	ldr	r3, [pc, #228]	; (800061c <MX_GPIO_Init+0x144>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b35      	ldr	r3, [pc, #212]	; (800061c <MX_GPIO_Init+0x144>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a34      	ldr	r2, [pc, #208]	; (800061c <MX_GPIO_Init+0x144>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b32      	ldr	r3, [pc, #200]	; (800061c <MX_GPIO_Init+0x144>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000564:	482e      	ldr	r0, [pc, #184]	; (8000620 <MX_GPIO_Init+0x148>)
 8000566:	f002 f935 	bl	80027d4 <HAL_GPIO_WritePin>
                          |CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000570:	482c      	ldr	r0, [pc, #176]	; (8000624 <MX_GPIO_Init+0x14c>)
 8000572:	f002 f92f 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin;
 8000576:	231c      	movs	r3, #28
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <MX_GPIO_Init+0x150>)
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4825      	ldr	r0, [pc, #148]	; (8000620 <MX_GPIO_Init+0x148>)
 800058a:	f001 ff89 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800058e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000592:	617b      	str	r3, [r7, #20]
                          |CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	481e      	ldr	r0, [pc, #120]	; (8000620 <MX_GPIO_Init+0x148>)
 80005a8:	f001 ff7a 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_BUT_Pin;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4819      	ldr	r0, [pc, #100]	; (8000624 <MX_GPIO_Init+0x14c>)
 80005c0:	f001 ff6e 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 80005c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4811      	ldr	r0, [pc, #68]	; (8000624 <MX_GPIO_Init+0x14c>)
 80005de:	f001 ff5f 	bl	80024a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	2008      	movs	r0, #8
 80005e8:	f001 ff23 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005ec:	2008      	movs	r0, #8
 80005ee:	f001 ff3c 	bl	800246a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2009      	movs	r0, #9
 80005f8:	f001 ff1b 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005fc:	2009      	movs	r0, #9
 80005fe:	f001 ff34 	bl	800246a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	200a      	movs	r0, #10
 8000608:	f001 ff13 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800060c:	200a      	movs	r0, #10
 800060e:	f001 ff2c 	bl	800246a <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40020000 	.word	0x40020000
 8000624:	40020400 	.word	0x40020400
 8000628:	10110000 	.word	0x10110000

0800062c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C1_Init+0x50>)
 800066a:	f002 f8e5 	bl	8002838 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 fb58 	bl	8000d28 <Error_Handler>
  }

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000630 	.word	0x20000630
 8000680:	40005400 	.word	0x40005400
 8000684:	00061a80 	.word	0x00061a80

08000688 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a19      	ldr	r2, [pc, #100]	; (800070c <HAL_I2C_MspInit+0x84>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d12b      	bne.n	8000702 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a17      	ldr	r2, [pc, #92]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006c6:	23c0      	movs	r3, #192	; 0xc0
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ca:	2312      	movs	r3, #18
 80006cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006d6:	2304      	movs	r3, #4
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <HAL_I2C_MspInit+0x8c>)
 80006e2:	f001 fedd 	bl	80024a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f4:	6413      	str	r3, [r2, #64]	; 0x40
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_I2C_MspInit+0x88>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40005400 	.word	0x40005400
 8000710:	40023800 	.word	0x40023800
 8000714:	40020400 	.word	0x40020400

08000718 <OLED_page_test_sc>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void OLED_page_test_sc(){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af02      	add	r7, sp, #8
	// OLED screen test
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fc7a 	bl	8001018 <SSD1306_Fill>
	SSD1306_GotoXY (4,6); // goto 10, 10
 8000724:	2106      	movs	r1, #6
 8000726:	2004      	movs	r0, #4
 8000728:	f000 fcee 	bl	8001108 <SSD1306_GotoXY>
	SSD1306_Puts ("--MHS--", &Font_11x18, 1); // print Hello
 800072c:	2201      	movs	r2, #1
 800072e:	492a      	ldr	r1, [pc, #168]	; (80007d8 <OLED_page_test_sc+0xc0>)
 8000730:	482a      	ldr	r0, [pc, #168]	; (80007dc <OLED_page_test_sc+0xc4>)
 8000732:	f000 fd7f 	bl	8001234 <SSD1306_Puts>
	SSD1306_GotoXY (4,25); // goto 10, 10
 8000736:	2119      	movs	r1, #25
 8000738:	2004      	movs	r0, #4
 800073a:	f000 fce5 	bl	8001108 <SSD1306_GotoXY>
	SSD1306_Puts ("PAGE", &Font_11x18, 1); // print Hello
 800073e:	2201      	movs	r2, #1
 8000740:	4925      	ldr	r1, [pc, #148]	; (80007d8 <OLED_page_test_sc+0xc0>)
 8000742:	4827      	ldr	r0, [pc, #156]	; (80007e0 <OLED_page_test_sc+0xc8>)
 8000744:	f000 fd76 	bl	8001234 <SSD1306_Puts>
	SSD1306_GotoXY (4,44); // goto 10, 10
 8000748:	212c      	movs	r1, #44	; 0x2c
 800074a:	2004      	movs	r0, #4
 800074c:	f000 fcdc 	bl	8001108 <SSD1306_GotoXY>
	SSD1306_Puts ("NUMBER:", &Font_11x18, 1); // print Hello
 8000750:	2201      	movs	r2, #1
 8000752:	4921      	ldr	r1, [pc, #132]	; (80007d8 <OLED_page_test_sc+0xc0>)
 8000754:	4823      	ldr	r0, [pc, #140]	; (80007e4 <OLED_page_test_sc+0xcc>)
 8000756:	f000 fd6d 	bl	8001234 <SSD1306_Puts>
	SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 800075a:	2301      	movs	r3, #1
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2301      	movs	r3, #1
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	2101      	movs	r1, #1
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fd8a 	bl	800127e <SSD1306_DrawLine>
	SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 800076a:	2301      	movs	r3, #1
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2340      	movs	r3, #64	; 0x40
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	2000      	movs	r0, #0
 8000776:	f000 fd82 	bl	800127e <SSD1306_DrawLine>
	SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 800077a:	2301      	movs	r3, #1
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2340      	movs	r3, #64	; 0x40
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	2100      	movs	r1, #0
 8000784:	2080      	movs	r0, #128	; 0x80
 8000786:	f000 fd7a 	bl	800127e <SSD1306_DrawLine>
	SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 800078a:	2301      	movs	r3, #1
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2340      	movs	r3, #64	; 0x40
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	2140      	movs	r1, #64	; 0x40
 8000794:	2000      	movs	r0, #0
 8000796:	f000 fd72 	bl	800127e <SSD1306_DrawLine>
	SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 800079a:	2301      	movs	r3, #1
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	233e      	movs	r3, #62	; 0x3e
 80007a0:	221b      	movs	r2, #27
 80007a2:	2102      	movs	r1, #2
 80007a4:	2064      	movs	r0, #100	; 0x64
 80007a6:	f000 fe65 	bl	8001474 <SSD1306_DrawRectangle>
	SSD1306_GotoXY (110,25); // goto 10, 10
 80007aa:	2119      	movs	r1, #25
 80007ac:	206e      	movs	r0, #110	; 0x6e
 80007ae:	f000 fcab 	bl	8001108 <SSD1306_GotoXY>
	SSD1306_Putc ((char)(keyPressed+'0'), &Font_11x18, 1); // print Hello
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <OLED_page_test_sc+0xd0>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	3330      	adds	r3, #48	; 0x30
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2201      	movs	r2, #1
 80007be:	4906      	ldr	r1, [pc, #24]	; (80007d8 <OLED_page_test_sc+0xc0>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fcb7 	bl	8001134 <SSD1306_Putc>
	SSD1306_UpdateScreen(); // update screen
 80007c6:	f000 fbf9 	bl	8000fbc <SSD1306_UpdateScreen>
	HAL_Delay(1000);
 80007ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ce:	f001 fd33 	bl	8002238 <HAL_Delay>
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000000 	.word	0x20000000
 80007dc:	08009518 	.word	0x08009518
 80007e0:	08009520 	.word	0x08009520
 80007e4:	08009528 	.word	0x08009528
 80007e8:	20000200 	.word	0x20000200

080007ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007f0:	f001 fcb0 	bl	8002154 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007f4:	f000 f8f2 	bl	80009dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007f8:	f7ff fe6e 	bl	80004d8 <MX_GPIO_Init>
	MX_I2C1_Init();
 80007fc:	f7ff ff16 	bl	800062c <MX_I2C1_Init>
	MX_SPI3_Init();
 8000800:	f000 fa9a 	bl	8000d38 <MX_SPI3_Init>
	MX_TIM2_Init();
 8000804:	f000 ffe6 	bl	80017d4 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000808:	f008 f95e 	bl	8008ac8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	//---- Inicjalizacja wyświetlacza OLED ----
	SSD1306_Init();
 800080c:	f000 fb12 	bl	8000e34 <SSD1306_Init>

	//---- Inicjalizacja obsługi enkodera ----
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000810:	213c      	movs	r1, #60	; 0x3c
 8000812:	4863      	ldr	r0, [pc, #396]	; (80009a0 <main+0x1b4>)
 8000814:	f005 f8f6 	bl	8005a04 <HAL_TIM_Encoder_Start_IT>

	//---- Inicjalizacja pamięci FLASH ----
	W25qxx_Init();
 8000818:	f001 f990 	bl	8001b3c <W25qxx_Init>
	W25qxx_EraseChip();
 800081c:	f001 fa60 	bl	8001ce0 <W25qxx_EraseChip>
	// W25qxx_WriteSector(writeBuffer, 1, 0, 8);
	// W25qxx_ReadSector(readBuffer, 1, 0, 8);

	memcpy(passwordWrite, (uint8_t *)"123456\0", sizeof(passwordWrite));
 8000820:	4a60      	ldr	r2, [pc, #384]	; (80009a4 <main+0x1b8>)
 8000822:	4b61      	ldr	r3, [pc, #388]	; (80009a8 <main+0x1bc>)
 8000824:	4610      	mov	r0, r2
 8000826:	4619      	mov	r1, r3
 8000828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082c:	461a      	mov	r2, r3
 800082e:	f008 fd99 	bl	8009364 <memcpy>
	W25qxx_WriteSector(passwordWrite, 1, 0, 256);
 8000832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000836:	2200      	movs	r2, #0
 8000838:	2101      	movs	r1, #1
 800083a:	485a      	ldr	r0, [pc, #360]	; (80009a4 <main+0x1b8>)
 800083c:	f001 fb1c 	bl	8001e78 <W25qxx_WriteSector>
	memcpy(passwordWrite, (uint8_t *)"654321\0", sizeof(passwordWrite));
 8000840:	4a58      	ldr	r2, [pc, #352]	; (80009a4 <main+0x1b8>)
 8000842:	4b5a      	ldr	r3, [pc, #360]	; (80009ac <main+0x1c0>)
 8000844:	4610      	mov	r0, r2
 8000846:	4619      	mov	r1, r3
 8000848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084c:	461a      	mov	r2, r3
 800084e:	f008 fd89 	bl	8009364 <memcpy>
	W25qxx_WriteSector(passwordWrite, 2, 0, 256);
 8000852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000856:	2200      	movs	r2, #0
 8000858:	2102      	movs	r1, #2
 800085a:	4852      	ldr	r0, [pc, #328]	; (80009a4 <main+0x1b8>)
 800085c:	f001 fb0c 	bl	8001e78 <W25qxx_WriteSector>
	memcpy(passwordWrite, (uint8_t *)"HaloHalo\0", sizeof(passwordWrite));
 8000860:	4a50      	ldr	r2, [pc, #320]	; (80009a4 <main+0x1b8>)
 8000862:	4b53      	ldr	r3, [pc, #332]	; (80009b0 <main+0x1c4>)
 8000864:	4610      	mov	r0, r2
 8000866:	4619      	mov	r1, r3
 8000868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800086c:	461a      	mov	r2, r3
 800086e:	f008 fd79 	bl	8009364 <memcpy>
	W25qxx_WriteSector(passwordWrite, 3, 0, 256);
 8000872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000876:	2200      	movs	r2, #0
 8000878:	2103      	movs	r1, #3
 800087a:	484a      	ldr	r0, [pc, #296]	; (80009a4 <main+0x1b8>)
 800087c:	f001 fafc 	bl	8001e78 <W25qxx_WriteSector>
	memcpy(passwordWrite, (uint8_t *)"Cartoon-Duck-14-Coffee-Glvs\0", sizeof(passwordWrite));
 8000880:	4a48      	ldr	r2, [pc, #288]	; (80009a4 <main+0x1b8>)
 8000882:	4b4c      	ldr	r3, [pc, #304]	; (80009b4 <main+0x1c8>)
 8000884:	4610      	mov	r0, r2
 8000886:	4619      	mov	r1, r3
 8000888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088c:	461a      	mov	r2, r3
 800088e:	f008 fd69 	bl	8009364 <memcpy>
	W25qxx_WriteSector(passwordWrite, 4, 0, 256);
 8000892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000896:	2200      	movs	r2, #0
 8000898:	2104      	movs	r1, #4
 800089a:	4842      	ldr	r0, [pc, #264]	; (80009a4 <main+0x1b8>)
 800089c:	f001 faec 	bl	8001e78 <W25qxx_WriteSector>
	memcpy(passwordWrite, (uint8_t *)"doubleclick\0", sizeof(passwordWrite));
 80008a0:	4a40      	ldr	r2, [pc, #256]	; (80009a4 <main+0x1b8>)
 80008a2:	4b45      	ldr	r3, [pc, #276]	; (80009b8 <main+0x1cc>)
 80008a4:	4610      	mov	r0, r2
 80008a6:	4619      	mov	r1, r3
 80008a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ac:	461a      	mov	r2, r3
 80008ae:	f008 fd59 	bl	8009364 <memcpy>
	W25qxx_WriteSector(passwordWrite, 5, 0, 256);
 80008b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b6:	2200      	movs	r2, #0
 80008b8:	2105      	movs	r1, #5
 80008ba:	483a      	ldr	r0, [pc, #232]	; (80009a4 <main+0x1b8>)
 80008bc:	f001 fadc 	bl	8001e78 <W25qxx_WriteSector>
	memcpy(passwordWrite, (uint8_t *)"supersecure\0", sizeof(passwordWrite));
 80008c0:	4a38      	ldr	r2, [pc, #224]	; (80009a4 <main+0x1b8>)
 80008c2:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <main+0x1d0>)
 80008c4:	4610      	mov	r0, r2
 80008c6:	4619      	mov	r1, r3
 80008c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008cc:	461a      	mov	r2, r3
 80008ce:	f008 fd49 	bl	8009364 <memcpy>
	W25qxx_WriteSector(passwordWrite, 6, 0, 256);
 80008d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d6:	2200      	movs	r2, #0
 80008d8:	2106      	movs	r1, #6
 80008da:	4832      	ldr	r0, [pc, #200]	; (80009a4 <main+0x1b8>)
 80008dc:	f001 facc 	bl	8001e78 <W25qxx_WriteSector>
	memcpy(passwordWrite, (uint8_t *)"Qwerty\0", sizeof(passwordWrite));
 80008e0:	4a30      	ldr	r2, [pc, #192]	; (80009a4 <main+0x1b8>)
 80008e2:	4b37      	ldr	r3, [pc, #220]	; (80009c0 <main+0x1d4>)
 80008e4:	4610      	mov	r0, r2
 80008e6:	4619      	mov	r1, r3
 80008e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ec:	461a      	mov	r2, r3
 80008ee:	f008 fd39 	bl	8009364 <memcpy>
	W25qxx_WriteSector(passwordWrite, 7, 0, 256);
 80008f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f6:	2200      	movs	r2, #0
 80008f8:	2107      	movs	r1, #7
 80008fa:	482a      	ldr	r0, [pc, #168]	; (80009a4 <main+0x1b8>)
 80008fc:	f001 fabc 	bl	8001e78 <W25qxx_WriteSector>
	memcpy(passwordWrite, (uint8_t *)"DEFAULT\0", sizeof(passwordWrite));
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <main+0x1b8>)
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <main+0x1d8>)
 8000904:	4610      	mov	r0, r2
 8000906:	4619      	mov	r1, r3
 8000908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090c:	461a      	mov	r2, r3
 800090e:	f008 fd29 	bl	8009364 <memcpy>
	W25qxx_WriteSector(passwordWrite, 8, 0, 256);
 8000912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000916:	2200      	movs	r2, #0
 8000918:	2108      	movs	r1, #8
 800091a:	4822      	ldr	r0, [pc, #136]	; (80009a4 <main+0x1b8>)
 800091c:	f001 faac 	bl	8001e78 <W25qxx_WriteSector>
	memcpy(passwordWrite, (uint8_t *)"password\0", sizeof(passwordWrite));
 8000920:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <main+0x1b8>)
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <main+0x1dc>)
 8000924:	4610      	mov	r0, r2
 8000926:	4619      	mov	r1, r3
 8000928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092c:	461a      	mov	r2, r3
 800092e:	f008 fd19 	bl	8009364 <memcpy>
	W25qxx_WriteSector(passwordWrite, 9, 0, 256);
 8000932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000936:	2200      	movs	r2, #0
 8000938:	2109      	movs	r1, #9
 800093a:	481a      	ldr	r0, [pc, #104]	; (80009a4 <main+0x1b8>)
 800093c:	f001 fa9c 	bl	8001e78 <W25qxx_WriteSector>
	memcpy(passwordWrite, (uint8_t *)"0\0", sizeof(passwordWrite));
 8000940:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <main+0x1b8>)
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <main+0x1e0>)
 8000944:	4610      	mov	r0, r2
 8000946:	4619      	mov	r1, r3
 8000948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094c:	461a      	mov	r2, r3
 800094e:	f008 fd09 	bl	8009364 <memcpy>
	W25qxx_WriteSector(passwordWrite, 10, 0, 256);
 8000952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000956:	2200      	movs	r2, #0
 8000958:	210a      	movs	r1, #10
 800095a:	4812      	ldr	r0, [pc, #72]	; (80009a4 <main+0x1b8>)
 800095c:	f001 fa8c 	bl	8001e78 <W25qxx_WriteSector>

	W25qxx_ReadSector(passwordRead, 1, 0, 256);
 8000960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000964:	2200      	movs	r2, #0
 8000966:	2101      	movs	r1, #1
 8000968:	4819      	ldr	r0, [pc, #100]	; (80009d0 <main+0x1e4>)
 800096a:	f001 fb67 	bl	800203c <W25qxx_ReadSector>

	//---- Inicjalizacja obsługi macierzy przycisków
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	2120      	movs	r1, #32
 8000972:	4818      	ldr	r0, [pc, #96]	; (80009d4 <main+0x1e8>)
 8000974:	f001 ff2e 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <main+0x1e8>)
 800097e:	f001 ff29 	bl	80027d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	4813      	ldr	r0, [pc, #76]	; (80009d4 <main+0x1e8>)
 8000988:	f001 ff24 	bl	80027d4 <HAL_GPIO_WritePin>

	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000992:	4811      	ldr	r0, [pc, #68]	; (80009d8 <main+0x1ec>)
 8000994:	f001 ff1e 	bl	80027d4 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		OLED_page_test_sc();
 8000998:	f7ff febe 	bl	8000718 <OLED_page_test_sc>
 800099c:	e7fc      	b.n	8000998 <main+0x1ac>
 800099e:	bf00      	nop
 80009a0:	200008e4 	.word	0x200008e4
 80009a4:	2000078c 	.word	0x2000078c
 80009a8:	08009530 	.word	0x08009530
 80009ac:	08009538 	.word	0x08009538
 80009b0:	08009540 	.word	0x08009540
 80009b4:	0800954c 	.word	0x0800954c
 80009b8:	0800956c 	.word	0x0800956c
 80009bc:	0800957c 	.word	0x0800957c
 80009c0:	0800958c 	.word	0x0800958c
 80009c4:	08009594 	.word	0x08009594
 80009c8:	080095a0 	.word	0x080095a0
 80009cc:	080095ac 	.word	0x080095ac
 80009d0:	2000068c 	.word	0x2000068c
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400

080009dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	; 0x50
 80009e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	2230      	movs	r2, #48	; 0x30
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f008 fcc5 	bl	800937a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <SystemClock_Config+0xc8>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a26      	ldr	r2, [pc, #152]	; (8000aa4 <SystemClock_Config+0xc8>)
 8000a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <SystemClock_Config+0xc8>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a42:	2302      	movs	r3, #2
 8000a44:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000a4c:	2319      	movs	r3, #25
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000a50:	23c0      	movs	r3, #192	; 0xc0
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 fdc1 	bl	80045e8 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000a6c:	f000 f95c 	bl	8000d28 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2302      	movs	r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a80:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 f81b 	bl	8004ac8 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000a98:	f000 f946 	bl	8000d28 <Error_Handler>
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	3750      	adds	r7, #80	; 0x50
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	4a1f      	ldr	r2, [pc, #124]	; (8000b38 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000abc:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ac6:	801a      	strh	r2, [r3, #0]
	if(count - old_count > 5)
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	2b05      	cmp	r3, #5
 8000ada:	dd0e      	ble.n	8000afa <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(pageNumber < 9)
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	d804      	bhi.n	8000aee <HAL_TIM_IC_CaptureCallback+0x42>
			pageNumber++;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000aec:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000af0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000af6:	801a      	strh	r2, [r3, #0]
		if(pageNumber > 0)
			pageNumber--;
		old_count = count;
	}

}
 8000af8:	e018      	b.n	8000b2c <HAL_TIM_IC_CaptureCallback+0x80>
	}else if(count - old_count < -5)
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	f113 0f05 	cmn.w	r3, #5
 8000b0e:	da0d      	bge.n	8000b2c <HAL_TIM_IC_CaptureCallback+0x80>
		if(pageNumber > 0)
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d004      	beq.n	8000b22 <HAL_TIM_IC_CaptureCallback+0x76>
			pageNumber--;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000b20:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000b24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000b2a:	801a      	strh	r2, [r3, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	2000020c 	.word	0x2000020c
 8000b3c:	20000210 	.word	0x20000210
 8000b40:	20000212 	.word	0x20000212
 8000b44:	20000214 	.word	0x20000214

08000b48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000b52:	f001 fb65 	bl	8002220 <HAL_GetTick>
 8000b56:	4602      	mov	r2, r0
 8000b58:	4b6b      	ldr	r3, [pc, #428]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000b5a:	601a      	str	r2, [r3, #0]
	if(currentMillis - previousMillis > 200)
 8000b5c:	4b6a      	ldr	r3, [pc, #424]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b6a      	ldr	r3, [pc, #424]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	2bc8      	cmp	r3, #200	; 0xc8
 8000b68:	f240 80ca 	bls.w	8000d00 <HAL_GPIO_EXTI_Callback+0x1b8>
	{
		GPIO_InitStructPrivate.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000b6c:	4b68      	ldr	r3, [pc, #416]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000b6e:	221c      	movs	r2, #28
 8000b70:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000b72:	4b67      	ldr	r3, [pc, #412]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000b78:	4b65      	ldr	r3, [pc, #404]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	4b64      	ldr	r3, [pc, #400]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000b84:	4962      	ldr	r1, [pc, #392]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000b86:	4863      	ldr	r0, [pc, #396]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000b88:	f001 fc8a 	bl	80024a0 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2120      	movs	r1, #32
 8000b90:	4860      	ldr	r0, [pc, #384]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000b92:	f001 fe1f 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2140      	movs	r1, #64	; 0x40
 8000b9a:	485e      	ldr	r0, [pc, #376]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000b9c:	f001 fe1a 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	485b      	ldr	r0, [pc, #364]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000ba6:	f001 fe15 	bl	80027d4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8000baa:	2110      	movs	r1, #16
 8000bac:	4859      	ldr	r0, [pc, #356]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000bae:	f001 fdf9 	bl	80027a4 <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_EXTI_Callback+0x78>
			keyPressed = 1;
 8000bb8:	4b57      	ldr	r3, [pc, #348]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	e014      	b.n	8000bea <HAL_GPIO_EXTI_Callback+0xa2>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	4854      	ldr	r0, [pc, #336]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000bc4:	f001 fdee 	bl	80027a4 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_EXTI_Callback+0x8e>
			keyPressed = 4;
 8000bce:	4b52      	ldr	r3, [pc, #328]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	e009      	b.n	8000bea <HAL_GPIO_EXTI_Callback+0xa2>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	484e      	ldr	r0, [pc, #312]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000bda:	f001 fde3 	bl	80027a4 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <HAL_GPIO_EXTI_Callback+0xa2>
			keyPressed = 7;
 8000be4:	4b4c      	ldr	r3, [pc, #304]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000be6:	2207      	movs	r2, #7
 8000be8:	701a      	strb	r2, [r3, #0]

		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2120      	movs	r1, #32
 8000bee:	4849      	ldr	r0, [pc, #292]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000bf0:	f001 fdf0 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	4846      	ldr	r0, [pc, #280]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000bfa:	f001 fdeb 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	4844      	ldr	r0, [pc, #272]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c04:	f001 fde6 	bl	80027d4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4842      	ldr	r0, [pc, #264]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c0c:	f001 fdca 	bl	80027a4 <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_EXTI_Callback+0xd6>
			keyPressed = 2;
 8000c16:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e014      	b.n	8000c48 <HAL_GPIO_EXTI_Callback+0x100>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8000c1e:	2108      	movs	r1, #8
 8000c20:	483c      	ldr	r0, [pc, #240]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c22:	f001 fdbf 	bl	80027a4 <HAL_GPIO_ReadPin>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_EXTI_Callback+0xec>
			keyPressed = 5;
 8000c2c:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000c2e:	2205      	movs	r2, #5
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	e009      	b.n	8000c48 <HAL_GPIO_EXTI_Callback+0x100>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8000c34:	2104      	movs	r1, #4
 8000c36:	4837      	ldr	r0, [pc, #220]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c38:	f001 fdb4 	bl	80027a4 <HAL_GPIO_ReadPin>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <HAL_GPIO_EXTI_Callback+0x100>
			keyPressed = 8;
 8000c42:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000c44:	2208      	movs	r2, #8
 8000c46:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2120      	movs	r1, #32
 8000c4c:	4831      	ldr	r0, [pc, #196]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c4e:	f001 fdc1 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2140      	movs	r1, #64	; 0x40
 8000c56:	482f      	ldr	r0, [pc, #188]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c58:	f001 fdbc 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	482c      	ldr	r0, [pc, #176]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c62:	f001 fdb7 	bl	80027d4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8000c66:	2110      	movs	r1, #16
 8000c68:	482a      	ldr	r0, [pc, #168]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c6a:	f001 fd9b 	bl	80027a4 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_EXTI_Callback+0x134>
			keyPressed = 3;
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000c76:	2203      	movs	r2, #3
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e014      	b.n	8000ca6 <HAL_GPIO_EXTI_Callback+0x15e>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4825      	ldr	r0, [pc, #148]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c80:	f001 fd90 	bl	80027a4 <HAL_GPIO_ReadPin>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_EXTI_Callback+0x14a>
			keyPressed = 6;
 8000c8a:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000c8c:	2206      	movs	r2, #6
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e009      	b.n	8000ca6 <HAL_GPIO_EXTI_Callback+0x15e>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8000c92:	2104      	movs	r1, #4
 8000c94:	481f      	ldr	r0, [pc, #124]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c96:	f001 fd85 	bl	80027a4 <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <HAL_GPIO_EXTI_Callback+0x15e>
			keyPressed = 9;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000ca2:	2209      	movs	r2, #9
 8000ca4:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2120      	movs	r1, #32
 8000caa:	481a      	ldr	r0, [pc, #104]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000cac:	f001 fd92 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2140      	movs	r1, #64	; 0x40
 8000cb4:	4817      	ldr	r0, [pc, #92]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000cb6:	f001 fd8d 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4815      	ldr	r0, [pc, #84]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000cc0:	f001 fd88 	bl	80027d4 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000cc6:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000cc8:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000cd0:	490f      	ldr	r1, [pc, #60]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000cd2:	4810      	ldr	r0, [pc, #64]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000cd4:	f001 fbe4 	bl	80024a0 <HAL_GPIO_Init>

		W25qxx_ReadSector(passwordRead, pageNumber*9+keyPressed, 0, 256);
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000ce4:	7812      	ldrb	r2, [r2, #0]
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	1899      	adds	r1, r3, r2
 8000cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cee:	2200      	movs	r2, #0
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000cf2:	f001 f9a3 	bl	800203c <W25qxx_ReadSector>

		previousMillis = HAL_GetTick();
 8000cf6:	f001 fa93 	bl	8002220 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000cfe:	601a      	str	r2, [r3, #0]
	}

}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000208 	.word	0x20000208
 8000d0c:	20000204 	.word	0x20000204
 8000d10:	200001ec 	.word	0x200001ec
 8000d14:	40020000 	.word	0x40020000
 8000d18:	20000200 	.word	0x20000200
 8000d1c:	10110000 	.word	0x10110000
 8000d20:	20000214 	.word	0x20000214
 8000d24:	2000068c 	.word	0x2000068c

08000d28 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <MX_SPI3_Init+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d84:	220a      	movs	r2, #10
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_SPI3_Init+0x64>)
 8000d8a:	f004 f855 	bl	8004e38 <HAL_SPI_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000d94:	f7ff ffc8 	bl	8000d28 <Error_Handler>
  }

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2000088c 	.word	0x2000088c
 8000da0:	40003c00 	.word	0x40003c00

08000da4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <HAL_SPI_MspInit+0x84>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d12b      	bne.n	8000e1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000dfe:	2338      	movs	r3, #56	; 0x38
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e0e:	2306      	movs	r3, #6
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_SPI_MspInit+0x8c>)
 8000e1a:	f001 fb41 	bl	80024a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40003c00 	.word	0x40003c00
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400

08000e34 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000e3a:	f000 fb85 	bl	8001548 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e3e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e42:	2201      	movs	r2, #1
 8000e44:	2178      	movs	r1, #120	; 0x78
 8000e46:	485b      	ldr	r0, [pc, #364]	; (8000fb4 <SSD1306_Init+0x180>)
 8000e48:	f001 ff2c 	bl	8002ca4 <HAL_I2C_IsDeviceReady>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e0a9      	b.n	8000faa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000e56:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000e5a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e5c:	e002      	b.n	8000e64 <SSD1306_Init+0x30>
		p--;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f9      	bne.n	8000e5e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e6a:	22ae      	movs	r2, #174	; 0xae
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2078      	movs	r0, #120	; 0x78
 8000e70:	f000 fbc6 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000e74:	2220      	movs	r2, #32
 8000e76:	2100      	movs	r1, #0
 8000e78:	2078      	movs	r0, #120	; 0x78
 8000e7a:	f000 fbc1 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e7e:	2210      	movs	r2, #16
 8000e80:	2100      	movs	r1, #0
 8000e82:	2078      	movs	r0, #120	; 0x78
 8000e84:	f000 fbbc 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e88:	22b0      	movs	r2, #176	; 0xb0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2078      	movs	r0, #120	; 0x78
 8000e8e:	f000 fbb7 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000e92:	22c8      	movs	r2, #200	; 0xc8
 8000e94:	2100      	movs	r1, #0
 8000e96:	2078      	movs	r0, #120	; 0x78
 8000e98:	f000 fbb2 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2078      	movs	r0, #120	; 0x78
 8000ea2:	f000 fbad 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2078      	movs	r0, #120	; 0x78
 8000eac:	f000 fba8 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000eb0:	2240      	movs	r2, #64	; 0x40
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2078      	movs	r0, #120	; 0x78
 8000eb6:	f000 fba3 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000eba:	2281      	movs	r2, #129	; 0x81
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2078      	movs	r0, #120	; 0x78
 8000ec0:	f000 fb9e 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000ec4:	22ff      	movs	r2, #255	; 0xff
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2078      	movs	r0, #120	; 0x78
 8000eca:	f000 fb99 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000ece:	22a1      	movs	r2, #161	; 0xa1
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2078      	movs	r0, #120	; 0x78
 8000ed4:	f000 fb94 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000ed8:	22a6      	movs	r2, #166	; 0xa6
 8000eda:	2100      	movs	r1, #0
 8000edc:	2078      	movs	r0, #120	; 0x78
 8000ede:	f000 fb8f 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000ee2:	22a8      	movs	r2, #168	; 0xa8
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2078      	movs	r0, #120	; 0x78
 8000ee8:	f000 fb8a 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000eec:	223f      	movs	r2, #63	; 0x3f
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2078      	movs	r0, #120	; 0x78
 8000ef2:	f000 fb85 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ef6:	22a4      	movs	r2, #164	; 0xa4
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2078      	movs	r0, #120	; 0x78
 8000efc:	f000 fb80 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f00:	22d3      	movs	r2, #211	; 0xd3
 8000f02:	2100      	movs	r1, #0
 8000f04:	2078      	movs	r0, #120	; 0x78
 8000f06:	f000 fb7b 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2078      	movs	r0, #120	; 0x78
 8000f10:	f000 fb76 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f14:	22d5      	movs	r2, #213	; 0xd5
 8000f16:	2100      	movs	r1, #0
 8000f18:	2078      	movs	r0, #120	; 0x78
 8000f1a:	f000 fb71 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f1e:	22f0      	movs	r2, #240	; 0xf0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2078      	movs	r0, #120	; 0x78
 8000f24:	f000 fb6c 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000f28:	22d9      	movs	r2, #217	; 0xd9
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2078      	movs	r0, #120	; 0x78
 8000f2e:	f000 fb67 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000f32:	2222      	movs	r2, #34	; 0x22
 8000f34:	2100      	movs	r1, #0
 8000f36:	2078      	movs	r0, #120	; 0x78
 8000f38:	f000 fb62 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f3c:	22da      	movs	r2, #218	; 0xda
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2078      	movs	r0, #120	; 0x78
 8000f42:	f000 fb5d 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f46:	2212      	movs	r2, #18
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2078      	movs	r0, #120	; 0x78
 8000f4c:	f000 fb58 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f50:	22db      	movs	r2, #219	; 0xdb
 8000f52:	2100      	movs	r1, #0
 8000f54:	2078      	movs	r0, #120	; 0x78
 8000f56:	f000 fb53 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2078      	movs	r0, #120	; 0x78
 8000f60:	f000 fb4e 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f64:	228d      	movs	r2, #141	; 0x8d
 8000f66:	2100      	movs	r1, #0
 8000f68:	2078      	movs	r0, #120	; 0x78
 8000f6a:	f000 fb49 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000f6e:	2214      	movs	r2, #20
 8000f70:	2100      	movs	r1, #0
 8000f72:	2078      	movs	r0, #120	; 0x78
 8000f74:	f000 fb44 	bl	8001600 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000f78:	22af      	movs	r2, #175	; 0xaf
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2078      	movs	r0, #120	; 0x78
 8000f7e:	f000 fb3f 	bl	8001600 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000f82:	222e      	movs	r2, #46	; 0x2e
 8000f84:	2100      	movs	r1, #0
 8000f86:	2078      	movs	r0, #120	; 0x78
 8000f88:	f000 fb3a 	bl	8001600 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f000 f843 	bl	8001018 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000f92:	f000 f813 	bl	8000fbc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <SSD1306_Init+0x184>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <SSD1306_Init+0x184>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SSD1306_Init+0x184>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000630 	.word	0x20000630
 8000fb8:	20000618 	.word	0x20000618

08000fbc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	e01d      	b.n	8001004 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	3b50      	subs	r3, #80	; 0x50
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2078      	movs	r0, #120	; 0x78
 8000fd4:	f000 fb14 	bl	8001600 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2078      	movs	r0, #120	; 0x78
 8000fde:	f000 fb0f 	bl	8001600 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2078      	movs	r0, #120	; 0x78
 8000fe8:	f000 fb0a 	bl	8001600 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	01db      	lsls	r3, r3, #7
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <SSD1306_UpdateScreen+0x58>)
 8000ff2:	441a      	add	r2, r3
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	2140      	movs	r1, #64	; 0x40
 8000ff8:	2078      	movs	r0, #120	; 0x78
 8000ffa:	f000 fab9 	bl	8001570 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	3301      	adds	r3, #1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b07      	cmp	r3, #7
 8001008:	d9de      	bls.n	8000fc8 <SSD1306_UpdateScreen+0xc>
	}
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000218 	.word	0x20000218

08001018 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <SSD1306_Fill+0x14>
 8001028:	2300      	movs	r3, #0
 800102a:	e000      	b.n	800102e <SSD1306_Fill+0x16>
 800102c:	23ff      	movs	r3, #255	; 0xff
 800102e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001032:	4619      	mov	r1, r3
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <SSD1306_Fill+0x2c>)
 8001036:	f008 f9a0 	bl	800937a <memset>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000218 	.word	0x20000218

08001048 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
 8001052:	460b      	mov	r3, r1
 8001054:	80bb      	strh	r3, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	70fb      	strb	r3, [r7, #3]
	if (
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2b7f      	cmp	r3, #127	; 0x7f
 800105e:	d848      	bhi.n	80010f2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	2b3f      	cmp	r3, #63	; 0x3f
 8001064:	d845      	bhi.n	80010f2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <SSD1306_DrawPixel+0xb8>)
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d11a      	bne.n	80010b8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001082:	88fa      	ldrh	r2, [r7, #6]
 8001084:	88bb      	ldrh	r3, [r7, #4]
 8001086:	08db      	lsrs	r3, r3, #3
 8001088:	b298      	uxth	r0, r3
 800108a:	4603      	mov	r3, r0
 800108c:	01db      	lsls	r3, r3, #7
 800108e:	4413      	add	r3, r2
 8001090:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <SSD1306_DrawPixel+0xbc>)
 8001092:	5cd3      	ldrb	r3, [r2, r3]
 8001094:	b25a      	sxtb	r2, r3
 8001096:	88bb      	ldrh	r3, [r7, #4]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	2101      	movs	r1, #1
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b259      	sxtb	r1, r3
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	4603      	mov	r3, r0
 80010ac:	01db      	lsls	r3, r3, #7
 80010ae:	4413      	add	r3, r2
 80010b0:	b2c9      	uxtb	r1, r1
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <SSD1306_DrawPixel+0xbc>)
 80010b4:	54d1      	strb	r1, [r2, r3]
 80010b6:	e01d      	b.n	80010f4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010b8:	88fa      	ldrh	r2, [r7, #6]
 80010ba:	88bb      	ldrh	r3, [r7, #4]
 80010bc:	08db      	lsrs	r3, r3, #3
 80010be:	b298      	uxth	r0, r3
 80010c0:	4603      	mov	r3, r0
 80010c2:	01db      	lsls	r3, r3, #7
 80010c4:	4413      	add	r3, r2
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <SSD1306_DrawPixel+0xbc>)
 80010c8:	5cd3      	ldrb	r3, [r2, r3]
 80010ca:	b25a      	sxtb	r2, r3
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	2101      	movs	r1, #1
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	4013      	ands	r3, r2
 80010e0:	b259      	sxtb	r1, r3
 80010e2:	88fa      	ldrh	r2, [r7, #6]
 80010e4:	4603      	mov	r3, r0
 80010e6:	01db      	lsls	r3, r3, #7
 80010e8:	4413      	add	r3, r2
 80010ea:	b2c9      	uxtb	r1, r1
 80010ec:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SSD1306_DrawPixel+0xbc>)
 80010ee:	54d1      	strb	r1, [r2, r3]
 80010f0:	e000      	b.n	80010f4 <SSD1306_DrawPixel+0xac>
		return;
 80010f2:	bf00      	nop
	}
}
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000618 	.word	0x20000618
 8001104:	20000218 	.word	0x20000218

08001108 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	80fb      	strh	r3, [r7, #6]
 8001114:	4613      	mov	r3, r2
 8001116:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001118:	4a05      	ldr	r2, [pc, #20]	; (8001130 <SSD1306_GotoXY+0x28>)
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <SSD1306_GotoXY+0x28>)
 8001120:	88bb      	ldrh	r3, [r7, #4]
 8001122:	8053      	strh	r3, [r2, #2]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	20000618 	.word	0x20000618

08001134 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001144:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <SSD1306_Putc+0xfc>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
	if (
 8001150:	2b7f      	cmp	r3, #127	; 0x7f
 8001152:	dc07      	bgt.n	8001164 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001154:	4b36      	ldr	r3, [pc, #216]	; (8001230 <SSD1306_Putc+0xfc>)
 8001156:	885b      	ldrh	r3, [r3, #2]
 8001158:	461a      	mov	r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	785b      	ldrb	r3, [r3, #1]
 800115e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001160:	2b3f      	cmp	r3, #63	; 0x3f
 8001162:	dd01      	ble.n	8001168 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001164:	2300      	movs	r3, #0
 8001166:	e05e      	b.n	8001226 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e04b      	b.n	8001206 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	3b20      	subs	r3, #32
 8001176:	6839      	ldr	r1, [r7, #0]
 8001178:	7849      	ldrb	r1, [r1, #1]
 800117a:	fb01 f303 	mul.w	r3, r1, r3
 800117e:	4619      	mov	r1, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	440b      	add	r3, r1
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	e030      	b.n	80011f4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d010      	beq.n	80011c4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <SSD1306_Putc+0xfc>)
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b298      	uxth	r0, r3
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <SSD1306_Putc+0xfc>)
 80011b0:	885a      	ldrh	r2, [r3, #2]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	79ba      	ldrb	r2, [r7, #6]
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff ff43 	bl	8001048 <SSD1306_DrawPixel>
 80011c2:	e014      	b.n	80011ee <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <SSD1306_Putc+0xfc>)
 80011c6:	881a      	ldrh	r2, [r3, #0]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	b298      	uxth	r0, r3
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <SSD1306_Putc+0xfc>)
 80011d2:	885a      	ldrh	r2, [r3, #2]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4413      	add	r3, r2
 80011da:	b299      	uxth	r1, r3
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bf0c      	ite	eq
 80011e2:	2301      	moveq	r3, #1
 80011e4:	2300      	movne	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	f7ff ff2d 	bl	8001048 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	3301      	adds	r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d3c8      	bcc.n	8001192 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3301      	adds	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	785b      	ldrb	r3, [r3, #1]
 800120a:	461a      	mov	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	4293      	cmp	r3, r2
 8001210:	d3ad      	bcc.n	800116e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <SSD1306_Putc+0xfc>)
 8001214:	881a      	ldrh	r2, [r3, #0]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <SSD1306_Putc+0xfc>)
 8001222:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001224:	79fb      	ldrb	r3, [r7, #7]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000618 	.word	0x20000618

08001234 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	4613      	mov	r3, r2
 8001240:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001242:	e012      	b.n	800126a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	79fa      	ldrb	r2, [r7, #7]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff71 	bl	8001134 <SSD1306_Putc>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d002      	beq.n	8001264 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	e008      	b.n	8001276 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1e8      	bne.n	8001244 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	781b      	ldrb	r3, [r3, #0]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800127e:	b590      	push	{r4, r7, lr}
 8001280:	b087      	sub	sp, #28
 8001282:	af00      	add	r7, sp, #0
 8001284:	4604      	mov	r4, r0
 8001286:	4608      	mov	r0, r1
 8001288:	4611      	mov	r1, r2
 800128a:	461a      	mov	r2, r3
 800128c:	4623      	mov	r3, r4
 800128e:	80fb      	strh	r3, [r7, #6]
 8001290:	4603      	mov	r3, r0
 8001292:	80bb      	strh	r3, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	2b7f      	cmp	r3, #127	; 0x7f
 80012a0:	d901      	bls.n	80012a6 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80012a2:	237f      	movs	r3, #127	; 0x7f
 80012a4:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	2b7f      	cmp	r3, #127	; 0x7f
 80012aa:	d901      	bls.n	80012b0 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80012ac:	237f      	movs	r3, #127	; 0x7f
 80012ae:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	2b3f      	cmp	r3, #63	; 0x3f
 80012b4:	d901      	bls.n	80012ba <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80012b6:	233f      	movs	r3, #63	; 0x3f
 80012b8:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80012ba:	883b      	ldrh	r3, [r7, #0]
 80012bc:	2b3f      	cmp	r3, #63	; 0x3f
 80012be:	d901      	bls.n	80012c4 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80012c0:	233f      	movs	r3, #63	; 0x3f
 80012c2:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d205      	bcs.n	80012d8 <SSD1306_DrawLine+0x5a>
 80012cc:	887a      	ldrh	r2, [r7, #2]
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	e004      	b.n	80012e2 <SSD1306_DrawLine+0x64>
 80012d8:	88fa      	ldrh	r2, [r7, #6]
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	b29b      	uxth	r3, r3
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80012e4:	88ba      	ldrh	r2, [r7, #4]
 80012e6:	883b      	ldrh	r3, [r7, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d205      	bcs.n	80012f8 <SSD1306_DrawLine+0x7a>
 80012ec:	883a      	ldrh	r2, [r7, #0]
 80012ee:	88bb      	ldrh	r3, [r7, #4]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	e004      	b.n	8001302 <SSD1306_DrawLine+0x84>
 80012f8:	88ba      	ldrh	r2, [r7, #4]
 80012fa:	883b      	ldrh	r3, [r7, #0]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b21b      	sxth	r3, r3
 8001302:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001304:	88fa      	ldrh	r2, [r7, #6]
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	429a      	cmp	r2, r3
 800130a:	d201      	bcs.n	8001310 <SSD1306_DrawLine+0x92>
 800130c:	2301      	movs	r3, #1
 800130e:	e001      	b.n	8001314 <SSD1306_DrawLine+0x96>
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001316:	88ba      	ldrh	r2, [r7, #4]
 8001318:	883b      	ldrh	r3, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d201      	bcs.n	8001322 <SSD1306_DrawLine+0xa4>
 800131e:	2301      	movs	r3, #1
 8001320:	e001      	b.n	8001326 <SSD1306_DrawLine+0xa8>
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001328:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800132c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	dd06      	ble.n	8001342 <SSD1306_DrawLine+0xc4>
 8001334:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001338:	0fda      	lsrs	r2, r3, #31
 800133a:	4413      	add	r3, r2
 800133c:	105b      	asrs	r3, r3, #1
 800133e:	b21b      	sxth	r3, r3
 8001340:	e006      	b.n	8001350 <SSD1306_DrawLine+0xd2>
 8001342:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001346:	425b      	negs	r3, r3
 8001348:	0fda      	lsrs	r2, r3, #31
 800134a:	4413      	add	r3, r2
 800134c:	105b      	asrs	r3, r3, #1
 800134e:	b21b      	sxth	r3, r3
 8001350:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001352:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d129      	bne.n	80013ae <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800135a:	883a      	ldrh	r2, [r7, #0]
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	d205      	bcs.n	800136e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001362:	883b      	ldrh	r3, [r7, #0]
 8001364:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001366:	88bb      	ldrh	r3, [r7, #4]
 8001368:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800136a:	893b      	ldrh	r3, [r7, #8]
 800136c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	429a      	cmp	r2, r3
 8001374:	d205      	bcs.n	8001382 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800137e:	893b      	ldrh	r3, [r7, #8]
 8001380:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001382:	88bb      	ldrh	r3, [r7, #4]
 8001384:	82bb      	strh	r3, [r7, #20]
 8001386:	e00c      	b.n	80013a2 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001388:	8ab9      	ldrh	r1, [r7, #20]
 800138a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe59 	bl	8001048 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001396:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800139a:	b29b      	uxth	r3, r3
 800139c:	3301      	adds	r3, #1
 800139e:	b29b      	uxth	r3, r3
 80013a0:	82bb      	strh	r3, [r7, #20]
 80013a2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013a6:	883b      	ldrh	r3, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	dded      	ble.n	8001388 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80013ac:	e05f      	b.n	800146e <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80013ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d129      	bne.n	800140a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80013b6:	883a      	ldrh	r2, [r7, #0]
 80013b8:	88bb      	ldrh	r3, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d205      	bcs.n	80013ca <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80013be:	883b      	ldrh	r3, [r7, #0]
 80013c0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80013c2:	88bb      	ldrh	r3, [r7, #4]
 80013c4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80013c6:	893b      	ldrh	r3, [r7, #8]
 80013c8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d205      	bcs.n	80013de <SSD1306_DrawLine+0x160>
			tmp = x1;
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80013da:	893b      	ldrh	r3, [r7, #8]
 80013dc:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	82bb      	strh	r3, [r7, #20]
 80013e2:	e00c      	b.n	80013fe <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80013e4:	8abb      	ldrh	r3, [r7, #20]
 80013e6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80013ea:	88b9      	ldrh	r1, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe2b 	bl	8001048 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80013f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3301      	adds	r3, #1
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	82bb      	strh	r3, [r7, #20]
 80013fe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	429a      	cmp	r2, r3
 8001406:	dded      	ble.n	80013e4 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001408:	e031      	b.n	800146e <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800140a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800140e:	88b9      	ldrh	r1, [r7, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fe18 	bl	8001048 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001418:	88fa      	ldrh	r2, [r7, #6]
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	429a      	cmp	r2, r3
 800141e:	d103      	bne.n	8001428 <SSD1306_DrawLine+0x1aa>
 8001420:	88ba      	ldrh	r2, [r7, #4]
 8001422:	883b      	ldrh	r3, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d021      	beq.n	800146c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001428:	8afb      	ldrh	r3, [r7, #22]
 800142a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800142c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001430:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001434:	425b      	negs	r3, r3
 8001436:	429a      	cmp	r2, r3
 8001438:	dd08      	ble.n	800144c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800143a:	8afa      	ldrh	r2, [r7, #22]
 800143c:	8a3b      	ldrh	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	b29b      	uxth	r3, r3
 8001442:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001444:	89fa      	ldrh	r2, [r7, #14]
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4413      	add	r3, r2
 800144a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 800144c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001450:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	dad8      	bge.n	800140a <SSD1306_DrawLine+0x18c>
			err += dx;
 8001458:	8afa      	ldrh	r2, [r7, #22]
 800145a:	8a7b      	ldrh	r3, [r7, #18]
 800145c:	4413      	add	r3, r2
 800145e:	b29b      	uxth	r3, r3
 8001460:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001462:	89ba      	ldrh	r2, [r7, #12]
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800146a:	e7ce      	b.n	800140a <SSD1306_DrawLine+0x18c>
			break;
 800146c:	bf00      	nop
		} 
	}
}
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}

08001474 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b085      	sub	sp, #20
 8001478:	af02      	add	r7, sp, #8
 800147a:	4604      	mov	r4, r0
 800147c:	4608      	mov	r0, r1
 800147e:	4611      	mov	r1, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4623      	mov	r3, r4
 8001484:	80fb      	strh	r3, [r7, #6]
 8001486:	4603      	mov	r3, r0
 8001488:	80bb      	strh	r3, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]
 800148e:	4613      	mov	r3, r2
 8001490:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	2b7f      	cmp	r3, #127	; 0x7f
 8001496:	d853      	bhi.n	8001540 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	2b3f      	cmp	r3, #63	; 0x3f
 800149c:	d850      	bhi.n	8001540 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800149e:	88fa      	ldrh	r2, [r7, #6]
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4413      	add	r3, r2
 80014a4:	2b7f      	cmp	r3, #127	; 0x7f
 80014a6:	dd03      	ble.n	80014b0 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80014ae:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80014b0:	88ba      	ldrh	r2, [r7, #4]
 80014b2:	883b      	ldrh	r3, [r7, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	2b3f      	cmp	r3, #63	; 0x3f
 80014b8:	dd03      	ble.n	80014c2 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80014ba:	88bb      	ldrh	r3, [r7, #4]
 80014bc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80014c0:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 80014c2:	88fa      	ldrh	r2, [r7, #6]
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	4413      	add	r3, r2
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	88bc      	ldrh	r4, [r7, #4]
 80014cc:	88b9      	ldrh	r1, [r7, #4]
 80014ce:	88f8      	ldrh	r0, [r7, #6]
 80014d0:	7e3b      	ldrb	r3, [r7, #24]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4623      	mov	r3, r4
 80014d6:	f7ff fed2 	bl	800127e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 80014da:	88ba      	ldrh	r2, [r7, #4]
 80014dc:	883b      	ldrh	r3, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	b299      	uxth	r1, r3
 80014e2:	88fa      	ldrh	r2, [r7, #6]
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	4413      	add	r3, r2
 80014e8:	b29c      	uxth	r4, r3
 80014ea:	88ba      	ldrh	r2, [r7, #4]
 80014ec:	883b      	ldrh	r3, [r7, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	88f8      	ldrh	r0, [r7, #6]
 80014f4:	7e3b      	ldrb	r3, [r7, #24]
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	4622      	mov	r2, r4
 80014fc:	f7ff febf 	bl	800127e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001500:	88ba      	ldrh	r2, [r7, #4]
 8001502:	883b      	ldrh	r3, [r7, #0]
 8001504:	4413      	add	r3, r2
 8001506:	b29c      	uxth	r4, r3
 8001508:	88fa      	ldrh	r2, [r7, #6]
 800150a:	88b9      	ldrh	r1, [r7, #4]
 800150c:	88f8      	ldrh	r0, [r7, #6]
 800150e:	7e3b      	ldrb	r3, [r7, #24]
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	4623      	mov	r3, r4
 8001514:	f7ff feb3 	bl	800127e <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001518:	88fa      	ldrh	r2, [r7, #6]
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	4413      	add	r3, r2
 800151e:	b298      	uxth	r0, r3
 8001520:	88fa      	ldrh	r2, [r7, #6]
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	4413      	add	r3, r2
 8001526:	b29c      	uxth	r4, r3
 8001528:	88ba      	ldrh	r2, [r7, #4]
 800152a:	883b      	ldrh	r3, [r7, #0]
 800152c:	4413      	add	r3, r2
 800152e:	b29a      	uxth	r2, r3
 8001530:	88b9      	ldrh	r1, [r7, #4]
 8001532:	7e3b      	ldrb	r3, [r7, #24]
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4613      	mov	r3, r2
 8001538:	4622      	mov	r2, r4
 800153a:	f7ff fea0 	bl	800127e <SSD1306_DrawLine>
 800153e:	e000      	b.n	8001542 <SSD1306_DrawRectangle+0xce>
		return;
 8001540:	bf00      	nop
}
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bd90      	pop	{r4, r7, pc}

08001548 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <ssd1306_I2C_Init+0x24>)
 8001550:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001552:	e002      	b.n	800155a <ssd1306_I2C_Init+0x12>
		p--;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
	while(p>0)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f9      	bne.n	8001554 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	0003d090 	.word	0x0003d090

08001570 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b0c7      	sub	sp, #284	; 0x11c
 8001574:	af02      	add	r7, sp, #8
 8001576:	4604      	mov	r4, r0
 8001578:	4608      	mov	r0, r1
 800157a:	4639      	mov	r1, r7
 800157c:	600a      	str	r2, [r1, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	1dfb      	adds	r3, r7, #7
 8001582:	4622      	mov	r2, r4
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	1dbb      	adds	r3, r7, #6
 8001588:	4602      	mov	r2, r0
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	460a      	mov	r2, r1
 8001590:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	1dba      	adds	r2, r7, #6
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015a2:	e010      	b.n	80015c6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80015a4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015a8:	463a      	mov	r2, r7
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	441a      	add	r2, r3
 80015ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015b2:	3301      	adds	r3, #1
 80015b4:	7811      	ldrb	r1, [r2, #0]
 80015b6:	f107 020c 	add.w	r2, r7, #12
 80015ba:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80015bc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015c0:	3301      	adds	r3, #1
 80015c2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015c6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	1d3a      	adds	r2, r7, #4
 80015ce:	8812      	ldrh	r2, [r2, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8e7      	bhi.n	80015a4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b299      	uxth	r1, r3
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	b298      	uxth	r0, r3
 80015e2:	f107 020c 	add.w	r2, r7, #12
 80015e6:	230a      	movs	r3, #10
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	4603      	mov	r3, r0
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <ssd1306_I2C_WriteMulti+0x8c>)
 80015ee:	f001 fa5b 	bl	8002aa8 <HAL_I2C_Master_Transmit>
}
 80015f2:	bf00      	nop
 80015f4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd90      	pop	{r4, r7, pc}
 80015fc:	20000630 	.word	0x20000630

08001600 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af02      	add	r7, sp, #8
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	460b      	mov	r3, r1
 800160c:	71bb      	strb	r3, [r7, #6]
 800160e:	4613      	mov	r3, r2
 8001610:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001616:	797b      	ldrb	r3, [r7, #5]
 8001618:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	b299      	uxth	r1, r3
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	230a      	movs	r3, #10
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2302      	movs	r3, #2
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <ssd1306_I2C_Write+0x38>)
 800162a:	f001 fa3d 	bl	8002aa8 <HAL_I2C_Master_Transmit>
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000630 	.word	0x20000630

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <HAL_MspInit+0x4c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_MspInit+0x4c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e0:	f000 fd8a 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80016ec:	2004      	movs	r0, #4
 80016ee:	f001 f88b 	bl	8002808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80016fa:	2008      	movs	r0, #8
 80016fc:	f001 f884 	bl	8002808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001708:	2010      	movs	r0, #16
 800170a:	f001 f87d 	bl	8002808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM2_IRQHandler+0x10>)
 800171a:	f004 f9ca 	bl	8005ab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200008e4 	.word	0x200008e4

08001728 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <OTG_FS_IRQHandler+0x10>)
 800172e:	f001 ff40 	bl	80035b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000e20 	.word	0x20000e20

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f007 fdc0 	bl	80092f0 <__errno>
 8001770:	4602      	mov	r2, r0
 8001772:	230c      	movs	r3, #12
 8001774:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20020000 	.word	0x20020000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20000620 	.word	0x20000620
 80017a4:	20001230 	.word	0x20001230

080017a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <SystemInit+0x28>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <SystemInit+0x28>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SystemInit+0x28>)
 80017be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017c2:	609a      	str	r2, [r3, #8]
#endif
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2224      	movs	r2, #36	; 0x24
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f007 fdc9 	bl	800937a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_TIM2_Init+0xa4>)
 80017f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_TIM2_Init+0xa4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_TIM2_Init+0xa4>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_TIM2_Init+0xa4>)
 8001806:	f04f 32ff 	mov.w	r2, #4294967295
 800180a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_TIM2_Init+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_TIM2_Init+0xa4>)
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001818:	2303      	movs	r3, #3
 800181a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800181c:	2302      	movs	r3, #2
 800181e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001820:	2301      	movs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001828:	230a      	movs	r3, #10
 800182a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800182c:	2302      	movs	r3, #2
 800182e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001830:	2301      	movs	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001838:	230a      	movs	r3, #10
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	4619      	mov	r1, r3
 8001842:	480d      	ldr	r0, [pc, #52]	; (8001878 <MX_TIM2_Init+0xa4>)
 8001844:	f004 f84c 	bl	80058e0 <HAL_TIM_Encoder_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800184e:	f7ff fa6b 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	4619      	mov	r1, r3
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <MX_TIM2_Init+0xa4>)
 8001860:	f004 fafe 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800186a:	f7ff fa5d 	bl	8000d28 <Error_Handler>
  }

}
 800186e:	bf00      	nop
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200008e4 	.word	0x200008e4

0800187c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189c:	d133      	bne.n	8001906 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_TIM_Encoder_MspInit+0x94>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <HAL_TIM_Encoder_MspInit+0x94>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_TIM_Encoder_MspInit+0x94>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_TIM_Encoder_MspInit+0x94>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a13      	ldr	r2, [pc, #76]	; (8001910 <HAL_TIM_Encoder_MspInit+0x94>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_TIM_Encoder_MspInit+0x94>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018d6:	2303      	movs	r3, #3
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018de:	2301      	movs	r3, #1
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018e6:	2301      	movs	r3, #1
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <HAL_TIM_Encoder_MspInit+0x98>)
 80018f2:	f000 fdd5 	bl	80024a0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	201c      	movs	r0, #28
 80018fc:	f000 fd99 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001900:	201c      	movs	r0, #28
 8001902:	f000 fdb2 	bl	800246a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000

08001918 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af02      	add	r7, sp, #8
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001922:	f107 020f 	add.w	r2, r7, #15
 8001926:	1df9      	adds	r1, r7, #7
 8001928:	2364      	movs	r3, #100	; 0x64
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	4804      	ldr	r0, [pc, #16]	; (8001940 <W25qxx_Spi+0x28>)
 8001930:	f003 fd23 	bl	800537a <HAL_SPI_TransmitReceive>
	return ret;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000088c 	.word	0x2000088c

08001944 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001960:	4813      	ldr	r0, [pc, #76]	; (80019b0 <W25qxx_ReadID+0x6c>)
 8001962:	f000 ff37 	bl	80027d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001966:	209f      	movs	r0, #159	; 0x9f
 8001968:	f7ff ffd6 	bl	8001918 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800196c:	20a5      	movs	r0, #165	; 0xa5
 800196e:	f7ff ffd3 	bl	8001918 <W25qxx_Spi>
 8001972:	4603      	mov	r3, r0
 8001974:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001976:	20a5      	movs	r0, #165	; 0xa5
 8001978:	f7ff ffce 	bl	8001918 <W25qxx_Spi>
 800197c:	4603      	mov	r3, r0
 800197e:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001980:	20a5      	movs	r0, #165	; 0xa5
 8001982:	f7ff ffc9 	bl	8001918 <W25qxx_Spi>
 8001986:	4603      	mov	r3, r0
 8001988:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800198a:	2201      	movs	r2, #1
 800198c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <W25qxx_ReadID+0x6c>)
 8001992:	f000 ff1f 	bl	80027d4 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	4313      	orrs	r3, r2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
	return Temp;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40020000 	.word	0x40020000

080019b4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019c0:	4816      	ldr	r0, [pc, #88]	; (8001a1c <W25qxx_ReadUniqID+0x68>)
 80019c2:	f000 ff07 	bl	80027d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80019c6:	204b      	movs	r0, #75	; 0x4b
 80019c8:	f7ff ffa6 	bl	8001918 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	71fb      	strb	r3, [r7, #7]
 80019d0:	e005      	b.n	80019de <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80019d2:	20a5      	movs	r0, #165	; 0xa5
 80019d4:	f7ff ffa0 	bl	8001918 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	3301      	adds	r3, #1
 80019dc:	71fb      	strb	r3, [r7, #7]
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d9f6      	bls.n	80019d2 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	71bb      	strb	r3, [r7, #6]
 80019e8:	e00b      	b.n	8001a02 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80019ea:	79bc      	ldrb	r4, [r7, #6]
 80019ec:	20a5      	movs	r0, #165	; 0xa5
 80019ee:	f7ff ff93 	bl	8001918 <W25qxx_Spi>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <W25qxx_ReadUniqID+0x6c>)
 80019f8:	4423      	add	r3, r4
 80019fa:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	3301      	adds	r3, #1
 8001a00:	71bb      	strb	r3, [r7, #6]
 8001a02:	79bb      	ldrb	r3, [r7, #6]
 8001a04:	2b07      	cmp	r3, #7
 8001a06:	d9f0      	bls.n	80019ea <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <W25qxx_ReadUniqID+0x68>)
 8001a10:	f000 fee0 	bl	80027d4 <HAL_GPIO_WritePin>
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	20000924 	.word	0x20000924

08001a24 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a2e:	4808      	ldr	r0, [pc, #32]	; (8001a50 <W25qxx_WriteEnable+0x2c>)
 8001a30:	f000 fed0 	bl	80027d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8001a34:	2006      	movs	r0, #6
 8001a36:	f7ff ff6f 	bl	8001918 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a40:	4803      	ldr	r0, [pc, #12]	; (8001a50 <W25qxx_WriteEnable+0x2c>)
 8001a42:	f000 fec7 	bl	80027d4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 fbf6 	bl	8002238 <HAL_Delay>
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40020000 	.word	0x40020000

08001a54 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a68:	481c      	ldr	r0, [pc, #112]	; (8001adc <W25qxx_ReadStatusRegister+0x88>)
 8001a6a:	f000 feb3 	bl	80027d4 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10c      	bne.n	8001a8e <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8001a74:	2005      	movs	r0, #5
 8001a76:	f7ff ff4f 	bl	8001918 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001a7a:	20a5      	movs	r0, #165	; 0xa5
 8001a7c:	f7ff ff4c 	bl	8001918 <W25qxx_Spi>
 8001a80:	4603      	mov	r3, r0
 8001a82:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001a84:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <W25qxx_ReadStatusRegister+0x8c>)
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001a8c:	e01b      	b.n	8001ac6 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d10c      	bne.n	8001aae <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8001a94:	2035      	movs	r0, #53	; 0x35
 8001a96:	f7ff ff3f 	bl	8001918 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001a9a:	20a5      	movs	r0, #165	; 0xa5
 8001a9c:	f7ff ff3c 	bl	8001918 <W25qxx_Spi>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <W25qxx_ReadStatusRegister+0x8c>)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001aac:	e00b      	b.n	8001ac6 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001aae:	2015      	movs	r0, #21
 8001ab0:	f7ff ff32 	bl	8001918 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001ab4:	20a5      	movs	r0, #165	; 0xa5
 8001ab6:	f7ff ff2f 	bl	8001918 <W25qxx_Spi>
 8001aba:	4603      	mov	r3, r0
 8001abc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <W25qxx_ReadStatusRegister+0x8c>)
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001acc:	4803      	ldr	r0, [pc, #12]	; (8001adc <W25qxx_ReadStatusRegister+0x88>)
 8001ace:	f000 fe81 	bl	80027d4 <HAL_GPIO_WritePin>
	return status;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	20000924 	.word	0x20000924

08001ae4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f000 fba5 	bl	8002238 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af4:	480f      	ldr	r0, [pc, #60]	; (8001b34 <W25qxx_WaitForWriteEnd+0x50>)
 8001af6:	f000 fe6d 	bl	80027d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8001afa:	2005      	movs	r0, #5
 8001afc:	f7ff ff0c 	bl	8001918 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001b00:	20a5      	movs	r0, #165	; 0xa5
 8001b02:	f7ff ff09 	bl	8001918 <W25qxx_Spi>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <W25qxx_WaitForWriteEnd+0x54>)
 8001b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f000 fb91 	bl	8002238 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <W25qxx_WaitForWriteEnd+0x54>)
 8001b18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1ed      	bne.n	8001b00 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2a:	4802      	ldr	r0, [pc, #8]	; (8001b34 <W25qxx_WaitForWriteEnd+0x50>)
 8001b2c:	f000 fe52 	bl	80027d4 <HAL_GPIO_WritePin>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40020000 	.word	0x40020000
 8001b38:	20000924 	.word	0x20000924

08001b3c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8001b42:	4b65      	ldr	r3, [pc, #404]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8001b4a:	e002      	b.n	8001b52 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f000 fb73 	bl	8002238 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8001b52:	f000 fb65 	bl	8002220 <HAL_GetTick>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b63      	cmp	r3, #99	; 0x63
 8001b5a:	d9f7      	bls.n	8001b4c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b62:	485e      	ldr	r0, [pc, #376]	; (8001cdc <W25qxx_Init+0x1a0>)
 8001b64:	f000 fe36 	bl	80027d4 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001b68:	2064      	movs	r0, #100	; 0x64
 8001b6a:	f000 fb65 	bl	8002238 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8001b6e:	f7ff fee9 	bl	8001944 <W25qxx_ReadID>
 8001b72:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3b11      	subs	r3, #17
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	d86b      	bhi.n	8001c56 <W25qxx_Init+0x11a>
 8001b7e:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <W25qxx_Init+0x48>)
 8001b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b84:	08001c49 	.word	0x08001c49
 8001b88:	08001c3b 	.word	0x08001c3b
 8001b8c:	08001c2d 	.word	0x08001c2d
 8001b90:	08001c1f 	.word	0x08001c1f
 8001b94:	08001c11 	.word	0x08001c11
 8001b98:	08001c03 	.word	0x08001c03
 8001b9c:	08001bf5 	.word	0x08001bf5
 8001ba0:	08001be5 	.word	0x08001be5
 8001ba4:	08001bd5 	.word	0x08001bd5
 8001ba8:	08001c57 	.word	0x08001c57
 8001bac:	08001c57 	.word	0x08001c57
 8001bb0:	08001c57 	.word	0x08001c57
 8001bb4:	08001c57 	.word	0x08001c57
 8001bb8:	08001c57 	.word	0x08001c57
 8001bbc:	08001c57 	.word	0x08001c57
 8001bc0:	08001bc5 	.word	0x08001bc5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8001bc4:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001bc6:	220a      	movs	r2, #10
 8001bc8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8001bd2:	e046      	b.n	8001c62 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8001bd4:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001bd6:	2209      	movs	r2, #9
 8001bd8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8001bda:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8001be2:	e03e      	b.n	8001c62 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8001be4:	4b3c      	ldr	r3, [pc, #240]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001be6:	2208      	movs	r2, #8
 8001be8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8001bf2:	e036      	b.n	8001c62 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8001bfa:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8001c00:	e02f      	b.n	8001c62 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8001c02:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c04:	2206      	movs	r2, #6
 8001c06:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8001c08:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8001c0e:	e028      	b.n	8001c62 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8001c10:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c12:	2205      	movs	r2, #5
 8001c14:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8001c16:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c18:	2220      	movs	r2, #32
 8001c1a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8001c1c:	e021      	b.n	8001c62 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c20:	2204      	movs	r2, #4
 8001c22:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c26:	2210      	movs	r2, #16
 8001c28:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8001c2a:	e01a      	b.n	8001c62 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c2e:	2203      	movs	r2, #3
 8001c30:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c34:	2208      	movs	r2, #8
 8001c36:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8001c38:	e013      	b.n	8001c62 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c42:	2204      	movs	r2, #4
 8001c44:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8001c46:	e00c      	b.n	8001c62 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c50:	2202      	movs	r2, #2
 8001c52:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8001c54:	e005      	b.n	8001c62 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e036      	b.n	8001cd0 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c68:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c70:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c7a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c82:	6912      	ldr	r2, [r2, #16]
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c8a:	8952      	ldrh	r2, [r2, #10]
 8001c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c92:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001c9c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001ca4:	6912      	ldr	r2, [r2, #16]
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	0a9b      	lsrs	r3, r3, #10
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001cae:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001cb0:	f7ff fe80 	bl	80019b4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f7ff fecd 	bl	8001a54 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f7ff feca 	bl	8001a54 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f7ff fec7 	bl	8001a54 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <W25qxx_Init+0x19c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000924 	.word	0x20000924
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <W25qxx_EraseChip>:
//###################################################################################################################
void W25qxx_EraseChip(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	while (w25qxx.Lock == 1)
 8001ce4:	e002      	b.n	8001cec <W25qxx_EraseChip+0xc>
		W25qxx_Delay(1);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f000 faa6 	bl	8002238 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <W25qxx_EraseChip+0x58>)
 8001cee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d0f7      	beq.n	8001ce6 <W25qxx_EraseChip+0x6>
	w25qxx.Lock = 1;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <W25qxx_EraseChip+0x58>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseChip Begin...\r\n");
#endif
	W25qxx_WriteEnable();
 8001cfe:	f7ff fe91 	bl	8001a24 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <W25qxx_EraseChip+0x5c>)
 8001d0a:	f000 fd63 	bl	80027d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0xC7);
 8001d0e:	20c7      	movs	r0, #199	; 0xc7
 8001d10:	f7ff fe02 	bl	8001918 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d1a:	4808      	ldr	r0, [pc, #32]	; (8001d3c <W25qxx_EraseChip+0x5c>)
 8001d1c:	f000 fd5a 	bl	80027d4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8001d20:	f7ff fee0 	bl	8001ae4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms!\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(10);
 8001d24:	200a      	movs	r0, #10
 8001d26:	f000 fa87 	bl	8002238 <HAL_Delay>
	w25qxx.Lock = 0;
 8001d2a:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <W25qxx_EraseChip+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000924 	.word	0x20000924
 8001d3c:	40020000 	.word	0x40020000

08001d40 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <W25qxx_SectorToPage+0x28>)
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <W25qxx_SectorToPage+0x28>)
 8001d54:	8952      	ldrh	r2, [r2, #10]
 8001d56:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000924 	.word	0x20000924

08001d6c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8001d7a:	e002      	b.n	8001d82 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f000 fa5b 	bl	8002238 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001d82:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <W25qxx_WritePage+0x100>)
 8001d84:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d0f7      	beq.n	8001d7c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8001d8c:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <W25qxx_WritePage+0x100>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a34      	ldr	r2, [pc, #208]	; (8001e6c <W25qxx_WritePage+0x100>)
 8001d9c:	8952      	ldrh	r2, [r2, #10]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d802      	bhi.n	8001da8 <W25qxx_WritePage+0x3c>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001da8:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <W25qxx_WritePage+0x100>)
 8001daa:	895b      	ldrh	r3, [r3, #10]
 8001dac:	461a      	mov	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <W25qxx_WritePage+0x100>)
 8001dbc:	8952      	ldrh	r2, [r2, #10]
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d905      	bls.n	8001dce <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <W25qxx_WritePage+0x100>)
 8001dc4:	895b      	ldrh	r3, [r3, #10]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8001dce:	f7ff fe89 	bl	8001ae4 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8001dd2:	f7ff fe27 	bl	8001a24 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ddc:	4824      	ldr	r0, [pc, #144]	; (8001e70 <W25qxx_WritePage+0x104>)
 8001dde:	f000 fcf9 	bl	80027d4 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <W25qxx_WritePage+0x100>)
 8001de4:	895b      	ldrh	r3, [r3, #10]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	fb03 f302 	mul.w	r3, r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <W25qxx_WritePage+0x100>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d909      	bls.n	8001e10 <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 8001dfc:	2012      	movs	r0, #18
 8001dfe:	f7ff fd8b 	bl	8001918 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	0e1b      	lsrs	r3, r3, #24
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fd85 	bl	8001918 <W25qxx_Spi>
 8001e0e:	e002      	b.n	8001e16 <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7ff fd81 	bl	8001918 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	0c1b      	lsrs	r3, r3, #16
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fd7b 	bl	8001918 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fd75 	bl	8001918 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fd70 	bl	8001918 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	2364      	movs	r3, #100	; 0x64
 8001e3e:	68f9      	ldr	r1, [r7, #12]
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <W25qxx_WritePage+0x108>)
 8001e42:	f003 f85d 	bl	8004f00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e4c:	4808      	ldr	r0, [pc, #32]	; (8001e70 <W25qxx_WritePage+0x104>)
 8001e4e:	f000 fcc1 	bl	80027d4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8001e52:	f7ff fe47 	bl	8001ae4 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8001e56:	2001      	movs	r0, #1
 8001e58:	f000 f9ee 	bl	8002238 <HAL_Delay>
	w25qxx.Lock = 0;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <W25qxx_WritePage+0x100>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000924 	.word	0x20000924
 8001e70:	40020000 	.word	0x40020000
 8001e74:	2000088c 	.word	0x2000088c

08001e78 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <W25qxx_WriteSector+0xc0>)
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d802      	bhi.n	8001e96 <W25qxx_WriteSector+0x1e>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8001e96:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <W25qxx_WriteSector+0xc0>)
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <W25qxx_WriteSector+0xc0>)
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d243      	bcs.n	8001f2e <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	441a      	add	r2, r3
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <W25qxx_WriteSector+0xc0>)
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d905      	bls.n	8001ec0 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8001eb4:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <W25qxx_WriteSector+0xc0>)
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	e001      	b.n	8001ec4 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8001ec4:	68b8      	ldr	r0, [r7, #8]
 8001ec6:	f7ff ff3b 	bl	8001d40 <W25qxx_SectorToPage>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <W25qxx_WriteSector+0xc0>)
 8001ece:	895b      	ldrh	r3, [r3, #10]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed8:	4413      	add	r3, r2
 8001eda:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <W25qxx_WriteSector+0xc0>)
 8001ede:	895b      	ldrh	r3, [r3, #10]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ee8:	fb02 f201 	mul.w	r2, r2, r1
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	69f9      	ldr	r1, [r7, #28]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f7ff ff38 	bl	8001d6c <W25qxx_WritePage>
		StartPage++;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	3301      	adds	r3, #1
 8001f00:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <W25qxx_WriteSector+0xc0>)
 8001f04:	895b      	ldrh	r3, [r3, #10]
 8001f06:	461a      	mov	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	1a9a      	subs	r2, r3, r2
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	4413      	add	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <W25qxx_WriteSector+0xc0>)
 8001f14:	895b      	ldrh	r3, [r3, #10]
 8001f16:	461a      	mov	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	dce1      	bgt.n	8001ef0 <W25qxx_WriteSector+0x78>
 8001f2c:	e000      	b.n	8001f30 <W25qxx_WriteSector+0xb8>
		return;
 8001f2e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000924 	.word	0x20000924

08001f3c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8001f4a:	e002      	b.n	8001f52 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f000 f973 	bl	8002238 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001f52:	4b37      	ldr	r3, [pc, #220]	; (8002030 <W25qxx_ReadPage+0xf4>)
 8001f54:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d0f7      	beq.n	8001f4c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8001f5c:	4b34      	ldr	r3, [pc, #208]	; (8002030 <W25qxx_ReadPage+0xf4>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8001f64:	4b32      	ldr	r3, [pc, #200]	; (8002030 <W25qxx_ReadPage+0xf4>)
 8001f66:	895b      	ldrh	r3, [r3, #10]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d802      	bhi.n	8001f76 <W25qxx_ReadPage+0x3a>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8001f76:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <W25qxx_ReadPage+0xf4>)
 8001f78:	895b      	ldrh	r3, [r3, #10]
 8001f7a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <W25qxx_ReadPage+0xf4>)
 8001f84:	8952      	ldrh	r2, [r2, #10]
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d905      	bls.n	8001f96 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001f8a:	4b29      	ldr	r3, [pc, #164]	; (8002030 <W25qxx_ReadPage+0xf4>)
 8001f8c:	895b      	ldrh	r3, [r3, #10]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <W25qxx_ReadPage+0xf4>)
 8001f98:	895b      	ldrh	r3, [r3, #10]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	fb03 f302 	mul.w	r3, r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fae:	4821      	ldr	r0, [pc, #132]	; (8002034 <W25qxx_ReadPage+0xf8>)
 8001fb0:	f000 fc10 	bl	80027d4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <W25qxx_ReadPage+0xf4>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d909      	bls.n	8001fd0 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 8001fbc:	200c      	movs	r0, #12
 8001fbe:	f7ff fcab 	bl	8001918 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	0e1b      	lsrs	r3, r3, #24
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fca5 	bl	8001918 <W25qxx_Spi>
 8001fce:	e002      	b.n	8001fd6 <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8001fd0:	200b      	movs	r0, #11
 8001fd2:	f7ff fca1 	bl	8001918 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fc9b 	bl	8001918 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fc95 	bl	8001918 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fc90 	bl	8001918 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff fc8d 	bl	8001918 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b29a      	uxth	r2, r3
 8002002:	2364      	movs	r3, #100	; 0x64
 8002004:	68f9      	ldr	r1, [r7, #12]
 8002006:	480c      	ldr	r0, [pc, #48]	; (8002038 <W25qxx_ReadPage+0xfc>)
 8002008:	f003 f8ae 	bl	8005168 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800200c:	2201      	movs	r2, #1
 800200e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002012:	4808      	ldr	r0, [pc, #32]	; (8002034 <W25qxx_ReadPage+0xf8>)
 8002014:	f000 fbde 	bl	80027d4 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002018:	2001      	movs	r0, #1
 800201a:	f000 f90d 	bl	8002238 <HAL_Delay>
	w25qxx.Lock = 0;
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <W25qxx_ReadPage+0xf4>)
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000924 	.word	0x20000924
 8002034:	40020000 	.word	0x40020000
 8002038:	2000088c 	.word	0x2000088c

0800203c <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800204a:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <W25qxx_ReadSector+0xc0>)
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d802      	bhi.n	800205a <W25qxx_ReadSector+0x1e>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <W25qxx_ReadSector+0xc0>)
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <W25qxx_ReadSector+0xc0>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	d243      	bcs.n	80020f2 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	441a      	add	r2, r3
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <W25qxx_ReadSector+0xc0>)
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d905      	bls.n	8002084 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <W25qxx_ReadSector+0xc0>)
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	e001      	b.n	8002088 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8002088:	68b8      	ldr	r0, [r7, #8]
 800208a:	f7ff fe59 	bl	8001d40 <W25qxx_SectorToPage>
 800208e:	4602      	mov	r2, r0
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <W25qxx_ReadSector+0xc0>)
 8002092:	895b      	ldrh	r3, [r3, #10]
 8002094:	4619      	mov	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	fbb3 f3f1 	udiv	r3, r3, r1
 800209c:	4413      	add	r3, r2
 800209e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <W25qxx_ReadSector+0xc0>)
 80020a2:	895b      	ldrh	r3, [r3, #10]
 80020a4:	461a      	mov	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80020ac:	fb02 f201 	mul.w	r2, r2, r1
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	69f9      	ldr	r1, [r7, #28]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff ff3e 	bl	8001f3c <W25qxx_ReadPage>
		StartPage++;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3301      	adds	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <W25qxx_ReadSector+0xc0>)
 80020c8:	895b      	ldrh	r3, [r3, #10]
 80020ca:	461a      	mov	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	1a9a      	subs	r2, r3, r2
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	4413      	add	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <W25qxx_ReadSector+0xc0>)
 80020d8:	895b      	ldrh	r3, [r3, #10]
 80020da:	461a      	mov	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	dce1      	bgt.n	80020b4 <W25qxx_ReadSector+0x78>
 80020f0:	e000      	b.n	80020f4 <W25qxx_ReadSector+0xb8>
		return;
 80020f2:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000924 	.word	0x20000924

08002100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002138 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002104:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002106:	e003      	b.n	8002110 <LoopCopyDataInit>

08002108 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800210a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800210c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800210e:	3104      	adds	r1, #4

08002110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002110:	480b      	ldr	r0, [pc, #44]	; (8002140 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002114:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002116:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002118:	d3f6      	bcc.n	8002108 <CopyDataInit>
  ldr  r2, =_sbss
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800211c:	e002      	b.n	8002124 <LoopFillZerobss>

0800211e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800211e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002120:	f842 3b04 	str.w	r3, [r2], #4

08002124 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002126:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002128:	d3f9      	bcc.n	800211e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800212a:	f7ff fb3d 	bl	80017a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212e:	f007 f8e5 	bl	80092fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002132:	f7fe fb5b 	bl	80007ec <main>
  bx  lr    
 8002136:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002138:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800213c:	0800a37c 	.word	0x0800a37c
  ldr  r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002144:	200001d0 	.word	0x200001d0
  ldr  r2, =_sbss
 8002148:	200001d0 	.word	0x200001d0
  ldr  r3, = _ebss
 800214c:	2000122c 	.word	0x2000122c

08002150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_Init+0x40>)
 800215e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_Init+0x40>)
 800216a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_Init+0x40>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f000 f94d 	bl	800241c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	2000      	movs	r0, #0
 8002184:	f000 f808 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff fa58 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x54>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f965 	bl	8002486 <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d80a      	bhi.n	80021e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f000 f92d 	bl	8002432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <HAL_InitTick+0x5c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000010 	.word	0x20000010
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_IncTick+0x24>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000010 	.word	0x20000010
 800221c:	2000094c 	.word	0x2000094c

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	2000094c 	.word	0x2000094c

08002238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff ffee 	bl	8002220 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d005      	beq.n	800225e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_Delay+0x40>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225e:	bf00      	nop
 8002260:	f7ff ffde 	bl	8002220 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d8f7      	bhi.n	8002260 <HAL_Delay+0x28>
  {
  }
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000010 	.word	0x20000010

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db0b      	blt.n	800230a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4907      	ldr	r1, [pc, #28]	; (8002318 <__NVIC_EnableIRQ+0x38>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db0a      	blt.n	8002346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	490c      	ldr	r1, [pc, #48]	; (8002368 <__NVIC_SetPriority+0x4c>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	440b      	add	r3, r1
 8002340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002344:	e00a      	b.n	800235c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	; (800236c <__NVIC_SetPriority+0x50>)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3b04      	subs	r3, #4
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	440b      	add	r3, r1
 800235a:	761a      	strb	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	4313      	orrs	r3, r2
         );
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	; 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e8:	d301      	bcc.n	80023ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00f      	b.n	800240e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <SysTick_Config+0x40>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f6:	210f      	movs	r1, #15
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f7ff ff8e 	bl	800231c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <SysTick_Config+0x40>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SysTick_Config+0x40>)
 8002408:	2207      	movs	r2, #7
 800240a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	e000e010 	.word	0xe000e010

0800241c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff29 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002444:	f7ff ff3e 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 8002448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f7ff ff8e 	bl	8002370 <NVIC_EncodePriority>
 8002454:	4602      	mov	r2, r0
 8002456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff5d 	bl	800231c <__NVIC_SetPriority>
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff31 	bl	80022e0 <__NVIC_EnableIRQ>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffa2 	bl	80023d8 <SysTick_Config>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e159      	b.n	8002770 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f040 8148 	bne.w	800276a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d00b      	beq.n	80024fa <HAL_GPIO_Init+0x5a>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ee:	2b11      	cmp	r3, #17
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b12      	cmp	r3, #18
 80024f8:	d130      	bne.n	800255c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	2203      	movs	r2, #3
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 0201 	and.w	r2, r3, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0xfc>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b12      	cmp	r3, #18
 800259a:	d123      	bne.n	80025e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a2 	beq.w	800276a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b56      	ldr	r3, [pc, #344]	; (8002784 <HAL_GPIO_Init+0x2e4>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a55      	ldr	r2, [pc, #340]	; (8002784 <HAL_GPIO_Init+0x2e4>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_GPIO_Init+0x2e4>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002642:	4a51      	ldr	r2, [pc, #324]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a48      	ldr	r2, [pc, #288]	; (800278c <HAL_GPIO_Init+0x2ec>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x202>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a47      	ldr	r2, [pc, #284]	; (8002790 <HAL_GPIO_Init+0x2f0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x1fe>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a46      	ldr	r2, [pc, #280]	; (8002794 <HAL_GPIO_Init+0x2f4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x1fa>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a45      	ldr	r2, [pc, #276]	; (8002798 <HAL_GPIO_Init+0x2f8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x1f6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a44      	ldr	r2, [pc, #272]	; (800279c <HAL_GPIO_Init+0x2fc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x1f2>
 800268e:	2304      	movs	r3, #4
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 8002692:	2307      	movs	r3, #7
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 80026a2:	2300      	movs	r3, #0
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b4:	4934      	ldr	r1, [pc, #208]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c2:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <HAL_GPIO_Init+0x300>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e6:	4a2e      	ldr	r2, [pc, #184]	; (80027a0 <HAL_GPIO_Init+0x300>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026ec:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <HAL_GPIO_Init+0x300>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002710:	4a23      	ldr	r2, [pc, #140]	; (80027a0 <HAL_GPIO_Init+0x300>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002716:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <HAL_GPIO_Init+0x300>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273a:	4a19      	ldr	r2, [pc, #100]	; (80027a0 <HAL_GPIO_Init+0x300>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <HAL_GPIO_Init+0x300>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002764:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <HAL_GPIO_Init+0x300>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	f67f aea2 	bls.w	80024bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002778:	bf00      	nop
 800277a:	3724      	adds	r7, #36	; 0x24
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40023800 	.word	0x40023800
 8002788:	40013800 	.word	0x40013800
 800278c:	40020000 	.word	0x40020000
 8002790:	40020400 	.word	0x40020400
 8002794:	40020800 	.word	0x40020800
 8002798:	40020c00 	.word	0x40020c00
 800279c:	40021000 	.word	0x40021000
 80027a0:	40013c00 	.word	0x40013c00

080027a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e001      	b.n	80027c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f0:	e003      	b.n	80027fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe f98e 	bl	8000b48 <HAL_GPIO_EXTI_Callback>
  }
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40013c00 	.word	0x40013c00

08002838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e11f      	b.n	8002a8a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fd ff12 	bl	8000688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	; 0x24
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800288a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800289c:	f002 fab8 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 80028a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a7b      	ldr	r2, [pc, #492]	; (8002a94 <HAL_I2C_Init+0x25c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d807      	bhi.n	80028bc <HAL_I2C_Init+0x84>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a7a      	ldr	r2, [pc, #488]	; (8002a98 <HAL_I2C_Init+0x260>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e006      	b.n	80028ca <HAL_I2C_Init+0x92>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a77      	ldr	r2, [pc, #476]	; (8002a9c <HAL_I2C_Init+0x264>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	bf94      	ite	ls
 80028c4:	2301      	movls	r3, #1
 80028c6:	2300      	movhi	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0db      	b.n	8002a8a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4a72      	ldr	r2, [pc, #456]	; (8002aa0 <HAL_I2C_Init+0x268>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0c9b      	lsrs	r3, r3, #18
 80028dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a64      	ldr	r2, [pc, #400]	; (8002a94 <HAL_I2C_Init+0x25c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d802      	bhi.n	800290c <HAL_I2C_Init+0xd4>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3301      	adds	r3, #1
 800290a:	e009      	b.n	8002920 <HAL_I2C_Init+0xe8>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	4a63      	ldr	r2, [pc, #396]	; (8002aa4 <HAL_I2C_Init+0x26c>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	3301      	adds	r3, #1
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	430b      	orrs	r3, r1
 8002926:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002932:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4956      	ldr	r1, [pc, #344]	; (8002a94 <HAL_I2C_Init+0x25c>)
 800293c:	428b      	cmp	r3, r1
 800293e:	d80d      	bhi.n	800295c <HAL_I2C_Init+0x124>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1e59      	subs	r1, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fbb1 f3f3 	udiv	r3, r1, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002954:	2b04      	cmp	r3, #4
 8002956:	bf38      	it	cc
 8002958:	2304      	movcc	r3, #4
 800295a:	e04f      	b.n	80029fc <HAL_I2C_Init+0x1c4>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d111      	bne.n	8002988 <HAL_I2C_Init+0x150>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1e58      	subs	r0, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	440b      	add	r3, r1
 8002972:	fbb0 f3f3 	udiv	r3, r0, r3
 8002976:	3301      	adds	r3, #1
 8002978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf0c      	ite	eq
 8002980:	2301      	moveq	r3, #1
 8002982:	2300      	movne	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e012      	b.n	80029ae <HAL_I2C_Init+0x176>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1e58      	subs	r0, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	0099      	lsls	r1, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	fbb0 f3f3 	udiv	r3, r0, r3
 800299e:	3301      	adds	r3, #1
 80029a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_Init+0x17e>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e022      	b.n	80029fc <HAL_I2C_Init+0x1c4>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10e      	bne.n	80029dc <HAL_I2C_Init+0x1a4>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1e58      	subs	r0, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	440b      	add	r3, r1
 80029cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029da:	e00f      	b.n	80029fc <HAL_I2C_Init+0x1c4>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1e58      	subs	r0, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6859      	ldr	r1, [r3, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	0099      	lsls	r1, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f2:	3301      	adds	r3, #1
 80029f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	6809      	ldr	r1, [r1, #0]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69da      	ldr	r2, [r3, #28]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6911      	ldr	r1, [r2, #16]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	4311      	orrs	r1, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	000186a0 	.word	0x000186a0
 8002a98:	001e847f 	.word	0x001e847f
 8002a9c:	003d08ff 	.word	0x003d08ff
 8002aa0:	431bde83 	.word	0x431bde83
 8002aa4:	10624dd3 	.word	0x10624dd3

08002aa8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	817b      	strh	r3, [r7, #10]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff fbb0 	bl	8002220 <HAL_GetTick>
 8002ac0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	f040 80e0 	bne.w	8002c90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2319      	movs	r3, #25
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4970      	ldr	r1, [pc, #448]	; (8002c9c <HAL_I2C_Master_Transmit+0x1f4>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fa92 	bl	8003004 <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e0d3      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_I2C_Master_Transmit+0x50>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0cc      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d007      	beq.n	8002b1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2210      	movs	r2, #16
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	893a      	ldrh	r2, [r7, #8]
 8002b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4a50      	ldr	r2, [pc, #320]	; (8002ca0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b60:	8979      	ldrh	r1, [r7, #10]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f9ca 	bl	8002f00 <I2C_MasterRequestWrite>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e08d      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b8c:	e066      	b.n	8002c5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	6a39      	ldr	r1, [r7, #32]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fb0c 	bl	80031b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d107      	bne.n	8002bb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e06b      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d11b      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0x188>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d017      	beq.n	8002c30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	6a39      	ldr	r1, [r7, #32]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fafc 	bl	8003232 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00d      	beq.n	8002c5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d107      	bne.n	8002c58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e01a      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d194      	bne.n	8002b8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	00100002 	.word	0x00100002
 8002ca0:	ffff0000 	.word	0xffff0000

08002ca4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7ff fab4 	bl	8002220 <HAL_GetTick>
 8002cb8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	f040 8111 	bne.w	8002eee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	2319      	movs	r3, #25
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4988      	ldr	r1, [pc, #544]	; (8002ef8 <HAL_I2C_IsDeviceReady+0x254>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f994 	bl	8003004 <I2C_WaitOnFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e104      	b.n	8002ef0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_I2C_IsDeviceReady+0x50>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e0fd      	b.n	8002ef0 <HAL_I2C_IsDeviceReady+0x24c>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d007      	beq.n	8002d1a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2224      	movs	r2, #36	; 0x24
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a70      	ldr	r2, [pc, #448]	; (8002efc <HAL_I2C_IsDeviceReady+0x258>)
 8002d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f952 	bl	8003004 <I2C_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d74:	d103      	bne.n	8002d7e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0b6      	b.n	8002ef0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d82:	897b      	ldrh	r3, [r7, #10]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d90:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d92:	f7ff fa45 	bl	8002220 <HAL_GetTick>
 8002d96:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	bf0c      	ite	eq
 8002da6:	2301      	moveq	r3, #1
 8002da8:	2300      	movne	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2301      	moveq	r3, #1
 8002dc0:	2300      	movne	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dc6:	e025      	b.n	8002e14 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dc8:	f7ff fa2a 	bl	8002220 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d302      	bcc.n	8002dde <HAL_I2C_IsDeviceReady+0x13a>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	22a0      	movs	r2, #160	; 0xa0
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2ba0      	cmp	r3, #160	; 0xa0
 8002e1e:	d005      	beq.n	8002e2c <HAL_I2C_IsDeviceReady+0x188>
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_I2C_IsDeviceReady+0x188>
 8002e26:	7dbb      	ldrb	r3, [r7, #22]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0cd      	beq.n	8002dc8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d129      	bne.n	8002e96 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e50:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2319      	movs	r3, #25
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4921      	ldr	r1, [pc, #132]	; (8002ef8 <HAL_I2C_IsDeviceReady+0x254>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f8c6 	bl	8003004 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e036      	b.n	8002ef0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e02c      	b.n	8002ef0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2319      	movs	r3, #25
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	490f      	ldr	r1, [pc, #60]	; (8002ef8 <HAL_I2C_IsDeviceReady+0x254>)
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f8a2 	bl	8003004 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e012      	b.n	8002ef0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	f4ff af32 	bcc.w	8002d3e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
  }
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	00100002 	.word	0x00100002
 8002efc:	ffff0000 	.word	0xffff0000

08002f00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d006      	beq.n	8002f2a <I2C_MasterRequestWrite+0x2a>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d003      	beq.n	8002f2a <I2C_MasterRequestWrite+0x2a>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f28:	d108      	bne.n	8002f3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e00b      	b.n	8002f54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	2b12      	cmp	r3, #18
 8002f42:	d107      	bne.n	8002f54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f84f 	bl	8003004 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7a:	d103      	bne.n	8002f84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e035      	b.n	8002ff4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f90:	d108      	bne.n	8002fa4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa0:	611a      	str	r2, [r3, #16]
 8002fa2:	e01b      	b.n	8002fdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	11db      	asrs	r3, r3, #7
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f003 0306 	and.w	r3, r3, #6
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f063 030f 	orn	r3, r3, #15
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	490e      	ldr	r1, [pc, #56]	; (8002ffc <I2C_MasterRequestWrite+0xfc>)
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f875 	bl	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e010      	b.n	8002ff4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fd2:	897b      	ldrh	r3, [r7, #10]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4907      	ldr	r1, [pc, #28]	; (8003000 <I2C_MasterRequestWrite+0x100>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f865 	bl	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	00010008 	.word	0x00010008
 8003000:	00010002 	.word	0x00010002

08003004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003014:	e025      	b.n	8003062 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d021      	beq.n	8003062 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301e:	f7ff f8ff 	bl	8002220 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <I2C_WaitOnFlagUntilTimeout+0x30>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d116      	bne.n	8003062 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e023      	b.n	80030aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10d      	bne.n	8003088 <I2C_WaitOnFlagUntilTimeout+0x84>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	43da      	mvns	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4013      	ands	r3, r2
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	bf0c      	ite	eq
 800307e:	2301      	moveq	r3, #1
 8003080:	2300      	movne	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	e00c      	b.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	43da      	mvns	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4013      	ands	r3, r2
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf0c      	ite	eq
 800309a:	2301      	moveq	r3, #1
 800309c:	2300      	movne	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d0b6      	beq.n	8003016 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030c0:	e051      	b.n	8003166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	d123      	bne.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f043 0204 	orr.w	r2, r3, #4
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e046      	b.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d021      	beq.n	8003166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7ff f87d 	bl	8002220 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d116      	bne.n	8003166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f043 0220 	orr.w	r2, r3, #32
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e020      	b.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d10c      	bne.n	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	43da      	mvns	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4013      	ands	r3, r2
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	e00b      	b.n	80031a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	43da      	mvns	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	4013      	ands	r3, r2
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d18d      	bne.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031bc:	e02d      	b.n	800321a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f878 	bl	80032b4 <I2C_IsAcknowledgeFailed>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e02d      	b.n	800322a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d021      	beq.n	800321a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d6:	f7ff f823 	bl	8002220 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d302      	bcc.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d116      	bne.n	800321a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f043 0220 	orr.w	r2, r3, #32
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e007      	b.n	800322a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b80      	cmp	r3, #128	; 0x80
 8003226:	d1ca      	bne.n	80031be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800323e:	e02d      	b.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f837 	bl	80032b4 <I2C_IsAcknowledgeFailed>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e02d      	b.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d021      	beq.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003258:	f7fe ffe2 	bl	8002220 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	429a      	cmp	r2, r3
 8003266:	d302      	bcc.n	800326e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e007      	b.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d1ca      	bne.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d11b      	bne.n	8003304 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0204 	orr.w	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003314:	b08f      	sub	sp, #60	; 0x3c
 8003316:	af0a      	add	r7, sp, #40	; 0x28
 8003318:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e10f      	b.n	8003544 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f005 fcf6 	bl	8008d30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2203      	movs	r2, #3
 8003348:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d102      	bne.n	800335e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f002 ff13 	bl	800618e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	687e      	ldr	r6, [r7, #4]
 8003370:	466d      	mov	r5, sp
 8003372:	f106 0410 	add.w	r4, r6, #16
 8003376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800337a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800337e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003382:	e885 0003 	stmia.w	r5, {r0, r1}
 8003386:	1d33      	adds	r3, r6, #4
 8003388:	cb0e      	ldmia	r3, {r1, r2, r3}
 800338a:	6838      	ldr	r0, [r7, #0]
 800338c:	f002 fdea 	bl	8005f64 <USB_CoreInit>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2202      	movs	r2, #2
 800339a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0d0      	b.n	8003544 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f002 ff01 	bl	80061b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
 80033b2:	e04a      	b.n	800344a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	333d      	adds	r3, #61	; 0x3d
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	333c      	adds	r3, #60	; 0x3c
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	b298      	uxth	r0, r3
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	3342      	adds	r3, #66	; 0x42
 80033f0:	4602      	mov	r2, r0
 80033f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	333f      	adds	r3, #63	; 0x3f
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	3344      	adds	r3, #68	; 0x44
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	3348      	adds	r3, #72	; 0x48
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3350      	adds	r3, #80	; 0x50
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	3301      	adds	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	d3af      	bcc.n	80033b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e044      	b.n	80034e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	3301      	adds	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3b5      	bcc.n	800345a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	687e      	ldr	r6, [r7, #4]
 80034f6:	466d      	mov	r5, sp
 80034f8:	f106 0410 	add.w	r4, r6, #16
 80034fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003508:	e885 0003 	stmia.w	r5, {r0, r1}
 800350c:	1d33      	adds	r3, r6, #4
 800350e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003510:	6838      	ldr	r0, [r7, #0]
 8003512:	f002 fe77 	bl	8006204 <USB_DevInit>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e00d      	b.n	8003544 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f003 febf 	bl	80072c0 <USB_DevDisconnect>

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800354c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_PCD_Start+0x1c>
 8003564:	2302      	movs	r3, #2
 8003566:	e020      	b.n	80035aa <HAL_PCD_Start+0x5e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	2b01      	cmp	r3, #1
 8003576:	d109      	bne.n	800358c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800357c:	2b01      	cmp	r3, #1
 800357e:	d005      	beq.n	800358c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f002 fdeb 	bl	800616c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f003 fe6f 	bl	800727e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035b2:	b590      	push	{r4, r7, lr}
 80035b4:	b08d      	sub	sp, #52	; 0x34
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f003 ff2d 	bl	8007428 <USB_GetMode>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 839d 	bne.w	8003d10 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f003 fe91 	bl	8007302 <USB_ReadInterrupts>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8393 	beq.w	8003d0e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f003 fe88 	bl	8007302 <USB_ReadInterrupts>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d107      	bne.n	800360c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f002 0202 	and.w	r2, r2, #2
 800360a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f003 fe76 	bl	8007302 <USB_ReadInterrupts>
 8003616:	4603      	mov	r3, r0
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b10      	cmp	r3, #16
 800361e:	d161      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0210 	bic.w	r2, r2, #16
 800362e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f003 020f 	and.w	r2, r3, #15
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4413      	add	r3, r2
 800364c:	3304      	adds	r3, #4
 800364e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	0c5b      	lsrs	r3, r3, #17
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	2b02      	cmp	r3, #2
 800365a:	d124      	bne.n	80036a6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d035      	beq.n	80036d4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003672:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003676:	b29b      	uxth	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	6a38      	ldr	r0, [r7, #32]
 800367c:	f003 fcdc 	bl	8007038 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800368c:	441a      	add	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800369e:	441a      	add	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	619a      	str	r2, [r3, #24]
 80036a4:	e016      	b.n	80036d4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	0c5b      	lsrs	r3, r3, #17
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d110      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036b8:	2208      	movs	r2, #8
 80036ba:	4619      	mov	r1, r3
 80036bc:	6a38      	ldr	r0, [r7, #32]
 80036be:	f003 fcbb 	bl	8007038 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ce:	441a      	add	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0210 	orr.w	r2, r2, #16
 80036e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f003 fe0a 	bl	8007302 <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036f8:	d16e      	bne.n	80037d8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f003 fe10 	bl	8007328 <USB_ReadDevAllOutEpInterrupt>
 8003708:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800370a:	e062      	b.n	80037d2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d057      	beq.n	80037c6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f003 fe35 	bl	8007390 <USB_ReadDevOutEPInterrupt>
 8003726:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00c      	beq.n	800374c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373e:	461a      	mov	r2, r3
 8003740:	2301      	movs	r3, #1
 8003742:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fd98 	bl	800427c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00c      	beq.n	8003770 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003762:	461a      	mov	r2, r3
 8003764:	2308      	movs	r3, #8
 8003766:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fe92 	bl	8004494 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003786:	461a      	mov	r2, r3
 8003788:	2310      	movs	r3, #16
 800378a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	2320      	movs	r3, #32
 80037a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037be:	461a      	mov	r2, r3
 80037c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	3301      	adds	r3, #1
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d199      	bne.n	800370c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f003 fd90 	bl	8007302 <USB_ReadInterrupts>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037ec:	f040 80c0 	bne.w	8003970 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 fdb1 	bl	800735c <USB_ReadDevAllInEpInterrupt>
 80037fa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003800:	e0b2      	b.n	8003968 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80a7 	beq.w	800395c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f003 fdd7 	bl	80073cc <USB_ReadDevInEPInterrupt>
 800381e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d057      	beq.n	80038da <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	2201      	movs	r2, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	43db      	mvns	r3, r3
 8003844:	69f9      	ldr	r1, [r7, #28]
 8003846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800384a:	4013      	ands	r3, r2
 800384c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385a:	461a      	mov	r2, r3
 800385c:	2301      	movs	r3, #1
 800385e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d132      	bne.n	80038ce <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	3348      	adds	r3, #72	; 0x48
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387e:	4613      	mov	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4403      	add	r3, r0
 8003888:	3344      	adds	r3, #68	; 0x44
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4419      	add	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4403      	add	r3, r0
 800389c:	3348      	adds	r3, #72	; 0x48
 800389e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d113      	bne.n	80038ce <HAL_PCD_IRQHandler+0x31c>
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	3350      	adds	r3, #80	; 0x50
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d108      	bne.n	80038ce <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038c6:	461a      	mov	r2, r3
 80038c8:	2101      	movs	r1, #1
 80038ca:	f003 fddf 	bl	800748c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	4619      	mov	r1, r3
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f005 faac 	bl	8008e32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f0:	461a      	mov	r2, r3
 80038f2:	2308      	movs	r3, #8
 80038f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390c:	461a      	mov	r2, r3
 800390e:	2310      	movs	r3, #16
 8003910:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003928:	461a      	mov	r2, r3
 800392a:	2340      	movs	r3, #64	; 0x40
 800392c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003944:	461a      	mov	r2, r3
 8003946:	2302      	movs	r3, #2
 8003948:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fc03 	bl	8004162 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	3301      	adds	r3, #1
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	2b00      	cmp	r3, #0
 800396c:	f47f af49 	bne.w	8003802 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f003 fcc4 	bl	8007302 <USB_ReadInterrupts>
 800397a:	4603      	mov	r3, r0
 800397c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003984:	d122      	bne.n	80039cc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d108      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039ac:	2100      	movs	r1, #0
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fe0e 	bl	80045d0 <HAL_PCDEx_LPM_Callback>
 80039b4:	e002      	b.n	80039bc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f005 faa8 	bl	8008f0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80039ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 fc96 	bl	8007302 <USB_ReadInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e0:	d112      	bne.n	8003a08 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d102      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f005 fa64 	bl	8008ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a06:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 fc78 	bl	8007302 <USB_ReadInterrupts>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1c:	f040 80c7 	bne.w	8003bae <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2110      	movs	r1, #16
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f002 fd46 	bl	80064cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a44:	e056      	b.n	8003af4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a52:	461a      	mov	r2, r3
 8003a54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a6a:	0151      	lsls	r1, r2, #5
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	440a      	add	r2, r1
 8003a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a78:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003abe:	0151      	lsls	r1, r2, #5
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	440a      	add	r2, r1
 8003ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ac8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003acc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ade:	0151      	lsls	r1, r2, #5
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003aec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af0:	3301      	adds	r3, #1
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d3a3      	bcc.n	8003a46 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b0c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b2a:	f043 030b 	orr.w	r3, r3, #11
 8003b2e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b40:	f043 030b 	orr.w	r3, r3, #11
 8003b44:	6453      	str	r3, [r2, #68]	; 0x44
 8003b46:	e015      	b.n	8003b74 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b5a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b5e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b6e:	f043 030b 	orr.w	r3, r3, #11
 8003b72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f003 fc77 	bl	800748c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f003 fba5 	bl	8007302 <USB_ReadInterrupts>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc2:	d124      	bne.n	8003c0e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f003 fc3b 	bl	8007444 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f002 fcdb 	bl	800658e <USB_GetDevSpeed>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681c      	ldr	r4, [r3, #0]
 8003be4:	f001 f908 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8003be8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f002 fa18 	bl	8006028 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f005 f942 	bl	8008e82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f003 fb75 	bl	8007302 <USB_ReadInterrupts>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d10a      	bne.n	8003c38 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f005 f91f 	bl	8008e66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f002 0208 	and.w	r2, r2, #8
 8003c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f003 fb60 	bl	8007302 <USB_ReadInterrupts>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4c:	d10f      	bne.n	8003c6e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f005 f977 	bl	8008f4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f003 fb45 	bl	8007302 <USB_ReadInterrupts>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c82:	d10f      	bne.n	8003ca4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f005 f94a 	bl	8008f28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f003 fb2a 	bl	8007302 <USB_ReadInterrupts>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f005 f958 	bl	8008f70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f003 fb14 	bl	8007302 <USB_ReadInterrupts>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d115      	bne.n	8003d10 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f005 f948 	bl	8008f8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6859      	ldr	r1, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
 8003d0c:	e000      	b.n	8003d10 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003d0e:	bf00      	nop
    }
  }
}
 8003d10:	3734      	adds	r7, #52	; 0x34
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd90      	pop	{r4, r7, pc}

08003d16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_PCD_SetAddress+0x1a>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e013      	b.n	8003d58 <HAL_PCD_SetAddress+0x42>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f003 fa72 	bl	8007232 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	4608      	mov	r0, r1
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	70fb      	strb	r3, [r7, #3]
 8003d72:	460b      	mov	r3, r1
 8003d74:	803b      	strh	r3, [r7, #0]
 8003d76:	4613      	mov	r3, r2
 8003d78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da0f      	bge.n	8003da6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	3338      	adds	r3, #56	; 0x38
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	705a      	strb	r2, [r3, #1]
 8003da4:	e00f      	b.n	8003dc6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	f003 020f 	and.w	r2, r3, #15
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dd2:	883a      	ldrh	r2, [r7, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	78ba      	ldrb	r2, [r7, #2]
 8003ddc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	785b      	ldrb	r3, [r3, #1]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003df0:	78bb      	ldrb	r3, [r7, #2]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d102      	bne.n	8003dfc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_PCD_EP_Open+0xaa>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e00e      	b.n	8003e28 <HAL_PCD_EP_Open+0xc8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68f9      	ldr	r1, [r7, #12]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f002 fbdd 	bl	80065d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003e26:	7afb      	ldrb	r3, [r7, #11]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	da0f      	bge.n	8003e64 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	f003 020f 	and.w	r2, r3, #15
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	3338      	adds	r3, #56	; 0x38
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	3304      	adds	r3, #4
 8003e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	705a      	strb	r2, [r3, #1]
 8003e62:	e00f      	b.n	8003e84 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	f003 020f 	and.w	r2, r3, #15
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_PCD_EP_Close+0x6e>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e00e      	b.n	8003ebc <HAL_PCD_EP_Close+0x8c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f002 fc1b 	bl	80066e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	607a      	str	r2, [r7, #4]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ed4:	7afb      	ldrb	r3, [r7, #11]
 8003ed6:	f003 020f 	and.w	r2, r3, #15
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	3304      	adds	r3, #4
 8003eec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2200      	movs	r2, #0
 8003f04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f06:	7afb      	ldrb	r3, [r7, #11]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d102      	bne.n	8003f20 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f20:	7afb      	ldrb	r3, [r7, #11]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	6979      	ldr	r1, [r7, #20]
 8003f38:	f002 fef6 	bl	8006d28 <USB_EP0StartXfer>
 8003f3c:	e008      	b.n	8003f50 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6979      	ldr	r1, [r7, #20]
 8003f4c:	f002 fca8 	bl	80068a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b086      	sub	sp, #24
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	460b      	mov	r3, r1
 8003f68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	3338      	adds	r3, #56	; 0x38
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3304      	adds	r3, #4
 8003f80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2201      	movs	r2, #1
 8003f98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f9a:	7afb      	ldrb	r3, [r7, #11]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d102      	bne.n	8003fb4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fb4:	7afb      	ldrb	r3, [r7, #11]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	6979      	ldr	r1, [r7, #20]
 8003fcc:	f002 feac 	bl	8006d28 <USB_EP0StartXfer>
 8003fd0:	e008      	b.n	8003fe4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6979      	ldr	r1, [r7, #20]
 8003fe0:	f002 fc5e 	bl	80068a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	f003 020f 	and.w	r2, r3, #15
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	d901      	bls.n	800400c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e050      	b.n	80040ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800400c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004010:	2b00      	cmp	r3, #0
 8004012:	da0f      	bge.n	8004034 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	f003 020f 	and.w	r2, r3, #15
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	3338      	adds	r3, #56	; 0x38
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	705a      	strb	r2, [r3, #1]
 8004032:	e00d      	b.n	8004050 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	3304      	adds	r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	b2da      	uxtb	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_PCD_EP_SetStall+0x82>
 800406c:	2302      	movs	r3, #2
 800406e:	e01e      	b.n	80040ae <HAL_PCD_EP_SetStall+0xc0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68f9      	ldr	r1, [r7, #12]
 800407e:	4618      	mov	r0, r3
 8004080:	f003 f803 	bl	800708a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	b2d9      	uxtb	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800409e:	461a      	mov	r2, r3
 80040a0:	f003 f9f4 	bl	800748c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	460b      	mov	r3, r1
 80040c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 020f 	and.w	r2, r3, #15
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d901      	bls.n	80040d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e042      	b.n	800415a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	da0f      	bge.n	80040fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	f003 020f 	and.w	r2, r3, #15
 80040e2:	4613      	mov	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	3338      	adds	r3, #56	; 0x38
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	3304      	adds	r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	705a      	strb	r2, [r3, #1]
 80040fa:	e00f      	b.n	800411c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	f003 020f 	and.w	r2, r3, #15
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	3304      	adds	r3, #4
 8004114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_PCD_EP_ClrStall+0x86>
 8004138:	2302      	movs	r3, #2
 800413a:	e00e      	b.n	800415a <HAL_PCD_EP_ClrStall+0xa4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68f9      	ldr	r1, [r7, #12]
 800414a:	4618      	mov	r0, r3
 800414c:	f003 f80b 	bl	8007166 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b08a      	sub	sp, #40	; 0x28
 8004166:	af02      	add	r7, sp, #8
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	3338      	adds	r3, #56	; 0x38
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	3304      	adds	r3, #4
 8004188:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	429a      	cmp	r2, r3
 8004194:	d901      	bls.n	800419a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06c      	b.n	8004274 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d902      	bls.n	80041b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	3303      	adds	r3, #3
 80041ba:	089b      	lsrs	r3, r3, #2
 80041bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041be:	e02b      	b.n	8004218 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d902      	bls.n	80041dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	3303      	adds	r3, #3
 80041e0:	089b      	lsrs	r3, r3, #2
 80041e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68d9      	ldr	r1, [r3, #12]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	4603      	mov	r3, r0
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f002 fee7 	bl	8006fce <USB_WritePacket>

    ep->xfer_buff  += len;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	441a      	add	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	441a      	add	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	b29b      	uxth	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	429a      	cmp	r2, r3
 800422c:	d809      	bhi.n	8004242 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004236:	429a      	cmp	r2, r3
 8004238:	d203      	bcs.n	8004242 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1be      	bne.n	80041c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	429a      	cmp	r2, r3
 800424c:	d811      	bhi.n	8004272 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	2201      	movs	r2, #1
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	43db      	mvns	r3, r3
 8004268:	6939      	ldr	r1, [r7, #16]
 800426a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800426e:	4013      	ands	r3, r2
 8004270:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	333c      	adds	r3, #60	; 0x3c
 8004294:	3304      	adds	r3, #4
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	f040 80a0 	bne.w	80043f4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d015      	beq.n	80042ea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a72      	ldr	r2, [pc, #456]	; (800448c <PCD_EP_OutXfrComplete_int+0x210>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	f240 80dd 	bls.w	8004482 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80d7 	beq.w	8004482 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	461a      	mov	r2, r3
 80042e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e6:	6093      	str	r3, [r2, #8]
 80042e8:	e0cb      	b.n	8004482 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	461a      	mov	r2, r3
 8004302:	2320      	movs	r3, #32
 8004304:	6093      	str	r3, [r2, #8]
 8004306:	e0bc      	b.n	8004482 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800430e:	2b00      	cmp	r3, #0
 8004310:	f040 80b7 	bne.w	8004482 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a5d      	ldr	r2, [pc, #372]	; (800448c <PCD_EP_OutXfrComplete_int+0x210>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d90f      	bls.n	800433c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	461a      	mov	r2, r3
 8004334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004338:	6093      	str	r3, [r2, #8]
 800433a:	e0a2      	b.n	8004482 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800434e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	0159      	lsls	r1, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	440b      	add	r3, r1
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004362:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4403      	add	r3, r0
 8004372:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004376:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800438a:	6819      	ldr	r1, [r3, #0]
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4403      	add	r3, r0
 800439a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4419      	add	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	4613      	mov	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4403      	add	r3, r0
 80043b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043b4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d114      	bne.n	80043e6 <PCD_EP_OutXfrComplete_int+0x16a>
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d108      	bne.n	80043e6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043de:	461a      	mov	r2, r3
 80043e0:	2101      	movs	r1, #1
 80043e2:	f003 f853 	bl	800748c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	4619      	mov	r1, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f004 fd05 	bl	8008dfc <HAL_PCD_DataOutStageCallback>
 80043f2:	e046      	b.n	8004482 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a26      	ldr	r2, [pc, #152]	; (8004490 <PCD_EP_OutXfrComplete_int+0x214>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d124      	bne.n	8004446 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	461a      	mov	r2, r3
 8004414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004418:	6093      	str	r3, [r2, #8]
 800441a:	e032      	b.n	8004482 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d008      	beq.n	8004438 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004432:	461a      	mov	r2, r3
 8004434:	2320      	movs	r3, #32
 8004436:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f004 fcdc 	bl	8008dfc <HAL_PCD_DataOutStageCallback>
 8004444:	e01d      	b.n	8004482 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d114      	bne.n	8004476 <PCD_EP_OutXfrComplete_int+0x1fa>
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d108      	bne.n	8004476 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800446e:	461a      	mov	r2, r3
 8004470:	2100      	movs	r1, #0
 8004472:	f003 f80b 	bl	800748c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f004 fcbd 	bl	8008dfc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	4f54300a 	.word	0x4f54300a
 8004490:	4f54310a 	.word	0x4f54310a

08004494 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	333c      	adds	r3, #60	; 0x3c
 80044ac:	3304      	adds	r3, #4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a15      	ldr	r2, [pc, #84]	; (800451c <PCD_EP_OutSetupPacket_int+0x88>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d90e      	bls.n	80044e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f004 fc75 	bl	8008dd8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a0a      	ldr	r2, [pc, #40]	; (800451c <PCD_EP_OutSetupPacket_int+0x88>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d90c      	bls.n	8004510 <PCD_EP_OutSetupPacket_int+0x7c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d108      	bne.n	8004510 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004508:	461a      	mov	r2, r3
 800450a:	2101      	movs	r1, #1
 800450c:	f002 ffbe 	bl	800748c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	4f54300a 	.word	0x4f54300a

08004520 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
 800452c:	4613      	mov	r3, r2
 800452e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d107      	bne.n	800454e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800453e:	883b      	ldrh	r3, [r7, #0]
 8004540:	0419      	lsls	r1, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	430a      	orrs	r2, r1
 800454a:	629a      	str	r2, [r3, #40]	; 0x28
 800454c:	e028      	b.n	80045a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	4413      	add	r3, r2
 800455a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800455c:	2300      	movs	r3, #0
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	e00d      	b.n	800457e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	3340      	adds	r3, #64	; 0x40
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	4413      	add	r3, r2
 8004576:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	3301      	adds	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	7bfa      	ldrb	r2, [r7, #15]
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	3b01      	subs	r3, #1
 8004584:	429a      	cmp	r2, r3
 8004586:	d3ec      	bcc.n	8004562 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004588:	883b      	ldrh	r3, [r7, #0]
 800458a:	0418      	lsls	r0, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	3b01      	subs	r3, #1
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	4302      	orrs	r2, r0
 8004598:	3340      	adds	r3, #64	; 0x40
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e25b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d075      	beq.n	80046f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004606:	4ba3      	ldr	r3, [pc, #652]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b04      	cmp	r3, #4
 8004610:	d00c      	beq.n	800462c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004612:	4ba0      	ldr	r3, [pc, #640]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800461a:	2b08      	cmp	r3, #8
 800461c:	d112      	bne.n	8004644 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461e:	4b9d      	ldr	r3, [pc, #628]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462a:	d10b      	bne.n	8004644 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462c:	4b99      	ldr	r3, [pc, #612]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d05b      	beq.n	80046f0 <HAL_RCC_OscConfig+0x108>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d157      	bne.n	80046f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e236      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464c:	d106      	bne.n	800465c <HAL_RCC_OscConfig+0x74>
 800464e:	4b91      	ldr	r3, [pc, #580]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a90      	ldr	r2, [pc, #576]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e01d      	b.n	8004698 <HAL_RCC_OscConfig+0xb0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004664:	d10c      	bne.n	8004680 <HAL_RCC_OscConfig+0x98>
 8004666:	4b8b      	ldr	r3, [pc, #556]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a8a      	ldr	r2, [pc, #552]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	4b88      	ldr	r3, [pc, #544]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a87      	ldr	r2, [pc, #540]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e00b      	b.n	8004698 <HAL_RCC_OscConfig+0xb0>
 8004680:	4b84      	ldr	r3, [pc, #528]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a83      	ldr	r2, [pc, #524]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	4b81      	ldr	r3, [pc, #516]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a80      	ldr	r2, [pc, #512]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d013      	beq.n	80046c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fd fdbe 	bl	8002220 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fd fdba 	bl	8002220 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	; 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e1fb      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ba:	4b76      	ldr	r3, [pc, #472]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0xc0>
 80046c6:	e014      	b.n	80046f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fd fdaa 	bl	8002220 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d0:	f7fd fda6 	bl	8002220 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	; 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e1e7      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e2:	4b6c      	ldr	r3, [pc, #432]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0xe8>
 80046ee:	e000      	b.n	80046f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d063      	beq.n	80047c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046fe:	4b65      	ldr	r3, [pc, #404]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800470a:	4b62      	ldr	r3, [pc, #392]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004712:	2b08      	cmp	r3, #8
 8004714:	d11c      	bne.n	8004750 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004716:	4b5f      	ldr	r3, [pc, #380]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d116      	bne.n	8004750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004722:	4b5c      	ldr	r3, [pc, #368]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_RCC_OscConfig+0x152>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d001      	beq.n	800473a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e1bb      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473a:	4b56      	ldr	r3, [pc, #344]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4952      	ldr	r1, [pc, #328]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474e:	e03a      	b.n	80047c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d020      	beq.n	800479a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004758:	4b4f      	ldr	r3, [pc, #316]	; (8004898 <HAL_RCC_OscConfig+0x2b0>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fd fd5f 	bl	8002220 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004766:	f7fd fd5b 	bl	8002220 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e19c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004778:	4b46      	ldr	r3, [pc, #280]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004784:	4b43      	ldr	r3, [pc, #268]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4940      	ldr	r1, [pc, #256]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	4313      	orrs	r3, r2
 8004796:	600b      	str	r3, [r1, #0]
 8004798:	e015      	b.n	80047c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800479a:	4b3f      	ldr	r3, [pc, #252]	; (8004898 <HAL_RCC_OscConfig+0x2b0>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fd fd3e 	bl	8002220 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047a8:	f7fd fd3a 	bl	8002220 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e17b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ba:	4b36      	ldr	r3, [pc, #216]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d030      	beq.n	8004834 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d016      	beq.n	8004808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047da:	4b30      	ldr	r3, [pc, #192]	; (800489c <HAL_RCC_OscConfig+0x2b4>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fd fd1e 	bl	8002220 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e8:	f7fd fd1a 	bl	8002220 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e15b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fa:	4b26      	ldr	r3, [pc, #152]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x200>
 8004806:	e015      	b.n	8004834 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004808:	4b24      	ldr	r3, [pc, #144]	; (800489c <HAL_RCC_OscConfig+0x2b4>)
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480e:	f7fd fd07 	bl	8002220 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004816:	f7fd fd03 	bl	8002220 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e144      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004828:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 800482a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f0      	bne.n	8004816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80a0 	beq.w	8004982 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004842:	2300      	movs	r3, #0
 8004844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	60bb      	str	r3, [r7, #8]
 8004856:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	4a0e      	ldr	r2, [pc, #56]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004860:	6413      	str	r3, [r2, #64]	; 0x40
 8004862:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <HAL_RCC_OscConfig+0x2ac>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800486e:	2301      	movs	r3, #1
 8004870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_RCC_OscConfig+0x2b8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d121      	bne.n	80048c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <HAL_RCC_OscConfig+0x2b8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a07      	ldr	r2, [pc, #28]	; (80048a0 <HAL_RCC_OscConfig+0x2b8>)
 8004884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488a:	f7fd fcc9 	bl	8002220 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004890:	e011      	b.n	80048b6 <HAL_RCC_OscConfig+0x2ce>
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800
 8004898:	42470000 	.word	0x42470000
 800489c:	42470e80 	.word	0x42470e80
 80048a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a4:	f7fd fcbc 	bl	8002220 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e0fd      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b6:	4b81      	ldr	r3, [pc, #516]	; (8004abc <HAL_RCC_OscConfig+0x4d4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d106      	bne.n	80048d8 <HAL_RCC_OscConfig+0x2f0>
 80048ca:	4b7d      	ldr	r3, [pc, #500]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	4a7c      	ldr	r2, [pc, #496]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	6713      	str	r3, [r2, #112]	; 0x70
 80048d6:	e01c      	b.n	8004912 <HAL_RCC_OscConfig+0x32a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b05      	cmp	r3, #5
 80048de:	d10c      	bne.n	80048fa <HAL_RCC_OscConfig+0x312>
 80048e0:	4b77      	ldr	r3, [pc, #476]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	4a76      	ldr	r2, [pc, #472]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 80048e6:	f043 0304 	orr.w	r3, r3, #4
 80048ea:	6713      	str	r3, [r2, #112]	; 0x70
 80048ec:	4b74      	ldr	r3, [pc, #464]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f0:	4a73      	ldr	r2, [pc, #460]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	6713      	str	r3, [r2, #112]	; 0x70
 80048f8:	e00b      	b.n	8004912 <HAL_RCC_OscConfig+0x32a>
 80048fa:	4b71      	ldr	r3, [pc, #452]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	4a70      	ldr	r2, [pc, #448]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 8004900:	f023 0301 	bic.w	r3, r3, #1
 8004904:	6713      	str	r3, [r2, #112]	; 0x70
 8004906:	4b6e      	ldr	r3, [pc, #440]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490a:	4a6d      	ldr	r2, [pc, #436]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 800490c:	f023 0304 	bic.w	r3, r3, #4
 8004910:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d015      	beq.n	8004946 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fd fc81 	bl	8002220 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004920:	e00a      	b.n	8004938 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7fd fc7d 	bl	8002220 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e0bc      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004938:	4b61      	ldr	r3, [pc, #388]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ee      	beq.n	8004922 <HAL_RCC_OscConfig+0x33a>
 8004944:	e014      	b.n	8004970 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004946:	f7fd fc6b 	bl	8002220 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494c:	e00a      	b.n	8004964 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800494e:	f7fd fc67 	bl	8002220 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	f241 3288 	movw	r2, #5000	; 0x1388
 800495c:	4293      	cmp	r3, r2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e0a6      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004964:	4b56      	ldr	r3, [pc, #344]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1ee      	bne.n	800494e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d105      	bne.n	8004982 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004976:	4b52      	ldr	r3, [pc, #328]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	4a51      	ldr	r2, [pc, #324]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 800497c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004980:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8092 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800498c:	4b4c      	ldr	r3, [pc, #304]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b08      	cmp	r3, #8
 8004996:	d05c      	beq.n	8004a52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d141      	bne.n	8004a24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a0:	4b48      	ldr	r3, [pc, #288]	; (8004ac4 <HAL_RCC_OscConfig+0x4dc>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a6:	f7fd fc3b 	bl	8002220 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ae:	f7fd fc37 	bl	8002220 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e078      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c0:	4b3f      	ldr	r3, [pc, #252]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f0      	bne.n	80049ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69da      	ldr	r2, [r3, #28]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	019b      	lsls	r3, r3, #6
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	3b01      	subs	r3, #1
 80049e6:	041b      	lsls	r3, r3, #16
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	061b      	lsls	r3, r3, #24
 80049f0:	4933      	ldr	r1, [pc, #204]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f6:	4b33      	ldr	r3, [pc, #204]	; (8004ac4 <HAL_RCC_OscConfig+0x4dc>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fc:	f7fd fc10 	bl	8002220 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a04:	f7fd fc0c 	bl	8002220 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e04d      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a16:	4b2a      	ldr	r3, [pc, #168]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x41c>
 8004a22:	e045      	b.n	8004ab0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a24:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <HAL_RCC_OscConfig+0x4dc>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2a:	f7fd fbf9 	bl	8002220 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a32:	f7fd fbf5 	bl	8002220 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e036      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a44:	4b1e      	ldr	r3, [pc, #120]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <HAL_RCC_OscConfig+0x44a>
 8004a50:	e02e      	b.n	8004ab0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e029      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a5e:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <HAL_RCC_OscConfig+0x4d8>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d11c      	bne.n	8004aac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d115      	bne.n	8004aac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a86:	4013      	ands	r3, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10d      	bne.n	8004aac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d106      	bne.n	8004aac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40007000 	.word	0x40007000
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	42470060 	.word	0x42470060

08004ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0cc      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004adc:	4b68      	ldr	r3, [pc, #416]	; (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d90c      	bls.n	8004b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aea:	4b65      	ldr	r3, [pc, #404]	; (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af2:	4b63      	ldr	r3, [pc, #396]	; (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0b8      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d020      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b1c:	4b59      	ldr	r3, [pc, #356]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a58      	ldr	r2, [pc, #352]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b34:	4b53      	ldr	r3, [pc, #332]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a52      	ldr	r2, [pc, #328]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b40:	4b50      	ldr	r3, [pc, #320]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	494d      	ldr	r1, [pc, #308]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d044      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b66:	4b47      	ldr	r3, [pc, #284]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d119      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e07f      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d003      	beq.n	8004b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d107      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b86:	4b3f      	ldr	r3, [pc, #252]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e06f      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b96:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e067      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ba6:	4b37      	ldr	r3, [pc, #220]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f023 0203 	bic.w	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4934      	ldr	r1, [pc, #208]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb8:	f7fd fb32 	bl	8002220 <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc0:	f7fd fb2e 	bl	8002220 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e04f      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd6:	4b2b      	ldr	r3, [pc, #172]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 020c 	and.w	r2, r3, #12
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d1eb      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004be8:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d20c      	bcs.n	8004c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf6:	4b22      	ldr	r3, [pc, #136]	; (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e032      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c1c:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	4916      	ldr	r1, [pc, #88]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c3a:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	490e      	ldr	r1, [pc, #56]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c4e:	f000 f821 	bl	8004c94 <HAL_RCC_GetSysClockFreq>
 8004c52:	4601      	mov	r1, r0
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <HAL_RCC_ClockConfig+0x1c0>)
 8004c60:	5cd3      	ldrb	r3, [r2, r3]
 8004c62:	fa21 f303 	lsr.w	r3, r1, r3
 8004c66:	4a09      	ldr	r2, [pc, #36]	; (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fd fa92 	bl	8002198 <HAL_InitTick>

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023c00 	.word	0x40023c00
 8004c84:	40023800 	.word	0x40023800
 8004c88:	0800a354 	.word	0x0800a354
 8004c8c:	20000008 	.word	0x20000008
 8004c90:	2000000c 	.word	0x2000000c

08004c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	607b      	str	r3, [r7, #4]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004caa:	4b50      	ldr	r3, [pc, #320]	; (8004dec <HAL_RCC_GetSysClockFreq+0x158>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d007      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x32>
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d008      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0x38>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f040 808d 	bne.w	8004dda <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b4b      	ldr	r3, [pc, #300]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004cc2:	60bb      	str	r3, [r7, #8]
       break;
 8004cc4:	e08c      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cc6:	4b4b      	ldr	r3, [pc, #300]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cc8:	60bb      	str	r3, [r7, #8]
      break;
 8004cca:	e089      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ccc:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCC_GetSysClockFreq+0x158>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cd6:	4b45      	ldr	r3, [pc, #276]	; (8004dec <HAL_RCC_GetSysClockFreq+0x158>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d023      	beq.n	8004d2a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce2:	4b42      	ldr	r3, [pc, #264]	; (8004dec <HAL_RCC_GetSysClockFreq+0x158>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	f04f 0400 	mov.w	r4, #0
 8004cec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	ea03 0501 	and.w	r5, r3, r1
 8004cf8:	ea04 0602 	and.w	r6, r4, r2
 8004cfc:	4a3d      	ldr	r2, [pc, #244]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cfe:	fb02 f106 	mul.w	r1, r2, r6
 8004d02:	2200      	movs	r2, #0
 8004d04:	fb02 f205 	mul.w	r2, r2, r5
 8004d08:	440a      	add	r2, r1
 8004d0a:	493a      	ldr	r1, [pc, #232]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d0c:	fba5 0101 	umull	r0, r1, r5, r1
 8004d10:	1853      	adds	r3, r2, r1
 8004d12:	4619      	mov	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f04f 0400 	mov.w	r4, #0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	f7fb fa5b 	bl	80001d8 <__aeabi_uldivmod>
 8004d22:	4603      	mov	r3, r0
 8004d24:	460c      	mov	r4, r1
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	e049      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2a:	4b30      	ldr	r3, [pc, #192]	; (8004dec <HAL_RCC_GetSysClockFreq+0x158>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	099b      	lsrs	r3, r3, #6
 8004d30:	f04f 0400 	mov.w	r4, #0
 8004d34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	ea03 0501 	and.w	r5, r3, r1
 8004d40:	ea04 0602 	and.w	r6, r4, r2
 8004d44:	4629      	mov	r1, r5
 8004d46:	4632      	mov	r2, r6
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	f04f 0400 	mov.w	r4, #0
 8004d50:	0154      	lsls	r4, r2, #5
 8004d52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d56:	014b      	lsls	r3, r1, #5
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	1b49      	subs	r1, r1, r5
 8004d5e:	eb62 0206 	sbc.w	r2, r2, r6
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	f04f 0400 	mov.w	r4, #0
 8004d6a:	0194      	lsls	r4, r2, #6
 8004d6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d70:	018b      	lsls	r3, r1, #6
 8004d72:	1a5b      	subs	r3, r3, r1
 8004d74:	eb64 0402 	sbc.w	r4, r4, r2
 8004d78:	f04f 0100 	mov.w	r1, #0
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	00e2      	lsls	r2, r4, #3
 8004d82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d86:	00d9      	lsls	r1, r3, #3
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4614      	mov	r4, r2
 8004d8c:	195b      	adds	r3, r3, r5
 8004d8e:	eb44 0406 	adc.w	r4, r4, r6
 8004d92:	f04f 0100 	mov.w	r1, #0
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	02a2      	lsls	r2, r4, #10
 8004d9c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004da0:	0299      	lsls	r1, r3, #10
 8004da2:	460b      	mov	r3, r1
 8004da4:	4614      	mov	r4, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	4621      	mov	r1, r4
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f04f 0400 	mov.w	r4, #0
 8004db0:	461a      	mov	r2, r3
 8004db2:	4623      	mov	r3, r4
 8004db4:	f7fb fa10 	bl	80001d8 <__aeabi_uldivmod>
 8004db8:	4603      	mov	r3, r0
 8004dba:	460c      	mov	r4, r1
 8004dbc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <HAL_RCC_GetSysClockFreq+0x158>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	0c1b      	lsrs	r3, r3, #16
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	3301      	adds	r3, #1
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd6:	60bb      	str	r3, [r7, #8]
      break;
 8004dd8:	e002      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ddc:	60bb      	str	r3, [r7, #8]
      break;
 8004dde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004de0:	68bb      	ldr	r3, [r7, #8]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40023800 	.word	0x40023800
 8004df0:	00f42400 	.word	0x00f42400
 8004df4:	017d7840 	.word	0x017d7840

08004df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000008 	.word	0x20000008

08004e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e14:	f7ff fff0 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e18:	4601      	mov	r1, r0
 8004e1a:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	0a9b      	lsrs	r3, r3, #10
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4a03      	ldr	r2, [pc, #12]	; (8004e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e26:	5cd3      	ldrb	r3, [r2, r3]
 8004e28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40023800 	.word	0x40023800
 8004e34:	0800a364 	.word	0x0800a364

08004e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e056      	b.n	8004ef8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fb ff9d 	bl	8000da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	ea42 0103 	orr.w	r1, r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	f003 0104 	and.w	r1, r3, #4
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69da      	ldr	r2, [r3, #28]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_SPI_Transmit+0x22>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e11e      	b.n	8005160 <HAL_SPI_Transmit+0x260>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f2a:	f7fd f979 	bl	8002220 <HAL_GetTick>
 8004f2e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d002      	beq.n	8004f46 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
 8004f42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f44:	e103      	b.n	800514e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_SPI_Transmit+0x52>
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f56:	e0fa      	b.n	800514e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	88fa      	ldrh	r2, [r7, #6]
 8004f70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9e:	d107      	bne.n	8004fb0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d007      	beq.n	8004fce <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd6:	d14b      	bne.n	8005070 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <HAL_SPI_Transmit+0xe6>
 8004fe0:	8afb      	ldrh	r3, [r7, #22]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d13e      	bne.n	8005064 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	881a      	ldrh	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	1c9a      	adds	r2, r3, #2
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800500a:	e02b      	b.n	8005064 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	d112      	bne.n	8005040 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	881a      	ldrh	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	1c9a      	adds	r2, r3, #2
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	86da      	strh	r2, [r3, #54]	; 0x36
 800503e:	e011      	b.n	8005064 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005040:	f7fd f8ee 	bl	8002220 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d803      	bhi.n	8005058 <HAL_SPI_Transmit+0x158>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d102      	bne.n	800505e <HAL_SPI_Transmit+0x15e>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005062:	e074      	b.n	800514e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1ce      	bne.n	800500c <HAL_SPI_Transmit+0x10c>
 800506e:	e04c      	b.n	800510a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_SPI_Transmit+0x17e>
 8005078:	8afb      	ldrh	r3, [r7, #22]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d140      	bne.n	8005100 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80050a4:	e02c      	b.n	8005100 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d113      	bne.n	80050dc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	7812      	ldrb	r2, [r2, #0]
 80050c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80050da:	e011      	b.n	8005100 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050dc:	f7fd f8a0 	bl	8002220 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d803      	bhi.n	80050f4 <HAL_SPI_Transmit+0x1f4>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	d102      	bne.n	80050fa <HAL_SPI_Transmit+0x1fa>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050fe:	e026      	b.n	800514e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1cd      	bne.n	80050a6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fba4 	bl	800585c <SPI_EndRxTxTransaction>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	77fb      	strb	r3, [r7, #31]
 800514a:	e000      	b.n	800514e <HAL_SPI_Transmit+0x24e>
  }

error:
 800514c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800515e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af02      	add	r7, sp, #8
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005184:	d112      	bne.n	80051ac <HAL_SPI_Receive+0x44>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10e      	bne.n	80051ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2204      	movs	r2, #4
 8005192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f8e9 	bl	800537a <HAL_SPI_TransmitReceive>
 80051a8:	4603      	mov	r3, r0
 80051aa:	e0e2      	b.n	8005372 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <HAL_SPI_Receive+0x52>
 80051b6:	2302      	movs	r3, #2
 80051b8:	e0db      	b.n	8005372 <HAL_SPI_Receive+0x20a>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051c2:	f7fd f82d 	bl	8002220 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d002      	beq.n	80051da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
 80051d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051d8:	e0c2      	b.n	8005360 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <HAL_SPI_Receive+0x7e>
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051ea:	e0b9      	b.n	8005360 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2204      	movs	r2, #4
 80051f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	88fa      	ldrh	r2, [r7, #6]
 800520a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005232:	d107      	bne.n	8005244 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005242:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d007      	beq.n	8005262 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005260:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d162      	bne.n	8005330 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800526a:	e02e      	b.n	80052ca <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b01      	cmp	r3, #1
 8005278:	d115      	bne.n	80052a6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f103 020c 	add.w	r2, r3, #12
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	7812      	ldrb	r2, [r2, #0]
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052a4:	e011      	b.n	80052ca <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052a6:	f7fc ffbb 	bl	8002220 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d803      	bhi.n	80052be <HAL_SPI_Receive+0x156>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d102      	bne.n	80052c4 <HAL_SPI_Receive+0x15c>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052c8:	e04a      	b.n	8005360 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1cb      	bne.n	800526c <HAL_SPI_Receive+0x104>
 80052d4:	e031      	b.n	800533a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d113      	bne.n	800530c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	b292      	uxth	r2, r2
 80052f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	1c9a      	adds	r2, r3, #2
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	87da      	strh	r2, [r3, #62]	; 0x3e
 800530a:	e011      	b.n	8005330 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800530c:	f7fc ff88 	bl	8002220 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d803      	bhi.n	8005324 <HAL_SPI_Receive+0x1bc>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d102      	bne.n	800532a <HAL_SPI_Receive+0x1c2>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d102      	bne.n	8005330 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800532e:	e017      	b.n	8005360 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1cd      	bne.n	80052d6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fa27 	bl	8005792 <SPI_EndRxTransaction>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	75fb      	strb	r3, [r7, #23]
 800535c:	e000      	b.n	8005360 <HAL_SPI_Receive+0x1f8>
  }

error :
 800535e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005370:	7dfb      	ldrb	r3, [r7, #23]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b08c      	sub	sp, #48	; 0x30
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
 8005386:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005388:	2301      	movs	r3, #1
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x26>
 800539c:	2302      	movs	r3, #2
 800539e:	e18a      	b.n	80056b6 <HAL_SPI_TransmitReceive+0x33c>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053a8:	f7fc ff3a 	bl	8002220 <HAL_GetTick>
 80053ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053be:	887b      	ldrh	r3, [r7, #2]
 80053c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d00f      	beq.n	80053ea <HAL_SPI_TransmitReceive+0x70>
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d0:	d107      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d103      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x68>
 80053da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d003      	beq.n	80053ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053e2:	2302      	movs	r3, #2
 80053e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053e8:	e15b      	b.n	80056a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_SPI_TransmitReceive+0x82>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_SPI_TransmitReceive+0x82>
 80053f6:	887b      	ldrh	r3, [r7, #2]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d103      	bne.n	8005404 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005402:	e14e      	b.n	80056a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b04      	cmp	r3, #4
 800540e:	d003      	beq.n	8005418 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2205      	movs	r2, #5
 8005414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	887a      	ldrh	r2, [r7, #2]
 8005428:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	887a      	ldrh	r2, [r7, #2]
 800542e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	887a      	ldrh	r2, [r7, #2]
 800543a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	887a      	ldrh	r2, [r7, #2]
 8005440:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d007      	beq.n	800546c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800546a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005474:	d178      	bne.n	8005568 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_SPI_TransmitReceive+0x10a>
 800547e:	8b7b      	ldrh	r3, [r7, #26]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d166      	bne.n	8005552 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	1c9a      	adds	r2, r3, #2
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054a8:	e053      	b.n	8005552 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d11b      	bne.n	80054f0 <HAL_SPI_TransmitReceive+0x176>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d016      	beq.n	80054f0 <HAL_SPI_TransmitReceive+0x176>
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d113      	bne.n	80054f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	881a      	ldrh	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d119      	bne.n	8005532 <HAL_SPI_TransmitReceive+0x1b8>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d014      	beq.n	8005532 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	b292      	uxth	r2, r2
 8005514:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	1c9a      	adds	r2, r3, #2
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800552e:	2301      	movs	r3, #1
 8005530:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005532:	f7fc fe75 	bl	8002220 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800553e:	429a      	cmp	r2, r3
 8005540:	d807      	bhi.n	8005552 <HAL_SPI_TransmitReceive+0x1d8>
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d003      	beq.n	8005552 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005550:	e0a7      	b.n	80056a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1a6      	bne.n	80054aa <HAL_SPI_TransmitReceive+0x130>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1a1      	bne.n	80054aa <HAL_SPI_TransmitReceive+0x130>
 8005566:	e07c      	b.n	8005662 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_SPI_TransmitReceive+0x1fc>
 8005570:	8b7b      	ldrh	r3, [r7, #26]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d16b      	bne.n	800564e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	7812      	ldrb	r2, [r2, #0]
 8005582:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800559c:	e057      	b.n	800564e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d11c      	bne.n	80055e6 <HAL_SPI_TransmitReceive+0x26c>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d017      	beq.n	80055e6 <HAL_SPI_TransmitReceive+0x26c>
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d114      	bne.n	80055e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	7812      	ldrb	r2, [r2, #0]
 80055c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d119      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x2ae>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d014      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005624:	2301      	movs	r3, #1
 8005626:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005628:	f7fc fdfa 	bl	8002220 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005634:	429a      	cmp	r2, r3
 8005636:	d803      	bhi.n	8005640 <HAL_SPI_TransmitReceive+0x2c6>
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563e:	d102      	bne.n	8005646 <HAL_SPI_TransmitReceive+0x2cc>
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800564c:	e029      	b.n	80056a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1a2      	bne.n	800559e <HAL_SPI_TransmitReceive+0x224>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d19d      	bne.n	800559e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f8f8 	bl	800585c <SPI_EndRxTxTransaction>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d006      	beq.n	8005680 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800567e:	e010      	b.n	80056a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	e000      	b.n	80056a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80056a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3730      	adds	r7, #48	; 0x30
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	4613      	mov	r3, r2
 80056cc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ce:	e04c      	b.n	800576a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d048      	beq.n	800576a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80056d8:	f7fc fda2 	bl	8002220 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d902      	bls.n	80056ee <SPI_WaitFlagStateUntilTimeout+0x30>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d13d      	bne.n	800576a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005706:	d111      	bne.n	800572c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005710:	d004      	beq.n	800571c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571a:	d107      	bne.n	800572c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005734:	d10f      	bne.n	8005756 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e00f      	b.n	800578a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4013      	ands	r3, r2
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	429a      	cmp	r2, r3
 8005778:	bf0c      	ite	eq
 800577a:	2301      	moveq	r3, #1
 800577c:	2300      	movne	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	429a      	cmp	r2, r3
 8005786:	d1a3      	bne.n	80056d0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b086      	sub	sp, #24
 8005796:	af02      	add	r7, sp, #8
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057a6:	d111      	bne.n	80057cc <SPI_EndRxTransaction+0x3a>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b0:	d004      	beq.n	80057bc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ba:	d107      	bne.n	80057cc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ca:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057d4:	d12a      	bne.n	800582c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057de:	d012      	beq.n	8005806 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2200      	movs	r2, #0
 80057e8:	2180      	movs	r1, #128	; 0x80
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff ff67 	bl	80056be <SPI_WaitFlagStateUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d02d      	beq.n	8005852 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fa:	f043 0220 	orr.w	r2, r3, #32
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e026      	b.n	8005854 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2200      	movs	r2, #0
 800580e:	2101      	movs	r1, #1
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7ff ff54 	bl	80056be <SPI_WaitFlagStateUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01a      	beq.n	8005852 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	f043 0220 	orr.w	r2, r3, #32
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e013      	b.n	8005854 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2200      	movs	r2, #0
 8005834:	2101      	movs	r1, #1
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff ff41 	bl	80056be <SPI_WaitFlagStateUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	f043 0220 	orr.w	r2, r3, #32
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e000      	b.n	8005854 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005868:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <SPI_EndRxTxTransaction+0x7c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <SPI_EndRxTxTransaction+0x80>)
 800586e:	fba2 2303 	umull	r2, r3, r2, r3
 8005872:	0d5b      	lsrs	r3, r3, #21
 8005874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005878:	fb02 f303 	mul.w	r3, r2, r3
 800587c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005886:	d112      	bne.n	80058ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	2180      	movs	r1, #128	; 0x80
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff ff13 	bl	80056be <SPI_WaitFlagStateUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d016      	beq.n	80058cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a2:	f043 0220 	orr.w	r2, r3, #32
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e00f      	b.n	80058ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c4:	2b80      	cmp	r3, #128	; 0x80
 80058c6:	d0f2      	beq.n	80058ae <SPI_EndRxTxTransaction+0x52>
 80058c8:	e000      	b.n	80058cc <SPI_EndRxTxTransaction+0x70>
        break;
 80058ca:	bf00      	nop
  }

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000008 	.word	0x20000008
 80058dc:	165e9f81 	.word	0x165e9f81

080058e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e083      	b.n	80059fc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7fb ffb7 	bl	800187c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005924:	f023 0307 	bic.w	r3, r3, #7
 8005928:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3304      	adds	r3, #4
 8005932:	4619      	mov	r1, r3
 8005934:	4610      	mov	r0, r2
 8005936:	f000 f9ed 	bl	8005d14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	4313      	orrs	r3, r2
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005980:	f023 030c 	bic.w	r3, r3, #12
 8005984:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800598c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005990:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	4313      	orrs	r3, r2
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	011a      	lsls	r2, r3, #4
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	031b      	lsls	r3, r3, #12
 80059b0:	4313      	orrs	r3, r2
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	4313      	orrs	r3, r2
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <HAL_TIM_Encoder_Start_IT+0x16>
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d010      	beq.n	8005a3a <HAL_TIM_Encoder_Start_IT+0x36>
 8005a18:	e01f      	b.n	8005a5a <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 f9f6 	bl	8005e14 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0202 	orr.w	r2, r2, #2
 8005a36:	60da      	str	r2, [r3, #12]
      break;
 8005a38:	e02e      	b.n	8005a98 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	2104      	movs	r1, #4
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 f9e6 	bl	8005e14 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0204 	orr.w	r2, r2, #4
 8005a56:	60da      	str	r2, [r3, #12]
      break;
 8005a58:	e01e      	b.n	8005a98 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 f9d6 	bl	8005e14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	2104      	movs	r1, #4
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 f9cf 	bl	8005e14 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0202 	orr.w	r2, r2, #2
 8005a84:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0204 	orr.w	r2, r2, #4
 8005a94:	60da      	str	r2, [r3, #12]
      break;
 8005a96:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d122      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d11b      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f06f 0202 	mvn.w	r2, #2
 8005ade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fa ffd9 	bl	8000aac <HAL_TIM_IC_CaptureCallback>
 8005afa:	e005      	b.n	8005b08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f8ea 	bl	8005cd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f8f1 	bl	8005cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d122      	bne.n	8005b62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d11b      	bne.n	8005b62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f06f 0204 	mvn.w	r2, #4
 8005b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7fa ffaf 	bl	8000aac <HAL_TIM_IC_CaptureCallback>
 8005b4e:	e005      	b.n	8005b5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f8c0 	bl	8005cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f8c7 	bl	8005cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d122      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d11b      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f06f 0208 	mvn.w	r2, #8
 8005b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7fa ff85 	bl	8000aac <HAL_TIM_IC_CaptureCallback>
 8005ba2:	e005      	b.n	8005bb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f896 	bl	8005cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f89d 	bl	8005cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d122      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d11b      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f06f 0210 	mvn.w	r2, #16
 8005bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2208      	movs	r2, #8
 8005be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7fa ff5b 	bl	8000aac <HAL_TIM_IC_CaptureCallback>
 8005bf6:	e005      	b.n	8005c04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f86c 	bl	8005cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f873 	bl	8005cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10e      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d107      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f06f 0201 	mvn.w	r2, #1
 8005c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f846 	bl	8005cc2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c40:	2b80      	cmp	r3, #128	; 0x80
 8005c42:	d10e      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4e:	2b80      	cmp	r3, #128	; 0x80
 8005c50:	d107      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f977 	bl	8005f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d10e      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d107      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f838 	bl	8005cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d10e      	bne.n	8005cba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d107      	bne.n	8005cba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f06f 0220 	mvn.w	r2, #32
 8005cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f941 	bl	8005f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
	...

08005d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a34      	ldr	r2, [pc, #208]	; (8005df8 <TIM_Base_SetConfig+0xe4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00f      	beq.n	8005d4c <TIM_Base_SetConfig+0x38>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d32:	d00b      	beq.n	8005d4c <TIM_Base_SetConfig+0x38>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a31      	ldr	r2, [pc, #196]	; (8005dfc <TIM_Base_SetConfig+0xe8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d007      	beq.n	8005d4c <TIM_Base_SetConfig+0x38>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a30      	ldr	r2, [pc, #192]	; (8005e00 <TIM_Base_SetConfig+0xec>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_Base_SetConfig+0x38>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a2f      	ldr	r2, [pc, #188]	; (8005e04 <TIM_Base_SetConfig+0xf0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d108      	bne.n	8005d5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a25      	ldr	r2, [pc, #148]	; (8005df8 <TIM_Base_SetConfig+0xe4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d01b      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6c:	d017      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <TIM_Base_SetConfig+0xe8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d013      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a21      	ldr	r2, [pc, #132]	; (8005e00 <TIM_Base_SetConfig+0xec>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00f      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a20      	ldr	r2, [pc, #128]	; (8005e04 <TIM_Base_SetConfig+0xf0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00b      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <TIM_Base_SetConfig+0xf4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d007      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <TIM_Base_SetConfig+0xf8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1d      	ldr	r2, [pc, #116]	; (8005e10 <TIM_Base_SetConfig+0xfc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d108      	bne.n	8005db0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a08      	ldr	r2, [pc, #32]	; (8005df8 <TIM_Base_SetConfig+0xe4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d103      	bne.n	8005de4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	615a      	str	r2, [r3, #20]
}
 8005dea:	bf00      	nop
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800

08005e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	2201      	movs	r2, #1
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1a      	ldr	r2, [r3, #32]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	401a      	ands	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
	...

08005e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e050      	b.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d018      	beq.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec4:	d013      	beq.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d00e      	beq.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a16      	ldr	r2, [pc, #88]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d009      	beq.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d004      	beq.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d10c      	bne.n	8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40014000 	.word	0x40014000

08005f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f64:	b084      	sub	sp, #16
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	f107 001c 	add.w	r0, r7, #28
 8005f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d122      	bne.n	8005fc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d105      	bne.n	8005fb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 fac6 	bl	8007548 <USB_CoreReset>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
 8005fc0:	e01a      	b.n	8005ff8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f001 faba 	bl	8007548 <USB_CoreReset>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
 8005fea:	e005      	b.n	8005ff8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d10b      	bne.n	8006016 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f043 0206 	orr.w	r2, r3, #6
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f043 0220 	orr.w	r2, r3, #32
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006016:	7bfb      	ldrb	r3, [r7, #15]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006022:	b004      	add	sp, #16
 8006024:	4770      	bx	lr
	...

08006028 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d165      	bne.n	8006108 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4a41      	ldr	r2, [pc, #260]	; (8006144 <USB_SetTurnaroundTime+0x11c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d906      	bls.n	8006052 <USB_SetTurnaroundTime+0x2a>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4a40      	ldr	r2, [pc, #256]	; (8006148 <USB_SetTurnaroundTime+0x120>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d802      	bhi.n	8006052 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800604c:	230f      	movs	r3, #15
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e062      	b.n	8006118 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4a3c      	ldr	r2, [pc, #240]	; (8006148 <USB_SetTurnaroundTime+0x120>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d906      	bls.n	8006068 <USB_SetTurnaroundTime+0x40>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4a3b      	ldr	r2, [pc, #236]	; (800614c <USB_SetTurnaroundTime+0x124>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d802      	bhi.n	8006068 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006062:	230e      	movs	r3, #14
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	e057      	b.n	8006118 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4a38      	ldr	r2, [pc, #224]	; (800614c <USB_SetTurnaroundTime+0x124>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d906      	bls.n	800607e <USB_SetTurnaroundTime+0x56>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4a37      	ldr	r2, [pc, #220]	; (8006150 <USB_SetTurnaroundTime+0x128>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d802      	bhi.n	800607e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006078:	230d      	movs	r3, #13
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e04c      	b.n	8006118 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4a33      	ldr	r2, [pc, #204]	; (8006150 <USB_SetTurnaroundTime+0x128>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d906      	bls.n	8006094 <USB_SetTurnaroundTime+0x6c>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4a32      	ldr	r2, [pc, #200]	; (8006154 <USB_SetTurnaroundTime+0x12c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d802      	bhi.n	8006094 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800608e:	230c      	movs	r3, #12
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e041      	b.n	8006118 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4a2f      	ldr	r2, [pc, #188]	; (8006154 <USB_SetTurnaroundTime+0x12c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d906      	bls.n	80060aa <USB_SetTurnaroundTime+0x82>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4a2e      	ldr	r2, [pc, #184]	; (8006158 <USB_SetTurnaroundTime+0x130>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d802      	bhi.n	80060aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80060a4:	230b      	movs	r3, #11
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	e036      	b.n	8006118 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4a2a      	ldr	r2, [pc, #168]	; (8006158 <USB_SetTurnaroundTime+0x130>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d906      	bls.n	80060c0 <USB_SetTurnaroundTime+0x98>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	4a29      	ldr	r2, [pc, #164]	; (800615c <USB_SetTurnaroundTime+0x134>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d802      	bhi.n	80060c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80060ba:	230a      	movs	r3, #10
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	e02b      	b.n	8006118 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	4a26      	ldr	r2, [pc, #152]	; (800615c <USB_SetTurnaroundTime+0x134>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d906      	bls.n	80060d6 <USB_SetTurnaroundTime+0xae>
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4a25      	ldr	r2, [pc, #148]	; (8006160 <USB_SetTurnaroundTime+0x138>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d802      	bhi.n	80060d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80060d0:	2309      	movs	r3, #9
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e020      	b.n	8006118 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4a21      	ldr	r2, [pc, #132]	; (8006160 <USB_SetTurnaroundTime+0x138>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d906      	bls.n	80060ec <USB_SetTurnaroundTime+0xc4>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	4a20      	ldr	r2, [pc, #128]	; (8006164 <USB_SetTurnaroundTime+0x13c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d802      	bhi.n	80060ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80060e6:	2308      	movs	r3, #8
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	e015      	b.n	8006118 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <USB_SetTurnaroundTime+0x13c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d906      	bls.n	8006102 <USB_SetTurnaroundTime+0xda>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <USB_SetTurnaroundTime+0x140>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d802      	bhi.n	8006102 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80060fc:	2307      	movs	r3, #7
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	e00a      	b.n	8006118 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006102:	2306      	movs	r3, #6
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	e007      	b.n	8006118 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d102      	bne.n	8006114 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800610e:	2309      	movs	r3, #9
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	e001      	b.n	8006118 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006114:	2309      	movs	r3, #9
 8006116:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	029b      	lsls	r3, r3, #10
 800612c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006130:	431a      	orrs	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	371c      	adds	r7, #28
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	00d8acbf 	.word	0x00d8acbf
 8006148:	00e4e1bf 	.word	0x00e4e1bf
 800614c:	00f423ff 	.word	0x00f423ff
 8006150:	0106737f 	.word	0x0106737f
 8006154:	011a499f 	.word	0x011a499f
 8006158:	01312cff 	.word	0x01312cff
 800615c:	014ca43f 	.word	0x014ca43f
 8006160:	016e35ff 	.word	0x016e35ff
 8006164:	01a6ab1f 	.word	0x01a6ab1f
 8006168:	01e847ff 	.word	0x01e847ff

0800616c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f043 0201 	orr.w	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f023 0201 	bic.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d106      	bne.n	80061dc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60da      	str	r2, [r3, #12]
 80061da:	e00b      	b.n	80061f4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60da      	str	r2, [r3, #12]
 80061ee:	e001      	b.n	80061f4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e003      	b.n	80061fc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80061f4:	2032      	movs	r0, #50	; 0x32
 80061f6:	f7fc f81f 	bl	8002238 <HAL_Delay>

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006204:	b084      	sub	sp, #16
 8006206:	b580      	push	{r7, lr}
 8006208:	b086      	sub	sp, #24
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	e009      	b.n	8006238 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3340      	adds	r3, #64	; 0x40
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	2200      	movs	r2, #0
 8006230:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	3301      	adds	r3, #1
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b0e      	cmp	r3, #14
 800623c:	d9f2      	bls.n	8006224 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800623e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11c      	bne.n	800627e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006252:	f043 0302 	orr.w	r3, r3, #2
 8006256:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	; 0x38
 800627c:	e00b      	b.n	8006296 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800629c:	461a      	mov	r2, r3
 800629e:	2300      	movs	r3, #0
 80062a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a8:	4619      	mov	r1, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b0:	461a      	mov	r2, r3
 80062b2:	680b      	ldr	r3, [r1, #0]
 80062b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d10c      	bne.n	80062d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062c2:	2100      	movs	r1, #0
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f949 	bl	800655c <USB_SetDevSpeed>
 80062ca:	e008      	b.n	80062de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062cc:	2101      	movs	r1, #1
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f944 	bl	800655c <USB_SetDevSpeed>
 80062d4:	e003      	b.n	80062de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062d6:	2103      	movs	r1, #3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f93f 	bl	800655c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062de:	2110      	movs	r1, #16
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f8f3 	bl	80064cc <USB_FlushTxFifo>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f911 	bl	8006518 <USB_FlushRxFifo>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006306:	461a      	mov	r2, r3
 8006308:	2300      	movs	r3, #0
 800630a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	461a      	mov	r2, r3
 8006314:	2300      	movs	r3, #0
 8006316:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631e:	461a      	mov	r2, r3
 8006320:	2300      	movs	r3, #0
 8006322:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006324:	2300      	movs	r3, #0
 8006326:	613b      	str	r3, [r7, #16]
 8006328:	e043      	b.n	80063b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800633c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006340:	d118      	bne.n	8006374 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006354:	461a      	mov	r2, r3
 8006356:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	e013      	b.n	8006386 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636a:	461a      	mov	r2, r3
 800636c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	e008      	b.n	8006386 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	461a      	mov	r2, r3
 8006382:	2300      	movs	r3, #0
 8006384:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006392:	461a      	mov	r2, r3
 8006394:	2300      	movs	r3, #0
 8006396:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a4:	461a      	mov	r2, r3
 80063a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	3301      	adds	r3, #1
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d3b7      	bcc.n	800632a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ba:	2300      	movs	r3, #0
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	e043      	b.n	8006448 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063d6:	d118      	bne.n	800640a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ea:	461a      	mov	r2, r3
 80063ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e013      	b.n	800641c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006400:	461a      	mov	r2, r3
 8006402:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	e008      	b.n	800641c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	461a      	mov	r2, r3
 8006418:	2300      	movs	r3, #0
 800641a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006428:	461a      	mov	r2, r3
 800642a:	2300      	movs	r3, #0
 800642c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	461a      	mov	r2, r3
 800643c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006440:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	3301      	adds	r3, #1
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	429a      	cmp	r2, r3
 800644e:	d3b7      	bcc.n	80063c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800645e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006462:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006470:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	2b00      	cmp	r3, #0
 8006476:	d105      	bne.n	8006484 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f043 0210 	orr.w	r2, r3, #16
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699a      	ldr	r2, [r3, #24]
 8006488:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <USB_DevInit+0x2c4>)
 800648a:	4313      	orrs	r3, r2
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f043 0208 	orr.w	r2, r3, #8
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d107      	bne.n	80064b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064b0:	f043 0304 	orr.w	r3, r3, #4
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064c4:	b004      	add	sp, #16
 80064c6:	4770      	bx	lr
 80064c8:	803c3800 	.word	0x803c3800

080064cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	019b      	lsls	r3, r3, #6
 80064de:	f043 0220 	orr.w	r2, r3, #32
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <USB_FlushTxFifo+0x48>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d901      	bls.n	80064f8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e006      	b.n	8006506 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b20      	cmp	r3, #32
 8006502:	d0f0      	beq.n	80064e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	00030d40 	.word	0x00030d40

08006518 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2210      	movs	r2, #16
 8006528:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <USB_FlushRxFifo+0x40>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d901      	bls.n	800653c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e006      	b.n	800654a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0310 	and.w	r3, r3, #16
 8006544:	2b10      	cmp	r3, #16
 8006546:	d0f0      	beq.n	800652a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	00030d40 	.word	0x00030d40

0800655c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800657c:	4313      	orrs	r3, r2
 800657e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800658e:	b480      	push	{r7}
 8006590:	b087      	sub	sp, #28
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0306 	and.w	r3, r3, #6
 80065a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75fb      	strb	r3, [r7, #23]
 80065b2:	e00a      	b.n	80065ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d002      	beq.n	80065c0 <USB_GetDevSpeed+0x32>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b06      	cmp	r3, #6
 80065be:	d102      	bne.n	80065c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065c0:	2302      	movs	r3, #2
 80065c2:	75fb      	strb	r3, [r7, #23]
 80065c4:	e001      	b.n	80065ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80065c6:	230f      	movs	r3, #15
 80065c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d13a      	bne.n	800666a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	2101      	movs	r1, #1
 8006606:	fa01 f303 	lsl.w	r3, r1, r3
 800660a:	b29b      	uxth	r3, r3
 800660c:	68f9      	ldr	r1, [r7, #12]
 800660e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006612:	4313      	orrs	r3, r2
 8006614:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d155      	bne.n	80066d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	78db      	ldrb	r3, [r3, #3]
 8006646:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006648:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	059b      	lsls	r3, r3, #22
 800664e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006650:	4313      	orrs	r3, r2
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	440a      	add	r2, r1
 800665a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	e036      	b.n	80066d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006670:	69da      	ldr	r2, [r3, #28]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	2101      	movs	r1, #1
 800667c:	fa01 f303 	lsl.w	r3, r1, r3
 8006680:	041b      	lsls	r3, r3, #16
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006688:	4313      	orrs	r3, r2
 800668a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d11a      	bne.n	80066d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	78db      	ldrb	r3, [r3, #3]
 80066bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066be:	430b      	orrs	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
	...

080066e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	785b      	ldrb	r3, [r3, #1]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d161      	bne.n	80067c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800671a:	d11f      	bne.n	800675c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	0151      	lsls	r1, r2, #5
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	440a      	add	r2, r1
 8006732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006736:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800673a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	0151      	lsls	r1, r2, #5
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	440a      	add	r2, r1
 8006752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006756:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800675a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	2101      	movs	r1, #1
 800676e:	fa01 f303 	lsl.w	r3, r1, r3
 8006772:	b29b      	uxth	r3, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	68f9      	ldr	r1, [r7, #12]
 8006778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800677c:	4013      	ands	r3, r2
 800677e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	2101      	movs	r1, #1
 8006792:	fa01 f303 	lsl.w	r3, r1, r3
 8006796:	b29b      	uxth	r3, r3
 8006798:	43db      	mvns	r3, r3
 800679a:	68f9      	ldr	r1, [r7, #12]
 800679c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067a0:	4013      	ands	r3, r2
 80067a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	0159      	lsls	r1, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	440b      	add	r3, r1
 80067ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067be:	4619      	mov	r1, r3
 80067c0:	4b35      	ldr	r3, [pc, #212]	; (8006898 <USB_DeactivateEndpoint+0x1b0>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	600b      	str	r3, [r1, #0]
 80067c6:	e060      	b.n	800688a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067de:	d11f      	bne.n	8006820 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	440a      	add	r2, r1
 8006816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800681a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800681e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	2101      	movs	r1, #1
 8006832:	fa01 f303 	lsl.w	r3, r1, r3
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	43db      	mvns	r3, r3
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006840:	4013      	ands	r3, r2
 8006842:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	2101      	movs	r1, #1
 8006856:	fa01 f303 	lsl.w	r3, r1, r3
 800685a:	041b      	lsls	r3, r3, #16
 800685c:	43db      	mvns	r3, r3
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006864:	4013      	ands	r3, r2
 8006866:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	0159      	lsls	r1, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	440b      	add	r3, r1
 800687e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006882:	4619      	mov	r1, r3
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <USB_DeactivateEndpoint+0x1b4>)
 8006886:	4013      	ands	r3, r2
 8006888:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	ec337800 	.word	0xec337800
 800689c:	eff37800 	.word	0xeff37800

080068a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	; 0x28
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	4613      	mov	r3, r2
 80068ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	f040 815c 	bne.w	8006b7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d132      	bne.n	8006930 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800690c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	440a      	add	r2, r1
 8006924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006928:	0cdb      	lsrs	r3, r3, #19
 800692a:	04db      	lsls	r3, r3, #19
 800692c:	6113      	str	r3, [r2, #16]
 800692e:	e074      	b.n	8006a1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694a:	0cdb      	lsrs	r3, r3, #19
 800694c:	04db      	lsls	r3, r3, #19
 800694e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800696a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800696e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006980:	691a      	ldr	r2, [r3, #16]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6959      	ldr	r1, [r3, #20]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	440b      	add	r3, r1
 800698c:	1e59      	subs	r1, r3, #1
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	fbb1 f3f3 	udiv	r3, r1, r3
 8006996:	04d9      	lsls	r1, r3, #19
 8006998:	4b9d      	ldr	r3, [pc, #628]	; (8006c10 <USB_EPStartXfer+0x370>)
 800699a:	400b      	ands	r3, r1
 800699c:	69b9      	ldr	r1, [r7, #24]
 800699e:	0148      	lsls	r0, r1, #5
 80069a0:	69f9      	ldr	r1, [r7, #28]
 80069a2:	4401      	add	r1, r0
 80069a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069a8:	4313      	orrs	r3, r2
 80069aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b8:	691a      	ldr	r2, [r3, #16]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c2:	69b9      	ldr	r1, [r7, #24]
 80069c4:	0148      	lsls	r0, r1, #5
 80069c6:	69f9      	ldr	r1, [r7, #28]
 80069c8:	4401      	add	r1, r0
 80069ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069ce:	4313      	orrs	r3, r2
 80069d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	78db      	ldrb	r3, [r3, #3]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d11f      	bne.n	8006a1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80069f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d14b      	bne.n	8006ab8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d009      	beq.n	8006a3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	461a      	mov	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	78db      	ldrb	r3, [r3, #3]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d128      	bne.n	8006a96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d110      	bne.n	8006a76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	e00f      	b.n	8006a96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	e12f      	b.n	8006d18 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ad6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	78db      	ldrb	r3, [r3, #3]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d015      	beq.n	8006b0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8117 	beq.w	8006d18 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	2101      	movs	r1, #1
 8006afc:	fa01 f303 	lsl.w	r3, r1, r3
 8006b00:	69f9      	ldr	r1, [r7, #28]
 8006b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b06:	4313      	orrs	r3, r2
 8006b08:	634b      	str	r3, [r1, #52]	; 0x34
 8006b0a:	e105      	b.n	8006d18 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d110      	bne.n	8006b3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	e00f      	b.n	8006b5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	0151      	lsls	r1, r2, #5
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	440a      	add	r2, r1
 8006b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	68d9      	ldr	r1, [r3, #12]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	b298      	uxth	r0, r3
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	4603      	mov	r3, r0
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fa2b 	bl	8006fce <USB_WritePacket>
 8006b78:	e0ce      	b.n	8006d18 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b94:	0cdb      	lsrs	r3, r3, #19
 8006b96:	04db      	lsls	r3, r3, #19
 8006b98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d126      	bne.n	8006c14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	0148      	lsls	r0, r1, #5
 8006be0:	69f9      	ldr	r1, [r7, #28]
 8006be2:	4401      	add	r1, r0
 8006be4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006be8:	4313      	orrs	r3, r2
 8006bea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c0a:	6113      	str	r3, [r2, #16]
 8006c0c:	e036      	b.n	8006c7c <USB_EPStartXfer+0x3dc>
 8006c0e:	bf00      	nop
 8006c10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	1e5a      	subs	r2, r3, #1
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c28:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	04d9      	lsls	r1, r3, #19
 8006c3c:	4b39      	ldr	r3, [pc, #228]	; (8006d24 <USB_EPStartXfer+0x484>)
 8006c3e:	400b      	ands	r3, r1
 8006c40:	69b9      	ldr	r1, [r7, #24]
 8006c42:	0148      	lsls	r0, r1, #5
 8006c44:	69f9      	ldr	r1, [r7, #28]
 8006c46:	4401      	add	r1, r0
 8006c48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	8af9      	ldrh	r1, [r7, #22]
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c6c:	69b9      	ldr	r1, [r7, #24]
 8006c6e:	0148      	lsls	r0, r1, #5
 8006c70:	69f9      	ldr	r1, [r7, #28]
 8006c72:	4401      	add	r1, r0
 8006c74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d10d      	bne.n	8006c9e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	68d9      	ldr	r1, [r3, #12]
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9a:	460a      	mov	r2, r1
 8006c9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	78db      	ldrb	r3, [r3, #3]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d128      	bne.n	8006cf8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d110      	bne.n	8006cd8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e00f      	b.n	8006cf8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3720      	adds	r7, #32
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	1ff80000 	.word	0x1ff80000

08006d28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	f040 80cd 	bne.w	8006ee4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d132      	bne.n	8006db8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db0:	0cdb      	lsrs	r3, r3, #19
 8006db2:	04db      	lsls	r3, r3, #19
 8006db4:	6113      	str	r3, [r2, #16]
 8006db6:	e04e      	b.n	8006e56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd2:	0cdb      	lsrs	r3, r3, #19
 8006dd4:	04db      	lsls	r3, r3, #19
 8006dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006df6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dfa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	695a      	ldr	r2, [r3, #20]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d903      	bls.n	8006e10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e46:	6939      	ldr	r1, [r7, #16]
 8006e48:	0148      	lsls	r0, r1, #5
 8006e4a:	6979      	ldr	r1, [r7, #20]
 8006e4c:	4401      	add	r1, r0
 8006e4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e52:	4313      	orrs	r3, r2
 8006e54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d11e      	bne.n	8006e9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e70:	461a      	mov	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	e092      	b.n	8006fc0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	0151      	lsls	r1, r2, #5
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	440a      	add	r2, r1
 8006eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d07e      	beq.n	8006fc0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed8:	6979      	ldr	r1, [r7, #20]
 8006eda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	634b      	str	r3, [r1, #52]	; 0x34
 8006ee2:	e06d      	b.n	8006fc0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006efe:	0cdb      	lsrs	r3, r3, #19
 8006f00:	04db      	lsls	r3, r3, #19
 8006f02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f26:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f64:	691a      	ldr	r2, [r3, #16]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f6e:	6939      	ldr	r1, [r7, #16]
 8006f70:	0148      	lsls	r0, r1, #5
 8006f72:	6979      	ldr	r1, [r7, #20]
 8006f74:	4401      	add	r1, r0
 8006f76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d10d      	bne.n	8006fa0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d009      	beq.n	8006fa0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	68d9      	ldr	r1, [r3, #12]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	460a      	mov	r2, r1
 8006f9e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b089      	sub	sp, #36	; 0x24
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	4611      	mov	r1, r2
 8006fda:	461a      	mov	r2, r3
 8006fdc:	460b      	mov	r3, r1
 8006fde:	71fb      	strb	r3, [r7, #7]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006fec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11a      	bne.n	800702a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ff4:	88bb      	ldrh	r3, [r7, #4]
 8006ff6:	3303      	adds	r3, #3
 8006ff8:	089b      	lsrs	r3, r3, #2
 8006ffa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	e00f      	b.n	8007022 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	031a      	lsls	r2, r3, #12
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	4413      	add	r3, r2
 800700a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700e:	461a      	mov	r2, r3
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	3304      	adds	r3, #4
 800701a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	3301      	adds	r3, #1
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	429a      	cmp	r2, r3
 8007028:	d3eb      	bcc.n	8007002 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3724      	adds	r7, #36	; 0x24
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007038:	b480      	push	{r7}
 800703a:	b089      	sub	sp, #36	; 0x24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	4613      	mov	r3, r2
 8007044:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	3303      	adds	r3, #3
 8007052:	089b      	lsrs	r3, r3, #2
 8007054:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007056:	2300      	movs	r3, #0
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	e00b      	b.n	8007074 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	601a      	str	r2, [r3, #0]
    pDest++;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	3304      	adds	r3, #4
 800706c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	3301      	adds	r3, #1
 8007072:	61bb      	str	r3, [r7, #24]
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	429a      	cmp	r2, r3
 800707a:	d3ef      	bcc.n	800705c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800707c:	69fb      	ldr	r3, [r7, #28]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3724      	adds	r7, #36	; 0x24
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	785b      	ldrb	r3, [r3, #1]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d12c      	bne.n	8007100 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	db12      	blt.n	80070de <USB_EPSetStall+0x54>
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00f      	beq.n	80070de <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	0151      	lsls	r1, r2, #5
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	440a      	add	r2, r1
 80070d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070dc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	e02b      	b.n	8007158 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	db12      	blt.n	8007138 <USB_EPSetStall+0xae>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00f      	beq.n	8007138 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007132:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007136:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007152:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007156:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d128      	bne.n	80071d4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	78db      	ldrb	r3, [r3, #3]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d003      	beq.n	80071b2 <USB_EPClearStall+0x4c>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	78db      	ldrb	r3, [r3, #3]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d138      	bne.n	8007224 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	e027      	b.n	8007224 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	0151      	lsls	r1, r2, #5
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	440a      	add	r2, r1
 80071ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	78db      	ldrb	r3, [r3, #3]
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d003      	beq.n	8007204 <USB_EPClearStall+0x9e>
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	78db      	ldrb	r3, [r3, #3]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d10f      	bne.n	8007224 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	440a      	add	r2, r1
 800721a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800721e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007222:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007250:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007254:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800726c:	4313      	orrs	r3, r2
 800726e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007298:	f023 0303 	bic.w	r3, r3, #3
 800729c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ac:	f023 0302 	bic.w	r3, r3, #2
 80072b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072da:	f023 0303 	bic.w	r3, r3, #3
 80072de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ee:	f043 0302 	orr.w	r3, r3, #2
 80072f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	4013      	ands	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800731a:	68fb      	ldr	r3, [r7, #12]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	4013      	ands	r3, r2
 800734a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	0c1b      	lsrs	r3, r3, #16
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	4013      	ands	r3, r2
 800737e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	b29b      	uxth	r3, r3
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	4013      	ands	r3, r2
 80073bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073be:	68bb      	ldr	r3, [r7, #8]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	f003 030f 	and.w	r3, r3, #15
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
 80073fc:	01db      	lsls	r3, r3, #7
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007406:	78fb      	ldrb	r3, [r7, #3]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4013      	ands	r3, r2
 8007418:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800741a:	68bb      	ldr	r3, [r7, #8]
}
 800741c:	4618      	mov	r0, r3
 800741e:	371c      	adds	r7, #28
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	f003 0301 	and.w	r3, r3, #1
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007462:	f023 0307 	bic.w	r3, r3, #7
 8007466:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800747a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
	...

0800748c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	460b      	mov	r3, r1
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	333c      	adds	r3, #60	; 0x3c
 80074a2:	3304      	adds	r3, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	4a26      	ldr	r2, [pc, #152]	; (8007544 <USB_EP0_OutStart+0xb8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d90a      	bls.n	80074c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c0:	d101      	bne.n	80074c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e037      	b.n	8007536 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074cc:	461a      	mov	r2, r3
 80074ce:	2300      	movs	r3, #0
 80074d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f4:	f043 0318 	orr.w	r3, r3, #24
 80074f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007508:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800750c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800750e:	7afb      	ldrb	r3, [r7, #11]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d10f      	bne.n	8007534 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751a:	461a      	mov	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800752e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007532:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	4f54300a 	.word	0x4f54300a

08007548 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a13      	ldr	r2, [pc, #76]	; (80075ac <USB_CoreReset+0x64>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d901      	bls.n	8007566 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e01b      	b.n	800759e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	daf2      	bge.n	8007554 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f043 0201 	orr.w	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3301      	adds	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4a09      	ldr	r2, [pc, #36]	; (80075ac <USB_CoreReset+0x64>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d901      	bls.n	8007590 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e006      	b.n	800759e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b01      	cmp	r3, #1
 800759a:	d0f0      	beq.n	800757e <USB_CoreReset+0x36>

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	00030d40 	.word	0x00030d40

080075b0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80075bc:	2010      	movs	r0, #16
 80075be:	f001 fec1 	bl	8009344 <malloc>
 80075c2:	4603      	mov	r3, r0
 80075c4:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d105      	bne.n	80075d8 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80075d4:	2302      	movs	r3, #2
 80075d6:	e01b      	b.n	8007610 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	7c1b      	ldrb	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2207      	movs	r2, #7
 80075ec:	875a      	strh	r2, [r3, #58]	; 0x3a
 80075ee:	e002      	b.n	80075f6 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	220a      	movs	r2, #10
 80075f4:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80075f6:	2304      	movs	r3, #4
 80075f8:	2203      	movs	r2, #3
 80075fa:	2181      	movs	r1, #129	; 0x81
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 fd3a 	bl	8009076 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007624:	2181      	movs	r1, #129	; 0x81
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fd4b 	bl	80090c2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800763e:	2b00      	cmp	r3, #0
 8007640:	d009      	beq.n	8007656 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007648:	4618      	mov	r0, r3
 800764a:	f001 fe83 	bl	8009354 <free>
    pdev->pClassData = NULL;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007670:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007682:	2b00      	cmp	r3, #0
 8007684:	d045      	beq.n	8007712 <USBD_HID_Setup+0xb2>
 8007686:	2b20      	cmp	r3, #32
 8007688:	f040 80d4 	bne.w	8007834 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	3b02      	subs	r3, #2
 8007692:	2b09      	cmp	r3, #9
 8007694:	d835      	bhi.n	8007702 <USBD_HID_Setup+0xa2>
 8007696:	a201      	add	r2, pc, #4	; (adr r2, 800769c <USBD_HID_Setup+0x3c>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076f3 	.word	0x080076f3
 80076a0:	080076d3 	.word	0x080076d3
 80076a4:	08007703 	.word	0x08007703
 80076a8:	08007703 	.word	0x08007703
 80076ac:	08007703 	.word	0x08007703
 80076b0:	08007703 	.word	0x08007703
 80076b4:	08007703 	.word	0x08007703
 80076b8:	08007703 	.word	0x08007703
 80076bc:	080076e1 	.word	0x080076e1
 80076c0:	080076c5 	.word	0x080076c5
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	885b      	ldrh	r3, [r3, #2]
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	461a      	mov	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	601a      	str	r2, [r3, #0]
      break;
 80076d0:	e01e      	b.n	8007710 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 f992 	bl	8008a02 <USBD_CtlSendData>
      break;
 80076de:	e017      	b.n	8007710 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	885b      	ldrh	r3, [r3, #2]
 80076e4:	0a1b      	lsrs	r3, r3, #8
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	605a      	str	r2, [r3, #4]
      break;
 80076f0:	e00e      	b.n	8007710 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3304      	adds	r3, #4
 80076f6:	2201      	movs	r2, #1
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f981 	bl	8008a02 <USBD_CtlSendData>
      break;
 8007700:	e006      	b.n	8007710 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 f90b 	bl	8008920 <USBD_CtlError>
      ret = USBD_FAIL;
 800770a:	2303      	movs	r3, #3
 800770c:	75fb      	strb	r3, [r7, #23]
      break;
 800770e:	bf00      	nop
    }
    break;
 8007710:	e097      	b.n	8007842 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2b0b      	cmp	r3, #11
 8007718:	f200 8083 	bhi.w	8007822 <USBD_HID_Setup+0x1c2>
 800771c:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <USBD_HID_Setup+0xc4>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007755 	.word	0x08007755
 8007728:	08007831 	.word	0x08007831
 800772c:	08007823 	.word	0x08007823
 8007730:	08007823 	.word	0x08007823
 8007734:	08007823 	.word	0x08007823
 8007738:	08007823 	.word	0x08007823
 800773c:	0800777d 	.word	0x0800777d
 8007740:	08007823 	.word	0x08007823
 8007744:	08007823 	.word	0x08007823
 8007748:	08007823 	.word	0x08007823
 800774c:	080077d5 	.word	0x080077d5
 8007750:	080077fd 	.word	0x080077fd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775a:	2b03      	cmp	r3, #3
 800775c:	d107      	bne.n	800776e <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800775e:	f107 030a 	add.w	r3, r7, #10
 8007762:	2202      	movs	r2, #2
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 f94b 	bl	8008a02 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800776c:	e061      	b.n	8007832 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f8d5 	bl	8008920 <USBD_CtlError>
        ret = USBD_FAIL;
 8007776:	2303      	movs	r3, #3
 8007778:	75fb      	strb	r3, [r7, #23]
      break;
 800777a:	e05a      	b.n	8007832 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	885b      	ldrh	r3, [r3, #2]
 8007780:	0a1b      	lsrs	r3, r3, #8
 8007782:	b29b      	uxth	r3, r3
 8007784:	2b22      	cmp	r3, #34	; 0x22
 8007786:	d108      	bne.n	800779a <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	88db      	ldrh	r3, [r3, #6]
 800778c:	2b4a      	cmp	r3, #74	; 0x4a
 800778e:	bf28      	it	cs
 8007790:	234a      	movcs	r3, #74	; 0x4a
 8007792:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8007794:	4b2d      	ldr	r3, [pc, #180]	; (800784c <USBD_HID_Setup+0x1ec>)
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	e015      	b.n	80077c6 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	885b      	ldrh	r3, [r3, #2]
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b21      	cmp	r3, #33	; 0x21
 80077a4:	d108      	bne.n	80077b8 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 80077a6:	4b2a      	ldr	r3, [pc, #168]	; (8007850 <USBD_HID_Setup+0x1f0>)
 80077a8:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	88db      	ldrh	r3, [r3, #6]
 80077ae:	2b09      	cmp	r3, #9
 80077b0:	bf28      	it	cs
 80077b2:	2309      	movcs	r3, #9
 80077b4:	82bb      	strh	r3, [r7, #20]
 80077b6:	e006      	b.n	80077c6 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 f8b0 	bl	8008920 <USBD_CtlError>
        ret = USBD_FAIL;
 80077c0:	2303      	movs	r3, #3
 80077c2:	75fb      	strb	r3, [r7, #23]
        break;
 80077c4:	e035      	b.n	8007832 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077c6:	8abb      	ldrh	r3, [r7, #20]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6939      	ldr	r1, [r7, #16]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 f918 	bl	8008a02 <USBD_CtlSendData>
      break;
 80077d2:	e02e      	b.n	8007832 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d107      	bne.n	80077ee <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3308      	adds	r3, #8
 80077e2:	2201      	movs	r2, #1
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 f90b 	bl	8008a02 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80077ec:	e021      	b.n	8007832 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 f895 	bl	8008920 <USBD_CtlError>
        ret = USBD_FAIL;
 80077f6:	2303      	movs	r3, #3
 80077f8:	75fb      	strb	r3, [r7, #23]
      break;
 80077fa:	e01a      	b.n	8007832 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007802:	2b03      	cmp	r3, #3
 8007804:	d106      	bne.n	8007814 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	885b      	ldrh	r3, [r3, #2]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	461a      	mov	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007812:	e00e      	b.n	8007832 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 f882 	bl	8008920 <USBD_CtlError>
        ret = USBD_FAIL;
 800781c:	2303      	movs	r3, #3
 800781e:	75fb      	strb	r3, [r7, #23]
      break;
 8007820:	e007      	b.n	8007832 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 f87b 	bl	8008920 <USBD_CtlError>
      ret = USBD_FAIL;
 800782a:	2303      	movs	r3, #3
 800782c:	75fb      	strb	r3, [r7, #23]
      break;
 800782e:	e000      	b.n	8007832 <USBD_HID_Setup+0x1d2>
      break;
 8007830:	bf00      	nop
    }
    break;
 8007832:	e006      	b.n	8007842 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 f872 	bl	8008920 <USBD_CtlError>
    ret = USBD_FAIL;
 800783c:	2303      	movs	r3, #3
 800783e:	75fb      	strb	r3, [r7, #23]
    break;
 8007840:	bf00      	nop
  }

  return (uint8_t)ret;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200000d0 	.word	0x200000d0
 8007850:	200000b8 	.word	0x200000b8

08007854 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2222      	movs	r2, #34	; 0x22
 8007860:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007862:	4b03      	ldr	r3, [pc, #12]	; (8007870 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	2000004c 	.word	0x2000004c

08007874 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2222      	movs	r2, #34	; 0x22
 8007880:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8007882:	4b03      	ldr	r3, [pc, #12]	; (8007890 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	20000070 	.word	0x20000070

08007894 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2222      	movs	r2, #34	; 0x22
 80078a0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80078a2:	4b03      	ldr	r3, [pc, #12]	; (80078b0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	20000094 	.word	0x20000094

080078b4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078c6:	2200      	movs	r2, #0
 80078c8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	220a      	movs	r2, #10
 80078e4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80078e6:	4b03      	ldr	r3, [pc, #12]	; (80078f4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	200000c4 	.word	0x200000c4

080078f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	4613      	mov	r3, r2
 8007904:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800790c:	2303      	movs	r3, #3
 800790e:	e025      	b.n	800795c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	79fa      	ldrb	r2, [r7, #7]
 800794e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f001 fb29 	bl	8008fa8 <USBD_LL_Init>
 8007956:	4603      	mov	r3, r0
 8007958:	75fb      	strb	r3, [r7, #23]

  return ret;
 800795a:	7dfb      	ldrb	r3, [r7, #23]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007978:	2303      	movs	r3, #3
 800797a:	e010      	b.n	800799e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	f107 020e 	add.w	r2, r7, #14
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
 8007994:	4602      	mov	r2, r0
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 fb46 	bl	8009040 <USBD_LL_Start>
 80079b4:	4603      	mov	r3, r0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80079e0:	2303      	movs	r3, #3
 80079e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	4611      	mov	r1, r2
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d007      	beq.n	8007a32 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	78fa      	ldrb	r2, [r7, #3]
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
  }

  return USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 ff2c 	bl	80088ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a70:	f003 031f 	and.w	r3, r3, #31
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d00e      	beq.n	8007a96 <USBD_LL_SetupStage+0x5a>
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d302      	bcc.n	8007a82 <USBD_LL_SetupStage+0x46>
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d014      	beq.n	8007aaa <USBD_LL_SetupStage+0x6e>
 8007a80:	e01d      	b.n	8007abe <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa18 	bl	8007ec0 <USBD_StdDevReq>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]
      break;
 8007a94:	e020      	b.n	8007ad8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fa7c 	bl	8007f9c <USBD_StdItfReq>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa8:	e016      	b.n	8007ad8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fab8 	bl	8008028 <USBD_StdEPReq>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73fb      	strb	r3, [r7, #15]
      break;
 8007abc:	e00c      	b.n	8007ad8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ac4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 fb17 	bl	8009100 <USBD_LL_StallEP>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad6:	bf00      	nop
  }

  return ret;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b086      	sub	sp, #24
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	460b      	mov	r3, r1
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007af0:	7afb      	ldrb	r3, [r7, #11]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d137      	bne.n	8007b66 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007afc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d14a      	bne.n	8007b9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d913      	bls.n	8007b3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	1ad2      	subs	r2, r2, r3
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	bf28      	it	cs
 8007b2e:	4613      	movcs	r3, r2
 8007b30:	461a      	mov	r2, r3
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 ff90 	bl	8008a5a <USBD_CtlContinueRx>
 8007b3a:	e030      	b.n	8007b9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d105      	bne.n	8007b5e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 ff8c 	bl	8008a7c <USBD_CtlSendStatus>
 8007b64:	e01b      	b.n	8007b9e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d013      	beq.n	8007b9a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d10e      	bne.n	8007b9a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	7afa      	ldrb	r2, [r7, #11]
 8007b86:	4611      	mov	r1, r2
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	4798      	blx	r3
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	e002      	b.n	8007ba0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e000      	b.n	8007ba0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007bb6:	7afb      	ldrb	r3, [r7, #11]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d16a      	bne.n	8007c92 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3314      	adds	r3, #20
 8007bc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d155      	bne.n	8007c78 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d914      	bls.n	8007c02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	1ad2      	subs	r2, r2, r3
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	461a      	mov	r2, r3
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 ff22 	bl	8008a38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f001 fb2a 	bl	8009254 <USBD_LL_PrepareReceive>
 8007c00:	e03a      	b.n	8007c78 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d11c      	bne.n	8007c48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d316      	bcc.n	8007c48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d20f      	bcs.n	8007c48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 ff03 	bl	8008a38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2100      	movs	r1, #0
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f001 fb07 	bl	8009254 <USBD_LL_PrepareReceive>
 8007c46:	e017      	b.n	8007c78 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d105      	bne.n	8007c6a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c6a:	2180      	movs	r1, #128	; 0x80
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f001 fa47 	bl	8009100 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 ff15 	bl	8008aa2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d123      	bne.n	8007cca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7ff fe9b 	bl	80079be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c90:	e01b      	b.n	8007cca <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d013      	beq.n	8007cc6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d10e      	bne.n	8007cc6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	7afa      	ldrb	r2, [r7, #11]
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	4798      	blx	r3
 8007cb8:	4603      	mov	r3, r0
 8007cba:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	e002      	b.n	8007ccc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e000      	b.n	8007ccc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d009      	beq.n	8007d18 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6852      	ldr	r2, [r2, #4]
 8007d10:	b2d2      	uxtb	r2, r2
 8007d12:	4611      	mov	r1, r2
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d18:	2340      	movs	r3, #64	; 0x40
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 f9a9 	bl	8009076 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2240      	movs	r2, #64	; 0x40
 8007d30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d34:	2340      	movs	r3, #64	; 0x40
 8007d36:	2200      	movs	r2, #0
 8007d38:	2180      	movs	r1, #128	; 0x80
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 f99b 	bl	8009076 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2240      	movs	r2, #64	; 0x40
 8007d4a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	78fa      	ldrb	r2, [r7, #3]
 8007d66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2204      	movs	r2, #4
 8007d8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d105      	bne.n	8007dbe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d10b      	bne.n	8007df6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d009      	beq.n	8007e78 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6852      	ldr	r2, [r2, #4]
 8007e70:	b2d2      	uxtb	r2, r2
 8007e72:	4611      	mov	r1, r2
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
  }

  return USBD_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b087      	sub	sp, #28
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	3301      	adds	r3, #1
 8007e98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ea0:	8a3b      	ldrh	r3, [r7, #16]
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	b21a      	sxth	r2, r3
 8007ea6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	b21b      	sxth	r3, r3
 8007eae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007eb0:	89fb      	ldrh	r3, [r7, #14]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d004      	beq.n	8007ee4 <USBD_StdDevReq+0x24>
 8007eda:	2b40      	cmp	r3, #64	; 0x40
 8007edc:	d002      	beq.n	8007ee4 <USBD_StdDevReq+0x24>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <USBD_StdDevReq+0x38>
 8007ee2:	e050      	b.n	8007f86 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ef6:	e04b      	b.n	8007f90 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	785b      	ldrb	r3, [r3, #1]
 8007efc:	2b09      	cmp	r3, #9
 8007efe:	d83c      	bhi.n	8007f7a <USBD_StdDevReq+0xba>
 8007f00:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <USBD_StdDevReq+0x48>)
 8007f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f06:	bf00      	nop
 8007f08:	08007f5d 	.word	0x08007f5d
 8007f0c:	08007f71 	.word	0x08007f71
 8007f10:	08007f7b 	.word	0x08007f7b
 8007f14:	08007f67 	.word	0x08007f67
 8007f18:	08007f7b 	.word	0x08007f7b
 8007f1c:	08007f3b 	.word	0x08007f3b
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f7b 	.word	0x08007f7b
 8007f28:	08007f53 	.word	0x08007f53
 8007f2c:	08007f45 	.word	0x08007f45
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9ce 	bl	80082d4 <USBD_GetDescriptor>
      break;
 8007f38:	e024      	b.n	8007f84 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fb33 	bl	80085a8 <USBD_SetAddress>
      break;
 8007f42:	e01f      	b.n	8007f84 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fb70 	bl	800862c <USBD_SetConfig>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f50:	e018      	b.n	8007f84 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fc0d 	bl	8008774 <USBD_GetConfig>
      break;
 8007f5a:	e013      	b.n	8007f84 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fc3c 	bl	80087dc <USBD_GetStatus>
      break;
 8007f64:	e00e      	b.n	8007f84 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fc6a 	bl	8008842 <USBD_SetFeature>
      break;
 8007f6e:	e009      	b.n	8007f84 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fc79 	bl	800886a <USBD_ClrFeature>
      break;
 8007f78:	e004      	b.n	8007f84 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fccf 	bl	8008920 <USBD_CtlError>
      break;
 8007f82:	bf00      	nop
    }
    break;
 8007f84:	e004      	b.n	8007f90 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fcc9 	bl	8008920 <USBD_CtlError>
    break;
 8007f8e:	bf00      	nop
  }

  return ret;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop

08007f9c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d003      	beq.n	8007fbe <USBD_StdItfReq+0x22>
 8007fb6:	2b40      	cmp	r3, #64	; 0x40
 8007fb8:	d001      	beq.n	8007fbe <USBD_StdItfReq+0x22>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d12a      	bne.n	8008014 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d81d      	bhi.n	8008006 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	889b      	ldrh	r3, [r3, #4]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d813      	bhi.n	8007ffc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d110      	bne.n	8008010 <USBD_StdItfReq+0x74>
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10d      	bne.n	8008010 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fd41 	bl	8008a7c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007ffa:	e009      	b.n	8008010 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fc8e 	bl	8008920 <USBD_CtlError>
      break;
 8008004:	e004      	b.n	8008010 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fc89 	bl	8008920 <USBD_CtlError>
      break;
 800800e:	e000      	b.n	8008012 <USBD_StdItfReq+0x76>
      break;
 8008010:	bf00      	nop
    }
    break;
 8008012:	e004      	b.n	800801e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fc82 	bl	8008920 <USBD_CtlError>
    break;
 800801c:	bf00      	nop
  }

  return ret;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	889b      	ldrh	r3, [r3, #4]
 800803a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008044:	2b20      	cmp	r3, #32
 8008046:	d004      	beq.n	8008052 <USBD_StdEPReq+0x2a>
 8008048:	2b40      	cmp	r3, #64	; 0x40
 800804a:	d002      	beq.n	8008052 <USBD_StdEPReq+0x2a>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00a      	beq.n	8008066 <USBD_StdEPReq+0x3e>
 8008050:	e135      	b.n	80082be <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	4798      	blx	r3
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]
    break;
 8008064:	e130      	b.n	80082c8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	785b      	ldrb	r3, [r3, #1]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d03e      	beq.n	80080ec <USBD_StdEPReq+0xc4>
 800806e:	2b03      	cmp	r3, #3
 8008070:	d002      	beq.n	8008078 <USBD_StdEPReq+0x50>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d077      	beq.n	8008166 <USBD_StdEPReq+0x13e>
 8008076:	e11c      	b.n	80082b2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807e:	2b02      	cmp	r3, #2
 8008080:	d002      	beq.n	8008088 <USBD_StdEPReq+0x60>
 8008082:	2b03      	cmp	r3, #3
 8008084:	d015      	beq.n	80080b2 <USBD_StdEPReq+0x8a>
 8008086:	e02b      	b.n	80080e0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008088:	7bbb      	ldrb	r3, [r7, #14]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00c      	beq.n	80080a8 <USBD_StdEPReq+0x80>
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b80      	cmp	r3, #128	; 0x80
 8008092:	d009      	beq.n	80080a8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 f831 	bl	8009100 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800809e:	2180      	movs	r1, #128	; 0x80
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 f82d 	bl	8009100 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80080a6:	e020      	b.n	80080ea <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fc38 	bl	8008920 <USBD_CtlError>
        break;
 80080b0:	e01b      	b.n	80080ea <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	885b      	ldrh	r3, [r3, #2]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10e      	bne.n	80080d8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <USBD_StdEPReq+0xb0>
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b80      	cmp	r3, #128	; 0x80
 80080c4:	d008      	beq.n	80080d8 <USBD_StdEPReq+0xb0>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	88db      	ldrh	r3, [r3, #6]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d104      	bne.n	80080d8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f001 f814 	bl	8009100 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fccf 	bl	8008a7c <USBD_CtlSendStatus>

        break;
 80080de:	e004      	b.n	80080ea <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fc1c 	bl	8008920 <USBD_CtlError>
        break;
 80080e8:	bf00      	nop
      }
      break;
 80080ea:	e0e7      	b.n	80082bc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d002      	beq.n	80080fc <USBD_StdEPReq+0xd4>
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d015      	beq.n	8008126 <USBD_StdEPReq+0xfe>
 80080fa:	e02d      	b.n	8008158 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00c      	beq.n	800811c <USBD_StdEPReq+0xf4>
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b80      	cmp	r3, #128	; 0x80
 8008106:	d009      	beq.n	800811c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fff7 	bl	8009100 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008112:	2180      	movs	r1, #128	; 0x80
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fff3 	bl	8009100 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800811a:	e023      	b.n	8008164 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fbfe 	bl	8008920 <USBD_CtlError>
        break;
 8008124:	e01e      	b.n	8008164 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	885b      	ldrh	r3, [r3, #2]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d119      	bne.n	8008162 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008134:	2b00      	cmp	r3, #0
 8008136:	d004      	beq.n	8008142 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fffe 	bl	800913e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fc9a 	bl	8008a7c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
        }
        break;
 8008156:	e004      	b.n	8008162 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fbe0 	bl	8008920 <USBD_CtlError>
        break;
 8008160:	e000      	b.n	8008164 <USBD_StdEPReq+0x13c>
        break;
 8008162:	bf00      	nop
      }
      break;
 8008164:	e0aa      	b.n	80082bc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816c:	2b02      	cmp	r3, #2
 800816e:	d002      	beq.n	8008176 <USBD_StdEPReq+0x14e>
 8008170:	2b03      	cmp	r3, #3
 8008172:	d032      	beq.n	80081da <USBD_StdEPReq+0x1b2>
 8008174:	e097      	b.n	80082a6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d007      	beq.n	800818c <USBD_StdEPReq+0x164>
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b80      	cmp	r3, #128	; 0x80
 8008180:	d004      	beq.n	800818c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fbcb 	bl	8008920 <USBD_CtlError>
          break;
 800818a:	e091      	b.n	80082b0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800818c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008190:	2b00      	cmp	r3, #0
 8008192:	da0b      	bge.n	80081ac <USBD_StdEPReq+0x184>
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	3310      	adds	r3, #16
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	4413      	add	r3, r2
 80081a8:	3304      	adds	r3, #4
 80081aa:	e00b      	b.n	80081c4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081b2:	4613      	mov	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	4413      	add	r3, r2
 80081c2:	3304      	adds	r3, #4
 80081c4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2202      	movs	r2, #2
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fc15 	bl	8008a02 <USBD_CtlSendData>
        break;
 80081d8:	e06a      	b.n	80082b0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80081da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da11      	bge.n	8008206 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	f003 020f 	and.w	r2, r3, #15
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	3324      	adds	r3, #36	; 0x24
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d117      	bne.n	800822c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fb8e 	bl	8008920 <USBD_CtlError>
            break;
 8008204:	e054      	b.n	80082b0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	f003 020f 	and.w	r2, r3, #15
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d104      	bne.n	800822c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fb7b 	bl	8008920 <USBD_CtlError>
            break;
 800822a:	e041      	b.n	80082b0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800822c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008230:	2b00      	cmp	r3, #0
 8008232:	da0b      	bge.n	800824c <USBD_StdEPReq+0x224>
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	3310      	adds	r3, #16
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	4413      	add	r3, r2
 8008248:	3304      	adds	r3, #4
 800824a:	e00b      	b.n	8008264 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	4413      	add	r3, r2
 8008262:	3304      	adds	r3, #4
 8008264:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <USBD_StdEPReq+0x24a>
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	2b80      	cmp	r3, #128	; 0x80
 8008270:	d103      	bne.n	800827a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	e00e      	b.n	8008298 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800827a:	7bbb      	ldrb	r3, [r7, #14]
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 ff7c 	bl	800917c <USBD_LL_IsStallEP>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2201      	movs	r2, #1
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	e002      	b.n	8008298 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2202      	movs	r2, #2
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fbaf 	bl	8008a02 <USBD_CtlSendData>
          break;
 80082a4:	e004      	b.n	80082b0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fb39 	bl	8008920 <USBD_CtlError>
        break;
 80082ae:	bf00      	nop
      }
      break;
 80082b0:	e004      	b.n	80082bc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fb33 	bl	8008920 <USBD_CtlError>
      break;
 80082ba:	bf00      	nop
    }
    break;
 80082bc:	e004      	b.n	80082c8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fb2d 	bl	8008920 <USBD_CtlError>
    break;
 80082c6:	bf00      	nop
  }

  return ret;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082e6:	2300      	movs	r3, #0
 80082e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	885b      	ldrh	r3, [r3, #2]
 80082ee:	0a1b      	lsrs	r3, r3, #8
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	3b01      	subs	r3, #1
 80082f4:	2b06      	cmp	r3, #6
 80082f6:	f200 8128 	bhi.w	800854a <USBD_GetDescriptor+0x276>
 80082fa:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <USBD_GetDescriptor+0x2c>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	0800831d 	.word	0x0800831d
 8008304:	08008335 	.word	0x08008335
 8008308:	08008375 	.word	0x08008375
 800830c:	0800854b 	.word	0x0800854b
 8008310:	0800854b 	.word	0x0800854b
 8008314:	080084eb 	.word	0x080084eb
 8008318:	08008517 	.word	0x08008517
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7c12      	ldrb	r2, [r2, #16]
 8008328:	f107 0108 	add.w	r1, r7, #8
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
 8008330:	60f8      	str	r0, [r7, #12]
    break;
 8008332:	e112      	b.n	800855a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	7c1b      	ldrb	r3, [r3, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10d      	bne.n	8008358 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008344:	f107 0208 	add.w	r2, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	2202      	movs	r2, #2
 8008354:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008356:	e100      	b.n	800855a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	f107 0208 	add.w	r2, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	2202      	movs	r2, #2
 8008370:	701a      	strb	r2, [r3, #0]
    break;
 8008372:	e0f2      	b.n	800855a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	885b      	ldrh	r3, [r3, #2]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b05      	cmp	r3, #5
 800837c:	f200 80ac 	bhi.w	80084d8 <USBD_GetDescriptor+0x204>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <USBD_GetDescriptor+0xb4>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	080083a1 	.word	0x080083a1
 800838c:	080083d5 	.word	0x080083d5
 8008390:	08008409 	.word	0x08008409
 8008394:	0800843d 	.word	0x0800843d
 8008398:	08008471 	.word	0x08008471
 800839c:	080084a5 	.word	0x080084a5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	7c12      	ldrb	r2, [r2, #16]
 80083b8:	f107 0108 	add.w	r1, r7, #8
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083c2:	e091      	b.n	80084e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 faaa 	bl	8008920 <USBD_CtlError>
        err++;
 80083cc:	7afb      	ldrb	r3, [r7, #11]
 80083ce:	3301      	adds	r3, #1
 80083d0:	72fb      	strb	r3, [r7, #11]
      break;
 80083d2:	e089      	b.n	80084e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	7c12      	ldrb	r2, [r2, #16]
 80083ec:	f107 0108 	add.w	r1, r7, #8
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
 80083f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083f6:	e077      	b.n	80084e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa90 	bl	8008920 <USBD_CtlError>
        err++;
 8008400:	7afb      	ldrb	r3, [r7, #11]
 8008402:	3301      	adds	r3, #1
 8008404:	72fb      	strb	r3, [r7, #11]
      break;
 8008406:	e06f      	b.n	80084e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00b      	beq.n	800842c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	7c12      	ldrb	r2, [r2, #16]
 8008420:	f107 0108 	add.w	r1, r7, #8
 8008424:	4610      	mov	r0, r2
 8008426:	4798      	blx	r3
 8008428:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800842a:	e05d      	b.n	80084e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa76 	bl	8008920 <USBD_CtlError>
        err++;
 8008434:	7afb      	ldrb	r3, [r7, #11]
 8008436:	3301      	adds	r3, #1
 8008438:	72fb      	strb	r3, [r7, #11]
      break;
 800843a:	e055      	b.n	80084e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	7c12      	ldrb	r2, [r2, #16]
 8008454:	f107 0108 	add.w	r1, r7, #8
 8008458:	4610      	mov	r0, r2
 800845a:	4798      	blx	r3
 800845c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800845e:	e043      	b.n	80084e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fa5c 	bl	8008920 <USBD_CtlError>
        err++;
 8008468:	7afb      	ldrb	r3, [r7, #11]
 800846a:	3301      	adds	r3, #1
 800846c:	72fb      	strb	r3, [r7, #11]
      break;
 800846e:	e03b      	b.n	80084e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	7c12      	ldrb	r2, [r2, #16]
 8008488:	f107 0108 	add.w	r1, r7, #8
 800848c:	4610      	mov	r0, r2
 800848e:	4798      	blx	r3
 8008490:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008492:	e029      	b.n	80084e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fa42 	bl	8008920 <USBD_CtlError>
        err++;
 800849c:	7afb      	ldrb	r3, [r7, #11]
 800849e:	3301      	adds	r3, #1
 80084a0:	72fb      	strb	r3, [r7, #11]
      break;
 80084a2:	e021      	b.n	80084e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	7c12      	ldrb	r2, [r2, #16]
 80084bc:	f107 0108 	add.w	r1, r7, #8
 80084c0:	4610      	mov	r0, r2
 80084c2:	4798      	blx	r3
 80084c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084c6:	e00f      	b.n	80084e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fa28 	bl	8008920 <USBD_CtlError>
        err++;
 80084d0:	7afb      	ldrb	r3, [r7, #11]
 80084d2:	3301      	adds	r3, #1
 80084d4:	72fb      	strb	r3, [r7, #11]
      break;
 80084d6:	e007      	b.n	80084e8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa20 	bl	8008920 <USBD_CtlError>
      err++;
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	3301      	adds	r3, #1
 80084e4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80084e6:	bf00      	nop
    }
    break;
 80084e8:	e037      	b.n	800855a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	7c1b      	ldrb	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d109      	bne.n	8008506 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	f107 0208 	add.w	r2, r7, #8
 80084fe:	4610      	mov	r0, r2
 8008500:	4798      	blx	r3
 8008502:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008504:	e029      	b.n	800855a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fa09 	bl	8008920 <USBD_CtlError>
      err++;
 800850e:	7afb      	ldrb	r3, [r7, #11]
 8008510:	3301      	adds	r3, #1
 8008512:	72fb      	strb	r3, [r7, #11]
    break;
 8008514:	e021      	b.n	800855a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	7c1b      	ldrb	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10d      	bne.n	800853a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	f107 0208 	add.w	r2, r7, #8
 800852a:	4610      	mov	r0, r2
 800852c:	4798      	blx	r3
 800852e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	2207      	movs	r2, #7
 8008536:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008538:	e00f      	b.n	800855a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f9ef 	bl	8008920 <USBD_CtlError>
      err++;
 8008542:	7afb      	ldrb	r3, [r7, #11]
 8008544:	3301      	adds	r3, #1
 8008546:	72fb      	strb	r3, [r7, #11]
    break;
 8008548:	e007      	b.n	800855a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f9e7 	bl	8008920 <USBD_CtlError>
    err++;
 8008552:	7afb      	ldrb	r3, [r7, #11]
 8008554:	3301      	adds	r3, #1
 8008556:	72fb      	strb	r3, [r7, #11]
    break;
 8008558:	bf00      	nop
  }

  if (err != 0U)
 800855a:	7afb      	ldrb	r3, [r7, #11]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d11e      	bne.n	800859e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	88db      	ldrh	r3, [r3, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d016      	beq.n	8008596 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008568:	893b      	ldrh	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00e      	beq.n	800858c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	88da      	ldrh	r2, [r3, #6]
 8008572:	893b      	ldrh	r3, [r7, #8]
 8008574:	4293      	cmp	r3, r2
 8008576:	bf28      	it	cs
 8008578:	4613      	movcs	r3, r2
 800857a:	b29b      	uxth	r3, r3
 800857c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800857e:	893b      	ldrh	r3, [r7, #8]
 8008580:	461a      	mov	r2, r3
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fa3c 	bl	8008a02 <USBD_CtlSendData>
 800858a:	e009      	b.n	80085a0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f9c6 	bl	8008920 <USBD_CtlError>
 8008594:	e004      	b.n	80085a0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa70 	bl	8008a7c <USBD_CtlSendStatus>
 800859c:	e000      	b.n	80085a0 <USBD_GetDescriptor+0x2cc>
    return;
 800859e:	bf00      	nop
    }
  }
}
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop

080085a8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	889b      	ldrh	r3, [r3, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d130      	bne.n	800861c <USBD_SetAddress+0x74>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	88db      	ldrh	r3, [r3, #6]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d12c      	bne.n	800861c <USBD_SetAddress+0x74>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	885b      	ldrh	r3, [r3, #2]
 80085c6:	2b7f      	cmp	r3, #127	; 0x7f
 80085c8:	d828      	bhi.n	800861c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	885b      	ldrh	r3, [r3, #2]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d104      	bne.n	80085ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f99c 	bl	8008920 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e8:	e01c      	b.n	8008624 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	7bfa      	ldrb	r2, [r7, #15]
 80085ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fdec 	bl	80091d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fa3d 	bl	8008a7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d004      	beq.n	8008612 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008610:	e008      	b.n	8008624 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861a:	e003      	b.n	8008624 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f97e 	bl	8008920 <USBD_CtlError>
  }
}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	885b      	ldrh	r3, [r3, #2]
 800863e:	b2da      	uxtb	r2, r3
 8008640:	4b4b      	ldr	r3, [pc, #300]	; (8008770 <USBD_SetConfig+0x144>)
 8008642:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008644:	4b4a      	ldr	r3, [pc, #296]	; (8008770 <USBD_SetConfig+0x144>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d905      	bls.n	8008658 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f966 	bl	8008920 <USBD_CtlError>
    return USBD_FAIL;
 8008654:	2303      	movs	r3, #3
 8008656:	e087      	b.n	8008768 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	2b02      	cmp	r3, #2
 8008660:	d002      	beq.n	8008668 <USBD_SetConfig+0x3c>
 8008662:	2b03      	cmp	r3, #3
 8008664:	d025      	beq.n	80086b2 <USBD_SetConfig+0x86>
 8008666:	e071      	b.n	800874c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008668:	4b41      	ldr	r3, [pc, #260]	; (8008770 <USBD_SetConfig+0x144>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01c      	beq.n	80086aa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008670:	4b3f      	ldr	r3, [pc, #252]	; (8008770 <USBD_SetConfig+0x144>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800867a:	4b3d      	ldr	r3, [pc, #244]	; (8008770 <USBD_SetConfig+0x144>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7ff f9a7 	bl	80079d4 <USBD_SetClassConfig>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d004      	beq.n	800869a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f944 	bl	8008920 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008698:	e065      	b.n	8008766 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f9ee 	bl	8008a7c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2203      	movs	r2, #3
 80086a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80086a8:	e05d      	b.n	8008766 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f9e6 	bl	8008a7c <USBD_CtlSendStatus>
    break;
 80086b0:	e059      	b.n	8008766 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80086b2:	4b2f      	ldr	r3, [pc, #188]	; (8008770 <USBD_SetConfig+0x144>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d112      	bne.n	80086e0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2202      	movs	r2, #2
 80086be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80086c2:	4b2b      	ldr	r3, [pc, #172]	; (8008770 <USBD_SetConfig+0x144>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086cc:	4b28      	ldr	r3, [pc, #160]	; (8008770 <USBD_SetConfig+0x144>)
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff f99a 	bl	8007a0c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f9cf 	bl	8008a7c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80086de:	e042      	b.n	8008766 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80086e0:	4b23      	ldr	r3, [pc, #140]	; (8008770 <USBD_SetConfig+0x144>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d02a      	beq.n	8008744 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff f988 	bl	8007a0c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80086fc:	4b1c      	ldr	r3, [pc, #112]	; (8008770 <USBD_SetConfig+0x144>)
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	461a      	mov	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008706:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <USBD_SetConfig+0x144>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7ff f961 	bl	80079d4 <USBD_SetClassConfig>
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00f      	beq.n	800873c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f8fe 	bl	8008920 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	b2db      	uxtb	r3, r3
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7ff f96d 	bl	8007a0c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2202      	movs	r2, #2
 8008736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800873a:	e014      	b.n	8008766 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f99d 	bl	8008a7c <USBD_CtlSendStatus>
    break;
 8008742:	e010      	b.n	8008766 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f999 	bl	8008a7c <USBD_CtlSendStatus>
    break;
 800874a:	e00c      	b.n	8008766 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f8e6 	bl	8008920 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <USBD_SetConfig+0x144>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff f956 	bl	8007a0c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008760:	2303      	movs	r3, #3
 8008762:	73fb      	strb	r3, [r7, #15]
    break;
 8008764:	bf00      	nop
  }

  return ret;
 8008766:	7bfb      	ldrb	r3, [r7, #15]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20000624 	.word	0x20000624

08008774 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	88db      	ldrh	r3, [r3, #6]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d004      	beq.n	8008790 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f8c9 	bl	8008920 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800878e:	e021      	b.n	80087d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008796:	2b01      	cmp	r3, #1
 8008798:	db17      	blt.n	80087ca <USBD_GetConfig+0x56>
 800879a:	2b02      	cmp	r3, #2
 800879c:	dd02      	ble.n	80087a4 <USBD_GetConfig+0x30>
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d00b      	beq.n	80087ba <USBD_GetConfig+0x46>
 80087a2:	e012      	b.n	80087ca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3308      	adds	r3, #8
 80087ae:	2201      	movs	r2, #1
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f925 	bl	8008a02 <USBD_CtlSendData>
      break;
 80087b8:	e00c      	b.n	80087d4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3304      	adds	r3, #4
 80087be:	2201      	movs	r2, #1
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f91d 	bl	8008a02 <USBD_CtlSendData>
      break;
 80087c8:	e004      	b.n	80087d4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f8a7 	bl	8008920 <USBD_CtlError>
      break;
 80087d2:	bf00      	nop
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ec:	3b01      	subs	r3, #1
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d81e      	bhi.n	8008830 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	88db      	ldrh	r3, [r3, #6]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d004      	beq.n	8008804 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f88f 	bl	8008920 <USBD_CtlError>
      break;
 8008802:	e01a      	b.n	800883a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008810:	2b00      	cmp	r3, #0
 8008812:	d005      	beq.n	8008820 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f043 0202 	orr.w	r2, r3, #2
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	330c      	adds	r3, #12
 8008824:	2202      	movs	r2, #2
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f8ea 	bl	8008a02 <USBD_CtlSendData>
    break;
 800882e:	e004      	b.n	800883a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f874 	bl	8008920 <USBD_CtlError>
    break;
 8008838:	bf00      	nop
  }
}
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	885b      	ldrh	r3, [r3, #2]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d106      	bne.n	8008862 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f90d 	bl	8008a7c <USBD_CtlSendStatus>
  }
}
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800887a:	3b01      	subs	r3, #1
 800887c:	2b02      	cmp	r3, #2
 800887e:	d80b      	bhi.n	8008898 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	885b      	ldrh	r3, [r3, #2]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d10c      	bne.n	80088a2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f8f3 	bl	8008a7c <USBD_CtlSendStatus>
      }
      break;
 8008896:	e004      	b.n	80088a2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f840 	bl	8008920 <USBD_CtlError>
      break;
 80088a0:	e000      	b.n	80088a4 <USBD_ClrFeature+0x3a>
      break;
 80088a2:	bf00      	nop
  }
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	781a      	ldrb	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3301      	adds	r3, #1
 80088c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	781a      	ldrb	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3301      	adds	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7ff fad3 	bl	8007e82 <SWAPBYTE>
 80088dc:	4603      	mov	r3, r0
 80088de:	461a      	mov	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3301      	adds	r3, #1
 80088ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f7ff fac6 	bl	8007e82 <SWAPBYTE>
 80088f6:	4603      	mov	r3, r0
 80088f8:	461a      	mov	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3301      	adds	r3, #1
 8008908:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f7ff fab9 	bl	8007e82 <SWAPBYTE>
 8008910:	4603      	mov	r3, r0
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	80da      	strh	r2, [r3, #6]
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800892a:	2180      	movs	r1, #128	; 0x80
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fbe7 	bl	8009100 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008932:	2100      	movs	r1, #0
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fbe3 	bl	8009100 <USBD_LL_StallEP>
}
 800893a:	bf00      	nop
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b086      	sub	sp, #24
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d036      	beq.n	80089c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800895c:	6938      	ldr	r0, [r7, #16]
 800895e:	f000 f836 	bl	80089ce <USBD_GetLen>
 8008962:	4603      	mov	r3, r0
 8008964:	3301      	adds	r3, #1
 8008966:	b29b      	uxth	r3, r3
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4413      	add	r3, r2
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	7812      	ldrb	r2, [r2, #0]
 800897a:	701a      	strb	r2, [r3, #0]
  idx++;
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	3301      	adds	r3, #1
 8008980:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	4413      	add	r3, r2
 8008988:	2203      	movs	r2, #3
 800898a:	701a      	strb	r2, [r3, #0]
  idx++;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	3301      	adds	r3, #1
 8008990:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008992:	e013      	b.n	80089bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	4413      	add	r3, r2
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	7812      	ldrb	r2, [r2, #0]
 800899e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	3301      	adds	r3, #1
 80089a4:	613b      	str	r3, [r7, #16]
    idx++;
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	3301      	adds	r3, #1
 80089aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	4413      	add	r3, r2
 80089b2:	2200      	movs	r2, #0
 80089b4:	701a      	strb	r2, [r3, #0]
    idx++;
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	3301      	adds	r3, #1
 80089ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e7      	bne.n	8008994 <USBD_GetString+0x52>
 80089c4:	e000      	b.n	80089c8 <USBD_GetString+0x86>
    return;
 80089c6:	bf00      	nop
  }
}
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b085      	sub	sp, #20
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089de:	e005      	b.n	80089ec <USBD_GetLen+0x1e>
  {
    len++;
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	3301      	adds	r3, #1
 80089e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	3301      	adds	r3, #1
 80089ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f5      	bne.n	80089e0 <USBD_GetLen+0x12>
  }

  return len;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b084      	sub	sp, #16
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	60f8      	str	r0, [r7, #12]
 8008a0a:	60b9      	str	r1, [r7, #8]
 8008a0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2202      	movs	r2, #2
 8008a12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	2100      	movs	r1, #0
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 fbf2 	bl	8009212 <USBD_LL_Transmit>

  return USBD_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	2100      	movs	r1, #0
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 fbe1 	bl	8009212 <USBD_LL_Transmit>

  return USBD_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 fbf1 	bl	8009254 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2204      	movs	r2, #4
 8008a88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2100      	movs	r1, #0
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fbbd 	bl	8009212 <USBD_LL_Transmit>

  return USBD_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2205      	movs	r2, #5
 8008aae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fbcb 	bl	8009254 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008acc:	2200      	movs	r2, #0
 8008ace:	490e      	ldr	r1, [pc, #56]	; (8008b08 <MX_USB_DEVICE_Init+0x40>)
 8008ad0:	480e      	ldr	r0, [pc, #56]	; (8008b0c <MX_USB_DEVICE_Init+0x44>)
 8008ad2:	f7fe ff11 	bl	80078f8 <USBD_Init>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008adc:	f7f8 f924 	bl	8000d28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008ae0:	490b      	ldr	r1, [pc, #44]	; (8008b10 <MX_USB_DEVICE_Init+0x48>)
 8008ae2:	480a      	ldr	r0, [pc, #40]	; (8008b0c <MX_USB_DEVICE_Init+0x44>)
 8008ae4:	f7fe ff3e 	bl	8007964 <USBD_RegisterClass>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008aee:	f7f8 f91b 	bl	8000d28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008af2:	4806      	ldr	r0, [pc, #24]	; (8008b0c <MX_USB_DEVICE_Init+0x44>)
 8008af4:	f7fe ff57 	bl	80079a6 <USBD_Start>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008afe:	f7f8 f913 	bl	8000d28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b02:	bf00      	nop
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	2000011c 	.word	0x2000011c
 8008b0c:	20000950 	.word	0x20000950
 8008b10:	20000014 	.word	0x20000014

08008b14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2212      	movs	r2, #18
 8008b24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b26:	4b03      	ldr	r3, [pc, #12]	; (8008b34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	20000138 	.word	0x20000138

08008b38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	6039      	str	r1, [r7, #0]
 8008b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2204      	movs	r2, #4
 8008b48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b4a:	4b03      	ldr	r3, [pc, #12]	; (8008b58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	2000014c 	.word	0x2000014c

08008b5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	6039      	str	r1, [r7, #0]
 8008b66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d105      	bne.n	8008b7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	4907      	ldr	r1, [pc, #28]	; (8008b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b72:	4808      	ldr	r0, [pc, #32]	; (8008b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b74:	f7ff fee5 	bl	8008942 <USBD_GetString>
 8008b78:	e004      	b.n	8008b84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	4904      	ldr	r1, [pc, #16]	; (8008b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b7e:	4805      	ldr	r0, [pc, #20]	; (8008b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b80:	f7ff fedf 	bl	8008942 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000c20 	.word	0x20000c20
 8008b94:	080095b0 	.word	0x080095b0

08008b98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	4904      	ldr	r1, [pc, #16]	; (8008bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ba8:	4804      	ldr	r0, [pc, #16]	; (8008bbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008baa:	f7ff feca 	bl	8008942 <USBD_GetString>
  return USBD_StrDesc;
 8008bae:	4b02      	ldr	r3, [pc, #8]	; (8008bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	20000c20 	.word	0x20000c20
 8008bbc:	080095c8 	.word	0x080095c8

08008bc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	221a      	movs	r2, #26
 8008bd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008bd2:	f000 f843 	bl	8008c5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008bd6:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	20000150 	.word	0x20000150

08008be4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d105      	bne.n	8008c02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	4907      	ldr	r1, [pc, #28]	; (8008c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bfa:	4808      	ldr	r0, [pc, #32]	; (8008c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bfc:	f7ff fea1 	bl	8008942 <USBD_GetString>
 8008c00:	e004      	b.n	8008c0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	4904      	ldr	r1, [pc, #16]	; (8008c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c06:	4805      	ldr	r0, [pc, #20]	; (8008c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c08:	f7ff fe9b 	bl	8008942 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c0c:	4b02      	ldr	r3, [pc, #8]	; (8008c18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20000c20 	.word	0x20000c20
 8008c1c:	080095dc 	.word	0x080095dc

08008c20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	6039      	str	r1, [r7, #0]
 8008c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d105      	bne.n	8008c3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	4907      	ldr	r1, [pc, #28]	; (8008c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c36:	4808      	ldr	r0, [pc, #32]	; (8008c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c38:	f7ff fe83 	bl	8008942 <USBD_GetString>
 8008c3c:	e004      	b.n	8008c48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	4904      	ldr	r1, [pc, #16]	; (8008c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c42:	4805      	ldr	r0, [pc, #20]	; (8008c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c44:	f7ff fe7d 	bl	8008942 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20000c20 	.word	0x20000c20
 8008c58:	080095e8 	.word	0x080095e8

08008c5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c62:	4b0f      	ldr	r3, [pc, #60]	; (8008ca0 <Get_SerialNum+0x44>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c68:	4b0e      	ldr	r3, [pc, #56]	; (8008ca4 <Get_SerialNum+0x48>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c6e:	4b0e      	ldr	r3, [pc, #56]	; (8008ca8 <Get_SerialNum+0x4c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d009      	beq.n	8008c96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c82:	2208      	movs	r2, #8
 8008c84:	4909      	ldr	r1, [pc, #36]	; (8008cac <Get_SerialNum+0x50>)
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 f814 	bl	8008cb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c8c:	2204      	movs	r2, #4
 8008c8e:	4908      	ldr	r1, [pc, #32]	; (8008cb0 <Get_SerialNum+0x54>)
 8008c90:	68b8      	ldr	r0, [r7, #8]
 8008c92:	f000 f80f 	bl	8008cb4 <IntToUnicode>
  }
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	1fff7a10 	.word	0x1fff7a10
 8008ca4:	1fff7a14 	.word	0x1fff7a14
 8008ca8:	1fff7a18 	.word	0x1fff7a18
 8008cac:	20000152 	.word	0x20000152
 8008cb0:	20000162 	.word	0x20000162

08008cb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	75fb      	strb	r3, [r7, #23]
 8008cca:	e027      	b.n	8008d1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	0f1b      	lsrs	r3, r3, #28
 8008cd0:	2b09      	cmp	r3, #9
 8008cd2:	d80b      	bhi.n	8008cec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	0f1b      	lsrs	r3, r3, #28
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	440b      	add	r3, r1
 8008ce4:	3230      	adds	r2, #48	; 0x30
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	701a      	strb	r2, [r3, #0]
 8008cea:	e00a      	b.n	8008d02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	0f1b      	lsrs	r3, r3, #28
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	440b      	add	r3, r1
 8008cfc:	3237      	adds	r2, #55	; 0x37
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	011b      	lsls	r3, r3, #4
 8008d06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	4413      	add	r3, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
 8008d1c:	7dfa      	ldrb	r2, [r7, #23]
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d3d3      	bcc.n	8008ccc <IntToUnicode+0x18>
  }
}
 8008d24:	bf00      	nop
 8008d26:	371c      	adds	r7, #28
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	; 0x28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d38:	f107 0314 	add.w	r3, r7, #20
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	605a      	str	r2, [r3, #4]
 8008d42:	609a      	str	r2, [r3, #8]
 8008d44:	60da      	str	r2, [r3, #12]
 8008d46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d50:	d13a      	bne.n	8008dc8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d52:	2300      	movs	r3, #0
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	4b1e      	ldr	r3, [pc, #120]	; (8008dd0 <HAL_PCD_MspInit+0xa0>)
 8008d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5a:	4a1d      	ldr	r2, [pc, #116]	; (8008dd0 <HAL_PCD_MspInit+0xa0>)
 8008d5c:	f043 0301 	orr.w	r3, r3, #1
 8008d60:	6313      	str	r3, [r2, #48]	; 0x30
 8008d62:	4b1b      	ldr	r3, [pc, #108]	; (8008dd0 <HAL_PCD_MspInit+0xa0>)
 8008d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	613b      	str	r3, [r7, #16]
 8008d6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d74:	2302      	movs	r3, #2
 8008d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d80:	230a      	movs	r3, #10
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d84:	f107 0314 	add.w	r3, r7, #20
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4812      	ldr	r0, [pc, #72]	; (8008dd4 <HAL_PCD_MspInit+0xa4>)
 8008d8c:	f7f9 fb88 	bl	80024a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d90:	4b0f      	ldr	r3, [pc, #60]	; (8008dd0 <HAL_PCD_MspInit+0xa0>)
 8008d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d94:	4a0e      	ldr	r2, [pc, #56]	; (8008dd0 <HAL_PCD_MspInit+0xa0>)
 8008d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d9a:	6353      	str	r3, [r2, #52]	; 0x34
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <HAL_PCD_MspInit+0xa0>)
 8008da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da4:	4a0a      	ldr	r2, [pc, #40]	; (8008dd0 <HAL_PCD_MspInit+0xa0>)
 8008da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008daa:	6453      	str	r3, [r2, #68]	; 0x44
 8008dac:	4b08      	ldr	r3, [pc, #32]	; (8008dd0 <HAL_PCD_MspInit+0xa0>)
 8008dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008db8:	2200      	movs	r2, #0
 8008dba:	2100      	movs	r1, #0
 8008dbc:	2043      	movs	r0, #67	; 0x43
 8008dbe:	f7f9 fb38 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008dc2:	2043      	movs	r0, #67	; 0x43
 8008dc4:	f7f9 fb51 	bl	800246a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008dc8:	bf00      	nop
 8008dca:	3728      	adds	r7, #40	; 0x28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40023800 	.word	0x40023800
 8008dd4:	40020000 	.word	0x40020000

08008dd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7fe fe24 	bl	8007a3c <USBD_LL_SetupStage>
}
 8008df4:	bf00      	nop
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	1a9b      	subs	r3, r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	440b      	add	r3, r1
 8008e1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	78fb      	ldrb	r3, [r7, #3]
 8008e24:	4619      	mov	r1, r3
 8008e26:	f7fe fe5c 	bl	8007ae2 <USBD_LL_DataOutStage>
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b082      	sub	sp, #8
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e44:	78fa      	ldrb	r2, [r7, #3]
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	440b      	add	r3, r1
 8008e52:	3348      	adds	r3, #72	; 0x48
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	78fb      	ldrb	r3, [r7, #3]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	f7fe fea5 	bl	8007ba8 <USBD_LL_DataInStage>
}
 8008e5e:	bf00      	nop
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe ffa9 	bl	8007dcc <USBD_LL_SOF>
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d001      	beq.n	8008e9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e96:	f7f7 ff47 	bl	8000d28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ea0:	7bfa      	ldrb	r2, [r7, #15]
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fe ff56 	bl	8007d56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fe ff0f 	bl	8007cd4 <USBD_LL_Reset>
}
 8008eb6:	bf00      	nop
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
	...

08008ec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe ff51 	bl	8007d76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	6812      	ldr	r2, [r2, #0]
 8008ee2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a1b      	ldr	r3, [r3, #32]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d005      	beq.n	8008f00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ef4:	4b04      	ldr	r3, [pc, #16]	; (8008f08 <HAL_PCD_SuspendCallback+0x48>)
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	4a03      	ldr	r2, [pc, #12]	; (8008f08 <HAL_PCD_SuspendCallback+0x48>)
 8008efa:	f043 0306 	orr.w	r3, r3, #6
 8008efe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	e000ed00 	.word	0xe000ed00

08008f0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe ff40 	bl	8007da0 <USBD_LL_Resume>
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f3a:	78fa      	ldrb	r2, [r7, #3]
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe ff6b 	bl	8007e1a <USBD_LL_IsoOUTIncomplete>
}
 8008f44:	bf00      	nop
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f5e:	78fa      	ldrb	r2, [r7, #3]
 8008f60:	4611      	mov	r1, r2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe ff4c 	bl	8007e00 <USBD_LL_IsoINIncomplete>
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe ff58 	bl	8007e34 <USBD_LL_DevConnected>
}
 8008f84:	bf00      	nop
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe ff55 	bl	8007e4a <USBD_LL_DevDisconnected>
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d13c      	bne.n	8009032 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008fb8:	4a20      	ldr	r2, [pc, #128]	; (800903c <USBD_LL_Init+0x94>)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a1e      	ldr	r2, [pc, #120]	; (800903c <USBD_LL_Init+0x94>)
 8008fc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fc8:	4b1c      	ldr	r3, [pc, #112]	; (800903c <USBD_LL_Init+0x94>)
 8008fca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008fce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008fd0:	4b1a      	ldr	r3, [pc, #104]	; (800903c <USBD_LL_Init+0x94>)
 8008fd2:	2204      	movs	r2, #4
 8008fd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008fd6:	4b19      	ldr	r3, [pc, #100]	; (800903c <USBD_LL_Init+0x94>)
 8008fd8:	2202      	movs	r2, #2
 8008fda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fdc:	4b17      	ldr	r3, [pc, #92]	; (800903c <USBD_LL_Init+0x94>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fe2:	4b16      	ldr	r3, [pc, #88]	; (800903c <USBD_LL_Init+0x94>)
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008fe8:	4b14      	ldr	r3, [pc, #80]	; (800903c <USBD_LL_Init+0x94>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fee:	4b13      	ldr	r3, [pc, #76]	; (800903c <USBD_LL_Init+0x94>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ff4:	4b11      	ldr	r3, [pc, #68]	; (800903c <USBD_LL_Init+0x94>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008ffa:	4b10      	ldr	r3, [pc, #64]	; (800903c <USBD_LL_Init+0x94>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009000:	4b0e      	ldr	r3, [pc, #56]	; (800903c <USBD_LL_Init+0x94>)
 8009002:	2200      	movs	r2, #0
 8009004:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009006:	480d      	ldr	r0, [pc, #52]	; (800903c <USBD_LL_Init+0x94>)
 8009008:	f7fa f983 	bl	8003312 <HAL_PCD_Init>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009012:	f7f7 fe89 	bl	8000d28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009016:	2180      	movs	r1, #128	; 0x80
 8009018:	4808      	ldr	r0, [pc, #32]	; (800903c <USBD_LL_Init+0x94>)
 800901a:	f7fb fac8 	bl	80045ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800901e:	2240      	movs	r2, #64	; 0x40
 8009020:	2100      	movs	r1, #0
 8009022:	4806      	ldr	r0, [pc, #24]	; (800903c <USBD_LL_Init+0x94>)
 8009024:	f7fb fa7c 	bl	8004520 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009028:	2280      	movs	r2, #128	; 0x80
 800902a:	2101      	movs	r1, #1
 800902c:	4803      	ldr	r0, [pc, #12]	; (800903c <USBD_LL_Init+0x94>)
 800902e:	f7fb fa77 	bl	8004520 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20000e20 	.word	0x20000e20

08009040 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009056:	4618      	mov	r0, r3
 8009058:	f7fa fa78 	bl	800354c <HAL_PCD_Start>
 800905c:	4603      	mov	r3, r0
 800905e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009060:	7bfb      	ldrb	r3, [r7, #15]
 8009062:	4618      	mov	r0, r3
 8009064:	f000 f918 	bl	8009298 <USBD_Get_USB_Status>
 8009068:	4603      	mov	r3, r0
 800906a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800906c:	7bbb      	ldrb	r3, [r7, #14]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	4608      	mov	r0, r1
 8009080:	4611      	mov	r1, r2
 8009082:	461a      	mov	r2, r3
 8009084:	4603      	mov	r3, r0
 8009086:	70fb      	strb	r3, [r7, #3]
 8009088:	460b      	mov	r3, r1
 800908a:	70bb      	strb	r3, [r7, #2]
 800908c:	4613      	mov	r3, r2
 800908e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800909e:	78bb      	ldrb	r3, [r7, #2]
 80090a0:	883a      	ldrh	r2, [r7, #0]
 80090a2:	78f9      	ldrb	r1, [r7, #3]
 80090a4:	f7fa fe5c 	bl	8003d60 <HAL_PCD_EP_Open>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 f8f2 	bl	8009298 <USBD_Get_USB_Status>
 80090b4:	4603      	mov	r3, r0
 80090b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	460b      	mov	r3, r1
 80090cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090dc:	78fa      	ldrb	r2, [r7, #3]
 80090de:	4611      	mov	r1, r2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fa fea5 	bl	8003e30 <HAL_PCD_EP_Close>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f8d3 	bl	8009298 <USBD_Get_USB_Status>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800911a:	78fa      	ldrb	r2, [r7, #3]
 800911c:	4611      	mov	r1, r2
 800911e:	4618      	mov	r0, r3
 8009120:	f7fa ff65 	bl	8003fee <HAL_PCD_EP_SetStall>
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	4618      	mov	r0, r3
 800912c:	f000 f8b4 	bl	8009298 <USBD_Get_USB_Status>
 8009130:	4603      	mov	r3, r0
 8009132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009134:	7bbb      	ldrb	r3, [r7, #14]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009158:	78fa      	ldrb	r2, [r7, #3]
 800915a:	4611      	mov	r1, r2
 800915c:	4618      	mov	r0, r3
 800915e:	f7fa ffaa 	bl	80040b6 <HAL_PCD_EP_ClrStall>
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 f895 	bl	8009298 <USBD_Get_USB_Status>
 800916e:	4603      	mov	r3, r0
 8009170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009172:	7bbb      	ldrb	r3, [r7, #14]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800918e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009194:	2b00      	cmp	r3, #0
 8009196:	da0b      	bge.n	80091b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009198:	78fb      	ldrb	r3, [r7, #3]
 800919a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800919e:	68f9      	ldr	r1, [r7, #12]
 80091a0:	4613      	mov	r3, r2
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	1a9b      	subs	r3, r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	440b      	add	r3, r1
 80091aa:	333e      	adds	r3, #62	; 0x3e
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	e00b      	b.n	80091c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091b6:	68f9      	ldr	r1, [r7, #12]
 80091b8:	4613      	mov	r3, r2
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	1a9b      	subs	r3, r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	440b      	add	r3, r1
 80091c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80091c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091ee:	78fa      	ldrb	r2, [r7, #3]
 80091f0:	4611      	mov	r1, r2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fa fd8f 	bl	8003d16 <HAL_PCD_SetAddress>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 f84a 	bl	8009298 <USBD_Get_USB_Status>
 8009204:	4603      	mov	r3, r0
 8009206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009208:	7bbb      	ldrb	r3, [r7, #14]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b086      	sub	sp, #24
 8009216:	af00      	add	r7, sp, #0
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
 800921e:	460b      	mov	r3, r1
 8009220:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009230:	7af9      	ldrb	r1, [r7, #11]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	f7fa fe90 	bl	8003f5a <HAL_PCD_EP_Transmit>
 800923a:	4603      	mov	r3, r0
 800923c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800923e:	7dfb      	ldrb	r3, [r7, #23]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 f829 	bl	8009298 <USBD_Get_USB_Status>
 8009246:	4603      	mov	r3, r0
 8009248:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800924a:	7dbb      	ldrb	r3, [r7, #22]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	460b      	mov	r3, r1
 8009262:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009272:	7af9      	ldrb	r1, [r7, #11]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	f7fa fe24 	bl	8003ec4 <HAL_PCD_EP_Receive>
 800927c:	4603      	mov	r3, r0
 800927e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009280:	7dfb      	ldrb	r3, [r7, #23]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 f808 	bl	8009298 <USBD_Get_USB_Status>
 8009288:	4603      	mov	r3, r0
 800928a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800928c:	7dbb      	ldrb	r3, [r7, #22]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d817      	bhi.n	80092dc <USBD_Get_USB_Status+0x44>
 80092ac:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <USBD_Get_USB_Status+0x1c>)
 80092ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b2:	bf00      	nop
 80092b4:	080092c5 	.word	0x080092c5
 80092b8:	080092cb 	.word	0x080092cb
 80092bc:	080092d1 	.word	0x080092d1
 80092c0:	080092d7 	.word	0x080092d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
    break;
 80092c8:	e00b      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092ca:	2303      	movs	r3, #3
 80092cc:	73fb      	strb	r3, [r7, #15]
    break;
 80092ce:	e008      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092d0:	2301      	movs	r3, #1
 80092d2:	73fb      	strb	r3, [r7, #15]
    break;
 80092d4:	e005      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092d6:	2303      	movs	r3, #3
 80092d8:	73fb      	strb	r3, [r7, #15]
    break;
 80092da:	e002      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092dc:	2303      	movs	r3, #3
 80092de:	73fb      	strb	r3, [r7, #15]
    break;
 80092e0:	bf00      	nop
  }
  return usb_status;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <__errno>:
 80092f0:	4b01      	ldr	r3, [pc, #4]	; (80092f8 <__errno+0x8>)
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	2000016c 	.word	0x2000016c

080092fc <__libc_init_array>:
 80092fc:	b570      	push	{r4, r5, r6, lr}
 80092fe:	4e0d      	ldr	r6, [pc, #52]	; (8009334 <__libc_init_array+0x38>)
 8009300:	4c0d      	ldr	r4, [pc, #52]	; (8009338 <__libc_init_array+0x3c>)
 8009302:	1ba4      	subs	r4, r4, r6
 8009304:	10a4      	asrs	r4, r4, #2
 8009306:	2500      	movs	r5, #0
 8009308:	42a5      	cmp	r5, r4
 800930a:	d109      	bne.n	8009320 <__libc_init_array+0x24>
 800930c:	4e0b      	ldr	r6, [pc, #44]	; (800933c <__libc_init_array+0x40>)
 800930e:	4c0c      	ldr	r4, [pc, #48]	; (8009340 <__libc_init_array+0x44>)
 8009310:	f000 f8f6 	bl	8009500 <_init>
 8009314:	1ba4      	subs	r4, r4, r6
 8009316:	10a4      	asrs	r4, r4, #2
 8009318:	2500      	movs	r5, #0
 800931a:	42a5      	cmp	r5, r4
 800931c:	d105      	bne.n	800932a <__libc_init_array+0x2e>
 800931e:	bd70      	pop	{r4, r5, r6, pc}
 8009320:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009324:	4798      	blx	r3
 8009326:	3501      	adds	r5, #1
 8009328:	e7ee      	b.n	8009308 <__libc_init_array+0xc>
 800932a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800932e:	4798      	blx	r3
 8009330:	3501      	adds	r5, #1
 8009332:	e7f2      	b.n	800931a <__libc_init_array+0x1e>
 8009334:	0800a374 	.word	0x0800a374
 8009338:	0800a374 	.word	0x0800a374
 800933c:	0800a374 	.word	0x0800a374
 8009340:	0800a378 	.word	0x0800a378

08009344 <malloc>:
 8009344:	4b02      	ldr	r3, [pc, #8]	; (8009350 <malloc+0xc>)
 8009346:	4601      	mov	r1, r0
 8009348:	6818      	ldr	r0, [r3, #0]
 800934a:	f000 b86d 	b.w	8009428 <_malloc_r>
 800934e:	bf00      	nop
 8009350:	2000016c 	.word	0x2000016c

08009354 <free>:
 8009354:	4b02      	ldr	r3, [pc, #8]	; (8009360 <free+0xc>)
 8009356:	4601      	mov	r1, r0
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	f000 b817 	b.w	800938c <_free_r>
 800935e:	bf00      	nop
 8009360:	2000016c 	.word	0x2000016c

08009364 <memcpy>:
 8009364:	b510      	push	{r4, lr}
 8009366:	1e43      	subs	r3, r0, #1
 8009368:	440a      	add	r2, r1
 800936a:	4291      	cmp	r1, r2
 800936c:	d100      	bne.n	8009370 <memcpy+0xc>
 800936e:	bd10      	pop	{r4, pc}
 8009370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009378:	e7f7      	b.n	800936a <memcpy+0x6>

0800937a <memset>:
 800937a:	4402      	add	r2, r0
 800937c:	4603      	mov	r3, r0
 800937e:	4293      	cmp	r3, r2
 8009380:	d100      	bne.n	8009384 <memset+0xa>
 8009382:	4770      	bx	lr
 8009384:	f803 1b01 	strb.w	r1, [r3], #1
 8009388:	e7f9      	b.n	800937e <memset+0x4>
	...

0800938c <_free_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4605      	mov	r5, r0
 8009390:	2900      	cmp	r1, #0
 8009392:	d045      	beq.n	8009420 <_free_r+0x94>
 8009394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009398:	1f0c      	subs	r4, r1, #4
 800939a:	2b00      	cmp	r3, #0
 800939c:	bfb8      	it	lt
 800939e:	18e4      	addlt	r4, r4, r3
 80093a0:	f000 f8ac 	bl	80094fc <__malloc_lock>
 80093a4:	4a1f      	ldr	r2, [pc, #124]	; (8009424 <_free_r+0x98>)
 80093a6:	6813      	ldr	r3, [r2, #0]
 80093a8:	4610      	mov	r0, r2
 80093aa:	b933      	cbnz	r3, 80093ba <_free_r+0x2e>
 80093ac:	6063      	str	r3, [r4, #4]
 80093ae:	6014      	str	r4, [r2, #0]
 80093b0:	4628      	mov	r0, r5
 80093b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093b6:	f000 b8a2 	b.w	80094fe <__malloc_unlock>
 80093ba:	42a3      	cmp	r3, r4
 80093bc:	d90c      	bls.n	80093d8 <_free_r+0x4c>
 80093be:	6821      	ldr	r1, [r4, #0]
 80093c0:	1862      	adds	r2, r4, r1
 80093c2:	4293      	cmp	r3, r2
 80093c4:	bf04      	itt	eq
 80093c6:	681a      	ldreq	r2, [r3, #0]
 80093c8:	685b      	ldreq	r3, [r3, #4]
 80093ca:	6063      	str	r3, [r4, #4]
 80093cc:	bf04      	itt	eq
 80093ce:	1852      	addeq	r2, r2, r1
 80093d0:	6022      	streq	r2, [r4, #0]
 80093d2:	6004      	str	r4, [r0, #0]
 80093d4:	e7ec      	b.n	80093b0 <_free_r+0x24>
 80093d6:	4613      	mov	r3, r2
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	b10a      	cbz	r2, 80093e0 <_free_r+0x54>
 80093dc:	42a2      	cmp	r2, r4
 80093de:	d9fa      	bls.n	80093d6 <_free_r+0x4a>
 80093e0:	6819      	ldr	r1, [r3, #0]
 80093e2:	1858      	adds	r0, r3, r1
 80093e4:	42a0      	cmp	r0, r4
 80093e6:	d10b      	bne.n	8009400 <_free_r+0x74>
 80093e8:	6820      	ldr	r0, [r4, #0]
 80093ea:	4401      	add	r1, r0
 80093ec:	1858      	adds	r0, r3, r1
 80093ee:	4282      	cmp	r2, r0
 80093f0:	6019      	str	r1, [r3, #0]
 80093f2:	d1dd      	bne.n	80093b0 <_free_r+0x24>
 80093f4:	6810      	ldr	r0, [r2, #0]
 80093f6:	6852      	ldr	r2, [r2, #4]
 80093f8:	605a      	str	r2, [r3, #4]
 80093fa:	4401      	add	r1, r0
 80093fc:	6019      	str	r1, [r3, #0]
 80093fe:	e7d7      	b.n	80093b0 <_free_r+0x24>
 8009400:	d902      	bls.n	8009408 <_free_r+0x7c>
 8009402:	230c      	movs	r3, #12
 8009404:	602b      	str	r3, [r5, #0]
 8009406:	e7d3      	b.n	80093b0 <_free_r+0x24>
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	1821      	adds	r1, r4, r0
 800940c:	428a      	cmp	r2, r1
 800940e:	bf04      	itt	eq
 8009410:	6811      	ldreq	r1, [r2, #0]
 8009412:	6852      	ldreq	r2, [r2, #4]
 8009414:	6062      	str	r2, [r4, #4]
 8009416:	bf04      	itt	eq
 8009418:	1809      	addeq	r1, r1, r0
 800941a:	6021      	streq	r1, [r4, #0]
 800941c:	605c      	str	r4, [r3, #4]
 800941e:	e7c7      	b.n	80093b0 <_free_r+0x24>
 8009420:	bd38      	pop	{r3, r4, r5, pc}
 8009422:	bf00      	nop
 8009424:	20000628 	.word	0x20000628

08009428 <_malloc_r>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	1ccd      	adds	r5, r1, #3
 800942c:	f025 0503 	bic.w	r5, r5, #3
 8009430:	3508      	adds	r5, #8
 8009432:	2d0c      	cmp	r5, #12
 8009434:	bf38      	it	cc
 8009436:	250c      	movcc	r5, #12
 8009438:	2d00      	cmp	r5, #0
 800943a:	4606      	mov	r6, r0
 800943c:	db01      	blt.n	8009442 <_malloc_r+0x1a>
 800943e:	42a9      	cmp	r1, r5
 8009440:	d903      	bls.n	800944a <_malloc_r+0x22>
 8009442:	230c      	movs	r3, #12
 8009444:	6033      	str	r3, [r6, #0]
 8009446:	2000      	movs	r0, #0
 8009448:	bd70      	pop	{r4, r5, r6, pc}
 800944a:	f000 f857 	bl	80094fc <__malloc_lock>
 800944e:	4a21      	ldr	r2, [pc, #132]	; (80094d4 <_malloc_r+0xac>)
 8009450:	6814      	ldr	r4, [r2, #0]
 8009452:	4621      	mov	r1, r4
 8009454:	b991      	cbnz	r1, 800947c <_malloc_r+0x54>
 8009456:	4c20      	ldr	r4, [pc, #128]	; (80094d8 <_malloc_r+0xb0>)
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	b91b      	cbnz	r3, 8009464 <_malloc_r+0x3c>
 800945c:	4630      	mov	r0, r6
 800945e:	f000 f83d 	bl	80094dc <_sbrk_r>
 8009462:	6020      	str	r0, [r4, #0]
 8009464:	4629      	mov	r1, r5
 8009466:	4630      	mov	r0, r6
 8009468:	f000 f838 	bl	80094dc <_sbrk_r>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d124      	bne.n	80094ba <_malloc_r+0x92>
 8009470:	230c      	movs	r3, #12
 8009472:	6033      	str	r3, [r6, #0]
 8009474:	4630      	mov	r0, r6
 8009476:	f000 f842 	bl	80094fe <__malloc_unlock>
 800947a:	e7e4      	b.n	8009446 <_malloc_r+0x1e>
 800947c:	680b      	ldr	r3, [r1, #0]
 800947e:	1b5b      	subs	r3, r3, r5
 8009480:	d418      	bmi.n	80094b4 <_malloc_r+0x8c>
 8009482:	2b0b      	cmp	r3, #11
 8009484:	d90f      	bls.n	80094a6 <_malloc_r+0x7e>
 8009486:	600b      	str	r3, [r1, #0]
 8009488:	50cd      	str	r5, [r1, r3]
 800948a:	18cc      	adds	r4, r1, r3
 800948c:	4630      	mov	r0, r6
 800948e:	f000 f836 	bl	80094fe <__malloc_unlock>
 8009492:	f104 000b 	add.w	r0, r4, #11
 8009496:	1d23      	adds	r3, r4, #4
 8009498:	f020 0007 	bic.w	r0, r0, #7
 800949c:	1ac3      	subs	r3, r0, r3
 800949e:	d0d3      	beq.n	8009448 <_malloc_r+0x20>
 80094a0:	425a      	negs	r2, r3
 80094a2:	50e2      	str	r2, [r4, r3]
 80094a4:	e7d0      	b.n	8009448 <_malloc_r+0x20>
 80094a6:	428c      	cmp	r4, r1
 80094a8:	684b      	ldr	r3, [r1, #4]
 80094aa:	bf16      	itet	ne
 80094ac:	6063      	strne	r3, [r4, #4]
 80094ae:	6013      	streq	r3, [r2, #0]
 80094b0:	460c      	movne	r4, r1
 80094b2:	e7eb      	b.n	800948c <_malloc_r+0x64>
 80094b4:	460c      	mov	r4, r1
 80094b6:	6849      	ldr	r1, [r1, #4]
 80094b8:	e7cc      	b.n	8009454 <_malloc_r+0x2c>
 80094ba:	1cc4      	adds	r4, r0, #3
 80094bc:	f024 0403 	bic.w	r4, r4, #3
 80094c0:	42a0      	cmp	r0, r4
 80094c2:	d005      	beq.n	80094d0 <_malloc_r+0xa8>
 80094c4:	1a21      	subs	r1, r4, r0
 80094c6:	4630      	mov	r0, r6
 80094c8:	f000 f808 	bl	80094dc <_sbrk_r>
 80094cc:	3001      	adds	r0, #1
 80094ce:	d0cf      	beq.n	8009470 <_malloc_r+0x48>
 80094d0:	6025      	str	r5, [r4, #0]
 80094d2:	e7db      	b.n	800948c <_malloc_r+0x64>
 80094d4:	20000628 	.word	0x20000628
 80094d8:	2000062c 	.word	0x2000062c

080094dc <_sbrk_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4c06      	ldr	r4, [pc, #24]	; (80094f8 <_sbrk_r+0x1c>)
 80094e0:	2300      	movs	r3, #0
 80094e2:	4605      	mov	r5, r0
 80094e4:	4608      	mov	r0, r1
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	f7f8 f928 	bl	800173c <_sbrk>
 80094ec:	1c43      	adds	r3, r0, #1
 80094ee:	d102      	bne.n	80094f6 <_sbrk_r+0x1a>
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	b103      	cbz	r3, 80094f6 <_sbrk_r+0x1a>
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	20001228 	.word	0x20001228

080094fc <__malloc_lock>:
 80094fc:	4770      	bx	lr

080094fe <__malloc_unlock>:
 80094fe:	4770      	bx	lr

08009500 <_init>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr

0800950c <_fini>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr
