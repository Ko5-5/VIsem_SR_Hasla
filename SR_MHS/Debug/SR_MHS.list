
SR_MHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079a4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008910  08008910  000201c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008910  08008910  00018910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008918  08008918  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008918  08008918  00018918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  08008920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e0c  200001c4  08008ae4  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fd0  08008ae4  00020fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7b1  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c04  00000000  00000000  0003c9a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  000405b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001420  00000000  00000000  00041b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a91b  00000000  00000000  00042fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000145cc  00000000  00000000  0005d8bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093064  00000000  00000000  00071e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104eeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c34  00000000  00000000  00104f68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001c4 	.word	0x200001c4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007b24 	.word	0x08007b24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001c8 	.word	0x200001c8
 80001d4:	08007b24 	.word	0x08007b24

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
 80004f2:	4b3e      	ldr	r3, [pc, #248]	; (80005ec <MX_GPIO_Init+0x114>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a3d      	ldr	r2, [pc, #244]	; (80005ec <MX_GPIO_Init+0x114>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b3b      	ldr	r3, [pc, #236]	; (80005ec <MX_GPIO_Init+0x114>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	4b37      	ldr	r3, [pc, #220]	; (80005ec <MX_GPIO_Init+0x114>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a36      	ldr	r2, [pc, #216]	; (80005ec <MX_GPIO_Init+0x114>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b34      	ldr	r3, [pc, #208]	; (80005ec <MX_GPIO_Init+0x114>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	4b30      	ldr	r3, [pc, #192]	; (80005ec <MX_GPIO_Init+0x114>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a2f      	ldr	r2, [pc, #188]	; (80005ec <MX_GPIO_Init+0x114>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <MX_GPIO_Init+0x114>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b29      	ldr	r3, [pc, #164]	; (80005ec <MX_GPIO_Init+0x114>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a28      	ldr	r2, [pc, #160]	; (80005ec <MX_GPIO_Init+0x114>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <MX_GPIO_Init+0x114>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000564:	4822      	ldr	r0, [pc, #136]	; (80005f0 <MX_GPIO_Init+0x118>)
 8000566:	f001 fafb 	bl	8001b60 <HAL_GPIO_WritePin>
                          |CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000570:	4820      	ldr	r0, [pc, #128]	; (80005f4 <MX_GPIO_Init+0x11c>)
 8000572:	f001 faf5 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin;
 8000576:	231c      	movs	r3, #28
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800057a:	2300      	movs	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4819      	ldr	r0, [pc, #100]	; (80005f0 <MX_GPIO_Init+0x118>)
 800058a:	f001 f967 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800058e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000592:	617b      	str	r3, [r7, #20]
                          |CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	4812      	ldr	r0, [pc, #72]	; (80005f0 <MX_GPIO_Init+0x118>)
 80005a8:	f001 f958 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_BUT_Pin;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	480d      	ldr	r0, [pc, #52]	; (80005f4 <MX_GPIO_Init+0x11c>)
 80005c0:	f001 f94c 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 80005c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_GPIO_Init+0x11c>)
 80005de:	f001 f93d 	bl	800185c <HAL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020400 	.word	0x40020400

080005f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2C1_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_I2C1_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_I2C1_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_I2C1_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_I2C1_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_I2C1_Init+0x50>)
 8000636:	f001 faad 	bl	8001b94 <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f96c 	bl	800091c <Error_Handler>
  }

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000604 	.word	0x20000604
 800064c:	40005400 	.word	0x40005400
 8000650:	00061a80 	.word	0x00061a80

08000654 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a19      	ldr	r2, [pc, #100]	; (80006d8 <HAL_I2C_MspInit+0x84>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d12b      	bne.n	80006ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_I2C_MspInit+0x88>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <HAL_I2C_MspInit+0x88>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_I2C_MspInit+0x88>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000692:	23c0      	movs	r3, #192	; 0xc0
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000696:	2312      	movs	r3, #18
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800069a:	2301      	movs	r3, #1
 800069c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006a2:	2304      	movs	r3, #4
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <HAL_I2C_MspInit+0x8c>)
 80006ae:	f001 f8d5 	bl	800185c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c0:	6413      	str	r3, [r2, #64]	; 0x40
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40005400 	.word	0x40005400
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020400 	.word	0x40020400

080006e4 <OLED_page_test_sc>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void OLED_page_test_sc(){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af02      	add	r7, sp, #8
	// OLED screen test
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 fa8e 	bl	8000c0c <SSD1306_Fill>
	SSD1306_GotoXY (4,6); // goto 10, 10
 80006f0:	2106      	movs	r1, #6
 80006f2:	2004      	movs	r0, #4
 80006f4:	f000 fb02 	bl	8000cfc <SSD1306_GotoXY>
	SSD1306_Puts ("--MHS--", &Font_11x18, 1); // print Hello
 80006f8:	2201      	movs	r2, #1
 80006fa:	4931      	ldr	r1, [pc, #196]	; (80007c0 <OLED_page_test_sc+0xdc>)
 80006fc:	4831      	ldr	r0, [pc, #196]	; (80007c4 <OLED_page_test_sc+0xe0>)
 80006fe:	f000 fb93 	bl	8000e28 <SSD1306_Puts>
	SSD1306_GotoXY (4,25); // goto 10, 10
 8000702:	2119      	movs	r1, #25
 8000704:	2004      	movs	r0, #4
 8000706:	f000 faf9 	bl	8000cfc <SSD1306_GotoXY>
	SSD1306_Puts ("PAGE", &Font_11x18, 1); // print Hello
 800070a:	2201      	movs	r2, #1
 800070c:	492c      	ldr	r1, [pc, #176]	; (80007c0 <OLED_page_test_sc+0xdc>)
 800070e:	482e      	ldr	r0, [pc, #184]	; (80007c8 <OLED_page_test_sc+0xe4>)
 8000710:	f000 fb8a 	bl	8000e28 <SSD1306_Puts>
	SSD1306_GotoXY (4,44); // goto 10, 10
 8000714:	212c      	movs	r1, #44	; 0x2c
 8000716:	2004      	movs	r0, #4
 8000718:	f000 faf0 	bl	8000cfc <SSD1306_GotoXY>
	SSD1306_Puts ("NUMBER:", &Font_11x18, 1); // print Hello
 800071c:	2201      	movs	r2, #1
 800071e:	4928      	ldr	r1, [pc, #160]	; (80007c0 <OLED_page_test_sc+0xdc>)
 8000720:	482a      	ldr	r0, [pc, #168]	; (80007cc <OLED_page_test_sc+0xe8>)
 8000722:	f000 fb81 	bl	8000e28 <SSD1306_Puts>
	SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000726:	2301      	movs	r3, #1
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	2101      	movs	r1, #1
 8000730:	2000      	movs	r0, #0
 8000732:	f000 fb9e 	bl	8000e72 <SSD1306_DrawLine>
	SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000736:	2301      	movs	r3, #1
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fb96 	bl	8000e72 <SSD1306_DrawLine>
	SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000746:	2301      	movs	r3, #1
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2340      	movs	r3, #64	; 0x40
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	2100      	movs	r1, #0
 8000750:	2080      	movs	r0, #128	; 0x80
 8000752:	f000 fb8e 	bl	8000e72 <SSD1306_DrawLine>
	SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000756:	2301      	movs	r3, #1
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2340      	movs	r3, #64	; 0x40
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fb86 	bl	8000e72 <SSD1306_DrawLine>
	SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 8000766:	2301      	movs	r3, #1
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	233e      	movs	r3, #62	; 0x3e
 800076c:	221b      	movs	r2, #27
 800076e:	2102      	movs	r1, #2
 8000770:	2064      	movs	r0, #100	; 0x64
 8000772:	f000 fc79 	bl	8001068 <SSD1306_DrawRectangle>
	SSD1306_GotoXY (110,25); // goto 10, 10
 8000776:	2119      	movs	r1, #25
 8000778:	206e      	movs	r0, #110	; 0x6e
 800077a:	f000 fabf 	bl	8000cfc <SSD1306_GotoXY>
	SSD1306_Putc ((char)(i+1+'0'), &Font_11x18, 1); // print Hello
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <OLED_page_test_sc+0xec>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	3331      	adds	r3, #49	; 0x31
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2201      	movs	r2, #1
 800078a:	490d      	ldr	r1, [pc, #52]	; (80007c0 <OLED_page_test_sc+0xdc>)
 800078c:	4618      	mov	r0, r3
 800078e:	f000 facb 	bl	8000d28 <SSD1306_Putc>
	SSD1306_UpdateScreen(); // update screen
 8000792:	f000 fa0d 	bl	8000bb0 <SSD1306_UpdateScreen>
	if(i==8)
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <OLED_page_test_sc+0xec>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b08      	cmp	r3, #8
 800079c:	d103      	bne.n	80007a6 <OLED_page_test_sc+0xc2>
		i=0;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <OLED_page_test_sc+0xec>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	e004      	b.n	80007b0 <OLED_page_test_sc+0xcc>
	else
		i++;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <OLED_page_test_sc+0xec>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <OLED_page_test_sc+0xec>)
 80007ae:	6013      	str	r3, [r2, #0]
	HAL_Delay(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f000 ff1e 	bl	80015f4 <HAL_Delay>
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000
 80007c4:	08007b3c 	.word	0x08007b3c
 80007c8:	08007b44 	.word	0x08007b44
 80007cc:	08007b4c 	.word	0x08007b4c
 80007d0:	200001e0 	.word	0x200001e0

080007d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007d8:	f000 fe9a 	bl	8001510 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007dc:	f000 f836 	bl	800084c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007e0:	f7ff fe7a 	bl	80004d8 <MX_GPIO_Init>
	MX_I2C1_Init();
 80007e4:	f7ff ff08 	bl	80005f8 <MX_I2C1_Init>
	MX_SPI3_Init();
 80007e8:	f000 f8a0 	bl	800092c <MX_SPI3_Init>
	MX_TIM2_Init();
 80007ec:	f000 fdcc 	bl	8001388 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 80007f0:	f006 fc88 	bl	8007104 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init();
 80007f4:	f000 f918 	bl	8000a28 <SSD1306_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		OLED_page_test_sc();
 80007f8:	f7ff ff74 	bl	80006e4 <OLED_page_test_sc>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		keyboardhid.MODIFIER = 0x02; // lewy Shift naciśniety
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <main+0x70>)
 80007fe:	2202      	movs	r2, #2
 8000800:	701a      	strb	r2, [r3, #0]
		keyboardhid.KEYCODE1 = 0x04; // litera a nacisnieta
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <main+0x70>)
 8000804:	2204      	movs	r2, #4
 8000806:	709a      	strb	r2, [r3, #2]
		keyboardhid.KEYCODE1 = 0x05; // litera b nacisnieta
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <main+0x70>)
 800080a:	2205      	movs	r2, #5
 800080c:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 800080e:	2208      	movs	r2, #8
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <main+0x70>)
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <main+0x74>)
 8000814:	f005 fb1a 	bl	8005e4c <USBD_HID_SendReport>
		HAL_Delay(50);
 8000818:	2032      	movs	r0, #50	; 0x32
 800081a:	f000 feeb 	bl	80015f4 <HAL_Delay>
		keyboardhid.MODIFIER = 0x00; // lewy Shift puszczony
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <main+0x70>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
		keyboardhid.KEYCODE1 = 0x00; // litera a puszczona
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <main+0x70>)
 8000826:	2200      	movs	r2, #0
 8000828:	709a      	strb	r2, [r3, #2]
		keyboardhid.KEYCODE1 = 0x00; // litera b puszczona
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <main+0x70>)
 800082c:	2200      	movs	r2, #0
 800082e:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000830:	2208      	movs	r2, #8
 8000832:	4904      	ldr	r1, [pc, #16]	; (8000844 <main+0x70>)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <main+0x74>)
 8000836:	f005 fb09 	bl	8005e4c <USBD_HID_SendReport>
		HAL_Delay(50);
 800083a:	2032      	movs	r0, #50	; 0x32
 800083c:	f000 feda 	bl	80015f4 <HAL_Delay>
		OLED_page_test_sc();
 8000840:	e7da      	b.n	80007f8 <main+0x24>
 8000842:	bf00      	nop
 8000844:	200001e4 	.word	0x200001e4
 8000848:	200006f4 	.word	0x200006f4

0800084c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	; 0x50
 8000850:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	2230      	movs	r2, #48	; 0x30
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f007 f8a0 	bl	80079a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <SystemClock_Config+0xc8>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a26      	ldr	r2, [pc, #152]	; (8000914 <SystemClock_Config+0xc8>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <SystemClock_Config+0xc8>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <SystemClock_Config+0xcc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a20      	ldr	r2, [pc, #128]	; (8000918 <SystemClock_Config+0xcc>)
 8000896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <SystemClock_Config+0xcc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80008bc:	2319      	movs	r3, #25
 80008be:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 80008c0:	23c0      	movs	r3, #192	; 0xc0
 80008c2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 f837 	bl	8003944 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80008dc:	f000 f81e 	bl	800091c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2302      	movs	r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2103      	movs	r1, #3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 fa91 	bl	8003e24 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000908:	f000 f808 	bl	800091c <Error_Handler>
	}
}
 800090c:	bf00      	nop
 800090e:	3750      	adds	r7, #80	; 0x50
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_SPI3_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <MX_SPI3_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI3_Init+0x64>)
 8000938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI3_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_SPI3_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI3_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI3_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI3_Init+0x64>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI3_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_SPI3_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI3_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_SPI3_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI3_Init+0x64>)
 8000978:	220a      	movs	r2, #10
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_SPI3_Init+0x64>)
 800097e:	f003 fc09 	bl	8004194 <HAL_SPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000988:	f7ff ffc8 	bl	800091c <Error_Handler>
  }

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000658 	.word	0x20000658
 8000994:	40003c00 	.word	0x40003c00

08000998 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_SPI_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12b      	bne.n	8000a12 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_SPI_MspInit+0x88>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_SPI_MspInit+0x88>)
 80009c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_SPI_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_SPI_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_SPI_MspInit+0x88>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_SPI_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009f2:	2338      	movs	r3, #56	; 0x38
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a02:	2306      	movs	r3, #6
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <HAL_SPI_MspInit+0x8c>)
 8000a0e:	f000 ff25 	bl	800185c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40003c00 	.word	0x40003c00
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400

08000a28 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000a2e:	f000 fb85 	bl	800113c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000a32:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a36:	2201      	movs	r2, #1
 8000a38:	2178      	movs	r1, #120	; 0x78
 8000a3a:	485b      	ldr	r0, [pc, #364]	; (8000ba8 <SSD1306_Init+0x180>)
 8000a3c:	f001 fae0 	bl	8002000 <HAL_I2C_IsDeviceReady>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e0a9      	b.n	8000b9e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000a4a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000a4e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a50:	e002      	b.n	8000a58 <SSD1306_Init+0x30>
		p--;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f9      	bne.n	8000a52 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a5e:	22ae      	movs	r2, #174	; 0xae
 8000a60:	2100      	movs	r1, #0
 8000a62:	2078      	movs	r0, #120	; 0x78
 8000a64:	f000 fbc6 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000a68:	2220      	movs	r2, #32
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2078      	movs	r0, #120	; 0x78
 8000a6e:	f000 fbc1 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a72:	2210      	movs	r2, #16
 8000a74:	2100      	movs	r1, #0
 8000a76:	2078      	movs	r0, #120	; 0x78
 8000a78:	f000 fbbc 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a7c:	22b0      	movs	r2, #176	; 0xb0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2078      	movs	r0, #120	; 0x78
 8000a82:	f000 fbb7 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a86:	22c8      	movs	r2, #200	; 0xc8
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2078      	movs	r0, #120	; 0x78
 8000a8c:	f000 fbb2 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2078      	movs	r0, #120	; 0x78
 8000a96:	f000 fbad 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2078      	movs	r0, #120	; 0x78
 8000aa0:	f000 fba8 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000aa4:	2240      	movs	r2, #64	; 0x40
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2078      	movs	r0, #120	; 0x78
 8000aaa:	f000 fba3 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000aae:	2281      	movs	r2, #129	; 0x81
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2078      	movs	r0, #120	; 0x78
 8000ab4:	f000 fb9e 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000ab8:	22ff      	movs	r2, #255	; 0xff
 8000aba:	2100      	movs	r1, #0
 8000abc:	2078      	movs	r0, #120	; 0x78
 8000abe:	f000 fb99 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000ac2:	22a1      	movs	r2, #161	; 0xa1
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2078      	movs	r0, #120	; 0x78
 8000ac8:	f000 fb94 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000acc:	22a6      	movs	r2, #166	; 0xa6
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2078      	movs	r0, #120	; 0x78
 8000ad2:	f000 fb8f 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000ad6:	22a8      	movs	r2, #168	; 0xa8
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2078      	movs	r0, #120	; 0x78
 8000adc:	f000 fb8a 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ae0:	223f      	movs	r2, #63	; 0x3f
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2078      	movs	r0, #120	; 0x78
 8000ae6:	f000 fb85 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000aea:	22a4      	movs	r2, #164	; 0xa4
 8000aec:	2100      	movs	r1, #0
 8000aee:	2078      	movs	r0, #120	; 0x78
 8000af0:	f000 fb80 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000af4:	22d3      	movs	r2, #211	; 0xd3
 8000af6:	2100      	movs	r1, #0
 8000af8:	2078      	movs	r0, #120	; 0x78
 8000afa:	f000 fb7b 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2078      	movs	r0, #120	; 0x78
 8000b04:	f000 fb76 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b08:	22d5      	movs	r2, #213	; 0xd5
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2078      	movs	r0, #120	; 0x78
 8000b0e:	f000 fb71 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000b12:	22f0      	movs	r2, #240	; 0xf0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2078      	movs	r0, #120	; 0x78
 8000b18:	f000 fb6c 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000b1c:	22d9      	movs	r2, #217	; 0xd9
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2078      	movs	r0, #120	; 0x78
 8000b22:	f000 fb67 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000b26:	2222      	movs	r2, #34	; 0x22
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2078      	movs	r0, #120	; 0x78
 8000b2c:	f000 fb62 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000b30:	22da      	movs	r2, #218	; 0xda
 8000b32:	2100      	movs	r1, #0
 8000b34:	2078      	movs	r0, #120	; 0x78
 8000b36:	f000 fb5d 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000b3a:	2212      	movs	r2, #18
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2078      	movs	r0, #120	; 0x78
 8000b40:	f000 fb58 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000b44:	22db      	movs	r2, #219	; 0xdb
 8000b46:	2100      	movs	r1, #0
 8000b48:	2078      	movs	r0, #120	; 0x78
 8000b4a:	f000 fb53 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000b4e:	2220      	movs	r2, #32
 8000b50:	2100      	movs	r1, #0
 8000b52:	2078      	movs	r0, #120	; 0x78
 8000b54:	f000 fb4e 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b58:	228d      	movs	r2, #141	; 0x8d
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2078      	movs	r0, #120	; 0x78
 8000b5e:	f000 fb49 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b62:	2214      	movs	r2, #20
 8000b64:	2100      	movs	r1, #0
 8000b66:	2078      	movs	r0, #120	; 0x78
 8000b68:	f000 fb44 	bl	80011f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b6c:	22af      	movs	r2, #175	; 0xaf
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2078      	movs	r0, #120	; 0x78
 8000b72:	f000 fb3f 	bl	80011f4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b76:	222e      	movs	r2, #46	; 0x2e
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2078      	movs	r0, #120	; 0x78
 8000b7c:	f000 fb3a 	bl	80011f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 f843 	bl	8000c0c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000b86:	f000 f813 	bl	8000bb0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <SSD1306_Init+0x184>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SSD1306_Init+0x184>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <SSD1306_Init+0x184>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000604 	.word	0x20000604
 8000bac:	200005ec 	.word	0x200005ec

08000bb0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	e01d      	b.n	8000bf8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	3b50      	subs	r3, #80	; 0x50
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2078      	movs	r0, #120	; 0x78
 8000bc8:	f000 fb14 	bl	80011f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2078      	movs	r0, #120	; 0x78
 8000bd2:	f000 fb0f 	bl	80011f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000bd6:	2210      	movs	r2, #16
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2078      	movs	r0, #120	; 0x78
 8000bdc:	f000 fb0a 	bl	80011f4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	01db      	lsls	r3, r3, #7
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <SSD1306_UpdateScreen+0x58>)
 8000be6:	441a      	add	r2, r3
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	2078      	movs	r0, #120	; 0x78
 8000bee:	f000 fab9 	bl	8001164 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b07      	cmp	r3, #7
 8000bfc:	d9de      	bls.n	8000bbc <SSD1306_UpdateScreen+0xc>
	}
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001ec 	.word	0x200001ec

08000c0c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <SSD1306_Fill+0x14>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e000      	b.n	8000c22 <SSD1306_Fill+0x16>
 8000c20:	23ff      	movs	r3, #255	; 0xff
 8000c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c26:	4619      	mov	r1, r3
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <SSD1306_Fill+0x2c>)
 8000c2a:	f006 feb9 	bl	80079a0 <memset>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200001ec 	.word	0x200001ec

08000c3c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]
 8000c46:	460b      	mov	r3, r1
 8000c48:	80bb      	strh	r3, [r7, #4]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	70fb      	strb	r3, [r7, #3]
	if (
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	2b7f      	cmp	r3, #127	; 0x7f
 8000c52:	d848      	bhi.n	8000ce6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000c54:	88bb      	ldrh	r3, [r7, #4]
 8000c56:	2b3f      	cmp	r3, #63	; 0x3f
 8000c58:	d845      	bhi.n	8000ce6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <SSD1306_DrawPixel+0xb8>)
 8000c5c:	791b      	ldrb	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000c62:	78fb      	ldrb	r3, [r7, #3]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	bf0c      	ite	eq
 8000c68:	2301      	moveq	r3, #1
 8000c6a:	2300      	movne	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d11a      	bne.n	8000cac <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c76:	88fa      	ldrh	r2, [r7, #6]
 8000c78:	88bb      	ldrh	r3, [r7, #4]
 8000c7a:	08db      	lsrs	r3, r3, #3
 8000c7c:	b298      	uxth	r0, r3
 8000c7e:	4603      	mov	r3, r0
 8000c80:	01db      	lsls	r3, r3, #7
 8000c82:	4413      	add	r3, r2
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <SSD1306_DrawPixel+0xbc>)
 8000c86:	5cd3      	ldrb	r3, [r2, r3]
 8000c88:	b25a      	sxtb	r2, r3
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	f003 0307 	and.w	r3, r3, #7
 8000c90:	2101      	movs	r1, #1
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	b259      	sxtb	r1, r3
 8000c9c:	88fa      	ldrh	r2, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	01db      	lsls	r3, r3, #7
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b2c9      	uxtb	r1, r1
 8000ca6:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <SSD1306_DrawPixel+0xbc>)
 8000ca8:	54d1      	strb	r1, [r2, r3]
 8000caa:	e01d      	b.n	8000ce8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000cac:	88fa      	ldrh	r2, [r7, #6]
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	b298      	uxth	r0, r3
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	01db      	lsls	r3, r3, #7
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <SSD1306_DrawPixel+0xbc>)
 8000cbc:	5cd3      	ldrb	r3, [r2, r3]
 8000cbe:	b25a      	sxtb	r2, r3
 8000cc0:	88bb      	ldrh	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	b259      	sxtb	r1, r3
 8000cd6:	88fa      	ldrh	r2, [r7, #6]
 8000cd8:	4603      	mov	r3, r0
 8000cda:	01db      	lsls	r3, r3, #7
 8000cdc:	4413      	add	r3, r2
 8000cde:	b2c9      	uxtb	r1, r1
 8000ce0:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SSD1306_DrawPixel+0xbc>)
 8000ce2:	54d1      	strb	r1, [r2, r3]
 8000ce4:	e000      	b.n	8000ce8 <SSD1306_DrawPixel+0xac>
		return;
 8000ce6:	bf00      	nop
	}
}
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200005ec 	.word	0x200005ec
 8000cf8:	200001ec 	.word	0x200001ec

08000cfc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	460a      	mov	r2, r1
 8000d06:	80fb      	strh	r3, [r7, #6]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000d0c:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SSD1306_GotoXY+0x28>)
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <SSD1306_GotoXY+0x28>)
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	8053      	strh	r3, [r2, #2]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	200005ec 	.word	0x200005ec

08000d28 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	4613      	mov	r3, r2
 8000d36:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d38:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <SSD1306_Putc+0xfc>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
	if (
 8000d44:	2b7f      	cmp	r3, #127	; 0x7f
 8000d46:	dc07      	bgt.n	8000d58 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000d48:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <SSD1306_Putc+0xfc>)
 8000d4a:	885b      	ldrh	r3, [r3, #2]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	785b      	ldrb	r3, [r3, #1]
 8000d52:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d54:	2b3f      	cmp	r3, #63	; 0x3f
 8000d56:	dd01      	ble.n	8000d5c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e05e      	b.n	8000e1a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e04b      	b.n	8000dfa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	3b20      	subs	r3, #32
 8000d6a:	6839      	ldr	r1, [r7, #0]
 8000d6c:	7849      	ldrb	r1, [r1, #1]
 8000d6e:	fb01 f303 	mul.w	r3, r1, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	440b      	add	r3, r1
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	e030      	b.n	8000de8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d010      	beq.n	8000db8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <SSD1306_Putc+0xfc>)
 8000d98:	881a      	ldrh	r2, [r3, #0]
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	4413      	add	r3, r2
 8000da0:	b298      	uxth	r0, r3
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <SSD1306_Putc+0xfc>)
 8000da4:	885a      	ldrh	r2, [r3, #2]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	4413      	add	r3, r2
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	79ba      	ldrb	r2, [r7, #6]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f7ff ff43 	bl	8000c3c <SSD1306_DrawPixel>
 8000db6:	e014      	b.n	8000de2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <SSD1306_Putc+0xfc>)
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b298      	uxth	r0, r3
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <SSD1306_Putc+0xfc>)
 8000dc6:	885a      	ldrh	r2, [r3, #2]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4413      	add	r3, r2
 8000dce:	b299      	uxth	r1, r3
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2301      	moveq	r3, #1
 8000dd8:	2300      	movne	r3, #0
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f7ff ff2d 	bl	8000c3c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	3301      	adds	r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d3c8      	bcc.n	8000d86 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	785b      	ldrb	r3, [r3, #1]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d3ad      	bcc.n	8000d62 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <SSD1306_Putc+0xfc>)
 8000e08:	881a      	ldrh	r2, [r3, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	4413      	add	r3, r2
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <SSD1306_Putc+0xfc>)
 8000e16:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000e18:	79fb      	ldrb	r3, [r7, #7]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200005ec 	.word	0x200005ec

08000e28 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	4613      	mov	r3, r2
 8000e34:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000e36:	e012      	b.n	8000e5e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	79fa      	ldrb	r2, [r7, #7]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff71 	bl	8000d28 <SSD1306_Putc>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d002      	beq.n	8000e58 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	e008      	b.n	8000e6a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1e8      	bne.n	8000e38 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	781b      	ldrb	r3, [r3, #0]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000e72:	b590      	push	{r4, r7, lr}
 8000e74:	b087      	sub	sp, #28
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4604      	mov	r4, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4623      	mov	r3, r4
 8000e82:	80fb      	strh	r3, [r7, #6]
 8000e84:	4603      	mov	r3, r0
 8000e86:	80bb      	strh	r3, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	2b7f      	cmp	r3, #127	; 0x7f
 8000e94:	d901      	bls.n	8000e9a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000e96:	237f      	movs	r3, #127	; 0x7f
 8000e98:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e9e:	d901      	bls.n	8000ea4 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000ea0:	237f      	movs	r3, #127	; 0x7f
 8000ea2:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000ea4:	88bb      	ldrh	r3, [r7, #4]
 8000ea6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ea8:	d901      	bls.n	8000eae <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000eaa:	233f      	movs	r3, #63	; 0x3f
 8000eac:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000eae:	883b      	ldrh	r3, [r7, #0]
 8000eb0:	2b3f      	cmp	r3, #63	; 0x3f
 8000eb2:	d901      	bls.n	8000eb8 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000eb4:	233f      	movs	r3, #63	; 0x3f
 8000eb6:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000eb8:	88fa      	ldrh	r2, [r7, #6]
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d205      	bcs.n	8000ecc <SSD1306_DrawLine+0x5a>
 8000ec0:	887a      	ldrh	r2, [r7, #2]
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	e004      	b.n	8000ed6 <SSD1306_DrawLine+0x64>
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000ed8:	88ba      	ldrh	r2, [r7, #4]
 8000eda:	883b      	ldrh	r3, [r7, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d205      	bcs.n	8000eec <SSD1306_DrawLine+0x7a>
 8000ee0:	883a      	ldrh	r2, [r7, #0]
 8000ee2:	88bb      	ldrh	r3, [r7, #4]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	e004      	b.n	8000ef6 <SSD1306_DrawLine+0x84>
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000ef8:	88fa      	ldrh	r2, [r7, #6]
 8000efa:	887b      	ldrh	r3, [r7, #2]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d201      	bcs.n	8000f04 <SSD1306_DrawLine+0x92>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e001      	b.n	8000f08 <SSD1306_DrawLine+0x96>
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8000f0a:	88ba      	ldrh	r2, [r7, #4]
 8000f0c:	883b      	ldrh	r3, [r7, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d201      	bcs.n	8000f16 <SSD1306_DrawLine+0xa4>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e001      	b.n	8000f1a <SSD1306_DrawLine+0xa8>
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000f1c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000f20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dd06      	ble.n	8000f36 <SSD1306_DrawLine+0xc4>
 8000f28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f2c:	0fda      	lsrs	r2, r3, #31
 8000f2e:	4413      	add	r3, r2
 8000f30:	105b      	asrs	r3, r3, #1
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	e006      	b.n	8000f44 <SSD1306_DrawLine+0xd2>
 8000f36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f3a:	425b      	negs	r3, r3
 8000f3c:	0fda      	lsrs	r2, r3, #31
 8000f3e:	4413      	add	r3, r2
 8000f40:	105b      	asrs	r3, r3, #1
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000f46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d129      	bne.n	8000fa2 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000f4e:	883a      	ldrh	r2, [r7, #0]
 8000f50:	88bb      	ldrh	r3, [r7, #4]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d205      	bcs.n	8000f62 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000f56:	883b      	ldrh	r3, [r7, #0]
 8000f58:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000f5a:	88bb      	ldrh	r3, [r7, #4]
 8000f5c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000f5e:	893b      	ldrh	r3, [r7, #8]
 8000f60:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d205      	bcs.n	8000f76 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000f72:	893b      	ldrh	r3, [r7, #8]
 8000f74:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	82bb      	strh	r3, [r7, #20]
 8000f7a:	e00c      	b.n	8000f96 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000f7c:	8ab9      	ldrh	r1, [r7, #20]
 8000f7e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fe59 	bl	8000c3c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000f8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	3301      	adds	r3, #1
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	82bb      	strh	r3, [r7, #20]
 8000f96:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000f9a:	883b      	ldrh	r3, [r7, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dded      	ble.n	8000f7c <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8000fa0:	e05f      	b.n	8001062 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8000fa2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d129      	bne.n	8000ffe <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000faa:	883a      	ldrh	r2, [r7, #0]
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d205      	bcs.n	8000fbe <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000fb2:	883b      	ldrh	r3, [r7, #0]
 8000fb4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000fba:	893b      	ldrh	r3, [r7, #8]
 8000fbc:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d205      	bcs.n	8000fd2 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000fce:	893b      	ldrh	r3, [r7, #8]
 8000fd0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	82bb      	strh	r3, [r7, #20]
 8000fd6:	e00c      	b.n	8000ff2 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000fd8:	8abb      	ldrh	r3, [r7, #20]
 8000fda:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000fde:	88b9      	ldrh	r1, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fe2b 	bl	8000c3c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000fe6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	3301      	adds	r3, #1
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	82bb      	strh	r3, [r7, #20]
 8000ff2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dded      	ble.n	8000fd8 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8000ffc:	e031      	b.n	8001062 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000ffe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001002:	88b9      	ldrh	r1, [r7, #4]
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fe18 	bl	8000c3c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800100c:	88fa      	ldrh	r2, [r7, #6]
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	429a      	cmp	r2, r3
 8001012:	d103      	bne.n	800101c <SSD1306_DrawLine+0x1aa>
 8001014:	88ba      	ldrh	r2, [r7, #4]
 8001016:	883b      	ldrh	r3, [r7, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	d021      	beq.n	8001060 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 800101c:	8afb      	ldrh	r3, [r7, #22]
 800101e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001020:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001024:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001028:	425b      	negs	r3, r3
 800102a:	429a      	cmp	r2, r3
 800102c:	dd08      	ble.n	8001040 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800102e:	8afa      	ldrh	r2, [r7, #22]
 8001030:	8a3b      	ldrh	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	b29b      	uxth	r3, r3
 8001036:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001038:	89fa      	ldrh	r2, [r7, #14]
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	4413      	add	r3, r2
 800103e:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001040:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001044:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	dad8      	bge.n	8000ffe <SSD1306_DrawLine+0x18c>
			err += dx;
 800104c:	8afa      	ldrh	r2, [r7, #22]
 800104e:	8a7b      	ldrh	r3, [r7, #18]
 8001050:	4413      	add	r3, r2
 8001052:	b29b      	uxth	r3, r3
 8001054:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001056:	89ba      	ldrh	r2, [r7, #12]
 8001058:	88bb      	ldrh	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800105e:	e7ce      	b.n	8000ffe <SSD1306_DrawLine+0x18c>
			break;
 8001060:	bf00      	nop
		} 
	}
}
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}

08001068 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af02      	add	r7, sp, #8
 800106e:	4604      	mov	r4, r0
 8001070:	4608      	mov	r0, r1
 8001072:	4611      	mov	r1, r2
 8001074:	461a      	mov	r2, r3
 8001076:	4623      	mov	r3, r4
 8001078:	80fb      	strh	r3, [r7, #6]
 800107a:	4603      	mov	r3, r0
 800107c:	80bb      	strh	r3, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	807b      	strh	r3, [r7, #2]
 8001082:	4613      	mov	r3, r2
 8001084:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	2b7f      	cmp	r3, #127	; 0x7f
 800108a:	d853      	bhi.n	8001134 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 800108c:	88bb      	ldrh	r3, [r7, #4]
 800108e:	2b3f      	cmp	r3, #63	; 0x3f
 8001090:	d850      	bhi.n	8001134 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001092:	88fa      	ldrh	r2, [r7, #6]
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	4413      	add	r3, r2
 8001098:	2b7f      	cmp	r3, #127	; 0x7f
 800109a:	dd03      	ble.n	80010a4 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80010a2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80010a4:	88ba      	ldrh	r2, [r7, #4]
 80010a6:	883b      	ldrh	r3, [r7, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	2b3f      	cmp	r3, #63	; 0x3f
 80010ac:	dd03      	ble.n	80010b6 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80010ae:	88bb      	ldrh	r3, [r7, #4]
 80010b0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80010b4:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 80010b6:	88fa      	ldrh	r2, [r7, #6]
 80010b8:	887b      	ldrh	r3, [r7, #2]
 80010ba:	4413      	add	r3, r2
 80010bc:	b29a      	uxth	r2, r3
 80010be:	88bc      	ldrh	r4, [r7, #4]
 80010c0:	88b9      	ldrh	r1, [r7, #4]
 80010c2:	88f8      	ldrh	r0, [r7, #6]
 80010c4:	7e3b      	ldrb	r3, [r7, #24]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4623      	mov	r3, r4
 80010ca:	f7ff fed2 	bl	8000e72 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 80010ce:	88ba      	ldrh	r2, [r7, #4]
 80010d0:	883b      	ldrh	r3, [r7, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	b299      	uxth	r1, r3
 80010d6:	88fa      	ldrh	r2, [r7, #6]
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	4413      	add	r3, r2
 80010dc:	b29c      	uxth	r4, r3
 80010de:	88ba      	ldrh	r2, [r7, #4]
 80010e0:	883b      	ldrh	r3, [r7, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	88f8      	ldrh	r0, [r7, #6]
 80010e8:	7e3b      	ldrb	r3, [r7, #24]
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	4613      	mov	r3, r2
 80010ee:	4622      	mov	r2, r4
 80010f0:	f7ff febf 	bl	8000e72 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80010f4:	88ba      	ldrh	r2, [r7, #4]
 80010f6:	883b      	ldrh	r3, [r7, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	b29c      	uxth	r4, r3
 80010fc:	88fa      	ldrh	r2, [r7, #6]
 80010fe:	88b9      	ldrh	r1, [r7, #4]
 8001100:	88f8      	ldrh	r0, [r7, #6]
 8001102:	7e3b      	ldrb	r3, [r7, #24]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	4623      	mov	r3, r4
 8001108:	f7ff feb3 	bl	8000e72 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 800110c:	88fa      	ldrh	r2, [r7, #6]
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	4413      	add	r3, r2
 8001112:	b298      	uxth	r0, r3
 8001114:	88fa      	ldrh	r2, [r7, #6]
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	4413      	add	r3, r2
 800111a:	b29c      	uxth	r4, r3
 800111c:	88ba      	ldrh	r2, [r7, #4]
 800111e:	883b      	ldrh	r3, [r7, #0]
 8001120:	4413      	add	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	88b9      	ldrh	r1, [r7, #4]
 8001126:	7e3b      	ldrb	r3, [r7, #24]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	4613      	mov	r3, r2
 800112c:	4622      	mov	r2, r4
 800112e:	f7ff fea0 	bl	8000e72 <SSD1306_DrawLine>
 8001132:	e000      	b.n	8001136 <SSD1306_DrawRectangle+0xce>
		return;
 8001134:	bf00      	nop
}
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}

0800113c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <ssd1306_I2C_Init+0x24>)
 8001144:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001146:	e002      	b.n	800114e <ssd1306_I2C_Init+0x12>
		p--;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f9      	bne.n	8001148 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	0003d090 	.word	0x0003d090

08001164 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b0c7      	sub	sp, #284	; 0x11c
 8001168:	af02      	add	r7, sp, #8
 800116a:	4604      	mov	r4, r0
 800116c:	4608      	mov	r0, r1
 800116e:	4639      	mov	r1, r7
 8001170:	600a      	str	r2, [r1, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	4622      	mov	r2, r4
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	1dbb      	adds	r3, r7, #6
 800117c:	4602      	mov	r2, r0
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	460a      	mov	r2, r1
 8001184:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	1dba      	adds	r2, r7, #6
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001190:	2300      	movs	r3, #0
 8001192:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001196:	e010      	b.n	80011ba <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001198:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800119c:	463a      	mov	r2, r7
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	441a      	add	r2, r3
 80011a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011a6:	3301      	adds	r3, #1
 80011a8:	7811      	ldrb	r1, [r2, #0]
 80011aa:	f107 020c 	add.w	r2, r7, #12
 80011ae:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80011b0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011b4:	3301      	adds	r3, #1
 80011b6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80011ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011be:	b29b      	uxth	r3, r3
 80011c0:	1d3a      	adds	r2, r7, #4
 80011c2:	8812      	ldrh	r2, [r2, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8e7      	bhi.n	8001198 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b299      	uxth	r1, r3
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	b298      	uxth	r0, r3
 80011d6:	f107 020c 	add.w	r2, r7, #12
 80011da:	230a      	movs	r3, #10
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4603      	mov	r3, r0
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <ssd1306_I2C_WriteMulti+0x8c>)
 80011e2:	f000 fe0f 	bl	8001e04 <HAL_I2C_Master_Transmit>
}
 80011e6:	bf00      	nop
 80011e8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd90      	pop	{r4, r7, pc}
 80011f0:	20000604 	.word	0x20000604

080011f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	460b      	mov	r3, r1
 8001200:	71bb      	strb	r3, [r7, #6]
 8001202:	4613      	mov	r3, r2
 8001204:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001206:	79bb      	ldrb	r3, [r7, #6]
 8001208:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800120a:	797b      	ldrb	r3, [r7, #5]
 800120c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	b299      	uxth	r1, r3
 8001212:	f107 020c 	add.w	r2, r7, #12
 8001216:	230a      	movs	r3, #10
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2302      	movs	r3, #2
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <ssd1306_I2C_Write+0x38>)
 800121e:	f000 fdf1 	bl	8001e04 <HAL_I2C_Master_Transmit>
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000604 	.word	0x20000604

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_MspInit+0x4c>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a0f      	ldr	r2, [pc, #60]	; (800127c <HAL_MspInit+0x4c>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_MspInit+0x4c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_MspInit+0x4c>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_MspInit+0x4c>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_MspInit+0x4c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d4:	f000 f96e 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <OTG_FS_IRQHandler+0x10>)
 80012e2:	f001 fb14 	bl	800290e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000bc4 	.word	0x20000bc4

080012f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <_sbrk+0x5c>)
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <_sbrk+0x60>)
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <_sbrk+0x64>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <_sbrk+0x68>)
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	429a      	cmp	r2, r3
 800131e:	d207      	bcs.n	8001330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001320:	f006 fb04 	bl	800792c <__errno>
 8001324:	4602      	mov	r2, r0
 8001326:	230c      	movs	r3, #12
 8001328:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e009      	b.n	8001344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <_sbrk+0x64>)
 8001340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20020000 	.word	0x20020000
 8001350:	00000400 	.word	0x00000400
 8001354:	200005f4 	.word	0x200005f4
 8001358:	20000fd0 	.word	0x20000fd0

0800135c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <SystemInit+0x28>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001366:	4a07      	ldr	r2, [pc, #28]	; (8001384 <SystemInit+0x28>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SystemInit+0x28>)
 8001372:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001376:	609a      	str	r2, [r3, #8]
#endif
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2224      	movs	r2, #36	; 0x24
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f006 fb02 	bl	80079a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_TIM2_Init+0xa4>)
 80013a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_TIM2_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_TIM2_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM2_Init+0xa4>)
 80013ba:	f04f 32ff 	mov.w	r2, #4294967295
 80013be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM2_Init+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_TIM2_Init+0xa4>)
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013cc:	2303      	movs	r3, #3
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013d4:	2301      	movs	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013dc:	230a      	movs	r3, #10
 80013de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013e4:	2301      	movs	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80013ec:	230a      	movs	r3, #10
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_TIM2_Init+0xa4>)
 80013f8:	f002 ff30 	bl	800425c <HAL_TIM_Encoder_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001402:	f7ff fa8b 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_TIM2_Init+0xa4>)
 8001414:	f003 f834 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800141e:	f7ff fa7d 	bl	800091c <Error_Handler>
  }

}
 8001422:	bf00      	nop
 8001424:	3730      	adds	r7, #48	; 0x30
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200006b0 	.word	0x200006b0

08001430 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001450:	d12b      	bne.n	80014aa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <HAL_TIM_Encoder_MspInit+0x84>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800148a:	2303      	movs	r3, #3
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800149a:	2301      	movs	r3, #1
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <HAL_TIM_Encoder_MspInit+0x88>)
 80014a6:	f000 f9d9 	bl	800185c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000

080014bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014c2:	e003      	b.n	80014cc <LoopCopyDataInit>

080014c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014ca:	3104      	adds	r1, #4

080014cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014d4:	d3f6      	bcc.n	80014c4 <CopyDataInit>
  ldr  r2, =_sbss
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014d8:	e002      	b.n	80014e0 <LoopFillZerobss>

080014da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014dc:	f842 3b04 	str.w	r3, [r2], #4

080014e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014e4:	d3f9      	bcc.n	80014da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014e6:	f7ff ff39 	bl	800135c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ea:	f006 fa25 	bl	8007938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ee:	f7ff f971 	bl	80007d4 <main>
  bx  lr    
 80014f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014f8:	08008920 	.word	0x08008920
  ldr  r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001500:	200001c4 	.word	0x200001c4
  ldr  r2, =_sbss
 8001504:	200001c4 	.word	0x200001c4
  ldr  r3, = _ebss
 8001508:	20000fd0 	.word	0x20000fd0

0800150c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_Init+0x40>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_Init+0x40>)
 8001526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_Init+0x40>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f94d 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f808 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001544:	f7ff fe74 	bl	8001230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f965 	bl	8001842 <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f000 f92d 	bl	80017ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000010 	.word	0x20000010
 80015b0:	2000000c 	.word	0x2000000c

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000010 	.word	0x20000010
 80015d8:	200006f0 	.word	0x200006f0

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200006f0 	.word	0x200006f0

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff ffee 	bl	80015dc <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_Delay+0x40>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffde 	bl	80015dc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000010 	.word	0x20000010

08001638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_GetPriorityGrouping+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0307 	and.w	r3, r3, #7
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db0b      	blt.n	80016c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 021f 	and.w	r2, r3, #31
 80016b4:	4907      	ldr	r1, [pc, #28]	; (80016d4 <__NVIC_EnableIRQ+0x38>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	2001      	movs	r0, #1
 80016be:	fa00 f202 	lsl.w	r2, r0, r2
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000e100 	.word	0xe000e100

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	; (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	; (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a4:	d301      	bcc.n	80017aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00f      	b.n	80017ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <SysTick_Config+0x40>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b2:	210f      	movs	r1, #15
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f7ff ff8e 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SysTick_Config+0x40>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SysTick_Config+0x40>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff29 	bl	8001638 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff3e 	bl	8001680 <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff8e 	bl	800172c <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff5d 	bl	80016d8 <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff31 	bl	800169c <__NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffa2 	bl	8001794 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e159      	b.n	8001b2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001878:	2201      	movs	r2, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	429a      	cmp	r2, r3
 8001892:	f040 8148 	bne.w	8001b26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d00b      	beq.n	80018b6 <HAL_GPIO_Init+0x5a>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018aa:	2b11      	cmp	r3, #17
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d130      	bne.n	8001918 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0xfc>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b12      	cmp	r3, #18
 8001956:	d123      	bne.n	80019a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	08da      	lsrs	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	08da      	lsrs	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3208      	adds	r2, #8
 800199a:	69b9      	ldr	r1, [r7, #24]
 800199c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0203 	and.w	r2, r3, #3
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80a2 	beq.w	8001b26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b56      	ldr	r3, [pc, #344]	; (8001b40 <HAL_GPIO_Init+0x2e4>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a55      	ldr	r2, [pc, #340]	; (8001b40 <HAL_GPIO_Init+0x2e4>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <HAL_GPIO_Init+0x2e4>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fe:	4a51      	ldr	r2, [pc, #324]	; (8001b44 <HAL_GPIO_Init+0x2e8>)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a48      	ldr	r2, [pc, #288]	; (8001b48 <HAL_GPIO_Init+0x2ec>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d019      	beq.n	8001a5e <HAL_GPIO_Init+0x202>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a47      	ldr	r2, [pc, #284]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0x1fe>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a46      	ldr	r2, [pc, #280]	; (8001b50 <HAL_GPIO_Init+0x2f4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00d      	beq.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a45      	ldr	r2, [pc, #276]	; (8001b54 <HAL_GPIO_Init+0x2f8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x1f6>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a44      	ldr	r2, [pc, #272]	; (8001b58 <HAL_GPIO_Init+0x2fc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_GPIO_Init+0x1f2>
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	e008      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a4e:	2307      	movs	r3, #7
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a52:	2303      	movs	r3, #3
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f002 0203 	and.w	r2, r2, #3
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a70:	4934      	ldr	r1, [pc, #208]	; (8001b44 <HAL_GPIO_Init+0x2e8>)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa2:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001acc:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af6:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	f67f aea2 	bls.w	8001878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b34:	bf00      	nop
 8001b36:	3724      	adds	r7, #36	; 0x24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40013800 	.word	0x40013800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40013c00 	.word	0x40013c00

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b7c:	e003      	b.n	8001b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	619a      	str	r2, [r3, #24]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e11f      	b.n	8001de6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7fe fd4a 	bl	8000654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2224      	movs	r2, #36	; 0x24
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bf8:	f002 fab8 	bl	800416c <HAL_RCC_GetPCLK1Freq>
 8001bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4a7b      	ldr	r2, [pc, #492]	; (8001df0 <HAL_I2C_Init+0x25c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d807      	bhi.n	8001c18 <HAL_I2C_Init+0x84>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4a7a      	ldr	r2, [pc, #488]	; (8001df4 <HAL_I2C_Init+0x260>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	bf94      	ite	ls
 8001c10:	2301      	movls	r3, #1
 8001c12:	2300      	movhi	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e006      	b.n	8001c26 <HAL_I2C_Init+0x92>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4a77      	ldr	r2, [pc, #476]	; (8001df8 <HAL_I2C_Init+0x264>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	bf94      	ite	ls
 8001c20:	2301      	movls	r3, #1
 8001c22:	2300      	movhi	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0db      	b.n	8001de6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4a72      	ldr	r2, [pc, #456]	; (8001dfc <HAL_I2C_Init+0x268>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0c9b      	lsrs	r3, r3, #18
 8001c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a64      	ldr	r2, [pc, #400]	; (8001df0 <HAL_I2C_Init+0x25c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d802      	bhi.n	8001c68 <HAL_I2C_Init+0xd4>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	3301      	adds	r3, #1
 8001c66:	e009      	b.n	8001c7c <HAL_I2C_Init+0xe8>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	4a63      	ldr	r2, [pc, #396]	; (8001e00 <HAL_I2C_Init+0x26c>)
 8001c74:	fba2 2303 	umull	r2, r3, r2, r3
 8001c78:	099b      	lsrs	r3, r3, #6
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	430b      	orrs	r3, r1
 8001c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4956      	ldr	r1, [pc, #344]	; (8001df0 <HAL_I2C_Init+0x25c>)
 8001c98:	428b      	cmp	r3, r1
 8001c9a:	d80d      	bhi.n	8001cb8 <HAL_I2C_Init+0x124>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1e59      	subs	r1, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	bf38      	it	cc
 8001cb4:	2304      	movcc	r3, #4
 8001cb6:	e04f      	b.n	8001d58 <HAL_I2C_Init+0x1c4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d111      	bne.n	8001ce4 <HAL_I2C_Init+0x150>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1e58      	subs	r0, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	440b      	add	r3, r1
 8001cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	e012      	b.n	8001d0a <HAL_I2C_Init+0x176>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1e58      	subs	r0, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	0099      	lsls	r1, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_I2C_Init+0x17e>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e022      	b.n	8001d58 <HAL_I2C_Init+0x1c4>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10e      	bne.n	8001d38 <HAL_I2C_Init+0x1a4>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1e58      	subs	r0, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6859      	ldr	r1, [r3, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	440b      	add	r3, r1
 8001d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d36:	e00f      	b.n	8001d58 <HAL_I2C_Init+0x1c4>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1e58      	subs	r0, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	0099      	lsls	r1, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	6809      	ldr	r1, [r1, #0]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6911      	ldr	r1, [r2, #16]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68d2      	ldr	r2, [r2, #12]
 8001d92:	4311      	orrs	r1, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	000186a0 	.word	0x000186a0
 8001df4:	001e847f 	.word	0x001e847f
 8001df8:	003d08ff 	.word	0x003d08ff
 8001dfc:	431bde83 	.word	0x431bde83
 8001e00:	10624dd3 	.word	0x10624dd3

08001e04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	460b      	mov	r3, r1
 8001e12:	817b      	strh	r3, [r7, #10]
 8001e14:	4613      	mov	r3, r2
 8001e16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff fbe0 	bl	80015dc <HAL_GetTick>
 8001e1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	f040 80e0 	bne.w	8001fec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2319      	movs	r3, #25
 8001e32:	2201      	movs	r2, #1
 8001e34:	4970      	ldr	r1, [pc, #448]	; (8001ff8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fa92 	bl	8002360 <I2C_WaitOnFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	e0d3      	b.n	8001fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2C_Master_Transmit+0x50>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e0cc      	b.n	8001fee <HAL_I2C_Master_Transmit+0x1ea>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d007      	beq.n	8001e7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2221      	movs	r2, #33	; 0x21
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2210      	movs	r2, #16
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	893a      	ldrh	r2, [r7, #8]
 8001eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a50      	ldr	r2, [pc, #320]	; (8001ffc <HAL_I2C_Master_Transmit+0x1f8>)
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ebc:	8979      	ldrh	r1, [r7, #10]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	6a3a      	ldr	r2, [r7, #32]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f9ca 	bl	800225c <I2C_MasterRequestWrite>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e08d      	b.n	8001fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ee8:	e066      	b.n	8001fb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	6a39      	ldr	r1, [r7, #32]
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 fb0c 	bl	800250c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00d      	beq.n	8001f16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d107      	bne.n	8001f12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e06b      	b.n	8001fee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d11b      	bne.n	8001f8c <HAL_I2C_Master_Transmit+0x188>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d017      	beq.n	8001f8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	6a39      	ldr	r1, [r7, #32]
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fafc 	bl	800258e <I2C_WaitOnBTFFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d107      	bne.n	8001fb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e01a      	b.n	8001fee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d194      	bne.n	8001eea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e000      	b.n	8001fee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fec:	2302      	movs	r3, #2
  }
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	00100002 	.word	0x00100002
 8001ffc:	ffff0000 	.word	0xffff0000

08002000 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	460b      	mov	r3, r1
 800200e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff fae4 	bl	80015dc <HAL_GetTick>
 8002014:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002016:	2301      	movs	r3, #1
 8002018:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b20      	cmp	r3, #32
 8002024:	f040 8111 	bne.w	800224a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2319      	movs	r3, #25
 800202e:	2201      	movs	r2, #1
 8002030:	4988      	ldr	r1, [pc, #544]	; (8002254 <HAL_I2C_IsDeviceReady+0x254>)
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f994 	bl	8002360 <I2C_WaitOnFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800203e:	2302      	movs	r3, #2
 8002040:	e104      	b.n	800224c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_I2C_IsDeviceReady+0x50>
 800204c:	2302      	movs	r3, #2
 800204e:	e0fd      	b.n	800224c <HAL_I2C_IsDeviceReady+0x24c>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d007      	beq.n	8002076 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002084:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2224      	movs	r2, #36	; 0x24
 800208a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4a70      	ldr	r2, [pc, #448]	; (8002258 <HAL_I2C_IsDeviceReady+0x258>)
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f952 	bl	8002360 <I2C_WaitOnFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00d      	beq.n	80020de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d0:	d103      	bne.n	80020da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0b6      	b.n	800224c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020de:	897b      	ldrh	r3, [r7, #10]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80020ee:	f7ff fa75 	bl	80015dc <HAL_GetTick>
 80020f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b02      	cmp	r3, #2
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002118:	bf0c      	ite	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	2300      	movne	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002122:	e025      	b.n	8002170 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002124:	f7ff fa5a 	bl	80015dc <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d302      	bcc.n	800213a <HAL_I2C_IsDeviceReady+0x13a>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	22a0      	movs	r2, #160	; 0xa0
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b02      	cmp	r3, #2
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2ba0      	cmp	r3, #160	; 0xa0
 800217a:	d005      	beq.n	8002188 <HAL_I2C_IsDeviceReady+0x188>
 800217c:	7dfb      	ldrb	r3, [r7, #23]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_I2C_IsDeviceReady+0x188>
 8002182:	7dbb      	ldrb	r3, [r7, #22]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0cd      	beq.n	8002124 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d129      	bne.n	80021f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2319      	movs	r3, #25
 80021ca:	2201      	movs	r2, #1
 80021cc:	4921      	ldr	r1, [pc, #132]	; (8002254 <HAL_I2C_IsDeviceReady+0x254>)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f8c6 	bl	8002360 <I2C_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e036      	b.n	800224c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e02c      	b.n	800224c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002200:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800220a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2319      	movs	r3, #25
 8002212:	2201      	movs	r2, #1
 8002214:	490f      	ldr	r1, [pc, #60]	; (8002254 <HAL_I2C_IsDeviceReady+0x254>)
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f8a2 	bl	8002360 <I2C_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e012      	b.n	800224c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	3301      	adds	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	429a      	cmp	r2, r3
 8002232:	f4ff af32 	bcc.w	800209a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800224a:	2302      	movs	r3, #2
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	00100002 	.word	0x00100002
 8002258:	ffff0000 	.word	0xffff0000

0800225c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	460b      	mov	r3, r1
 800226a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d006      	beq.n	8002286 <I2C_MasterRequestWrite+0x2a>
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d003      	beq.n	8002286 <I2C_MasterRequestWrite+0x2a>
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002284:	d108      	bne.n	8002298 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e00b      	b.n	80022b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	2b12      	cmp	r3, #18
 800229e:	d107      	bne.n	80022b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f84f 	bl	8002360 <I2C_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d6:	d103      	bne.n	80022e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e035      	b.n	8002350 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ec:	d108      	bne.n	8002300 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ee:	897b      	ldrh	r3, [r7, #10]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022fc:	611a      	str	r2, [r3, #16]
 80022fe:	e01b      	b.n	8002338 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002300:	897b      	ldrh	r3, [r7, #10]
 8002302:	11db      	asrs	r3, r3, #7
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f003 0306 	and.w	r3, r3, #6
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f063 030f 	orn	r3, r3, #15
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	490e      	ldr	r1, [pc, #56]	; (8002358 <I2C_MasterRequestWrite+0xfc>)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f875 	bl	800240e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e010      	b.n	8002350 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800232e:	897b      	ldrh	r3, [r7, #10]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4907      	ldr	r1, [pc, #28]	; (800235c <I2C_MasterRequestWrite+0x100>)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f865 	bl	800240e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	00010008 	.word	0x00010008
 800235c:	00010002 	.word	0x00010002

08002360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002370:	e025      	b.n	80023be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d021      	beq.n	80023be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237a:	f7ff f92f 	bl	80015dc <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d302      	bcc.n	8002390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d116      	bne.n	80023be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f043 0220 	orr.w	r2, r3, #32
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e023      	b.n	8002406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10d      	bne.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4013      	ands	r3, r2
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bf0c      	ite	eq
 80023da:	2301      	moveq	r3, #1
 80023dc:	2300      	movne	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	e00c      	b.n	80023fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4013      	ands	r3, r2
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	429a      	cmp	r2, r3
 8002402:	d0b6      	beq.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800241c:	e051      	b.n	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242c:	d123      	bne.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f043 0204 	orr.w	r2, r3, #4
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e046      	b.n	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d021      	beq.n	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247e:	f7ff f8ad 	bl	80015dc <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	d302      	bcc.n	8002494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d116      	bne.n	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f043 0220 	orr.w	r2, r3, #32
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e020      	b.n	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d10c      	bne.n	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4013      	ands	r3, r2
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf14      	ite	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	2300      	moveq	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	e00b      	b.n	80024fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	43da      	mvns	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4013      	ands	r3, r2
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d18d      	bne.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002518:	e02d      	b.n	8002576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f878 	bl	8002610 <I2C_IsAcknowledgeFailed>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e02d      	b.n	8002586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d021      	beq.n	8002576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002532:	f7ff f853 	bl	80015dc <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	d302      	bcc.n	8002548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d116      	bne.n	8002576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f043 0220 	orr.w	r2, r3, #32
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e007      	b.n	8002586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002580:	2b80      	cmp	r3, #128	; 0x80
 8002582:	d1ca      	bne.n	800251a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800259a:	e02d      	b.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f837 	bl	8002610 <I2C_IsAcknowledgeFailed>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e02d      	b.n	8002608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d021      	beq.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b4:	f7ff f812 	bl	80015dc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d302      	bcc.n	80025ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d116      	bne.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e007      	b.n	8002608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b04      	cmp	r3, #4
 8002604:	d1ca      	bne.n	800259c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002626:	d11b      	bne.n	8002660 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002630:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f043 0204 	orr.w	r2, r3, #4
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800266e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002670:	b08f      	sub	sp, #60	; 0x3c
 8002672:	af0a      	add	r7, sp, #40	; 0x28
 8002674:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e10f      	b.n	80028a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f004 fe66 	bl	800736c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2203      	movs	r2, #3
 80026a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 f861 	bl	8004786 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	687e      	ldr	r6, [r7, #4]
 80026cc:	466d      	mov	r5, sp
 80026ce:	f106 0410 	add.w	r4, r6, #16
 80026d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026de:	e885 0003 	stmia.w	r5, {r0, r1}
 80026e2:	1d33      	adds	r3, r6, #4
 80026e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026e6:	6838      	ldr	r0, [r7, #0]
 80026e8:	f001 ff38 	bl	800455c <USB_CoreInit>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0d0      	b.n	80028a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f002 f84f 	bl	80047a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e04a      	b.n	80027a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	333d      	adds	r3, #61	; 0x3d
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	333c      	adds	r3, #60	; 0x3c
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	b298      	uxth	r0, r3
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	3342      	adds	r3, #66	; 0x42
 800274c:	4602      	mov	r2, r0
 800274e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	333f      	adds	r3, #63	; 0x3f
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3344      	adds	r3, #68	; 0x44
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3348      	adds	r3, #72	; 0x48
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	3350      	adds	r3, #80	; 0x50
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	3301      	adds	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d3af      	bcc.n	8002710 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e044      	b.n	8002840 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	3301      	adds	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	429a      	cmp	r2, r3
 8002848:	d3b5      	bcc.n	80027b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	687e      	ldr	r6, [r7, #4]
 8002852:	466d      	mov	r5, sp
 8002854:	f106 0410 	add.w	r4, r6, #16
 8002858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800285a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800285e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002860:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002864:	e885 0003 	stmia.w	r5, {r0, r1}
 8002868:	1d33      	adds	r3, r6, #4
 800286a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286c:	6838      	ldr	r0, [r7, #0]
 800286e:	f001 ffc5 	bl	80047fc <USB_DevInit>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e00d      	b.n	80028a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f003 f80d 	bl	80058b8 <USB_DevDisconnect>

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_PCD_Start+0x1c>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e020      	b.n	8002906 <HAL_PCD_Start+0x5e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d109      	bne.n	80028e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d005      	beq.n	80028e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 ff39 	bl	8004764 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 ffbd 	bl	8005876 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800290e:	b590      	push	{r4, r7, lr}
 8002910:	b08d      	sub	sp, #52	; 0x34
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f003 f87b 	bl	8005a20 <USB_GetMode>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	f040 839d 	bne.w	800306c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f002 ffdf 	bl	80058fa <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8393 	beq.w	800306a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f002 ffd6 	bl	80058fa <USB_ReadInterrupts>
 800294e:	4603      	mov	r3, r0
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b02      	cmp	r3, #2
 8002956:	d107      	bne.n	8002968 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f002 0202 	and.w	r2, r2, #2
 8002966:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f002 ffc4 	bl	80058fa <USB_ReadInterrupts>
 8002972:	4603      	mov	r3, r0
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b10      	cmp	r3, #16
 800297a:	d161      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0210 	bic.w	r2, r2, #16
 800298a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f003 020f 	and.w	r2, r3, #15
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	3304      	adds	r3, #4
 80029aa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	0c5b      	lsrs	r3, r3, #17
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d124      	bne.n	8002a02 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d035      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	6a38      	ldr	r0, [r7, #32]
 80029d8:	f002 fe2a 	bl	8005630 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e8:	441a      	add	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029fa:	441a      	add	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	619a      	str	r2, [r3, #24]
 8002a00:	e016      	b.n	8002a30 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	0c5b      	lsrs	r3, r3, #17
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d110      	bne.n	8002a30 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a14:	2208      	movs	r2, #8
 8002a16:	4619      	mov	r1, r3
 8002a18:	6a38      	ldr	r0, [r7, #32]
 8002a1a:	f002 fe09 	bl	8005630 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a2a:	441a      	add	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0210 	orr.w	r2, r2, #16
 8002a3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 ff58 	bl	80058fa <USB_ReadInterrupts>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a54:	d16e      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f002 ff5e 	bl	8005920 <USB_ReadDevAllOutEpInterrupt>
 8002a64:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a66:	e062      	b.n	8002b2e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d057      	beq.n	8002b22 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 ff83 	bl	8005988 <USB_ReadDevOutEPInterrupt>
 8002a82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fd98 	bl	80035d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fe92 	bl	80037f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afe:	461a      	mov	r2, r3
 8002b00:	2320      	movs	r3, #32
 8002b02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b20:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	3301      	adds	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d199      	bne.n	8002a68 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 fede 	bl	80058fa <USB_ReadInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b48:	f040 80c0 	bne.w	8002ccc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 feff 	bl	8005954 <USB_ReadDevAllInEpInterrupt>
 8002b56:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b5c:	e0b2      	b.n	8002cc4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80a7 	beq.w	8002cb8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f002 ff25 	bl	80059c4 <USB_ReadDevInEPInterrupt>
 8002b7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d057      	beq.n	8002c36 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69f9      	ldr	r1, [r7, #28]
 8002ba2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2301      	movs	r3, #1
 8002bba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d132      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3348      	adds	r3, #72	; 0x48
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4403      	add	r3, r0
 8002be4:	3344      	adds	r3, #68	; 0x44
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4419      	add	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4403      	add	r3, r0
 8002bf8:	3348      	adds	r3, #72	; 0x48
 8002bfa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d113      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x31c>
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	3350      	adds	r3, #80	; 0x50
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d108      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c22:	461a      	mov	r2, r3
 8002c24:	2101      	movs	r1, #1
 8002c26:	f002 ff2d 	bl	8005a84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f004 fc1c 	bl	800746e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2308      	movs	r3, #8
 8002c50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2310      	movs	r3, #16
 8002c6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c84:	461a      	mov	r2, r3
 8002c86:	2340      	movs	r3, #64	; 0x40
 8002c88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fc03 	bl	80034be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	3301      	adds	r3, #1
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	085b      	lsrs	r3, r3, #1
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f47f af49 	bne.w	8002b5e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f002 fe12 	bl	80058fa <USB_ReadInterrupts>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ce0:	d122      	bne.n	8002d28 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d108      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d08:	2100      	movs	r1, #0
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fe0e 	bl	800392c <HAL_PCDEx_LPM_Callback>
 8002d10:	e002      	b.n	8002d18 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f004 fc18 	bl	8007548 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 fde4 	bl	80058fa <USB_ReadInterrupts>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d3c:	d112      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f004 fbd4 	bl	80074fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d62:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 fdc6 	bl	80058fa <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d78:	f040 80c7 	bne.w	8002f0a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2110      	movs	r1, #16
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 fe94 	bl	8004ac4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da0:	e056      	b.n	8002e50 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dae:	461a      	mov	r2, r3
 8002db0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002db4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc6:	0151      	lsls	r1, r2, #5
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	440a      	add	r2, r1
 8002dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dd4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de6:	0151      	lsls	r1, r2, #5
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	440a      	add	r2, r1
 8002dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002df0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002df4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e02:	461a      	mov	r2, r3
 8002e04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e08:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1a:	0151      	lsls	r1, r2, #5
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	440a      	add	r2, r1
 8002e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3a:	0151      	lsls	r1, r2, #5
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	440a      	add	r2, r1
 8002e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e48:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d3a3      	bcc.n	8002da2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e68:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d016      	beq.n	8002ea4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e86:	f043 030b 	orr.w	r3, r3, #11
 8002e8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9c:	f043 030b 	orr.w	r3, r3, #11
 8002ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea2:	e015      	b.n	8002ed0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eb6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002eba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eca:	f043 030b 	orr.w	r3, r3, #11
 8002ece:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ede:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ee2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f002 fdc5 	bl	8005a84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f002 fcf3 	bl	80058fa <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1e:	d124      	bne.n	8002f6a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f002 fd89 	bl	8005a3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fe29 	bl	8004b86 <USB_GetDevSpeed>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681c      	ldr	r4, [r3, #0]
 8002f40:	f001 f908 	bl	8004154 <HAL_RCC_GetHCLKFreq>
 8002f44:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f001 fb66 	bl	8004620 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f004 fab2 	bl	80074be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 fcc3 	bl	80058fa <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d10a      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f004 fa8f 	bl	80074a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f002 0208 	and.w	r2, r2, #8
 8002f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 fcae 	bl	80058fa <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fa8:	d10f      	bne.n	8002fca <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f004 fae7 	bl	8007588 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002fc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f002 fc93 	bl	80058fa <USB_ReadInterrupts>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fde:	d10f      	bne.n	8003000 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	4619      	mov	r1, r3
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f004 faba 	bl	8007564 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f002 fc78 	bl	80058fa <USB_ReadInterrupts>
 800300a:	4603      	mov	r3, r0
 800300c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003014:	d10a      	bne.n	800302c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f004 fac8 	bl	80075ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800302a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f002 fc62 	bl	80058fa <USB_ReadInterrupts>
 8003036:	4603      	mov	r3, r0
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b04      	cmp	r3, #4
 800303e:	d115      	bne.n	800306c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f004 fab8 	bl	80075c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	e000      	b.n	800306c <HAL_PCD_IRQHandler+0x75e>
      return;
 800306a:	bf00      	nop
    }
  }
}
 800306c:	3734      	adds	r7, #52	; 0x34
 800306e:	46bd      	mov	sp, r7
 8003070:	bd90      	pop	{r4, r7, pc}

08003072 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_PCD_SetAddress+0x1a>
 8003088:	2302      	movs	r3, #2
 800308a:	e013      	b.n	80030b4 <HAL_PCD_SetAddress+0x42>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 fbc0 	bl	800582a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	70fb      	strb	r3, [r7, #3]
 80030ce:	460b      	mov	r3, r1
 80030d0:	803b      	strh	r3, [r7, #0]
 80030d2:	4613      	mov	r3, r2
 80030d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	da0f      	bge.n	8003102 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	f003 020f 	and.w	r2, r3, #15
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	3338      	adds	r3, #56	; 0x38
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	3304      	adds	r3, #4
 80030f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	705a      	strb	r2, [r3, #1]
 8003100:	e00f      	b.n	8003122 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	3304      	adds	r3, #4
 800311a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800312e:	883a      	ldrh	r2, [r7, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	78ba      	ldrb	r2, [r7, #2]
 8003138:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800314c:	78bb      	ldrb	r3, [r7, #2]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d102      	bne.n	8003158 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_PCD_EP_Open+0xaa>
 8003162:	2302      	movs	r3, #2
 8003164:	e00e      	b.n	8003184 <HAL_PCD_EP_Open+0xc8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	4618      	mov	r0, r3
 8003176:	f001 fd2b 	bl	8004bd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003182:	7afb      	ldrb	r3, [r7, #11]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800319c:	2b00      	cmp	r3, #0
 800319e:	da0f      	bge.n	80031c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 020f 	and.w	r2, r3, #15
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	3338      	adds	r3, #56	; 0x38
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	3304      	adds	r3, #4
 80031b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	705a      	strb	r2, [r3, #1]
 80031be:	e00f      	b.n	80031e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	f003 020f 	and.w	r2, r3, #15
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	3304      	adds	r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_PCD_EP_Close+0x6e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e00e      	b.n	8003218 <HAL_PCD_EP_Close+0x8c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	4618      	mov	r0, r3
 800320a:	f001 fd69 	bl	8004ce0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	460b      	mov	r3, r1
 800322e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	f003 020f 	and.w	r2, r3, #15
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4413      	add	r3, r2
 8003246:	3304      	adds	r3, #4
 8003248:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2200      	movs	r2, #0
 8003260:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003262:	7afb      	ldrb	r3, [r7, #11]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	b2da      	uxtb	r2, r3
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d102      	bne.n	800327c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800327c:	7afb      	ldrb	r3, [r7, #11]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	6979      	ldr	r1, [r7, #20]
 8003294:	f002 f844 	bl	8005320 <USB_EP0StartXfer>
 8003298:	e008      	b.n	80032ac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	f001 fdf6 	bl	8004e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b086      	sub	sp, #24
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	460b      	mov	r3, r1
 80032c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c6:	7afb      	ldrb	r3, [r7, #11]
 80032c8:	f003 020f 	and.w	r2, r3, #15
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	3338      	adds	r3, #56	; 0x38
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4413      	add	r3, r2
 80032da:	3304      	adds	r3, #4
 80032dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2200      	movs	r2, #0
 80032ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2201      	movs	r2, #1
 80032f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f6:	7afb      	ldrb	r3, [r7, #11]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d102      	bne.n	8003310 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003310:	7afb      	ldrb	r3, [r7, #11]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	6979      	ldr	r1, [r7, #20]
 8003328:	f001 fffa 	bl	8005320 <USB_EP0StartXfer>
 800332c:	e008      	b.n	8003340 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	6979      	ldr	r1, [r7, #20]
 800333c:	f001 fdac 	bl	8004e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	460b      	mov	r3, r1
 8003354:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d901      	bls.n	8003368 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e050      	b.n	800340a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800336c:	2b00      	cmp	r3, #0
 800336e:	da0f      	bge.n	8003390 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	f003 020f 	and.w	r2, r3, #15
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	3338      	adds	r3, #56	; 0x38
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	3304      	adds	r3, #4
 8003386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	705a      	strb	r2, [r3, #1]
 800338e:	e00d      	b.n	80033ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	3304      	adds	r3, #4
 80033a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_PCD_EP_SetStall+0x82>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e01e      	b.n	800340a <HAL_PCD_EP_SetStall+0xc0>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68f9      	ldr	r1, [r7, #12]
 80033da:	4618      	mov	r0, r3
 80033dc:	f002 f951 	bl	8005682 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	b2d9      	uxtb	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033fa:	461a      	mov	r2, r3
 80033fc:	f002 fb42 	bl	8005a84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	f003 020f 	and.w	r2, r3, #15
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d901      	bls.n	8003430 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e042      	b.n	80034b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003434:	2b00      	cmp	r3, #0
 8003436:	da0f      	bge.n	8003458 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	f003 020f 	and.w	r2, r3, #15
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	3338      	adds	r3, #56	; 0x38
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	3304      	adds	r3, #4
 800344e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	705a      	strb	r2, [r3, #1]
 8003456:	e00f      	b.n	8003478 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	f003 020f 	and.w	r2, r3, #15
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_PCD_EP_ClrStall+0x86>
 8003494:	2302      	movs	r3, #2
 8003496:	e00e      	b.n	80034b6 <HAL_PCD_EP_ClrStall+0xa4>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68f9      	ldr	r1, [r7, #12]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 f959 	bl	800575e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b08a      	sub	sp, #40	; 0x28
 80034c2:	af02      	add	r7, sp, #8
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	3338      	adds	r3, #56	; 0x38
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	3304      	adds	r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d901      	bls.n	80034f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e06c      	b.n	80035d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	429a      	cmp	r2, r3
 800350a:	d902      	bls.n	8003512 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3303      	adds	r3, #3
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800351a:	e02b      	b.n	8003574 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	429a      	cmp	r2, r3
 8003530:	d902      	bls.n	8003538 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	3303      	adds	r3, #3
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68d9      	ldr	r1, [r3, #12]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003550:	b2db      	uxtb	r3, r3
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	4603      	mov	r3, r0
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f002 f835 	bl	80055c6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	441a      	add	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	441a      	add	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	b29b      	uxth	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	429a      	cmp	r2, r3
 8003588:	d809      	bhi.n	800359e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003592:	429a      	cmp	r2, r3
 8003594:	d203      	bcs.n	800359e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1be      	bne.n	800351c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d811      	bhi.n	80035ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	2201      	movs	r2, #1
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	6939      	ldr	r1, [r7, #16]
 80035c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035ca:	4013      	ands	r3, r2
 80035cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3720      	adds	r7, #32
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	333c      	adds	r3, #60	; 0x3c
 80035f0:	3304      	adds	r3, #4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b01      	cmp	r3, #1
 800360c:	f040 80a0 	bne.w	8003750 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d015      	beq.n	8003646 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a72      	ldr	r2, [pc, #456]	; (80037e8 <PCD_EP_OutXfrComplete_int+0x210>)
 800361e:	4293      	cmp	r3, r2
 8003620:	f240 80dd 	bls.w	80037de <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 80d7 	beq.w	80037de <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363c:	461a      	mov	r2, r3
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	6093      	str	r3, [r2, #8]
 8003644:	e0cb      	b.n	80037de <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365c:	461a      	mov	r2, r3
 800365e:	2320      	movs	r3, #32
 8003660:	6093      	str	r3, [r2, #8]
 8003662:	e0bc      	b.n	80037de <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 80b7 	bne.w	80037de <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4a5d      	ldr	r2, [pc, #372]	; (80037e8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d90f      	bls.n	8003698 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368e:	461a      	mov	r2, r3
 8003690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003694:	6093      	str	r3, [r2, #8]
 8003696:	e0a2      	b.n	80037de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036aa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	0159      	lsls	r1, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	440b      	add	r3, r1
 80036b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80036be:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4403      	add	r3, r0
 80036ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036d2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4403      	add	r3, r0
 80036f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4419      	add	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4403      	add	r3, r0
 800370c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003710:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d114      	bne.n	8003742 <PCD_EP_OutXfrComplete_int+0x16a>
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d108      	bne.n	8003742 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800373a:	461a      	mov	r2, r3
 800373c:	2101      	movs	r1, #1
 800373e:	f002 f9a1 	bl	8005a84 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	4619      	mov	r1, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f003 fe75 	bl	8007438 <HAL_PCD_DataOutStageCallback>
 800374e:	e046      	b.n	80037de <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a26      	ldr	r2, [pc, #152]	; (80037ec <PCD_EP_OutXfrComplete_int+0x214>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d124      	bne.n	80037a2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376e:	461a      	mov	r2, r3
 8003770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003774:	6093      	str	r3, [r2, #8]
 8003776:	e032      	b.n	80037de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378e:	461a      	mov	r2, r3
 8003790:	2320      	movs	r3, #32
 8003792:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f003 fe4c 	bl	8007438 <HAL_PCD_DataOutStageCallback>
 80037a0:	e01d      	b.n	80037de <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d114      	bne.n	80037d2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d108      	bne.n	80037d2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037ca:	461a      	mov	r2, r3
 80037cc:	2100      	movs	r1, #0
 80037ce:	f002 f959 	bl	8005a84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f003 fe2d 	bl	8007438 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	4f54300a 	.word	0x4f54300a
 80037ec:	4f54310a 	.word	0x4f54310a

080037f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	333c      	adds	r3, #60	; 0x3c
 8003808:	3304      	adds	r3, #4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4a15      	ldr	r2, [pc, #84]	; (8003878 <PCD_EP_OutSetupPacket_int+0x88>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d90e      	bls.n	8003844 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800382c:	2b00      	cmp	r3, #0
 800382e:	d009      	beq.n	8003844 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383c:	461a      	mov	r2, r3
 800383e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003842:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f003 fde5 	bl	8007414 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <PCD_EP_OutSetupPacket_int+0x88>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d90c      	bls.n	800386c <PCD_EP_OutSetupPacket_int+0x7c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d108      	bne.n	800386c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003864:	461a      	mov	r2, r3
 8003866:	2101      	movs	r1, #1
 8003868:	f002 f90c 	bl	8005a84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	4f54300a 	.word	0x4f54300a

0800387c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	70fb      	strb	r3, [r7, #3]
 8003888:	4613      	mov	r3, r2
 800388a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d107      	bne.n	80038aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800389a:	883b      	ldrh	r3, [r7, #0]
 800389c:	0419      	lsls	r1, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
 80038a8:	e028      	b.n	80038fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	4413      	add	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	73fb      	strb	r3, [r7, #15]
 80038bc:	e00d      	b.n	80038da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	3340      	adds	r3, #64	; 0x40
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4413      	add	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	3301      	adds	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	3b01      	subs	r3, #1
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3ec      	bcc.n	80038be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038e4:	883b      	ldrh	r3, [r7, #0]
 80038e6:	0418      	lsls	r0, r3, #16
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6819      	ldr	r1, [r3, #0]
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	4302      	orrs	r2, r0
 80038f4:	3340      	adds	r3, #64	; 0x40
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	460b      	mov	r3, r1
 8003914:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	887a      	ldrh	r2, [r7, #2]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e25b      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d075      	beq.n	8003a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003962:	4ba3      	ldr	r3, [pc, #652]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b04      	cmp	r3, #4
 800396c:	d00c      	beq.n	8003988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800396e:	4ba0      	ldr	r3, [pc, #640]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003976:	2b08      	cmp	r3, #8
 8003978:	d112      	bne.n	80039a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397a:	4b9d      	ldr	r3, [pc, #628]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003986:	d10b      	bne.n	80039a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	4b99      	ldr	r3, [pc, #612]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d05b      	beq.n	8003a4c <HAL_RCC_OscConfig+0x108>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d157      	bne.n	8003a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e236      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d106      	bne.n	80039b8 <HAL_RCC_OscConfig+0x74>
 80039aa:	4b91      	ldr	r3, [pc, #580]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a90      	ldr	r2, [pc, #576]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e01d      	b.n	80039f4 <HAL_RCC_OscConfig+0xb0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x98>
 80039c2:	4b8b      	ldr	r3, [pc, #556]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a8a      	ldr	r2, [pc, #552]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b88      	ldr	r3, [pc, #544]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a87      	ldr	r2, [pc, #540]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0xb0>
 80039dc:	4b84      	ldr	r3, [pc, #528]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a83      	ldr	r2, [pc, #524]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b81      	ldr	r3, [pc, #516]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a80      	ldr	r2, [pc, #512]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fd fdee 	bl	80015dc <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fd fdea 	bl	80015dc <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1fb      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b76      	ldr	r3, [pc, #472]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0xc0>
 8003a22:	e014      	b.n	8003a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fd fdda 	bl	80015dc <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fd fdd6 	bl	80015dc <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e1e7      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	4b6c      	ldr	r3, [pc, #432]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0xe8>
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d063      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a5a:	4b65      	ldr	r3, [pc, #404]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a66:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d11c      	bne.n	8003aac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a72:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d116      	bne.n	8003aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	4b5c      	ldr	r3, [pc, #368]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0x152>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e1bb      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4952      	ldr	r1, [pc, #328]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	e03a      	b.n	8003b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab4:	4b4f      	ldr	r3, [pc, #316]	; (8003bf4 <HAL_RCC_OscConfig+0x2b0>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd fd8f 	bl	80015dc <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7fd fd8b 	bl	80015dc <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e19c      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad4:	4b46      	ldr	r3, [pc, #280]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4940      	ldr	r1, [pc, #256]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
 8003af4:	e015      	b.n	8003b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af6:	4b3f      	ldr	r3, [pc, #252]	; (8003bf4 <HAL_RCC_OscConfig+0x2b0>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd fd6e 	bl	80015dc <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b04:	f7fd fd6a 	bl	80015dc <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e17b      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b16:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d030      	beq.n	8003b90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b36:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <HAL_RCC_OscConfig+0x2b4>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fd fd4e 	bl	80015dc <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fd fd4a 	bl	80015dc <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e15b      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x200>
 8003b62:	e015      	b.n	8003b90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b64:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <HAL_RCC_OscConfig+0x2b4>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6a:	f7fd fd37 	bl	80015dc <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b72:	f7fd fd33 	bl	80015dc <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e144      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80a0 	beq.w	8003cde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10f      	bne.n	8003bce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_OscConfig+0x2b8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d121      	bne.n	8003c1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <HAL_RCC_OscConfig+0x2b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a07      	ldr	r2, [pc, #28]	; (8003bfc <HAL_RCC_OscConfig+0x2b8>)
 8003be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be6:	f7fd fcf9 	bl	80015dc <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bec:	e011      	b.n	8003c12 <HAL_RCC_OscConfig+0x2ce>
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	42470000 	.word	0x42470000
 8003bf8:	42470e80 	.word	0x42470e80
 8003bfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c00:	f7fd fcec 	bl	80015dc <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e0fd      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c12:	4b81      	ldr	r3, [pc, #516]	; (8003e18 <HAL_RCC_OscConfig+0x4d4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d106      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2f0>
 8003c26:	4b7d      	ldr	r3, [pc, #500]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a7c      	ldr	r2, [pc, #496]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
 8003c32:	e01c      	b.n	8003c6e <HAL_RCC_OscConfig+0x32a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCC_OscConfig+0x312>
 8003c3c:	4b77      	ldr	r3, [pc, #476]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	4a76      	ldr	r2, [pc, #472]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c42:	f043 0304 	orr.w	r3, r3, #4
 8003c46:	6713      	str	r3, [r2, #112]	; 0x70
 8003c48:	4b74      	ldr	r3, [pc, #464]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a73      	ldr	r2, [pc, #460]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	e00b      	b.n	8003c6e <HAL_RCC_OscConfig+0x32a>
 8003c56:	4b71      	ldr	r3, [pc, #452]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	4a70      	ldr	r2, [pc, #448]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6713      	str	r3, [r2, #112]	; 0x70
 8003c62:	4b6e      	ldr	r3, [pc, #440]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a6d      	ldr	r2, [pc, #436]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c68:	f023 0304 	bic.w	r3, r3, #4
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d015      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c76:	f7fd fcb1 	bl	80015dc <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd fcad 	bl	80015dc <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0bc      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c94:	4b61      	ldr	r3, [pc, #388]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ee      	beq.n	8003c7e <HAL_RCC_OscConfig+0x33a>
 8003ca0:	e014      	b.n	8003ccc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca2:	f7fd fc9b 	bl	80015dc <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd fc97 	bl	80015dc <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e0a6      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc0:	4b56      	ldr	r3, [pc, #344]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ee      	bne.n	8003caa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d105      	bne.n	8003cde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd2:	4b52      	ldr	r3, [pc, #328]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	4a51      	ldr	r2, [pc, #324]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8092 	beq.w	8003e0c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ce8:	4b4c      	ldr	r3, [pc, #304]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d05c      	beq.n	8003dae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d141      	bne.n	8003d80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfc:	4b48      	ldr	r3, [pc, #288]	; (8003e20 <HAL_RCC_OscConfig+0x4dc>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fd fc6b 	bl	80015dc <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fd fc67 	bl	80015dc <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e078      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1c:	4b3f      	ldr	r3, [pc, #252]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	019b      	lsls	r3, r3, #6
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	3b01      	subs	r3, #1
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	061b      	lsls	r3, r3, #24
 8003d4c:	4933      	ldr	r1, [pc, #204]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d52:	4b33      	ldr	r3, [pc, #204]	; (8003e20 <HAL_RCC_OscConfig+0x4dc>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd fc40 	bl	80015dc <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd fc3c 	bl	80015dc <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e04d      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d72:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x41c>
 8003d7e:	e045      	b.n	8003e0c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d80:	4b27      	ldr	r3, [pc, #156]	; (8003e20 <HAL_RCC_OscConfig+0x4dc>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fd fc29 	bl	80015dc <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7fd fc25 	bl	80015dc <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e036      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da0:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f0      	bne.n	8003d8e <HAL_RCC_OscConfig+0x44a>
 8003dac:	e02e      	b.n	8003e0c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e029      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dba:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d11c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d115      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003de2:	4013      	ands	r3, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d10d      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d106      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	42470060 	.word	0x42470060

08003e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0cc      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e38:	4b68      	ldr	r3, [pc, #416]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d90c      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b65      	ldr	r3, [pc, #404]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b63      	ldr	r3, [pc, #396]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0b8      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e78:	4b59      	ldr	r3, [pc, #356]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a58      	ldr	r2, [pc, #352]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e90:	4b53      	ldr	r3, [pc, #332]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4a52      	ldr	r2, [pc, #328]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e9c:	4b50      	ldr	r3, [pc, #320]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	494d      	ldr	r1, [pc, #308]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d044      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	4b47      	ldr	r3, [pc, #284]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d119      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e07f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d003      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee2:	4b3f      	ldr	r3, [pc, #252]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e06f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e067      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f02:	4b37      	ldr	r3, [pc, #220]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f023 0203 	bic.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4934      	ldr	r1, [pc, #208]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f14:	f7fd fb62 	bl	80015dc <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1c:	f7fd fb5e 	bl	80015dc <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e04f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f32:	4b2b      	ldr	r3, [pc, #172]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 020c 	and.w	r2, r3, #12
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1eb      	bne.n	8003f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f44:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d20c      	bcs.n	8003f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b22      	ldr	r3, [pc, #136]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e032      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f78:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4916      	ldr	r1, [pc, #88]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	490e      	ldr	r1, [pc, #56]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003faa:	f000 f821 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003fae:	4601      	mov	r1, r0
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8003fbc:	5cd3      	ldrb	r3, [r2, r3]
 8003fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8003fc2:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_ClockConfig+0x1c8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd fac2 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023c00 	.word	0x40023c00
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	080088f8 	.word	0x080088f8
 8003fe8:	20000008 	.word	0x20000008
 8003fec:	2000000c 	.word	0x2000000c

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	2300      	movs	r3, #0
 8004000:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004006:	4b50      	ldr	r3, [pc, #320]	; (8004148 <HAL_RCC_GetSysClockFreq+0x158>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b04      	cmp	r3, #4
 8004010:	d007      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x32>
 8004012:	2b08      	cmp	r3, #8
 8004014:	d008      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x38>
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 808d 	bne.w	8004136 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800401c:	4b4b      	ldr	r3, [pc, #300]	; (800414c <HAL_RCC_GetSysClockFreq+0x15c>)
 800401e:	60bb      	str	r3, [r7, #8]
       break;
 8004020:	e08c      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004022:	4b4b      	ldr	r3, [pc, #300]	; (8004150 <HAL_RCC_GetSysClockFreq+0x160>)
 8004024:	60bb      	str	r3, [r7, #8]
      break;
 8004026:	e089      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004028:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_RCC_GetSysClockFreq+0x158>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004030:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004032:	4b45      	ldr	r3, [pc, #276]	; (8004148 <HAL_RCC_GetSysClockFreq+0x158>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d023      	beq.n	8004086 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403e:	4b42      	ldr	r3, [pc, #264]	; (8004148 <HAL_RCC_GetSysClockFreq+0x158>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	099b      	lsrs	r3, r3, #6
 8004044:	f04f 0400 	mov.w	r4, #0
 8004048:	f240 11ff 	movw	r1, #511	; 0x1ff
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	ea03 0501 	and.w	r5, r3, r1
 8004054:	ea04 0602 	and.w	r6, r4, r2
 8004058:	4a3d      	ldr	r2, [pc, #244]	; (8004150 <HAL_RCC_GetSysClockFreq+0x160>)
 800405a:	fb02 f106 	mul.w	r1, r2, r6
 800405e:	2200      	movs	r2, #0
 8004060:	fb02 f205 	mul.w	r2, r2, r5
 8004064:	440a      	add	r2, r1
 8004066:	493a      	ldr	r1, [pc, #232]	; (8004150 <HAL_RCC_GetSysClockFreq+0x160>)
 8004068:	fba5 0101 	umull	r0, r1, r5, r1
 800406c:	1853      	adds	r3, r2, r1
 800406e:	4619      	mov	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f04f 0400 	mov.w	r4, #0
 8004076:	461a      	mov	r2, r3
 8004078:	4623      	mov	r3, r4
 800407a:	f7fc f8ad 	bl	80001d8 <__aeabi_uldivmod>
 800407e:	4603      	mov	r3, r0
 8004080:	460c      	mov	r4, r1
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e049      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004086:	4b30      	ldr	r3, [pc, #192]	; (8004148 <HAL_RCC_GetSysClockFreq+0x158>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	f04f 0400 	mov.w	r4, #0
 8004090:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	ea03 0501 	and.w	r5, r3, r1
 800409c:	ea04 0602 	and.w	r6, r4, r2
 80040a0:	4629      	mov	r1, r5
 80040a2:	4632      	mov	r2, r6
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	f04f 0400 	mov.w	r4, #0
 80040ac:	0154      	lsls	r4, r2, #5
 80040ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040b2:	014b      	lsls	r3, r1, #5
 80040b4:	4619      	mov	r1, r3
 80040b6:	4622      	mov	r2, r4
 80040b8:	1b49      	subs	r1, r1, r5
 80040ba:	eb62 0206 	sbc.w	r2, r2, r6
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	f04f 0400 	mov.w	r4, #0
 80040c6:	0194      	lsls	r4, r2, #6
 80040c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040cc:	018b      	lsls	r3, r1, #6
 80040ce:	1a5b      	subs	r3, r3, r1
 80040d0:	eb64 0402 	sbc.w	r4, r4, r2
 80040d4:	f04f 0100 	mov.w	r1, #0
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	00e2      	lsls	r2, r4, #3
 80040de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040e2:	00d9      	lsls	r1, r3, #3
 80040e4:	460b      	mov	r3, r1
 80040e6:	4614      	mov	r4, r2
 80040e8:	195b      	adds	r3, r3, r5
 80040ea:	eb44 0406 	adc.w	r4, r4, r6
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	02a2      	lsls	r2, r4, #10
 80040f8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040fc:	0299      	lsls	r1, r3, #10
 80040fe:	460b      	mov	r3, r1
 8004100:	4614      	mov	r4, r2
 8004102:	4618      	mov	r0, r3
 8004104:	4621      	mov	r1, r4
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f04f 0400 	mov.w	r4, #0
 800410c:	461a      	mov	r2, r3
 800410e:	4623      	mov	r3, r4
 8004110:	f7fc f862 	bl	80001d8 <__aeabi_uldivmod>
 8004114:	4603      	mov	r3, r0
 8004116:	460c      	mov	r4, r1
 8004118:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_GetSysClockFreq+0x158>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	0c1b      	lsrs	r3, r3, #16
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	3301      	adds	r3, #1
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004132:	60bb      	str	r3, [r7, #8]
      break;
 8004134:	e002      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004138:	60bb      	str	r3, [r7, #8]
      break;
 800413a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413c:	68bb      	ldr	r3, [r7, #8]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800
 800414c:	00f42400 	.word	0x00f42400
 8004150:	017d7840 	.word	0x017d7840

08004154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <HAL_RCC_GetHCLKFreq+0x14>)
 800415a:	681b      	ldr	r3, [r3, #0]
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000008 	.word	0x20000008

0800416c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004170:	f7ff fff0 	bl	8004154 <HAL_RCC_GetHCLKFreq>
 8004174:	4601      	mov	r1, r0
 8004176:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	0a9b      	lsrs	r3, r3, #10
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	4a03      	ldr	r2, [pc, #12]	; (8004190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004182:	5cd3      	ldrb	r3, [r2, r3]
 8004184:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40023800 	.word	0x40023800
 8004190:	08008908 	.word	0x08008908

08004194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e056      	b.n	8004254 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fc fbe9 	bl	8000998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	ea42 0103 	orr.w	r1, r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	f003 0104 	and.w	r1, r3, #4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004242:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e083      	b.n	8004378 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7fd f8d3 	bl	8001430 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a0:	f023 0307 	bic.w	r3, r3, #7
 80042a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f000 f865 	bl	8004380 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	4313      	orrs	r3, r2
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042fc:	f023 030c 	bic.w	r3, r3, #12
 8004300:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800430c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	4313      	orrs	r3, r2
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	011a      	lsls	r2, r3, #4
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	031b      	lsls	r3, r3, #12
 800432c:	4313      	orrs	r3, r2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004342:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	4313      	orrs	r3, r2
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a34      	ldr	r2, [pc, #208]	; (8004464 <TIM_Base_SetConfig+0xe4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00f      	beq.n	80043b8 <TIM_Base_SetConfig+0x38>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439e:	d00b      	beq.n	80043b8 <TIM_Base_SetConfig+0x38>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a31      	ldr	r2, [pc, #196]	; (8004468 <TIM_Base_SetConfig+0xe8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d007      	beq.n	80043b8 <TIM_Base_SetConfig+0x38>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a30      	ldr	r2, [pc, #192]	; (800446c <TIM_Base_SetConfig+0xec>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d003      	beq.n	80043b8 <TIM_Base_SetConfig+0x38>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a2f      	ldr	r2, [pc, #188]	; (8004470 <TIM_Base_SetConfig+0xf0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d108      	bne.n	80043ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a25      	ldr	r2, [pc, #148]	; (8004464 <TIM_Base_SetConfig+0xe4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01b      	beq.n	800440a <TIM_Base_SetConfig+0x8a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d8:	d017      	beq.n	800440a <TIM_Base_SetConfig+0x8a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a22      	ldr	r2, [pc, #136]	; (8004468 <TIM_Base_SetConfig+0xe8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <TIM_Base_SetConfig+0x8a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a21      	ldr	r2, [pc, #132]	; (800446c <TIM_Base_SetConfig+0xec>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00f      	beq.n	800440a <TIM_Base_SetConfig+0x8a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a20      	ldr	r2, [pc, #128]	; (8004470 <TIM_Base_SetConfig+0xf0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00b      	beq.n	800440a <TIM_Base_SetConfig+0x8a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <TIM_Base_SetConfig+0xf4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <TIM_Base_SetConfig+0x8a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a1e      	ldr	r2, [pc, #120]	; (8004478 <TIM_Base_SetConfig+0xf8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_Base_SetConfig+0x8a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1d      	ldr	r2, [pc, #116]	; (800447c <TIM_Base_SetConfig+0xfc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d108      	bne.n	800441c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a08      	ldr	r2, [pc, #32]	; (8004464 <TIM_Base_SetConfig+0xe4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d103      	bne.n	8004450 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	615a      	str	r2, [r3, #20]
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40010000 	.word	0x40010000
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40000c00 	.word	0x40000c00
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800

08004480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004494:	2302      	movs	r3, #2
 8004496:	e050      	b.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d013      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a16      	ldr	r2, [pc, #88]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a13      	ldr	r2, [pc, #76]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10c      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4313      	orrs	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40014000 	.word	0x40014000

0800455c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800455c:	b084      	sub	sp, #16
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	f107 001c 	add.w	r0, r7, #28
 800456a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	2b01      	cmp	r3, #1
 8004572:	d122      	bne.n	80045ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800459c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d105      	bne.n	80045ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f001 fac6 	bl	8005b40 <USB_CoreReset>
 80045b4:	4603      	mov	r3, r0
 80045b6:	73fb      	strb	r3, [r7, #15]
 80045b8:	e01a      	b.n	80045f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f001 faba 	bl	8005b40 <USB_CoreReset>
 80045cc:	4603      	mov	r3, r0
 80045ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
 80045e2:	e005      	b.n	80045f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d10b      	bne.n	800460e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f043 0206 	orr.w	r2, r3, #6
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f043 0220 	orr.w	r2, r3, #32
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800461a:	b004      	add	sp, #16
 800461c:	4770      	bx	lr
	...

08004620 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	4613      	mov	r3, r2
 800462c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d165      	bne.n	8004700 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4a41      	ldr	r2, [pc, #260]	; (800473c <USB_SetTurnaroundTime+0x11c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d906      	bls.n	800464a <USB_SetTurnaroundTime+0x2a>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4a40      	ldr	r2, [pc, #256]	; (8004740 <USB_SetTurnaroundTime+0x120>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d802      	bhi.n	800464a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004644:	230f      	movs	r3, #15
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e062      	b.n	8004710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4a3c      	ldr	r2, [pc, #240]	; (8004740 <USB_SetTurnaroundTime+0x120>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d906      	bls.n	8004660 <USB_SetTurnaroundTime+0x40>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4a3b      	ldr	r2, [pc, #236]	; (8004744 <USB_SetTurnaroundTime+0x124>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d802      	bhi.n	8004660 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800465a:	230e      	movs	r3, #14
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	e057      	b.n	8004710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4a38      	ldr	r2, [pc, #224]	; (8004744 <USB_SetTurnaroundTime+0x124>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d906      	bls.n	8004676 <USB_SetTurnaroundTime+0x56>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4a37      	ldr	r2, [pc, #220]	; (8004748 <USB_SetTurnaroundTime+0x128>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d802      	bhi.n	8004676 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004670:	230d      	movs	r3, #13
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	e04c      	b.n	8004710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4a33      	ldr	r2, [pc, #204]	; (8004748 <USB_SetTurnaroundTime+0x128>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d906      	bls.n	800468c <USB_SetTurnaroundTime+0x6c>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4a32      	ldr	r2, [pc, #200]	; (800474c <USB_SetTurnaroundTime+0x12c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d802      	bhi.n	800468c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004686:	230c      	movs	r3, #12
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	e041      	b.n	8004710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4a2f      	ldr	r2, [pc, #188]	; (800474c <USB_SetTurnaroundTime+0x12c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d906      	bls.n	80046a2 <USB_SetTurnaroundTime+0x82>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4a2e      	ldr	r2, [pc, #184]	; (8004750 <USB_SetTurnaroundTime+0x130>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d802      	bhi.n	80046a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800469c:	230b      	movs	r3, #11
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e036      	b.n	8004710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4a2a      	ldr	r2, [pc, #168]	; (8004750 <USB_SetTurnaroundTime+0x130>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d906      	bls.n	80046b8 <USB_SetTurnaroundTime+0x98>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4a29      	ldr	r2, [pc, #164]	; (8004754 <USB_SetTurnaroundTime+0x134>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d802      	bhi.n	80046b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80046b2:	230a      	movs	r3, #10
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e02b      	b.n	8004710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4a26      	ldr	r2, [pc, #152]	; (8004754 <USB_SetTurnaroundTime+0x134>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d906      	bls.n	80046ce <USB_SetTurnaroundTime+0xae>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4a25      	ldr	r2, [pc, #148]	; (8004758 <USB_SetTurnaroundTime+0x138>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d802      	bhi.n	80046ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046c8:	2309      	movs	r3, #9
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e020      	b.n	8004710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4a21      	ldr	r2, [pc, #132]	; (8004758 <USB_SetTurnaroundTime+0x138>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d906      	bls.n	80046e4 <USB_SetTurnaroundTime+0xc4>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4a20      	ldr	r2, [pc, #128]	; (800475c <USB_SetTurnaroundTime+0x13c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d802      	bhi.n	80046e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046de:	2308      	movs	r3, #8
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	e015      	b.n	8004710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4a1d      	ldr	r2, [pc, #116]	; (800475c <USB_SetTurnaroundTime+0x13c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d906      	bls.n	80046fa <USB_SetTurnaroundTime+0xda>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <USB_SetTurnaroundTime+0x140>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d802      	bhi.n	80046fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046f4:	2307      	movs	r3, #7
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e00a      	b.n	8004710 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046fa:	2306      	movs	r3, #6
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	e007      	b.n	8004710 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004706:	2309      	movs	r3, #9
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e001      	b.n	8004710 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800470c:	2309      	movs	r3, #9
 800470e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	029b      	lsls	r3, r3, #10
 8004724:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004728:	431a      	orrs	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	00d8acbf 	.word	0x00d8acbf
 8004740:	00e4e1bf 	.word	0x00e4e1bf
 8004744:	00f423ff 	.word	0x00f423ff
 8004748:	0106737f 	.word	0x0106737f
 800474c:	011a499f 	.word	0x011a499f
 8004750:	01312cff 	.word	0x01312cff
 8004754:	014ca43f 	.word	0x014ca43f
 8004758:	016e35ff 	.word	0x016e35ff
 800475c:	01a6ab1f 	.word	0x01a6ab1f
 8004760:	01e847ff 	.word	0x01e847ff

08004764 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f043 0201 	orr.w	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 0201 	bic.w	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d106      	bne.n	80047d4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60da      	str	r2, [r3, #12]
 80047d2:	e00b      	b.n	80047ec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	e001      	b.n	80047ec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e003      	b.n	80047f4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047ec:	2032      	movs	r0, #50	; 0x32
 80047ee:	f7fc ff01 	bl	80015f4 <HAL_Delay>

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047fc:	b084      	sub	sp, #16
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800480a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	e009      	b.n	8004830 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	3340      	adds	r3, #64	; 0x40
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	2200      	movs	r2, #0
 8004828:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3301      	adds	r3, #1
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b0e      	cmp	r3, #14
 8004834:	d9f2      	bls.n	800481c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d11c      	bne.n	8004876 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800484a:	f043 0302 	orr.w	r3, r3, #2
 800484e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	639a      	str	r2, [r3, #56]	; 0x38
 8004874:	e00b      	b.n	800488e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004894:	461a      	mov	r2, r3
 8004896:	2300      	movs	r3, #0
 8004898:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a0:	4619      	mov	r1, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	461a      	mov	r2, r3
 80048aa:	680b      	ldr	r3, [r1, #0]
 80048ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d10c      	bne.n	80048ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048ba:	2100      	movs	r1, #0
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f949 	bl	8004b54 <USB_SetDevSpeed>
 80048c2:	e008      	b.n	80048d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048c4:	2101      	movs	r1, #1
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f944 	bl	8004b54 <USB_SetDevSpeed>
 80048cc:	e003      	b.n	80048d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048ce:	2103      	movs	r1, #3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f93f 	bl	8004b54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048d6:	2110      	movs	r1, #16
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8f3 	bl	8004ac4 <USB_FlushTxFifo>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f911 	bl	8004b10 <USB_FlushRxFifo>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	461a      	mov	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	461a      	mov	r2, r3
 800490c:	2300      	movs	r3, #0
 800490e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004916:	461a      	mov	r2, r3
 8004918:	2300      	movs	r3, #0
 800491a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	e043      	b.n	80049aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004938:	d118      	bne.n	800496c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	461a      	mov	r2, r3
 800494e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	e013      	b.n	800497e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004962:	461a      	mov	r2, r3
 8004964:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e008      	b.n	800497e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	461a      	mov	r2, r3
 800497a:	2300      	movs	r3, #0
 800497c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498a:	461a      	mov	r2, r3
 800498c:	2300      	movs	r3, #0
 800498e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	461a      	mov	r2, r3
 800499e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	3301      	adds	r3, #1
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d3b7      	bcc.n	8004922 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	e043      	b.n	8004a40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ce:	d118      	bne.n	8004a02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e2:	461a      	mov	r2, r3
 80049e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e013      	b.n	8004a14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	461a      	mov	r2, r3
 80049fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	e008      	b.n	8004a14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a20:	461a      	mov	r2, r3
 8004a22:	2300      	movs	r3, #0
 8004a24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a32:	461a      	mov	r2, r3
 8004a34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d3b7      	bcc.n	80049b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f043 0210 	orr.w	r2, r3, #16
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <USB_DevInit+0x2c4>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f043 0208 	orr.w	r2, r3, #8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d107      	bne.n	8004ab0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004abc:	b004      	add	sp, #16
 8004abe:	4770      	bx	lr
 8004ac0:	803c3800 	.word	0x803c3800

08004ac4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	f043 0220 	orr.w	r2, r3, #32
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <USB_FlushTxFifo+0x48>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e006      	b.n	8004afe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d0f0      	beq.n	8004ade <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	00030d40 	.word	0x00030d40

08004b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2210      	movs	r2, #16
 8004b20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3301      	adds	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <USB_FlushRxFifo+0x40>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d901      	bls.n	8004b34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e006      	b.n	8004b42 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d0f0      	beq.n	8004b22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	00030d40 	.word	0x00030d40

08004b54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b087      	sub	sp, #28
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0306 	and.w	r3, r3, #6
 8004b9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	75fb      	strb	r3, [r7, #23]
 8004baa:	e00a      	b.n	8004bc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d002      	beq.n	8004bb8 <USB_GetDevSpeed+0x32>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d102      	bne.n	8004bbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	75fb      	strb	r3, [r7, #23]
 8004bbc:	e001      	b.n	8004bc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bbe:	230f      	movs	r3, #15
 8004bc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d13a      	bne.n	8004c62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	68f9      	ldr	r1, [r7, #12]
 8004c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d155      	bne.n	8004cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	78db      	ldrb	r3, [r3, #3]
 8004c3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	059b      	lsls	r3, r3, #22
 8004c46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	e036      	b.n	8004cd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	69da      	ldr	r2, [r3, #28]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	2101      	movs	r1, #1
 8004c74:	fa01 f303 	lsl.w	r3, r1, r3
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d11a      	bne.n	8004cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	78db      	ldrb	r3, [r3, #3]
 8004cb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d161      	bne.n	8004dc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d12:	d11f      	bne.n	8004d54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	2101      	movs	r1, #1
 8004d66:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	68f9      	ldr	r1, [r7, #12]
 8004d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d74:	4013      	ands	r3, r2
 8004d76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	2101      	movs	r1, #1
 8004d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	0159      	lsls	r1, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	440b      	add	r3, r1
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	4619      	mov	r1, r3
 8004db8:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <USB_DeactivateEndpoint+0x1b0>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]
 8004dbe:	e060      	b.n	8004e82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd6:	d11f      	bne.n	8004e18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004df6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	2101      	movs	r1, #1
 8004e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2e:	041b      	lsls	r3, r3, #16
 8004e30:	43db      	mvns	r3, r3
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e38:	4013      	ands	r3, r2
 8004e3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	43db      	mvns	r3, r3
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	0159      	lsls	r1, r3, #5
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	440b      	add	r3, r1
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <USB_DeactivateEndpoint+0x1b4>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	ec337800 	.word	0xec337800
 8004e94:	eff37800 	.word	0xeff37800

08004e98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	f040 815c 	bne.w	8005172 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d132      	bne.n	8004f28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	0151      	lsls	r1, r2, #5
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	440a      	add	r2, r1
 8004ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004edc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ee0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f20:	0cdb      	lsrs	r3, r3, #19
 8004f22:	04db      	lsls	r3, r3, #19
 8004f24:	6113      	str	r3, [r2, #16]
 8004f26:	e074      	b.n	8005012 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f42:	0cdb      	lsrs	r3, r3, #19
 8004f44:	04db      	lsls	r3, r3, #19
 8004f46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6959      	ldr	r1, [r3, #20]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	440b      	add	r3, r1
 8004f84:	1e59      	subs	r1, r3, #1
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f8e:	04d9      	lsls	r1, r3, #19
 8004f90:	4b9d      	ldr	r3, [pc, #628]	; (8005208 <USB_EPStartXfer+0x370>)
 8004f92:	400b      	ands	r3, r1
 8004f94:	69b9      	ldr	r1, [r7, #24]
 8004f96:	0148      	lsls	r0, r1, #5
 8004f98:	69f9      	ldr	r1, [r7, #28]
 8004f9a:	4401      	add	r1, r0
 8004f9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fba:	69b9      	ldr	r1, [r7, #24]
 8004fbc:	0148      	lsls	r0, r1, #5
 8004fbe:	69f9      	ldr	r1, [r7, #28]
 8004fc0:	4401      	add	r1, r0
 8004fc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	78db      	ldrb	r3, [r3, #3]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d11f      	bne.n	8005012 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ff0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	440a      	add	r2, r1
 8005008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005010:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d14b      	bne.n	80050b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	461a      	mov	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	78db      	ldrb	r3, [r3, #3]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d128      	bne.n	800508e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d110      	bne.n	800506e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	440a      	add	r2, r1
 8005062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005066:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	e00f      	b.n	800508e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e12f      	b.n	8005310 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	78db      	ldrb	r3, [r3, #3]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d015      	beq.n	8005104 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8117 	beq.w	8005310 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	2101      	movs	r1, #1
 80050f4:	fa01 f303 	lsl.w	r3, r1, r3
 80050f8:	69f9      	ldr	r1, [r7, #28]
 80050fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050fe:	4313      	orrs	r3, r2
 8005100:	634b      	str	r3, [r1, #52]	; 0x34
 8005102:	e105      	b.n	8005310 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d110      	bne.n	8005136 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	e00f      	b.n	8005156 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	440a      	add	r2, r1
 800514c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005154:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	68d9      	ldr	r1, [r3, #12]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	781a      	ldrb	r2, [r3, #0]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	b298      	uxth	r0, r3
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	4603      	mov	r3, r0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fa2b 	bl	80055c6 <USB_WritePacket>
 8005170:	e0ce      	b.n	8005310 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518c:	0cdb      	lsrs	r3, r3, #19
 800518e:	04db      	lsls	r3, r3, #19
 8005190:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d126      	bne.n	800520c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d4:	69b9      	ldr	r1, [r7, #24]
 80051d6:	0148      	lsls	r0, r1, #5
 80051d8:	69f9      	ldr	r1, [r7, #28]
 80051da:	4401      	add	r1, r0
 80051dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051e0:	4313      	orrs	r3, r2
 80051e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005202:	6113      	str	r3, [r2, #16]
 8005204:	e036      	b.n	8005274 <USB_EPStartXfer+0x3dc>
 8005206:	bf00      	nop
 8005208:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	4413      	add	r3, r2
 8005216:	1e5a      	subs	r2, r3, #1
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005220:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	8afb      	ldrh	r3, [r7, #22]
 8005232:	04d9      	lsls	r1, r3, #19
 8005234:	4b39      	ldr	r3, [pc, #228]	; (800531c <USB_EPStartXfer+0x484>)
 8005236:	400b      	ands	r3, r1
 8005238:	69b9      	ldr	r1, [r7, #24]
 800523a:	0148      	lsls	r0, r1, #5
 800523c:	69f9      	ldr	r1, [r7, #28]
 800523e:	4401      	add	r1, r0
 8005240:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005244:	4313      	orrs	r3, r2
 8005246:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	8af9      	ldrh	r1, [r7, #22]
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005264:	69b9      	ldr	r1, [r7, #24]
 8005266:	0148      	lsls	r0, r1, #5
 8005268:	69f9      	ldr	r1, [r7, #28]
 800526a:	4401      	add	r1, r0
 800526c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005270:	4313      	orrs	r3, r2
 8005272:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d10d      	bne.n	8005296 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	68d9      	ldr	r1, [r3, #12]
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	460a      	mov	r2, r1
 8005294:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	78db      	ldrb	r3, [r3, #3]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d128      	bne.n	80052f0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d110      	bne.n	80052d0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e00f      	b.n	80052f0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	440a      	add	r2, r1
 8005306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800530e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	1ff80000 	.word	0x1ff80000

08005320 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	4613      	mov	r3, r2
 800532c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	2b01      	cmp	r3, #1
 800533e:	f040 80cd 	bne.w	80054dc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d132      	bne.n	80053b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005364:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005368:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800536c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	440a      	add	r2, r1
 8005384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800538c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a8:	0cdb      	lsrs	r3, r3, #19
 80053aa:	04db      	lsls	r3, r3, #19
 80053ac:	6113      	str	r3, [r2, #16]
 80053ae:	e04e      	b.n	800544e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ca:	0cdb      	lsrs	r3, r3, #19
 80053cc:	04db      	lsls	r3, r3, #19
 80053ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d903      	bls.n	8005408 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005426:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543e:	6939      	ldr	r1, [r7, #16]
 8005440:	0148      	lsls	r0, r1, #5
 8005442:	6979      	ldr	r1, [r7, #20]
 8005444:	4401      	add	r1, r0
 8005446:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800544a:	4313      	orrs	r3, r2
 800544c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d11e      	bne.n	8005492 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005468:	461a      	mov	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	e092      	b.n	80055b8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d07e      	beq.n	80055b8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	2101      	movs	r1, #1
 80054cc:	fa01 f303 	lsl.w	r3, r1, r3
 80054d0:	6979      	ldr	r1, [r7, #20]
 80054d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d6:	4313      	orrs	r3, r2
 80054d8:	634b      	str	r3, [r1, #52]	; 0x34
 80054da:	e06d      	b.n	80055b8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f6:	0cdb      	lsrs	r3, r3, #19
 80054f8:	04db      	lsls	r3, r3, #19
 80054fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005516:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800551a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800551e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	440a      	add	r2, r1
 8005546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800554e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005566:	6939      	ldr	r1, [r7, #16]
 8005568:	0148      	lsls	r0, r1, #5
 800556a:	6979      	ldr	r1, [r7, #20]
 800556c:	4401      	add	r1, r0
 800556e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005572:	4313      	orrs	r3, r2
 8005574:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d10d      	bne.n	8005598 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	68d9      	ldr	r1, [r3, #12]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	460a      	mov	r2, r1
 8005596:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b089      	sub	sp, #36	; 0x24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	4611      	mov	r1, r2
 80055d2:	461a      	mov	r2, r3
 80055d4:	460b      	mov	r3, r1
 80055d6:	71fb      	strb	r3, [r7, #7]
 80055d8:	4613      	mov	r3, r2
 80055da:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80055e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11a      	bne.n	8005622 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055ec:	88bb      	ldrh	r3, [r7, #4]
 80055ee:	3303      	adds	r3, #3
 80055f0:	089b      	lsrs	r3, r3, #2
 80055f2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055f4:	2300      	movs	r3, #0
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	e00f      	b.n	800561a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	031a      	lsls	r2, r3, #12
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	4413      	add	r3, r2
 8005602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005606:	461a      	mov	r2, r3
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3304      	adds	r3, #4
 8005612:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	3301      	adds	r3, #1
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	429a      	cmp	r2, r3
 8005620:	d3eb      	bcc.n	80055fa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3724      	adds	r7, #36	; 0x24
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005630:	b480      	push	{r7}
 8005632:	b089      	sub	sp, #36	; 0x24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	3303      	adds	r3, #3
 800564a:	089b      	lsrs	r3, r3, #2
 800564c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800564e:	2300      	movs	r3, #0
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e00b      	b.n	800566c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	3304      	adds	r3, #4
 8005664:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	3301      	adds	r3, #1
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	429a      	cmp	r2, r3
 8005672:	d3ef      	bcc.n	8005654 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005674:	69fb      	ldr	r3, [r7, #28]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3724      	adds	r7, #36	; 0x24
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	785b      	ldrb	r3, [r3, #1]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d12c      	bne.n	80056f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	db12      	blt.n	80056d6 <USB_EPSetStall+0x54>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00f      	beq.n	80056d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e02b      	b.n	8005750 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	db12      	blt.n	8005730 <USB_EPSetStall+0xae>
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00f      	beq.n	8005730 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800572e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	440a      	add	r2, r1
 8005746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800574a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800574e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	785b      	ldrb	r3, [r3, #1]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d128      	bne.n	80057cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005798:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	78db      	ldrb	r3, [r3, #3]
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d003      	beq.n	80057aa <USB_EPClearStall+0x4c>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	78db      	ldrb	r3, [r3, #3]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d138      	bne.n	800581c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e027      	b.n	800581c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	78db      	ldrb	r3, [r3, #3]
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d003      	beq.n	80057fc <USB_EPClearStall+0x9e>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	78db      	ldrb	r3, [r3, #3]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d10f      	bne.n	800581c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	460b      	mov	r3, r1
 8005834:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005848:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800584c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800585e:	68f9      	ldr	r1, [r7, #12]
 8005860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005864:	4313      	orrs	r3, r2
 8005866:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005876:	b480      	push	{r7}
 8005878:	b085      	sub	sp, #20
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005890:	f023 0303 	bic.w	r3, r3, #3
 8005894:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a4:	f023 0302 	bic.w	r3, r3, #2
 80058a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e6:	f043 0302 	orr.w	r3, r3, #2
 80058ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4013      	ands	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005912:	68fb      	ldr	r3, [r7, #12]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	0c1b      	lsrs	r3, r3, #16
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	4013      	ands	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	b29b      	uxth	r3, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	4013      	ands	r3, r2
 80059b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059b6:	68bb      	ldr	r3, [r7, #8]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	fa22 f303 	lsr.w	r3, r2, r3
 80059f4:	01db      	lsls	r3, r3, #7
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a12:	68bb      	ldr	r3, [r7, #8]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a5a:	f023 0307 	bic.w	r3, r3, #7
 8005a5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	333c      	adds	r3, #60	; 0x3c
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <USB_EP0_OutStart+0xb8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d90a      	bls.n	8005abe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab8:	d101      	bne.n	8005abe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	e037      	b.n	8005b2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aec:	f043 0318 	orr.w	r3, r3, #24
 8005af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b06:	7afb      	ldrb	r3, [r7, #11]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d10f      	bne.n	8005b2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b12:	461a      	mov	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	4f54300a 	.word	0x4f54300a

08005b40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <USB_CoreReset+0x64>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d901      	bls.n	8005b5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e01b      	b.n	8005b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	daf2      	bge.n	8005b4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f043 0201 	orr.w	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <USB_CoreReset+0x64>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d901      	bls.n	8005b88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e006      	b.n	8005b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d0f0      	beq.n	8005b76 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	00030d40 	.word	0x00030d40

08005ba8 <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	USBD_HID_HandleTypeDef *hhid;

	hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005bb4:	2010      	movs	r0, #16
 8005bb6:	f001 fee3 	bl	8007980 <malloc>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <USBD_HID_Init+0x28>
	{
		pdev->pClassData = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		return (uint8_t)USBD_EMEM;
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e01b      	b.n	8005c08 <USBD_HID_Init+0x60>
	}

	pdev->pClassData = (void *)hhid;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	7c1b      	ldrb	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d103      	bne.n	8005be8 <USBD_HID_Init+0x40>
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2207      	movs	r2, #7
 8005be4:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005be6:	e002      	b.n	8005bee <USBD_HID_Init+0x46>
	}
	else   /* LOW and FULL-speed endpoints */
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	220a      	movs	r2, #10
 8005bec:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	/* Open EP IN */
	(void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005bee:	2304      	movs	r3, #4
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	2181      	movs	r1, #129	; 0x81
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 fd5c 	bl	80076b2 <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	871a      	strh	r2, [r3, #56]	; 0x38

	hhid->state = HID_IDLE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USBD_HID_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	/* Close HID EPs */
	(void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005c1c:	2181      	movs	r1, #129	; 0x81
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 fd6d 	bl	80076fe <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	871a      	strh	r2, [r3, #56]	; 0x38
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	875a      	strh	r2, [r3, #58]	; 0x3a

	/* FRee allocated memory */
	if (pdev->pClassData != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <USBD_HID_DeInit+0x3e>
	{
		(void)USBD_free(pdev->pClassData);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c40:	4618      	mov	r0, r3
 8005c42:	f001 fea5 	bl	8007990 <free>
		pdev->pClassData = NULL;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t)USBD_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c68:	60fb      	str	r3, [r7, #12]
	USBD_StatusTypeDef ret = USBD_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	817b      	strh	r3, [r7, #10]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d045      	beq.n	8005d0a <USBD_HID_Setup+0xb2>
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	f040 80d4 	bne.w	8005e2c <USBD_HID_Setup+0x1d4>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	3b02      	subs	r3, #2
 8005c8a:	2b09      	cmp	r3, #9
 8005c8c:	d835      	bhi.n	8005cfa <USBD_HID_Setup+0xa2>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <USBD_HID_Setup+0x3c>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005ceb 	.word	0x08005ceb
 8005c98:	08005ccb 	.word	0x08005ccb
 8005c9c:	08005cfb 	.word	0x08005cfb
 8005ca0:	08005cfb 	.word	0x08005cfb
 8005ca4:	08005cfb 	.word	0x08005cfb
 8005ca8:	08005cfb 	.word	0x08005cfb
 8005cac:	08005cfb 	.word	0x08005cfb
 8005cb0:	08005cfb 	.word	0x08005cfb
 8005cb4:	08005cd9 	.word	0x08005cd9
 8005cb8:	08005cbd 	.word	0x08005cbd
		{
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	885b      	ldrh	r3, [r3, #2]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	601a      	str	r2, [r3, #0]
			break;
 8005cc8:	e01e      	b.n	8005d08 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f001 f9b4 	bl	800703e <USBD_CtlSendData>
			break;
 8005cd6:	e017      	b.n	8005d08 <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	885b      	ldrh	r3, [r3, #2]
 8005cdc:	0a1b      	lsrs	r3, r3, #8
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	605a      	str	r2, [r3, #4]
			break;
 8005ce8:	e00e      	b.n	8005d08 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3304      	adds	r3, #4
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f001 f9a3 	bl	800703e <USBD_CtlSendData>
			break;
 8005cf8:	e006      	b.n	8005d08 <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f001 f92d 	bl	8006f5c <USBD_CtlError>
			ret = USBD_FAIL;
 8005d02:	2303      	movs	r3, #3
 8005d04:	75fb      	strb	r3, [r7, #23]
			break;
 8005d06:	bf00      	nop
		}
		break;
 8005d08:	e097      	b.n	8005e3a <USBD_HID_Setup+0x1e2>
		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	2b0b      	cmp	r3, #11
 8005d10:	f200 8083 	bhi.w	8005e1a <USBD_HID_Setup+0x1c2>
 8005d14:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <USBD_HID_Setup+0xc4>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d4d 	.word	0x08005d4d
 8005d20:	08005e29 	.word	0x08005e29
 8005d24:	08005e1b 	.word	0x08005e1b
 8005d28:	08005e1b 	.word	0x08005e1b
 8005d2c:	08005e1b 	.word	0x08005e1b
 8005d30:	08005e1b 	.word	0x08005e1b
 8005d34:	08005d75 	.word	0x08005d75
 8005d38:	08005e1b 	.word	0x08005e1b
 8005d3c:	08005e1b 	.word	0x08005e1b
 8005d40:	08005e1b 	.word	0x08005e1b
 8005d44:	08005dcd 	.word	0x08005dcd
 8005d48:	08005df5 	.word	0x08005df5
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d107      	bne.n	8005d66 <USBD_HID_Setup+0x10e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d56:	f107 030a 	add.w	r3, r7, #10
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 f96d 	bl	800703e <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8005d64:	e061      	b.n	8005e2a <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 f8f7 	bl	8006f5c <USBD_CtlError>
					ret = USBD_FAIL;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	75fb      	strb	r3, [r7, #23]
				break;
 8005d72:	e05a      	b.n	8005e2a <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_DESCRIPTOR:
				if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	885b      	ldrh	r3, [r3, #2]
 8005d78:	0a1b      	lsrs	r3, r3, #8
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b22      	cmp	r3, #34	; 0x22
 8005d7e:	d108      	bne.n	8005d92 <USBD_HID_Setup+0x13a>
				{
					len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	88db      	ldrh	r3, [r3, #6]
 8005d84:	2b3f      	cmp	r3, #63	; 0x3f
 8005d86:	bf28      	it	cs
 8005d88:	233f      	movcs	r3, #63	; 0x3f
 8005d8a:	82bb      	strh	r3, [r7, #20]
					pbuf = HID_MOUSE_ReportDesc;
 8005d8c:	4b2d      	ldr	r3, [pc, #180]	; (8005e44 <USBD_HID_Setup+0x1ec>)
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	e015      	b.n	8005dbe <USBD_HID_Setup+0x166>
				}
				else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	885b      	ldrh	r3, [r3, #2]
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b21      	cmp	r3, #33	; 0x21
 8005d9c:	d108      	bne.n	8005db0 <USBD_HID_Setup+0x158>
				{
					pbuf = USBD_HID_Desc;
 8005d9e:	4b2a      	ldr	r3, [pc, #168]	; (8005e48 <USBD_HID_Setup+0x1f0>)
 8005da0:	613b      	str	r3, [r7, #16]
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	88db      	ldrh	r3, [r3, #6]
 8005da6:	2b09      	cmp	r3, #9
 8005da8:	bf28      	it	cs
 8005daa:	2309      	movcs	r3, #9
 8005dac:	82bb      	strh	r3, [r7, #20]
 8005dae:	e006      	b.n	8005dbe <USBD_HID_Setup+0x166>
				}
				else
				{
					USBD_CtlError(pdev, req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f001 f8d2 	bl	8006f5c <USBD_CtlError>
					ret = USBD_FAIL;
 8005db8:	2303      	movs	r3, #3
 8005dba:	75fb      	strb	r3, [r7, #23]
					break;
 8005dbc:	e035      	b.n	8005e2a <USBD_HID_Setup+0x1d2>
				}
				(void)USBD_CtlSendData(pdev, pbuf, len);
 8005dbe:	8abb      	ldrh	r3, [r7, #20]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6939      	ldr	r1, [r7, #16]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 f93a 	bl	800703e <USBD_CtlSendData>
				break;
 8005dca:	e02e      	b.n	8005e2a <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d107      	bne.n	8005de6 <USBD_HID_Setup+0x18e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	2201      	movs	r2, #1
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 f92d 	bl	800703e <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8005de4:	e021      	b.n	8005e2a <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 f8b7 	bl	8006f5c <USBD_CtlError>
					ret = USBD_FAIL;
 8005dee:	2303      	movs	r3, #3
 8005df0:	75fb      	strb	r3, [r7, #23]
				break;
 8005df2:	e01a      	b.n	8005e2a <USBD_HID_Setup+0x1d2>

			case USB_REQ_SET_INTERFACE:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d106      	bne.n	8005e0c <USBD_HID_Setup+0x1b4>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	885b      	ldrh	r3, [r3, #2]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	609a      	str	r2, [r3, #8]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8005e0a:	e00e      	b.n	8005e2a <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 f8a4 	bl	8006f5c <USBD_CtlError>
					ret = USBD_FAIL;
 8005e14:	2303      	movs	r3, #3
 8005e16:	75fb      	strb	r3, [r7, #23]
				break;
 8005e18:	e007      	b.n	8005e2a <USBD_HID_Setup+0x1d2>

			case USB_REQ_CLEAR_FEATURE:
				break;

			default:
				USBD_CtlError(pdev, req);
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f001 f89d 	bl	8006f5c <USBD_CtlError>
				ret = USBD_FAIL;
 8005e22:	2303      	movs	r3, #3
 8005e24:	75fb      	strb	r3, [r7, #23]
				break;
 8005e26:	e000      	b.n	8005e2a <USBD_HID_Setup+0x1d2>
				break;
 8005e28:	bf00      	nop
			}
			break;
 8005e2a:	e006      	b.n	8005e3a <USBD_HID_Setup+0x1e2>

			default:
				USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 f894 	bl	8006f5c <USBD_CtlError>
				ret = USBD_FAIL;
 8005e34:	2303      	movs	r3, #3
 8005e36:	75fb      	strb	r3, [r7, #23]
				break;
 8005e38:	bf00      	nop
	}

	return (uint8_t)ret;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	200000d0 	.word	0x200000d0
 8005e48:	200000b8 	.word	0x200000b8

08005e4c <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	80fb      	strh	r3, [r7, #6]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e60:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d10c      	bne.n	8005e86 <USBD_HID_SendReport+0x3a>
	{
		if (hhid->state == HID_IDLE)
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	7b1b      	ldrb	r3, [r3, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d108      	bne.n	8005e86 <USBD_HID_SendReport+0x3a>
		{
			hhid->state = HID_BUSY;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2201      	movs	r2, #1
 8005e78:	731a      	strb	r2, [r3, #12]
			(void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	2181      	movs	r1, #129	; 0x81
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f001 fce4 	bl	800784e <USBD_LL_Transmit>
		}
	}

	return (uint8_t)USBD_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2222      	movs	r2, #34	; 0x22
 8005e9c:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgFSDesc;
 8005e9e:	4b03      	ldr	r3, [pc, #12]	; (8005eac <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	2000004c 	.word	0x2000004c

08005eb0 <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2222      	movs	r2, #34	; 0x22
 8005ebc:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgHSDesc;
 8005ebe:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	20000070 	.word	0x20000070

08005ed0 <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2222      	movs	r2, #34	; 0x22
 8005edc:	801a      	strh	r2, [r3, #0]

	return USBD_HID_OtherSpeedCfgDesc;
 8005ede:	4b03      	ldr	r3, [pc, #12]	; (8005eec <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	20000094 	.word	0x20000094

08005ef0 <USBD_HID_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
	UNUSED(epnum);
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f02:	2200      	movs	r2, #0
 8005f04:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	220a      	movs	r2, #10
 8005f20:	801a      	strh	r2, [r3, #0]

	return USBD_HID_DeviceQualifierDesc;
 8005f22:	4b03      	ldr	r3, [pc, #12]	; (8005f30 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	200000c4 	.word	0x200000c4

08005f34 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e025      	b.n	8005f98 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	79fa      	ldrb	r2, [r7, #7]
 8005f8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f001 fb29 	bl	80075e4 <USBD_LL_Init>
 8005f92:	4603      	mov	r3, r0
 8005f94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e010      	b.n	8005fda <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	f107 020e 	add.w	r2, r7, #14
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4798      	blx	r3
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 fb46 	bl	800767c <USBD_LL_Start>
 8005ff0:	4603      	mov	r3, r0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800601c:	2303      	movs	r3, #3
 800601e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	4611      	mov	r1, r2
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
 800603a:	4603      	mov	r3, r0
 800603c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800603e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	78fa      	ldrb	r2, [r7, #3]
 8006068:	4611      	mov	r1, r2
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
  }

  return USBD_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f000 ff2c 	bl	8006ee8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060ac:	f003 031f 	and.w	r3, r3, #31
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d00e      	beq.n	80060d2 <USBD_LL_SetupStage+0x5a>
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d302      	bcc.n	80060be <USBD_LL_SetupStage+0x46>
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d014      	beq.n	80060e6 <USBD_LL_SetupStage+0x6e>
 80060bc:	e01d      	b.n	80060fa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa18 	bl	80064fc <USBD_StdDevReq>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]
      break;
 80060d0:	e020      	b.n	8006114 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fa7c 	bl	80065d8 <USBD_StdItfReq>
 80060e0:	4603      	mov	r3, r0
 80060e2:	73fb      	strb	r3, [r7, #15]
      break;
 80060e4:	e016      	b.n	8006114 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fab8 	bl	8006664 <USBD_StdEPReq>
 80060f4:	4603      	mov	r3, r0
 80060f6:	73fb      	strb	r3, [r7, #15]
      break;
 80060f8:	e00c      	b.n	8006114 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006100:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006104:	b2db      	uxtb	r3, r3
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f001 fb17 	bl	800773c <USBD_LL_StallEP>
 800610e:	4603      	mov	r3, r0
 8006110:	73fb      	strb	r3, [r7, #15]
      break;
 8006112:	bf00      	nop
  }

  return ret;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b086      	sub	sp, #24
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	460b      	mov	r3, r1
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800612c:	7afb      	ldrb	r3, [r7, #11]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d137      	bne.n	80061a2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006138:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006140:	2b03      	cmp	r3, #3
 8006142:	d14a      	bne.n	80061da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	429a      	cmp	r2, r3
 800614e:	d913      	bls.n	8006178 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	1ad2      	subs	r2, r2, r3
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	4293      	cmp	r3, r2
 8006168:	bf28      	it	cs
 800616a:	4613      	movcs	r3, r2
 800616c:	461a      	mov	r2, r3
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 ff90 	bl	8007096 <USBD_CtlContinueRx>
 8006176:	e030      	b.n	80061da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800618a:	2b03      	cmp	r3, #3
 800618c:	d105      	bne.n	800619a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 ff8c 	bl	80070b8 <USBD_CtlSendStatus>
 80061a0:	e01b      	b.n	80061da <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d013      	beq.n	80061d6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d10e      	bne.n	80061d6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	7afa      	ldrb	r2, [r7, #11]
 80061c2:	4611      	mov	r1, r2
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	4798      	blx	r3
 80061c8:	4603      	mov	r3, r0
 80061ca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	e002      	b.n	80061dc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e000      	b.n	80061dc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	460b      	mov	r3, r1
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061f2:	7afb      	ldrb	r3, [r7, #11]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d16a      	bne.n	80062ce <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3314      	adds	r3, #20
 80061fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006204:	2b02      	cmp	r3, #2
 8006206:	d155      	bne.n	80062b4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	429a      	cmp	r2, r3
 8006212:	d914      	bls.n	800623e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	1ad2      	subs	r2, r2, r3
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	461a      	mov	r2, r3
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 ff22 	bl	8007074 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006230:	2300      	movs	r3, #0
 8006232:	2200      	movs	r2, #0
 8006234:	2100      	movs	r1, #0
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f001 fb2a 	bl	8007890 <USBD_LL_PrepareReceive>
 800623c:	e03a      	b.n	80062b4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	429a      	cmp	r2, r3
 8006248:	d11c      	bne.n	8006284 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006252:	429a      	cmp	r2, r3
 8006254:	d316      	bcc.n	8006284 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006260:	429a      	cmp	r2, r3
 8006262:	d20f      	bcs.n	8006284 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006264:	2200      	movs	r2, #0
 8006266:	2100      	movs	r1, #0
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 ff03 	bl	8007074 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006276:	2300      	movs	r3, #0
 8006278:	2200      	movs	r2, #0
 800627a:	2100      	movs	r1, #0
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f001 fb07 	bl	8007890 <USBD_LL_PrepareReceive>
 8006282:	e017      	b.n	80062b4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00a      	beq.n	80062a6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006296:	2b03      	cmp	r3, #3
 8006298:	d105      	bne.n	80062a6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062a6:	2180      	movs	r1, #128	; 0x80
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f001 fa47 	bl	800773c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 ff15 	bl	80070de <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d123      	bne.n	8006306 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff fe9b 	bl	8005ffa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062cc:	e01b      	b.n	8006306 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d013      	beq.n	8006302 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d10e      	bne.n	8006302 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	7afa      	ldrb	r2, [r7, #11]
 80062ee:	4611      	mov	r1, r2
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	4798      	blx	r3
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	e002      	b.n	8006308 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006302:	2303      	movs	r3, #3
 8006304:	e000      	b.n	8006308 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800633c:	2b00      	cmp	r3, #0
 800633e:	d009      	beq.n	8006354 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6852      	ldr	r2, [r2, #4]
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	4611      	mov	r1, r2
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006354:	2340      	movs	r3, #64	; 0x40
 8006356:	2200      	movs	r2, #0
 8006358:	2100      	movs	r1, #0
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 f9a9 	bl	80076b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2240      	movs	r2, #64	; 0x40
 800636c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006370:	2340      	movs	r3, #64	; 0x40
 8006372:	2200      	movs	r2, #0
 8006374:	2180      	movs	r1, #128	; 0x80
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 f99b 	bl	80076b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2240      	movs	r2, #64	; 0x40
 8006386:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2204      	movs	r2, #4
 80063ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d105      	bne.n	80063fa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006416:	2b03      	cmp	r3, #3
 8006418:	d10b      	bne.n	8006432 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	460b      	mov	r3, r1
 8006460:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d009      	beq.n	80064b4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6852      	ldr	r2, [r2, #4]
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	4611      	mov	r1, r2
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	4798      	blx	r3
  }

  return USBD_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80064be:	b480      	push	{r7}
 80064c0:	b087      	sub	sp, #28
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	3301      	adds	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064dc:	8a3b      	ldrh	r3, [r7, #16]
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	b21a      	sxth	r2, r3
 80064e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	b21b      	sxth	r3, r3
 80064ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064ec:	89fb      	ldrh	r3, [r7, #14]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
	...

080064fc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006512:	2b20      	cmp	r3, #32
 8006514:	d004      	beq.n	8006520 <USBD_StdDevReq+0x24>
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	d002      	beq.n	8006520 <USBD_StdDevReq+0x24>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <USBD_StdDevReq+0x38>
 800651e:	e050      	b.n	80065c2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
 800652e:	4603      	mov	r3, r0
 8006530:	73fb      	strb	r3, [r7, #15]
    break;
 8006532:	e04b      	b.n	80065cc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b09      	cmp	r3, #9
 800653a:	d83c      	bhi.n	80065b6 <USBD_StdDevReq+0xba>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <USBD_StdDevReq+0x48>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	08006599 	.word	0x08006599
 8006548:	080065ad 	.word	0x080065ad
 800654c:	080065b7 	.word	0x080065b7
 8006550:	080065a3 	.word	0x080065a3
 8006554:	080065b7 	.word	0x080065b7
 8006558:	08006577 	.word	0x08006577
 800655c:	0800656d 	.word	0x0800656d
 8006560:	080065b7 	.word	0x080065b7
 8006564:	0800658f 	.word	0x0800658f
 8006568:	08006581 	.word	0x08006581
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f9ce 	bl	8006910 <USBD_GetDescriptor>
      break;
 8006574:	e024      	b.n	80065c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fb33 	bl	8006be4 <USBD_SetAddress>
      break;
 800657e:	e01f      	b.n	80065c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fb70 	bl	8006c68 <USBD_SetConfig>
 8006588:	4603      	mov	r3, r0
 800658a:	73fb      	strb	r3, [r7, #15]
      break;
 800658c:	e018      	b.n	80065c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fc0d 	bl	8006db0 <USBD_GetConfig>
      break;
 8006596:	e013      	b.n	80065c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fc3c 	bl	8006e18 <USBD_GetStatus>
      break;
 80065a0:	e00e      	b.n	80065c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fc6a 	bl	8006e7e <USBD_SetFeature>
      break;
 80065aa:	e009      	b.n	80065c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fc79 	bl	8006ea6 <USBD_ClrFeature>
      break;
 80065b4:	e004      	b.n	80065c0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fccf 	bl	8006f5c <USBD_CtlError>
      break;
 80065be:	bf00      	nop
    }
    break;
 80065c0:	e004      	b.n	80065cc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fcc9 	bl	8006f5c <USBD_CtlError>
    break;
 80065ca:	bf00      	nop
  }

  return ret;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop

080065d8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d003      	beq.n	80065fa <USBD_StdItfReq+0x22>
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	d001      	beq.n	80065fa <USBD_StdItfReq+0x22>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d12a      	bne.n	8006650 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006600:	3b01      	subs	r3, #1
 8006602:	2b02      	cmp	r3, #2
 8006604:	d81d      	bhi.n	8006642 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	889b      	ldrh	r3, [r3, #4]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b01      	cmp	r3, #1
 800660e:	d813      	bhi.n	8006638 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
 800661e:	4603      	mov	r3, r0
 8006620:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	88db      	ldrh	r3, [r3, #6]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d110      	bne.n	800664c <USBD_StdItfReq+0x74>
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10d      	bne.n	800664c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fd41 	bl	80070b8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006636:	e009      	b.n	800664c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fc8e 	bl	8006f5c <USBD_CtlError>
      break;
 8006640:	e004      	b.n	800664c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fc89 	bl	8006f5c <USBD_CtlError>
      break;
 800664a:	e000      	b.n	800664e <USBD_StdItfReq+0x76>
      break;
 800664c:	bf00      	nop
    }
    break;
 800664e:	e004      	b.n	800665a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fc82 	bl	8006f5c <USBD_CtlError>
    break;
 8006658:	bf00      	nop
  }

  return ret;
 800665a:	7bfb      	ldrb	r3, [r7, #15]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	889b      	ldrh	r3, [r3, #4]
 8006676:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006680:	2b20      	cmp	r3, #32
 8006682:	d004      	beq.n	800668e <USBD_StdEPReq+0x2a>
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d002      	beq.n	800668e <USBD_StdEPReq+0x2a>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <USBD_StdEPReq+0x3e>
 800668c:	e135      	b.n	80068fa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	4798      	blx	r3
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]
    break;
 80066a0:	e130      	b.n	8006904 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d03e      	beq.n	8006728 <USBD_StdEPReq+0xc4>
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d002      	beq.n	80066b4 <USBD_StdEPReq+0x50>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d077      	beq.n	80067a2 <USBD_StdEPReq+0x13e>
 80066b2:	e11c      	b.n	80068ee <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d002      	beq.n	80066c4 <USBD_StdEPReq+0x60>
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d015      	beq.n	80066ee <USBD_StdEPReq+0x8a>
 80066c2:	e02b      	b.n	800671c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00c      	beq.n	80066e4 <USBD_StdEPReq+0x80>
 80066ca:	7bbb      	ldrb	r3, [r7, #14]
 80066cc:	2b80      	cmp	r3, #128	; 0x80
 80066ce:	d009      	beq.n	80066e4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 f831 	bl	800773c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066da:	2180      	movs	r1, #128	; 0x80
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 f82d 	bl	800773c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80066e2:	e020      	b.n	8006726 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fc38 	bl	8006f5c <USBD_CtlError>
        break;
 80066ec:	e01b      	b.n	8006726 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	885b      	ldrh	r3, [r3, #2]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10e      	bne.n	8006714 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00b      	beq.n	8006714 <USBD_StdEPReq+0xb0>
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	2b80      	cmp	r3, #128	; 0x80
 8006700:	d008      	beq.n	8006714 <USBD_StdEPReq+0xb0>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	88db      	ldrh	r3, [r3, #6]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800670a:	7bbb      	ldrb	r3, [r7, #14]
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 f814 	bl	800773c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fccf 	bl	80070b8 <USBD_CtlSendStatus>

        break;
 800671a:	e004      	b.n	8006726 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fc1c 	bl	8006f5c <USBD_CtlError>
        break;
 8006724:	bf00      	nop
      }
      break;
 8006726:	e0e7      	b.n	80068f8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800672e:	2b02      	cmp	r3, #2
 8006730:	d002      	beq.n	8006738 <USBD_StdEPReq+0xd4>
 8006732:	2b03      	cmp	r3, #3
 8006734:	d015      	beq.n	8006762 <USBD_StdEPReq+0xfe>
 8006736:	e02d      	b.n	8006794 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006738:	7bbb      	ldrb	r3, [r7, #14]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00c      	beq.n	8006758 <USBD_StdEPReq+0xf4>
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	2b80      	cmp	r3, #128	; 0x80
 8006742:	d009      	beq.n	8006758 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fff7 	bl	800773c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800674e:	2180      	movs	r1, #128	; 0x80
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fff3 	bl	800773c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006756:	e023      	b.n	80067a0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fbfe 	bl	8006f5c <USBD_CtlError>
        break;
 8006760:	e01e      	b.n	80067a0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	885b      	ldrh	r3, [r3, #2]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d119      	bne.n	800679e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fffe 	bl	800777a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fc9a 	bl	80070b8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
        }
        break;
 8006792:	e004      	b.n	800679e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fbe0 	bl	8006f5c <USBD_CtlError>
        break;
 800679c:	e000      	b.n	80067a0 <USBD_StdEPReq+0x13c>
        break;
 800679e:	bf00      	nop
      }
      break;
 80067a0:	e0aa      	b.n	80068f8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d002      	beq.n	80067b2 <USBD_StdEPReq+0x14e>
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d032      	beq.n	8006816 <USBD_StdEPReq+0x1b2>
 80067b0:	e097      	b.n	80068e2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <USBD_StdEPReq+0x164>
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	2b80      	cmp	r3, #128	; 0x80
 80067bc:	d004      	beq.n	80067c8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fbcb 	bl	8006f5c <USBD_CtlError>
          break;
 80067c6:	e091      	b.n	80068ec <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	da0b      	bge.n	80067e8 <USBD_StdEPReq+0x184>
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	3310      	adds	r3, #16
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	4413      	add	r3, r2
 80067e4:	3304      	adds	r3, #4
 80067e6:	e00b      	b.n	8006800 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	4413      	add	r3, r2
 80067fe:	3304      	adds	r3, #4
 8006800:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2202      	movs	r2, #2
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fc15 	bl	800703e <USBD_CtlSendData>
        break;
 8006814:	e06a      	b.n	80068ec <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800681a:	2b00      	cmp	r3, #0
 800681c:	da11      	bge.n	8006842 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	f003 020f 	and.w	r2, r3, #15
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	3324      	adds	r3, #36	; 0x24
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d117      	bne.n	8006868 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fb8e 	bl	8006f5c <USBD_CtlError>
            break;
 8006840:	e054      	b.n	80068ec <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	f003 020f 	and.w	r2, r3, #15
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fb7b 	bl	8006f5c <USBD_CtlError>
            break;
 8006866:	e041      	b.n	80068ec <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800686c:	2b00      	cmp	r3, #0
 800686e:	da0b      	bge.n	8006888 <USBD_StdEPReq+0x224>
 8006870:	7bbb      	ldrb	r3, [r7, #14]
 8006872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	3310      	adds	r3, #16
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	4413      	add	r3, r2
 8006884:	3304      	adds	r3, #4
 8006886:	e00b      	b.n	80068a0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	3304      	adds	r3, #4
 80068a0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068a2:	7bbb      	ldrb	r3, [r7, #14]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <USBD_StdEPReq+0x24a>
 80068a8:	7bbb      	ldrb	r3, [r7, #14]
 80068aa:	2b80      	cmp	r3, #128	; 0x80
 80068ac:	d103      	bne.n	80068b6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	e00e      	b.n	80068d4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 ff7c 	bl	80077b8 <USBD_LL_IsStallEP>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2201      	movs	r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	e002      	b.n	80068d4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2202      	movs	r2, #2
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fbaf 	bl	800703e <USBD_CtlSendData>
          break;
 80068e0:	e004      	b.n	80068ec <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fb39 	bl	8006f5c <USBD_CtlError>
        break;
 80068ea:	bf00      	nop
      }
      break;
 80068ec:	e004      	b.n	80068f8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fb33 	bl	8006f5c <USBD_CtlError>
      break;
 80068f6:	bf00      	nop
    }
    break;
 80068f8:	e004      	b.n	8006904 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fb2d 	bl	8006f5c <USBD_CtlError>
    break;
 8006902:	bf00      	nop
  }

  return ret;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	885b      	ldrh	r3, [r3, #2]
 800692a:	0a1b      	lsrs	r3, r3, #8
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	2b06      	cmp	r3, #6
 8006932:	f200 8128 	bhi.w	8006b86 <USBD_GetDescriptor+0x276>
 8006936:	a201      	add	r2, pc, #4	; (adr r2, 800693c <USBD_GetDescriptor+0x2c>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	08006959 	.word	0x08006959
 8006940:	08006971 	.word	0x08006971
 8006944:	080069b1 	.word	0x080069b1
 8006948:	08006b87 	.word	0x08006b87
 800694c:	08006b87 	.word	0x08006b87
 8006950:	08006b27 	.word	0x08006b27
 8006954:	08006b53 	.word	0x08006b53
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	7c12      	ldrb	r2, [r2, #16]
 8006964:	f107 0108 	add.w	r1, r7, #8
 8006968:	4610      	mov	r0, r2
 800696a:	4798      	blx	r3
 800696c:	60f8      	str	r0, [r7, #12]
    break;
 800696e:	e112      	b.n	8006b96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	7c1b      	ldrb	r3, [r3, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10d      	bne.n	8006994 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006980:	f107 0208 	add.w	r2, r7, #8
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
 8006988:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3301      	adds	r3, #1
 800698e:	2202      	movs	r2, #2
 8006990:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006992:	e100      	b.n	8006b96 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	f107 0208 	add.w	r2, r7, #8
 80069a0:	4610      	mov	r0, r2
 80069a2:	4798      	blx	r3
 80069a4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3301      	adds	r3, #1
 80069aa:	2202      	movs	r2, #2
 80069ac:	701a      	strb	r2, [r3, #0]
    break;
 80069ae:	e0f2      	b.n	8006b96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	885b      	ldrh	r3, [r3, #2]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	f200 80ac 	bhi.w	8006b14 <USBD_GetDescriptor+0x204>
 80069bc:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <USBD_GetDescriptor+0xb4>)
 80069be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c2:	bf00      	nop
 80069c4:	080069dd 	.word	0x080069dd
 80069c8:	08006a11 	.word	0x08006a11
 80069cc:	08006a45 	.word	0x08006a45
 80069d0:	08006a79 	.word	0x08006a79
 80069d4:	08006aad 	.word	0x08006aad
 80069d8:	08006ae1 	.word	0x08006ae1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	7c12      	ldrb	r2, [r2, #16]
 80069f4:	f107 0108 	add.w	r1, r7, #8
 80069f8:	4610      	mov	r0, r2
 80069fa:	4798      	blx	r3
 80069fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069fe:	e091      	b.n	8006b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 faaa 	bl	8006f5c <USBD_CtlError>
        err++;
 8006a08:	7afb      	ldrb	r3, [r7, #11]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	72fb      	strb	r3, [r7, #11]
      break;
 8006a0e:	e089      	b.n	8006b24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00b      	beq.n	8006a34 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	7c12      	ldrb	r2, [r2, #16]
 8006a28:	f107 0108 	add.w	r1, r7, #8
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	4798      	blx	r3
 8006a30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a32:	e077      	b.n	8006b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa90 	bl	8006f5c <USBD_CtlError>
        err++;
 8006a3c:	7afb      	ldrb	r3, [r7, #11]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	72fb      	strb	r3, [r7, #11]
      break;
 8006a42:	e06f      	b.n	8006b24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	7c12      	ldrb	r2, [r2, #16]
 8006a5c:	f107 0108 	add.w	r1, r7, #8
 8006a60:	4610      	mov	r0, r2
 8006a62:	4798      	blx	r3
 8006a64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a66:	e05d      	b.n	8006b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa76 	bl	8006f5c <USBD_CtlError>
        err++;
 8006a70:	7afb      	ldrb	r3, [r7, #11]
 8006a72:	3301      	adds	r3, #1
 8006a74:	72fb      	strb	r3, [r7, #11]
      break;
 8006a76:	e055      	b.n	8006b24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00b      	beq.n	8006a9c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	7c12      	ldrb	r2, [r2, #16]
 8006a90:	f107 0108 	add.w	r1, r7, #8
 8006a94:	4610      	mov	r0, r2
 8006a96:	4798      	blx	r3
 8006a98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a9a:	e043      	b.n	8006b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fa5c 	bl	8006f5c <USBD_CtlError>
        err++;
 8006aa4:	7afb      	ldrb	r3, [r7, #11]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	72fb      	strb	r3, [r7, #11]
      break;
 8006aaa:	e03b      	b.n	8006b24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	7c12      	ldrb	r2, [r2, #16]
 8006ac4:	f107 0108 	add.w	r1, r7, #8
 8006ac8:	4610      	mov	r0, r2
 8006aca:	4798      	blx	r3
 8006acc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ace:	e029      	b.n	8006b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fa42 	bl	8006f5c <USBD_CtlError>
        err++;
 8006ad8:	7afb      	ldrb	r3, [r7, #11]
 8006ada:	3301      	adds	r3, #1
 8006adc:	72fb      	strb	r3, [r7, #11]
      break;
 8006ade:	e021      	b.n	8006b24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00b      	beq.n	8006b04 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	7c12      	ldrb	r2, [r2, #16]
 8006af8:	f107 0108 	add.w	r1, r7, #8
 8006afc:	4610      	mov	r0, r2
 8006afe:	4798      	blx	r3
 8006b00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b02:	e00f      	b.n	8006b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa28 	bl	8006f5c <USBD_CtlError>
        err++;
 8006b0c:	7afb      	ldrb	r3, [r7, #11]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	72fb      	strb	r3, [r7, #11]
      break;
 8006b12:	e007      	b.n	8006b24 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fa20 	bl	8006f5c <USBD_CtlError>
      err++;
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006b22:	bf00      	nop
    }
    break;
 8006b24:	e037      	b.n	8006b96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	7c1b      	ldrb	r3, [r3, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b36:	f107 0208 	add.w	r2, r7, #8
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	4798      	blx	r3
 8006b3e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b40:	e029      	b.n	8006b96 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fa09 	bl	8006f5c <USBD_CtlError>
      err++;
 8006b4a:	7afb      	ldrb	r3, [r7, #11]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	72fb      	strb	r3, [r7, #11]
    break;
 8006b50:	e021      	b.n	8006b96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7c1b      	ldrb	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10d      	bne.n	8006b76 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	f107 0208 	add.w	r2, r7, #8
 8006b66:	4610      	mov	r0, r2
 8006b68:	4798      	blx	r3
 8006b6a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	2207      	movs	r2, #7
 8006b72:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b74:	e00f      	b.n	8006b96 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f9ef 	bl	8006f5c <USBD_CtlError>
      err++;
 8006b7e:	7afb      	ldrb	r3, [r7, #11]
 8006b80:	3301      	adds	r3, #1
 8006b82:	72fb      	strb	r3, [r7, #11]
    break;
 8006b84:	e007      	b.n	8006b96 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f9e7 	bl	8006f5c <USBD_CtlError>
    err++;
 8006b8e:	7afb      	ldrb	r3, [r7, #11]
 8006b90:	3301      	adds	r3, #1
 8006b92:	72fb      	strb	r3, [r7, #11]
    break;
 8006b94:	bf00      	nop
  }

  if (err != 0U)
 8006b96:	7afb      	ldrb	r3, [r7, #11]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d11e      	bne.n	8006bda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	88db      	ldrh	r3, [r3, #6]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d016      	beq.n	8006bd2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006ba4:	893b      	ldrh	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00e      	beq.n	8006bc8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	88da      	ldrh	r2, [r3, #6]
 8006bae:	893b      	ldrh	r3, [r7, #8]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	bf28      	it	cs
 8006bb4:	4613      	movcs	r3, r2
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bba:	893b      	ldrh	r3, [r7, #8]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fa3c 	bl	800703e <USBD_CtlSendData>
 8006bc6:	e009      	b.n	8006bdc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f9c6 	bl	8006f5c <USBD_CtlError>
 8006bd0:	e004      	b.n	8006bdc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa70 	bl	80070b8 <USBD_CtlSendStatus>
 8006bd8:	e000      	b.n	8006bdc <USBD_GetDescriptor+0x2cc>
    return;
 8006bda:	bf00      	nop
    }
  }
}
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop

08006be4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	889b      	ldrh	r3, [r3, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d130      	bne.n	8006c58 <USBD_SetAddress+0x74>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	88db      	ldrh	r3, [r3, #6]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d12c      	bne.n	8006c58 <USBD_SetAddress+0x74>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	885b      	ldrh	r3, [r3, #2]
 8006c02:	2b7f      	cmp	r3, #127	; 0x7f
 8006c04:	d828      	bhi.n	8006c58 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	885b      	ldrh	r3, [r3, #2]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d104      	bne.n	8006c26 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f99c 	bl	8006f5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c24:	e01c      	b.n	8006c60 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7bfa      	ldrb	r2, [r7, #15]
 8006c2a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fdec 	bl	8007810 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fa3d 	bl	80070b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4c:	e008      	b.n	8006c60 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c56:	e003      	b.n	8006c60 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f97e 	bl	8006f5c <USBD_CtlError>
  }
}
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	885b      	ldrh	r3, [r3, #2]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	4b4b      	ldr	r3, [pc, #300]	; (8006dac <USBD_SetConfig+0x144>)
 8006c7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c80:	4b4a      	ldr	r3, [pc, #296]	; (8006dac <USBD_SetConfig+0x144>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d905      	bls.n	8006c94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f966 	bl	8006f5c <USBD_CtlError>
    return USBD_FAIL;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e087      	b.n	8006da4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d002      	beq.n	8006ca4 <USBD_SetConfig+0x3c>
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d025      	beq.n	8006cee <USBD_SetConfig+0x86>
 8006ca2:	e071      	b.n	8006d88 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006ca4:	4b41      	ldr	r3, [pc, #260]	; (8006dac <USBD_SetConfig+0x144>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01c      	beq.n	8006ce6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006cac:	4b3f      	ldr	r3, [pc, #252]	; (8006dac <USBD_SetConfig+0x144>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cb6:	4b3d      	ldr	r3, [pc, #244]	; (8006dac <USBD_SetConfig+0x144>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff f9a7 	bl	8006010 <USBD_SetClassConfig>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f944 	bl	8006f5c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006cd4:	e065      	b.n	8006da2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f9ee 	bl	80070b8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2203      	movs	r2, #3
 8006ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006ce4:	e05d      	b.n	8006da2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f9e6 	bl	80070b8 <USBD_CtlSendStatus>
    break;
 8006cec:	e059      	b.n	8006da2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006cee:	4b2f      	ldr	r3, [pc, #188]	; (8006dac <USBD_SetConfig+0x144>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d112      	bne.n	8006d1c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006cfe:	4b2b      	ldr	r3, [pc, #172]	; (8006dac <USBD_SetConfig+0x144>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d08:	4b28      	ldr	r3, [pc, #160]	; (8006dac <USBD_SetConfig+0x144>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff f99a 	bl	8006048 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f9cf 	bl	80070b8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006d1a:	e042      	b.n	8006da2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006d1c:	4b23      	ldr	r3, [pc, #140]	; (8006dac <USBD_SetConfig+0x144>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d02a      	beq.n	8006d80 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff f988 	bl	8006048 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006d38:	4b1c      	ldr	r3, [pc, #112]	; (8006dac <USBD_SetConfig+0x144>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d42:	4b1a      	ldr	r3, [pc, #104]	; (8006dac <USBD_SetConfig+0x144>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff f961 	bl	8006010 <USBD_SetClassConfig>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00f      	beq.n	8006d78 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f8fe 	bl	8006f5c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff f96d 	bl	8006048 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006d76:	e014      	b.n	8006da2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f99d 	bl	80070b8 <USBD_CtlSendStatus>
    break;
 8006d7e:	e010      	b.n	8006da2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f999 	bl	80070b8 <USBD_CtlSendStatus>
    break;
 8006d86:	e00c      	b.n	8006da2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f8e6 	bl	8006f5c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d90:	4b06      	ldr	r3, [pc, #24]	; (8006dac <USBD_SetConfig+0x144>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff f956 	bl	8006048 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006da0:	bf00      	nop
  }

  return ret;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	200005f8 	.word	0x200005f8

08006db0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	88db      	ldrh	r3, [r3, #6]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d004      	beq.n	8006dcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f8c9 	bl	8006f5c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006dca:	e021      	b.n	8006e10 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	db17      	blt.n	8006e06 <USBD_GetConfig+0x56>
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	dd02      	ble.n	8006de0 <USBD_GetConfig+0x30>
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d00b      	beq.n	8006df6 <USBD_GetConfig+0x46>
 8006dde:	e012      	b.n	8006e06 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3308      	adds	r3, #8
 8006dea:	2201      	movs	r2, #1
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f925 	bl	800703e <USBD_CtlSendData>
      break;
 8006df4:	e00c      	b.n	8006e10 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f91d 	bl	800703e <USBD_CtlSendData>
      break;
 8006e04:	e004      	b.n	8006e10 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f8a7 	bl	8006f5c <USBD_CtlError>
      break;
 8006e0e:	bf00      	nop
}
 8006e10:	bf00      	nop
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d81e      	bhi.n	8006e6c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	88db      	ldrh	r3, [r3, #6]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d004      	beq.n	8006e40 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f88f 	bl	8006f5c <USBD_CtlError>
      break;
 8006e3e:	e01a      	b.n	8006e76 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f043 0202 	orr.w	r2, r3, #2
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	330c      	adds	r3, #12
 8006e60:	2202      	movs	r2, #2
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f8ea 	bl	800703e <USBD_CtlSendData>
    break;
 8006e6a:	e004      	b.n	8006e76 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f874 	bl	8006f5c <USBD_CtlError>
    break;
 8006e74:	bf00      	nop
  }
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	885b      	ldrh	r3, [r3, #2]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d106      	bne.n	8006e9e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f90d 	bl	80070b8 <USBD_CtlSendStatus>
  }
}
 8006e9e:	bf00      	nop
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d80b      	bhi.n	8006ed4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	885b      	ldrh	r3, [r3, #2]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d10c      	bne.n	8006ede <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f8f3 	bl	80070b8 <USBD_CtlSendStatus>
      }
      break;
 8006ed2:	e004      	b.n	8006ede <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f840 	bl	8006f5c <USBD_CtlError>
      break;
 8006edc:	e000      	b.n	8006ee0 <USBD_ClrFeature+0x3a>
      break;
 8006ede:	bf00      	nop
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	781a      	ldrb	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	781a      	ldrb	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7ff fad3 	bl	80064be <SWAPBYTE>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff fac6 	bl	80064be <SWAPBYTE>
 8006f32:	4603      	mov	r3, r0
 8006f34:	461a      	mov	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3301      	adds	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f7ff fab9 	bl	80064be <SWAPBYTE>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	80da      	strh	r2, [r3, #6]
}
 8006f54:	bf00      	nop
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f66:	2180      	movs	r1, #128	; 0x80
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fbe7 	bl	800773c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f6e:	2100      	movs	r1, #0
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fbe3 	bl	800773c <USBD_LL_StallEP>
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d036      	beq.n	8007002 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f98:	6938      	ldr	r0, [r7, #16]
 8006f9a:	f000 f836 	bl	800700a <USBD_GetLen>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	7812      	ldrb	r2, [r2, #0]
 8006fb6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	2203      	movs	r2, #3
 8006fc6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fce:	e013      	b.n	8006ff8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	7812      	ldrb	r2, [r2, #0]
 8006fda:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	613b      	str	r3, [r7, #16]
    idx++;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	4413      	add	r3, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e7      	bne.n	8006fd0 <USBD_GetString+0x52>
 8007000:	e000      	b.n	8007004 <USBD_GetString+0x86>
    return;
 8007002:	bf00      	nop
  }
}
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800700a:	b480      	push	{r7}
 800700c:	b085      	sub	sp, #20
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800701a:	e005      	b.n	8007028 <USBD_GetLen+0x1e>
  {
    len++;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	3301      	adds	r3, #1
 8007020:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	3301      	adds	r3, #1
 8007026:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1f5      	bne.n	800701c <USBD_GetLen+0x12>
  }

  return len;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2202      	movs	r2, #2
 800704e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	2100      	movs	r1, #0
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 fbf2 	bl	800784e <USBD_LL_Transmit>

  return USBD_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	2100      	movs	r1, #0
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 fbe1 	bl	800784e <USBD_LL_Transmit>

  return USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	2100      	movs	r1, #0
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 fbf1 	bl	8007890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2204      	movs	r2, #4
 80070c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070c8:	2300      	movs	r3, #0
 80070ca:	2200      	movs	r2, #0
 80070cc:	2100      	movs	r1, #0
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fbbd 	bl	800784e <USBD_LL_Transmit>

  return USBD_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2205      	movs	r2, #5
 80070ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ee:	2300      	movs	r3, #0
 80070f0:	2200      	movs	r2, #0
 80070f2:	2100      	movs	r1, #0
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fbcb 	bl	8007890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007108:	2200      	movs	r2, #0
 800710a:	490e      	ldr	r1, [pc, #56]	; (8007144 <MX_USB_DEVICE_Init+0x40>)
 800710c:	480e      	ldr	r0, [pc, #56]	; (8007148 <MX_USB_DEVICE_Init+0x44>)
 800710e:	f7fe ff11 	bl	8005f34 <USBD_Init>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007118:	f7f9 fc00 	bl	800091c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800711c:	490b      	ldr	r1, [pc, #44]	; (800714c <MX_USB_DEVICE_Init+0x48>)
 800711e:	480a      	ldr	r0, [pc, #40]	; (8007148 <MX_USB_DEVICE_Init+0x44>)
 8007120:	f7fe ff3e 	bl	8005fa0 <USBD_RegisterClass>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800712a:	f7f9 fbf7 	bl	800091c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800712e:	4806      	ldr	r0, [pc, #24]	; (8007148 <MX_USB_DEVICE_Init+0x44>)
 8007130:	f7fe ff57 	bl	8005fe2 <USBD_Start>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800713a:	f7f9 fbef 	bl	800091c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000110 	.word	0x20000110
 8007148:	200006f4 	.word	0x200006f4
 800714c:	20000014 	.word	0x20000014

08007150 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	6039      	str	r1, [r7, #0]
 800715a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2212      	movs	r2, #18
 8007160:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007162:	4b03      	ldr	r3, [pc, #12]	; (8007170 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	2000012c 	.word	0x2000012c

08007174 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	6039      	str	r1, [r7, #0]
 800717e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2204      	movs	r2, #4
 8007184:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007186:	4b03      	ldr	r3, [pc, #12]	; (8007194 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	20000140 	.word	0x20000140

08007198 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	4907      	ldr	r1, [pc, #28]	; (80071cc <USBD_FS_ProductStrDescriptor+0x34>)
 80071ae:	4808      	ldr	r0, [pc, #32]	; (80071d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80071b0:	f7ff fee5 	bl	8006f7e <USBD_GetString>
 80071b4:	e004      	b.n	80071c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	4904      	ldr	r1, [pc, #16]	; (80071cc <USBD_FS_ProductStrDescriptor+0x34>)
 80071ba:	4805      	ldr	r0, [pc, #20]	; (80071d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80071bc:	f7ff fedf 	bl	8006f7e <USBD_GetString>
  }
  return USBD_StrDesc;
 80071c0:	4b02      	ldr	r3, [pc, #8]	; (80071cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	200009c4 	.word	0x200009c4
 80071d0:	08007b54 	.word	0x08007b54

080071d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	6039      	str	r1, [r7, #0]
 80071de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	4904      	ldr	r1, [pc, #16]	; (80071f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071e4:	4804      	ldr	r0, [pc, #16]	; (80071f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071e6:	f7ff feca 	bl	8006f7e <USBD_GetString>
  return USBD_StrDesc;
 80071ea:	4b02      	ldr	r3, [pc, #8]	; (80071f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	200009c4 	.word	0x200009c4
 80071f8:	08007b6c 	.word	0x08007b6c

080071fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	6039      	str	r1, [r7, #0]
 8007206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	221a      	movs	r2, #26
 800720c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800720e:	f000 f843 	bl	8007298 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007212:	4b02      	ldr	r3, [pc, #8]	; (800721c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000144 	.word	0x20000144

08007220 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	6039      	str	r1, [r7, #0]
 800722a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4907      	ldr	r1, [pc, #28]	; (8007254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007236:	4808      	ldr	r0, [pc, #32]	; (8007258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007238:	f7ff fea1 	bl	8006f7e <USBD_GetString>
 800723c:	e004      	b.n	8007248 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4904      	ldr	r1, [pc, #16]	; (8007254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007242:	4805      	ldr	r0, [pc, #20]	; (8007258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007244:	f7ff fe9b 	bl	8006f7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007248:	4b02      	ldr	r3, [pc, #8]	; (8007254 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	200009c4 	.word	0x200009c4
 8007258:	08007b80 	.word	0x08007b80

0800725c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	6039      	str	r1, [r7, #0]
 8007266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d105      	bne.n	800727a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	4907      	ldr	r1, [pc, #28]	; (8007290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007272:	4808      	ldr	r0, [pc, #32]	; (8007294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007274:	f7ff fe83 	bl	8006f7e <USBD_GetString>
 8007278:	e004      	b.n	8007284 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	4904      	ldr	r1, [pc, #16]	; (8007290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800727e:	4805      	ldr	r0, [pc, #20]	; (8007294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007280:	f7ff fe7d 	bl	8006f7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007284:	4b02      	ldr	r3, [pc, #8]	; (8007290 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	200009c4 	.word	0x200009c4
 8007294:	08007b8c 	.word	0x08007b8c

08007298 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800729e:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <Get_SerialNum+0x44>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072a4:	4b0e      	ldr	r3, [pc, #56]	; (80072e0 <Get_SerialNum+0x48>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80072aa:	4b0e      	ldr	r3, [pc, #56]	; (80072e4 <Get_SerialNum+0x4c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4413      	add	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072be:	2208      	movs	r2, #8
 80072c0:	4909      	ldr	r1, [pc, #36]	; (80072e8 <Get_SerialNum+0x50>)
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f814 	bl	80072f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072c8:	2204      	movs	r2, #4
 80072ca:	4908      	ldr	r1, [pc, #32]	; (80072ec <Get_SerialNum+0x54>)
 80072cc:	68b8      	ldr	r0, [r7, #8]
 80072ce:	f000 f80f 	bl	80072f0 <IntToUnicode>
  }
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	1fff7a10 	.word	0x1fff7a10
 80072e0:	1fff7a14 	.word	0x1fff7a14
 80072e4:	1fff7a18 	.word	0x1fff7a18
 80072e8:	20000146 	.word	0x20000146
 80072ec:	20000156 	.word	0x20000156

080072f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]
 8007306:	e027      	b.n	8007358 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	0f1b      	lsrs	r3, r3, #28
 800730c:	2b09      	cmp	r3, #9
 800730e:	d80b      	bhi.n	8007328 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	0f1b      	lsrs	r3, r3, #28
 8007314:	b2da      	uxtb	r2, r3
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	4619      	mov	r1, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	440b      	add	r3, r1
 8007320:	3230      	adds	r2, #48	; 0x30
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	e00a      	b.n	800733e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	0f1b      	lsrs	r3, r3, #28
 800732c:	b2da      	uxtb	r2, r3
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4619      	mov	r1, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	440b      	add	r3, r1
 8007338:	3237      	adds	r2, #55	; 0x37
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	3301      	adds	r3, #1
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4413      	add	r3, r2
 800734e:	2200      	movs	r2, #0
 8007350:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	3301      	adds	r3, #1
 8007356:	75fb      	strb	r3, [r7, #23]
 8007358:	7dfa      	ldrb	r2, [r7, #23]
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	429a      	cmp	r2, r3
 800735e:	d3d3      	bcc.n	8007308 <IntToUnicode+0x18>
  }
}
 8007360:	bf00      	nop
 8007362:	371c      	adds	r7, #28
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	; 0x28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007374:	f107 0314 	add.w	r3, r7, #20
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	60da      	str	r2, [r3, #12]
 8007382:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800738c:	d13a      	bne.n	8007404 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800738e:	2300      	movs	r3, #0
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	4b1e      	ldr	r3, [pc, #120]	; (800740c <HAL_PCD_MspInit+0xa0>)
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	4a1d      	ldr	r2, [pc, #116]	; (800740c <HAL_PCD_MspInit+0xa0>)
 8007398:	f043 0301 	orr.w	r3, r3, #1
 800739c:	6313      	str	r3, [r2, #48]	; 0x30
 800739e:	4b1b      	ldr	r3, [pc, #108]	; (800740c <HAL_PCD_MspInit+0xa0>)
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	613b      	str	r3, [r7, #16]
 80073a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80073aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80073ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073b0:	2302      	movs	r3, #2
 80073b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073b8:	2303      	movs	r3, #3
 80073ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80073bc:	230a      	movs	r3, #10
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073c0:	f107 0314 	add.w	r3, r7, #20
 80073c4:	4619      	mov	r1, r3
 80073c6:	4812      	ldr	r0, [pc, #72]	; (8007410 <HAL_PCD_MspInit+0xa4>)
 80073c8:	f7fa fa48 	bl	800185c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <HAL_PCD_MspInit+0xa0>)
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	4a0e      	ldr	r2, [pc, #56]	; (800740c <HAL_PCD_MspInit+0xa0>)
 80073d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d6:	6353      	str	r3, [r2, #52]	; 0x34
 80073d8:	2300      	movs	r3, #0
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <HAL_PCD_MspInit+0xa0>)
 80073de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e0:	4a0a      	ldr	r2, [pc, #40]	; (800740c <HAL_PCD_MspInit+0xa0>)
 80073e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073e6:	6453      	str	r3, [r2, #68]	; 0x44
 80073e8:	4b08      	ldr	r3, [pc, #32]	; (800740c <HAL_PCD_MspInit+0xa0>)
 80073ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073f4:	2200      	movs	r2, #0
 80073f6:	2100      	movs	r1, #0
 80073f8:	2043      	movs	r0, #67	; 0x43
 80073fa:	f7fa f9f8 	bl	80017ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073fe:	2043      	movs	r0, #67	; 0x43
 8007400:	f7fa fa11 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007404:	bf00      	nop
 8007406:	3728      	adds	r7, #40	; 0x28
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40023800 	.word	0x40023800
 8007410:	40020000 	.word	0x40020000

08007414 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f7fe fe24 	bl	8006078 <USBD_LL_SetupStage>
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	4613      	mov	r3, r2
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	440b      	add	r3, r1
 8007458:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	4619      	mov	r1, r3
 8007462:	f7fe fe5c 	bl	800611e <USBD_LL_DataOutStage>
}
 8007466:	bf00      	nop
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	4613      	mov	r3, r2
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	1a9b      	subs	r3, r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	440b      	add	r3, r1
 800748e:	3348      	adds	r3, #72	; 0x48
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	4619      	mov	r1, r3
 8007496:	f7fe fea5 	bl	80061e4 <USBD_LL_DataInStage>
}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe ffa9 	bl	8006408 <USBD_LL_SOF>
}
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074c6:	2301      	movs	r3, #1
 80074c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d001      	beq.n	80074d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80074d2:	f7f9 fa23 	bl	800091c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074dc:	7bfa      	ldrb	r2, [r7, #15]
 80074de:	4611      	mov	r1, r2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fe ff56 	bl	8006392 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe ff0f 	bl	8006310 <USBD_LL_Reset>
}
 80074f2:	bf00      	nop
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe ff51 	bl	80063b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6812      	ldr	r2, [r2, #0]
 800751e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007522:	f043 0301 	orr.w	r3, r3, #1
 8007526:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007530:	4b04      	ldr	r3, [pc, #16]	; (8007544 <HAL_PCD_SuspendCallback+0x48>)
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	4a03      	ldr	r2, [pc, #12]	; (8007544 <HAL_PCD_SuspendCallback+0x48>)
 8007536:	f043 0306 	orr.w	r3, r3, #6
 800753a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	e000ed00 	.word	0xe000ed00

08007548 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe ff40 	bl	80063dc <USBD_LL_Resume>
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	4611      	mov	r1, r2
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe ff6b 	bl	8006456 <USBD_LL_IsoOUTIncomplete>
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800759a:	78fa      	ldrb	r2, [r7, #3]
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe ff4c 	bl	800643c <USBD_LL_IsoINIncomplete>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe ff58 	bl	8006470 <USBD_LL_DevConnected>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe ff55 	bl	8006486 <USBD_LL_DevDisconnected>
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d13c      	bne.n	800766e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075f4:	4a20      	ldr	r2, [pc, #128]	; (8007678 <USBD_LL_Init+0x94>)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a1e      	ldr	r2, [pc, #120]	; (8007678 <USBD_LL_Init+0x94>)
 8007600:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007604:	4b1c      	ldr	r3, [pc, #112]	; (8007678 <USBD_LL_Init+0x94>)
 8007606:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800760a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800760c:	4b1a      	ldr	r3, [pc, #104]	; (8007678 <USBD_LL_Init+0x94>)
 800760e:	2204      	movs	r2, #4
 8007610:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007612:	4b19      	ldr	r3, [pc, #100]	; (8007678 <USBD_LL_Init+0x94>)
 8007614:	2202      	movs	r2, #2
 8007616:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007618:	4b17      	ldr	r3, [pc, #92]	; (8007678 <USBD_LL_Init+0x94>)
 800761a:	2200      	movs	r2, #0
 800761c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800761e:	4b16      	ldr	r3, [pc, #88]	; (8007678 <USBD_LL_Init+0x94>)
 8007620:	2202      	movs	r2, #2
 8007622:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007624:	4b14      	ldr	r3, [pc, #80]	; (8007678 <USBD_LL_Init+0x94>)
 8007626:	2200      	movs	r2, #0
 8007628:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800762a:	4b13      	ldr	r3, [pc, #76]	; (8007678 <USBD_LL_Init+0x94>)
 800762c:	2200      	movs	r2, #0
 800762e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007630:	4b11      	ldr	r3, [pc, #68]	; (8007678 <USBD_LL_Init+0x94>)
 8007632:	2200      	movs	r2, #0
 8007634:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <USBD_LL_Init+0x94>)
 8007638:	2200      	movs	r2, #0
 800763a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800763c:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <USBD_LL_Init+0x94>)
 800763e:	2200      	movs	r2, #0
 8007640:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007642:	480d      	ldr	r0, [pc, #52]	; (8007678 <USBD_LL_Init+0x94>)
 8007644:	f7fb f813 	bl	800266e <HAL_PCD_Init>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800764e:	f7f9 f965 	bl	800091c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007652:	2180      	movs	r1, #128	; 0x80
 8007654:	4808      	ldr	r0, [pc, #32]	; (8007678 <USBD_LL_Init+0x94>)
 8007656:	f7fc f958 	bl	800390a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800765a:	2240      	movs	r2, #64	; 0x40
 800765c:	2100      	movs	r1, #0
 800765e:	4806      	ldr	r0, [pc, #24]	; (8007678 <USBD_LL_Init+0x94>)
 8007660:	f7fc f90c 	bl	800387c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007664:	2280      	movs	r2, #128	; 0x80
 8007666:	2101      	movs	r1, #1
 8007668:	4803      	ldr	r0, [pc, #12]	; (8007678 <USBD_LL_Init+0x94>)
 800766a:	f7fc f907 	bl	800387c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20000bc4 	.word	0x20000bc4

0800767c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007692:	4618      	mov	r0, r3
 8007694:	f7fb f908 	bl	80028a8 <HAL_PCD_Start>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 f918 	bl	80078d4 <USBD_Get_USB_Status>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	4608      	mov	r0, r1
 80076bc:	4611      	mov	r1, r2
 80076be:	461a      	mov	r2, r3
 80076c0:	4603      	mov	r3, r0
 80076c2:	70fb      	strb	r3, [r7, #3]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70bb      	strb	r3, [r7, #2]
 80076c8:	4613      	mov	r3, r2
 80076ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076da:	78bb      	ldrb	r3, [r7, #2]
 80076dc:	883a      	ldrh	r2, [r7, #0]
 80076de:	78f9      	ldrb	r1, [r7, #3]
 80076e0:	f7fb fcec 	bl	80030bc <HAL_PCD_EP_Open>
 80076e4:	4603      	mov	r3, r0
 80076e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 f8f2 	bl	80078d4 <USBD_Get_USB_Status>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007718:	78fa      	ldrb	r2, [r7, #3]
 800771a:	4611      	mov	r1, r2
 800771c:	4618      	mov	r0, r3
 800771e:	f7fb fd35 	bl	800318c <HAL_PCD_EP_Close>
 8007722:	4603      	mov	r3, r0
 8007724:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	4618      	mov	r0, r3
 800772a:	f000 f8d3 	bl	80078d4 <USBD_Get_USB_Status>
 800772e:	4603      	mov	r3, r0
 8007730:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007732:	7bbb      	ldrb	r3, [r7, #14]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007756:	78fa      	ldrb	r2, [r7, #3]
 8007758:	4611      	mov	r1, r2
 800775a:	4618      	mov	r0, r3
 800775c:	f7fb fdf5 	bl	800334a <HAL_PCD_EP_SetStall>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f8b4 	bl	80078d4 <USBD_Get_USB_Status>
 800776c:	4603      	mov	r3, r0
 800776e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007770:	7bbb      	ldrb	r3, [r7, #14]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	460b      	mov	r3, r1
 8007784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007794:	78fa      	ldrb	r2, [r7, #3]
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f7fb fe3a 	bl	8003412 <HAL_PCD_EP_ClrStall>
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 f895 	bl	80078d4 <USBD_Get_USB_Status>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	da0b      	bge.n	80077ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077da:	68f9      	ldr	r1, [r7, #12]
 80077dc:	4613      	mov	r3, r2
 80077de:	00db      	lsls	r3, r3, #3
 80077e0:	1a9b      	subs	r3, r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	440b      	add	r3, r1
 80077e6:	333e      	adds	r3, #62	; 0x3e
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	e00b      	b.n	8007804 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077f2:	68f9      	ldr	r1, [r7, #12]
 80077f4:	4613      	mov	r3, r2
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	1a9b      	subs	r3, r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	440b      	add	r3, r1
 80077fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007802:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800782a:	78fa      	ldrb	r2, [r7, #3]
 800782c:	4611      	mov	r1, r2
 800782e:	4618      	mov	r0, r3
 8007830:	f7fb fc1f 	bl	8003072 <HAL_PCD_SetAddress>
 8007834:	4603      	mov	r3, r0
 8007836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	4618      	mov	r0, r3
 800783c:	f000 f84a 	bl	80078d4 <USBD_Get_USB_Status>
 8007840:	4603      	mov	r3, r0
 8007842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007844:	7bbb      	ldrb	r3, [r7, #14]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b086      	sub	sp, #24
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]
 800785a:	460b      	mov	r3, r1
 800785c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800786c:	7af9      	ldrb	r1, [r7, #11]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	f7fb fd20 	bl	80032b6 <HAL_PCD_EP_Transmit>
 8007876:	4603      	mov	r3, r0
 8007878:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800787a:	7dfb      	ldrb	r3, [r7, #23]
 800787c:	4618      	mov	r0, r3
 800787e:	f000 f829 	bl	80078d4 <USBD_Get_USB_Status>
 8007882:	4603      	mov	r3, r0
 8007884:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007886:	7dbb      	ldrb	r3, [r7, #22]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	607a      	str	r2, [r7, #4]
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	460b      	mov	r3, r1
 800789e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80078ae:	7af9      	ldrb	r1, [r7, #11]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	f7fb fcb4 	bl	8003220 <HAL_PCD_EP_Receive>
 80078b8:	4603      	mov	r3, r0
 80078ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f808 	bl	80078d4 <USBD_Get_USB_Status>
 80078c4:	4603      	mov	r3, r0
 80078c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d817      	bhi.n	8007918 <USBD_Get_USB_Status+0x44>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <USBD_Get_USB_Status+0x1c>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007901 	.word	0x08007901
 80078f4:	08007907 	.word	0x08007907
 80078f8:	0800790d 	.word	0x0800790d
 80078fc:	08007913 	.word	0x08007913
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]
    break;
 8007904:	e00b      	b.n	800791e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007906:	2303      	movs	r3, #3
 8007908:	73fb      	strb	r3, [r7, #15]
    break;
 800790a:	e008      	b.n	800791e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800790c:	2301      	movs	r3, #1
 800790e:	73fb      	strb	r3, [r7, #15]
    break;
 8007910:	e005      	b.n	800791e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007912:	2303      	movs	r3, #3
 8007914:	73fb      	strb	r3, [r7, #15]
    break;
 8007916:	e002      	b.n	800791e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007918:	2303      	movs	r3, #3
 800791a:	73fb      	strb	r3, [r7, #15]
    break;
 800791c:	bf00      	nop
  }
  return usb_status;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <__errno>:
 800792c:	4b01      	ldr	r3, [pc, #4]	; (8007934 <__errno+0x8>)
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	20000160 	.word	0x20000160

08007938 <__libc_init_array>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	4e0d      	ldr	r6, [pc, #52]	; (8007970 <__libc_init_array+0x38>)
 800793c:	4c0d      	ldr	r4, [pc, #52]	; (8007974 <__libc_init_array+0x3c>)
 800793e:	1ba4      	subs	r4, r4, r6
 8007940:	10a4      	asrs	r4, r4, #2
 8007942:	2500      	movs	r5, #0
 8007944:	42a5      	cmp	r5, r4
 8007946:	d109      	bne.n	800795c <__libc_init_array+0x24>
 8007948:	4e0b      	ldr	r6, [pc, #44]	; (8007978 <__libc_init_array+0x40>)
 800794a:	4c0c      	ldr	r4, [pc, #48]	; (800797c <__libc_init_array+0x44>)
 800794c:	f000 f8ea 	bl	8007b24 <_init>
 8007950:	1ba4      	subs	r4, r4, r6
 8007952:	10a4      	asrs	r4, r4, #2
 8007954:	2500      	movs	r5, #0
 8007956:	42a5      	cmp	r5, r4
 8007958:	d105      	bne.n	8007966 <__libc_init_array+0x2e>
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007960:	4798      	blx	r3
 8007962:	3501      	adds	r5, #1
 8007964:	e7ee      	b.n	8007944 <__libc_init_array+0xc>
 8007966:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800796a:	4798      	blx	r3
 800796c:	3501      	adds	r5, #1
 800796e:	e7f2      	b.n	8007956 <__libc_init_array+0x1e>
 8007970:	08008918 	.word	0x08008918
 8007974:	08008918 	.word	0x08008918
 8007978:	08008918 	.word	0x08008918
 800797c:	0800891c 	.word	0x0800891c

08007980 <malloc>:
 8007980:	4b02      	ldr	r3, [pc, #8]	; (800798c <malloc+0xc>)
 8007982:	4601      	mov	r1, r0
 8007984:	6818      	ldr	r0, [r3, #0]
 8007986:	f000 b861 	b.w	8007a4c <_malloc_r>
 800798a:	bf00      	nop
 800798c:	20000160 	.word	0x20000160

08007990 <free>:
 8007990:	4b02      	ldr	r3, [pc, #8]	; (800799c <free+0xc>)
 8007992:	4601      	mov	r1, r0
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	f000 b80b 	b.w	80079b0 <_free_r>
 800799a:	bf00      	nop
 800799c:	20000160 	.word	0x20000160

080079a0 <memset>:
 80079a0:	4402      	add	r2, r0
 80079a2:	4603      	mov	r3, r0
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d100      	bne.n	80079aa <memset+0xa>
 80079a8:	4770      	bx	lr
 80079aa:	f803 1b01 	strb.w	r1, [r3], #1
 80079ae:	e7f9      	b.n	80079a4 <memset+0x4>

080079b0 <_free_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4605      	mov	r5, r0
 80079b4:	2900      	cmp	r1, #0
 80079b6:	d045      	beq.n	8007a44 <_free_r+0x94>
 80079b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079bc:	1f0c      	subs	r4, r1, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bfb8      	it	lt
 80079c2:	18e4      	addlt	r4, r4, r3
 80079c4:	f000 f8ac 	bl	8007b20 <__malloc_lock>
 80079c8:	4a1f      	ldr	r2, [pc, #124]	; (8007a48 <_free_r+0x98>)
 80079ca:	6813      	ldr	r3, [r2, #0]
 80079cc:	4610      	mov	r0, r2
 80079ce:	b933      	cbnz	r3, 80079de <_free_r+0x2e>
 80079d0:	6063      	str	r3, [r4, #4]
 80079d2:	6014      	str	r4, [r2, #0]
 80079d4:	4628      	mov	r0, r5
 80079d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079da:	f000 b8a2 	b.w	8007b22 <__malloc_unlock>
 80079de:	42a3      	cmp	r3, r4
 80079e0:	d90c      	bls.n	80079fc <_free_r+0x4c>
 80079e2:	6821      	ldr	r1, [r4, #0]
 80079e4:	1862      	adds	r2, r4, r1
 80079e6:	4293      	cmp	r3, r2
 80079e8:	bf04      	itt	eq
 80079ea:	681a      	ldreq	r2, [r3, #0]
 80079ec:	685b      	ldreq	r3, [r3, #4]
 80079ee:	6063      	str	r3, [r4, #4]
 80079f0:	bf04      	itt	eq
 80079f2:	1852      	addeq	r2, r2, r1
 80079f4:	6022      	streq	r2, [r4, #0]
 80079f6:	6004      	str	r4, [r0, #0]
 80079f8:	e7ec      	b.n	80079d4 <_free_r+0x24>
 80079fa:	4613      	mov	r3, r2
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	b10a      	cbz	r2, 8007a04 <_free_r+0x54>
 8007a00:	42a2      	cmp	r2, r4
 8007a02:	d9fa      	bls.n	80079fa <_free_r+0x4a>
 8007a04:	6819      	ldr	r1, [r3, #0]
 8007a06:	1858      	adds	r0, r3, r1
 8007a08:	42a0      	cmp	r0, r4
 8007a0a:	d10b      	bne.n	8007a24 <_free_r+0x74>
 8007a0c:	6820      	ldr	r0, [r4, #0]
 8007a0e:	4401      	add	r1, r0
 8007a10:	1858      	adds	r0, r3, r1
 8007a12:	4282      	cmp	r2, r0
 8007a14:	6019      	str	r1, [r3, #0]
 8007a16:	d1dd      	bne.n	80079d4 <_free_r+0x24>
 8007a18:	6810      	ldr	r0, [r2, #0]
 8007a1a:	6852      	ldr	r2, [r2, #4]
 8007a1c:	605a      	str	r2, [r3, #4]
 8007a1e:	4401      	add	r1, r0
 8007a20:	6019      	str	r1, [r3, #0]
 8007a22:	e7d7      	b.n	80079d4 <_free_r+0x24>
 8007a24:	d902      	bls.n	8007a2c <_free_r+0x7c>
 8007a26:	230c      	movs	r3, #12
 8007a28:	602b      	str	r3, [r5, #0]
 8007a2a:	e7d3      	b.n	80079d4 <_free_r+0x24>
 8007a2c:	6820      	ldr	r0, [r4, #0]
 8007a2e:	1821      	adds	r1, r4, r0
 8007a30:	428a      	cmp	r2, r1
 8007a32:	bf04      	itt	eq
 8007a34:	6811      	ldreq	r1, [r2, #0]
 8007a36:	6852      	ldreq	r2, [r2, #4]
 8007a38:	6062      	str	r2, [r4, #4]
 8007a3a:	bf04      	itt	eq
 8007a3c:	1809      	addeq	r1, r1, r0
 8007a3e:	6021      	streq	r1, [r4, #0]
 8007a40:	605c      	str	r4, [r3, #4]
 8007a42:	e7c7      	b.n	80079d4 <_free_r+0x24>
 8007a44:	bd38      	pop	{r3, r4, r5, pc}
 8007a46:	bf00      	nop
 8007a48:	200005fc 	.word	0x200005fc

08007a4c <_malloc_r>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	1ccd      	adds	r5, r1, #3
 8007a50:	f025 0503 	bic.w	r5, r5, #3
 8007a54:	3508      	adds	r5, #8
 8007a56:	2d0c      	cmp	r5, #12
 8007a58:	bf38      	it	cc
 8007a5a:	250c      	movcc	r5, #12
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	4606      	mov	r6, r0
 8007a60:	db01      	blt.n	8007a66 <_malloc_r+0x1a>
 8007a62:	42a9      	cmp	r1, r5
 8007a64:	d903      	bls.n	8007a6e <_malloc_r+0x22>
 8007a66:	230c      	movs	r3, #12
 8007a68:	6033      	str	r3, [r6, #0]
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	bd70      	pop	{r4, r5, r6, pc}
 8007a6e:	f000 f857 	bl	8007b20 <__malloc_lock>
 8007a72:	4a21      	ldr	r2, [pc, #132]	; (8007af8 <_malloc_r+0xac>)
 8007a74:	6814      	ldr	r4, [r2, #0]
 8007a76:	4621      	mov	r1, r4
 8007a78:	b991      	cbnz	r1, 8007aa0 <_malloc_r+0x54>
 8007a7a:	4c20      	ldr	r4, [pc, #128]	; (8007afc <_malloc_r+0xb0>)
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	b91b      	cbnz	r3, 8007a88 <_malloc_r+0x3c>
 8007a80:	4630      	mov	r0, r6
 8007a82:	f000 f83d 	bl	8007b00 <_sbrk_r>
 8007a86:	6020      	str	r0, [r4, #0]
 8007a88:	4629      	mov	r1, r5
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f000 f838 	bl	8007b00 <_sbrk_r>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d124      	bne.n	8007ade <_malloc_r+0x92>
 8007a94:	230c      	movs	r3, #12
 8007a96:	6033      	str	r3, [r6, #0]
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f000 f842 	bl	8007b22 <__malloc_unlock>
 8007a9e:	e7e4      	b.n	8007a6a <_malloc_r+0x1e>
 8007aa0:	680b      	ldr	r3, [r1, #0]
 8007aa2:	1b5b      	subs	r3, r3, r5
 8007aa4:	d418      	bmi.n	8007ad8 <_malloc_r+0x8c>
 8007aa6:	2b0b      	cmp	r3, #11
 8007aa8:	d90f      	bls.n	8007aca <_malloc_r+0x7e>
 8007aaa:	600b      	str	r3, [r1, #0]
 8007aac:	50cd      	str	r5, [r1, r3]
 8007aae:	18cc      	adds	r4, r1, r3
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f000 f836 	bl	8007b22 <__malloc_unlock>
 8007ab6:	f104 000b 	add.w	r0, r4, #11
 8007aba:	1d23      	adds	r3, r4, #4
 8007abc:	f020 0007 	bic.w	r0, r0, #7
 8007ac0:	1ac3      	subs	r3, r0, r3
 8007ac2:	d0d3      	beq.n	8007a6c <_malloc_r+0x20>
 8007ac4:	425a      	negs	r2, r3
 8007ac6:	50e2      	str	r2, [r4, r3]
 8007ac8:	e7d0      	b.n	8007a6c <_malloc_r+0x20>
 8007aca:	428c      	cmp	r4, r1
 8007acc:	684b      	ldr	r3, [r1, #4]
 8007ace:	bf16      	itet	ne
 8007ad0:	6063      	strne	r3, [r4, #4]
 8007ad2:	6013      	streq	r3, [r2, #0]
 8007ad4:	460c      	movne	r4, r1
 8007ad6:	e7eb      	b.n	8007ab0 <_malloc_r+0x64>
 8007ad8:	460c      	mov	r4, r1
 8007ada:	6849      	ldr	r1, [r1, #4]
 8007adc:	e7cc      	b.n	8007a78 <_malloc_r+0x2c>
 8007ade:	1cc4      	adds	r4, r0, #3
 8007ae0:	f024 0403 	bic.w	r4, r4, #3
 8007ae4:	42a0      	cmp	r0, r4
 8007ae6:	d005      	beq.n	8007af4 <_malloc_r+0xa8>
 8007ae8:	1a21      	subs	r1, r4, r0
 8007aea:	4630      	mov	r0, r6
 8007aec:	f000 f808 	bl	8007b00 <_sbrk_r>
 8007af0:	3001      	adds	r0, #1
 8007af2:	d0cf      	beq.n	8007a94 <_malloc_r+0x48>
 8007af4:	6025      	str	r5, [r4, #0]
 8007af6:	e7db      	b.n	8007ab0 <_malloc_r+0x64>
 8007af8:	200005fc 	.word	0x200005fc
 8007afc:	20000600 	.word	0x20000600

08007b00 <_sbrk_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4c06      	ldr	r4, [pc, #24]	; (8007b1c <_sbrk_r+0x1c>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4605      	mov	r5, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	6023      	str	r3, [r4, #0]
 8007b0c:	f7f9 fbf0 	bl	80012f0 <_sbrk>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_sbrk_r+0x1a>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_sbrk_r+0x1a>
 8007b18:	602b      	str	r3, [r5, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20000fcc 	.word	0x20000fcc

08007b20 <__malloc_lock>:
 8007b20:	4770      	bx	lr

08007b22 <__malloc_unlock>:
 8007b22:	4770      	bx	lr

08007b24 <_init>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	bf00      	nop
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr

08007b30 <_fini>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	bf00      	nop
 8007b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b36:	bc08      	pop	{r3}
 8007b38:	469e      	mov	lr, r3
 8007b3a:	4770      	bx	lr
