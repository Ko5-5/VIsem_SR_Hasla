
SR_MHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  08009768  08009768  00019768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5f0  0800a5f0  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5f0  0800a5f0  0001a5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5f8  0800a5f8  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5f8  0800a5f8  0001a5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5fc  0800a5fc  0001a5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800a600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001078  2000025c  0800a85c  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012d4  0800a85c  000212d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e512  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f7a  00000000  00000000  0003e79e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001730  00000000  00000000  00042718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b8  00000000  00000000  00043e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001abf7  00000000  00000000  00045400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000153fd  00000000  00000000  0005fff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093883  00000000  00000000  000753f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108c77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061fc  00000000  00000000  00108cf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000025c 	.word	0x2000025c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009750 	.word	0x08009750

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000260 	.word	0x20000260
 80001d4:	08009750 	.word	0x08009750

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	; 0x28
 80004ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	4b4a      	ldr	r3, [pc, #296]	; (800062c <MX_GPIO_Init+0x144>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a49      	ldr	r2, [pc, #292]	; (800062c <MX_GPIO_Init+0x144>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b47      	ldr	r3, [pc, #284]	; (800062c <MX_GPIO_Init+0x144>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	4b43      	ldr	r3, [pc, #268]	; (800062c <MX_GPIO_Init+0x144>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a42      	ldr	r2, [pc, #264]	; (800062c <MX_GPIO_Init+0x144>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b40      	ldr	r3, [pc, #256]	; (800062c <MX_GPIO_Init+0x144>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	4b3c      	ldr	r3, [pc, #240]	; (800062c <MX_GPIO_Init+0x144>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a3b      	ldr	r2, [pc, #236]	; (800062c <MX_GPIO_Init+0x144>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b39      	ldr	r3, [pc, #228]	; (800062c <MX_GPIO_Init+0x144>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	4b35      	ldr	r3, [pc, #212]	; (800062c <MX_GPIO_Init+0x144>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a34      	ldr	r2, [pc, #208]	; (800062c <MX_GPIO_Init+0x144>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b32      	ldr	r3, [pc, #200]	; (800062c <MX_GPIO_Init+0x144>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000574:	482e      	ldr	r0, [pc, #184]	; (8000630 <MX_GPIO_Init+0x148>)
 8000576:	f002 fa33 	bl	80029e0 <HAL_GPIO_WritePin>
                          |CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000580:	482c      	ldr	r0, [pc, #176]	; (8000634 <MX_GPIO_Init+0x14c>)
 8000582:	f002 fa2d 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin;
 8000586:	231c      	movs	r3, #28
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_GPIO_Init+0x150>)
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4825      	ldr	r0, [pc, #148]	; (8000630 <MX_GPIO_Init+0x148>)
 800059a:	f002 f887 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 800059e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80005a2:	617b      	str	r3, [r7, #20]
                          |CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	481e      	ldr	r0, [pc, #120]	; (8000630 <MX_GPIO_Init+0x148>)
 80005b8:	f002 f878 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_BUT_Pin;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	4819      	ldr	r0, [pc, #100]	; (8000634 <MX_GPIO_Init+0x14c>)
 80005d0:	f002 f86c 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 80005d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4811      	ldr	r0, [pc, #68]	; (8000634 <MX_GPIO_Init+0x14c>)
 80005ee:	f002 f85d 	bl	80026ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2008      	movs	r0, #8
 80005f8:	f002 f821 	bl	800263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005fc:	2008      	movs	r0, #8
 80005fe:	f002 f83a 	bl	8002676 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2009      	movs	r0, #9
 8000608:	f002 f819 	bl	800263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800060c:	2009      	movs	r0, #9
 800060e:	f002 f832 	bl	8002676 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	200a      	movs	r0, #10
 8000618:	f002 f811 	bl	800263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800061c:	200a      	movs	r0, #10
 800061e:	f002 f82a 	bl	8002676 <HAL_NVIC_EnableIRQ>

}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000
 8000634:	40020400 	.word	0x40020400
 8000638:	10110000 	.word	0x10110000

0800063c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_I2C1_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_I2C1_Init+0x50>)
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_I2C1_Init+0x58>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_I2C1_Init+0x50>)
 800065a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_I2C1_Init+0x50>)
 800067a:	f002 f9e3 	bl	8002a44 <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 fd36 	bl	80010f4 <Error_Handler>
  }

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200006d4 	.word	0x200006d4
 8000690:	40005400 	.word	0x40005400
 8000694:	00061a80 	.word	0x00061a80

08000698 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <HAL_I2C_MspInit+0x84>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d12b      	bne.n	8000712 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006da:	2312      	movs	r3, #18
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006de:	2301      	movs	r3, #1
 80006e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e6:	2304      	movs	r3, #4
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <HAL_I2C_MspInit+0x8c>)
 80006f2:	f001 ffdb 	bl	80026ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_I2C_MspInit+0x88>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_I2C_MspInit+0x88>)
 8000700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000704:	6413      	str	r3, [r2, #64]	; 0x40
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_I2C_MspInit+0x88>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40005400 	.word	0x40005400
 8000720:	40023800 	.word	0x40023800
 8000724:	40020400 	.word	0x40020400

08000728 <XORCipher>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void XORCipher(char* string, char* key)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < strlen(string); i++)
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	e018      	b.n	800076a <XORCipher+0x42>
	{
		string[i] = string[i] ^ key[i % 8];
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	7819      	ldrb	r1, [r3, #0]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	425a      	negs	r2, r3
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	f002 0207 	and.w	r2, r2, #7
 800074c:	bf58      	it	pl
 800074e:	4253      	negpl	r3, r2
 8000750:	461a      	mov	r2, r3
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4413      	add	r3, r2
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	4403      	add	r3, r0
 800075e:	404a      	eors	r2, r1
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < strlen(string); i++)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fd34 	bl	80001d8 <strlen>
 8000770:	4602      	mov	r2, r0
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	429a      	cmp	r2, r3
 8000776:	d8df      	bhi.n	8000738 <XORCipher+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <OLED_page_sc>:

void OLED_page_sc(){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000786:	f001 fe51 	bl	800242c <HAL_GetTick>
 800078a:	4602      	mov	r2, r0
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <OLED_page_sc+0xcc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000796:	d955      	bls.n	8000844 <OLED_page_sc+0xc4>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fe23 	bl	80013e4 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 800079e:	2106      	movs	r1, #6
 80007a0:	2004      	movs	r0, #4
 80007a2:	f000 fe97 	bl	80014d4 <SSD1306_GotoXY>
		SSD1306_Puts ("--MHS--", &Font_11x18, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	4929      	ldr	r1, [pc, #164]	; (8000850 <OLED_page_sc+0xd0>)
 80007aa:	482a      	ldr	r0, [pc, #168]	; (8000854 <OLED_page_sc+0xd4>)
 80007ac:	f000 ff28 	bl	8001600 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 80007b0:	2119      	movs	r1, #25
 80007b2:	2004      	movs	r0, #4
 80007b4:	f000 fe8e 	bl	80014d4 <SSD1306_GotoXY>
		SSD1306_Puts ("PAGE", &Font_11x18, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	4925      	ldr	r1, [pc, #148]	; (8000850 <OLED_page_sc+0xd0>)
 80007bc:	4826      	ldr	r0, [pc, #152]	; (8000858 <OLED_page_sc+0xd8>)
 80007be:	f000 ff1f 	bl	8001600 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 80007c2:	212c      	movs	r1, #44	; 0x2c
 80007c4:	2004      	movs	r0, #4
 80007c6:	f000 fe85 	bl	80014d4 <SSD1306_GotoXY>
		SSD1306_Puts ("NUMBER:", &Font_11x18, 1);
 80007ca:	2201      	movs	r2, #1
 80007cc:	4920      	ldr	r1, [pc, #128]	; (8000850 <OLED_page_sc+0xd0>)
 80007ce:	4823      	ldr	r0, [pc, #140]	; (800085c <OLED_page_sc+0xdc>)
 80007d0:	f000 ff16 	bl	8001600 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 80007d4:	2301      	movs	r3, #1
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	2101      	movs	r1, #1
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 ff33 	bl	800164a <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 80007e4:	2301      	movs	r3, #1
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 ff2b 	bl	800164a <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 80007f4:	2301      	movs	r3, #1
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2340      	movs	r3, #64	; 0x40
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	2100      	movs	r1, #0
 80007fe:	2080      	movs	r0, #128	; 0x80
 8000800:	f000 ff23 	bl	800164a <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000804:	2301      	movs	r3, #1
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2340      	movs	r3, #64	; 0x40
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	2140      	movs	r1, #64	; 0x40
 800080e:	2000      	movs	r0, #0
 8000810:	f000 ff1b 	bl	800164a <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 8000814:	2301      	movs	r3, #1
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	233e      	movs	r3, #62	; 0x3e
 800081a:	221b      	movs	r2, #27
 800081c:	2102      	movs	r1, #2
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f001 f80e 	bl	8001840 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 8000824:	2119      	movs	r1, #25
 8000826:	206e      	movs	r0, #110	; 0x6e
 8000828:	f000 fe54 	bl	80014d4 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(pageNumber+'0'), &Font_11x18, 1);
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <OLED_page_sc+0xe0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3330      	adds	r3, #48	; 0x30
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2201      	movs	r2, #1
 8000838:	4905      	ldr	r1, [pc, #20]	; (8000850 <OLED_page_sc+0xd0>)
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fe60 	bl	8001500 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 8000840:	f000 fda2 	bl	8001388 <SSD1306_UpdateScreen>
	}
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002b0 	.word	0x200002b0
 8000850:	20000000 	.word	0x20000000
 8000854:	08009768 	.word	0x08009768
 8000858:	08009770 	.word	0x08009770
 800085c:	08009778 	.word	0x08009778
 8000860:	200002ac 	.word	0x200002ac

08000864 <OLED_login_sc>:

void OLED_login_sc(){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 800086a:	f001 fddf 	bl	800242c <HAL_GetTick>
 800086e:	4602      	mov	r2, r0
 8000870:	4b2e      	ldr	r3, [pc, #184]	; (800092c <OLED_login_sc+0xc8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800087a:	d954      	bls.n	8000926 <OLED_login_sc+0xc2>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 800087c:	2000      	movs	r0, #0
 800087e:	f000 fdb1 	bl	80013e4 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 8000882:	2106      	movs	r1, #6
 8000884:	2004      	movs	r0, #4
 8000886:	f000 fe25 	bl	80014d4 <SSD1306_GotoXY>
		SSD1306_Puts ("-ENTER-", &Font_11x18, 1);
 800088a:	2201      	movs	r2, #1
 800088c:	4928      	ldr	r1, [pc, #160]	; (8000930 <OLED_login_sc+0xcc>)
 800088e:	4829      	ldr	r0, [pc, #164]	; (8000934 <OLED_login_sc+0xd0>)
 8000890:	f000 feb6 	bl	8001600 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000894:	2119      	movs	r1, #25
 8000896:	2004      	movs	r0, #4
 8000898:	f000 fe1c 	bl	80014d4 <SSD1306_GotoXY>
		SSD1306_Puts ("PASSWORD", &Font_11x18, 1);
 800089c:	2201      	movs	r2, #1
 800089e:	4924      	ldr	r1, [pc, #144]	; (8000930 <OLED_login_sc+0xcc>)
 80008a0:	4825      	ldr	r0, [pc, #148]	; (8000938 <OLED_login_sc+0xd4>)
 80008a2:	f000 fead 	bl	8001600 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 80008a6:	212c      	movs	r1, #44	; 0x2c
 80008a8:	2004      	movs	r0, #4
 80008aa:	f000 fe13 	bl	80014d4 <SSD1306_GotoXY>
		SSD1306_Puts ("TRIES:", &Font_11x18, 1);
 80008ae:	2201      	movs	r2, #1
 80008b0:	491f      	ldr	r1, [pc, #124]	; (8000930 <OLED_login_sc+0xcc>)
 80008b2:	4822      	ldr	r0, [pc, #136]	; (800093c <OLED_login_sc+0xd8>)
 80008b4:	f000 fea4 	bl	8001600 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 80008b8:	2301      	movs	r3, #1
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	2101      	movs	r1, #1
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 fec1 	bl	800164a <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 80008c8:	2301      	movs	r3, #1
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 feb9 	bl	800164a <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 80008d8:	2301      	movs	r3, #1
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	2100      	movs	r1, #0
 80008e2:	2080      	movs	r0, #128	; 0x80
 80008e4:	f000 feb1 	bl	800164a <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 80008e8:	2301      	movs	r3, #1
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 fea9 	bl	800164a <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 80008f8:	2301      	movs	r3, #1
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	233e      	movs	r3, #62	; 0x3e
 80008fe:	221b      	movs	r2, #27
 8000900:	2102      	movs	r1, #2
 8000902:	2064      	movs	r0, #100	; 0x64
 8000904:	f000 ff9c 	bl	8001840 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 8000908:	2119      	movs	r1, #25
 800090a:	206e      	movs	r0, #110	; 0x6e
 800090c:	f000 fde2 	bl	80014d4 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(loginTries+'0'), &Font_11x18, 1);
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <OLED_login_sc+0xdc>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	3330      	adds	r3, #48	; 0x30
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2201      	movs	r2, #1
 800091a:	4905      	ldr	r1, [pc, #20]	; (8000930 <OLED_login_sc+0xcc>)
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fdef 	bl	8001500 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 8000922:	f000 fd31 	bl	8001388 <SSD1306_UpdateScreen>
	}
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200002b4 	.word	0x200002b4
 8000930:	20000000 	.word	0x20000000
 8000934:	08009780 	.word	0x08009780
 8000938:	08009788 	.word	0x08009788
 800093c:	08009794 	.word	0x08009794
 8000940:	20000092 	.word	0x20000092

08000944 <OLED_block_sc>:

void OLED_block_sc(){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 800094a:	f001 fd6f 	bl	800242c <HAL_GetTick>
 800094e:	4602      	mov	r2, r0
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <OLED_block_sc+0x8c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800095a:	d936      	bls.n	80009ca <OLED_block_sc+0x86>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 fd41 	bl	80013e4 <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 8000962:	2106      	movs	r1, #6
 8000964:	2004      	movs	r0, #4
 8000966:	f000 fdb5 	bl	80014d4 <SSD1306_GotoXY>
		SSD1306_Puts ("- DEVICE  -", &Font_11x18, 1);
 800096a:	2201      	movs	r2, #1
 800096c:	4919      	ldr	r1, [pc, #100]	; (80009d4 <OLED_block_sc+0x90>)
 800096e:	481a      	ldr	r0, [pc, #104]	; (80009d8 <OLED_block_sc+0x94>)
 8000970:	f000 fe46 	bl	8001600 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000974:	2119      	movs	r1, #25
 8000976:	2004      	movs	r0, #4
 8000978:	f000 fdac 	bl	80014d4 <SSD1306_GotoXY>
		SSD1306_Puts ("- BLOCKED -", &Font_11x18, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	4915      	ldr	r1, [pc, #84]	; (80009d4 <OLED_block_sc+0x90>)
 8000980:	4816      	ldr	r0, [pc, #88]	; (80009dc <OLED_block_sc+0x98>)
 8000982:	f000 fe3d 	bl	8001600 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000986:	2301      	movs	r3, #1
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2301      	movs	r3, #1
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	2101      	movs	r1, #1
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fe5a 	bl	800164a <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000996:	2301      	movs	r3, #1
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fe52 	bl	800164a <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 80009a6:	2301      	movs	r3, #1
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2340      	movs	r3, #64	; 0x40
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	2100      	movs	r1, #0
 80009b0:	2080      	movs	r0, #128	; 0x80
 80009b2:	f000 fe4a 	bl	800164a <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 80009b6:	2301      	movs	r3, #1
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2340      	movs	r3, #64	; 0x40
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 fe42 	bl	800164a <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 80009c6:	f000 fcdf 	bl	8001388 <SSD1306_UpdateScreen>
	}
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200002b8 	.word	0x200002b8
 80009d4:	20000000 	.word	0x20000000
 80009d8:	0800979c 	.word	0x0800979c
 80009dc:	080097a8 	.word	0x080097a8

080009e0 <sendUSB>:
		keyPressed = 9;
	}
	HAL_Delay(200);
}

void sendUSB(uint8_t *pass){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	while(*pass != '\0'){
 80009e8:	e066      	b.n	8000ab8 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	e060      	b.n	8000ab2 <sendUSB+0xd2>
			if(*pass == keys[i].value){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7819      	ldrb	r1, [r3, #0]
 80009f4:	4834      	ldr	r0, [pc, #208]	; (8000ac8 <sendUSB+0xe8>)
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	4403      	add	r3, r0
 8000a00:	3301      	adds	r3, #1
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4299      	cmp	r1, r3
 8000a06:	d11f      	bne.n	8000a48 <sendUSB+0x68>
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000a08:	492f      	ldr	r1, [pc, #188]	; (8000ac8 <sendUSB+0xe8>)
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <sendUSB+0xec>)
 8000a18:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	492b      	ldr	r1, [pc, #172]	; (8000acc <sendUSB+0xec>)
 8000a1e:	482c      	ldr	r0, [pc, #176]	; (8000ad0 <sendUSB+0xf0>)
 8000a20:	f007 f81e 	bl	8007a60 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000a24:	2032      	movs	r0, #50	; 0x32
 8000a26:	f001 fd0d 	bl	8002444 <HAL_Delay>
				keyboardhid.KEYCODE1 = 0x00;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <sendUSB+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000a30:	2208      	movs	r2, #8
 8000a32:	4926      	ldr	r1, [pc, #152]	; (8000acc <sendUSB+0xec>)
 8000a34:	4826      	ldr	r0, [pc, #152]	; (8000ad0 <sendUSB+0xf0>)
 8000a36:	f007 f813 	bl	8007a60 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000a3a:	2032      	movs	r0, #50	; 0x32
 8000a3c:	f001 fd02 	bl	8002444 <HAL_Delay>
				pass++;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3301      	adds	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
				break;
 8000a46:	e037      	b.n	8000ab8 <sendUSB+0xd8>
			}
			else if(*pass == keys[i].shiftValue){
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7819      	ldrb	r1, [r3, #0]
 8000a4c:	481e      	ldr	r0, [pc, #120]	; (8000ac8 <sendUSB+0xe8>)
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	4403      	add	r3, r0
 8000a58:	3302      	adds	r3, #2
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	d125      	bne.n	8000aac <sendUSB+0xcc>
				keyboardhid.MODIFIER = 0x02; // lewy Shift naciśniety
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <sendUSB+0xec>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000a66:	4918      	ldr	r1, [pc, #96]	; (8000ac8 <sendUSB+0xe8>)
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <sendUSB+0xec>)
 8000a76:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000a78:	2208      	movs	r2, #8
 8000a7a:	4914      	ldr	r1, [pc, #80]	; (8000acc <sendUSB+0xec>)
 8000a7c:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <sendUSB+0xf0>)
 8000a7e:	f006 ffef 	bl	8007a60 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000a82:	2032      	movs	r0, #50	; 0x32
 8000a84:	f001 fcde 	bl	8002444 <HAL_Delay>
				keyboardhid.MODIFIER = 0x00; // lewy Shift puszczony
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <sendUSB+0xec>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = 0x00;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <sendUSB+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000a94:	2208      	movs	r2, #8
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <sendUSB+0xec>)
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <sendUSB+0xf0>)
 8000a9a:	f006 ffe1 	bl	8007a60 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000a9e:	2032      	movs	r0, #50	; 0x32
 8000aa0:	f001 fcd0 	bl	8002444 <HAL_Delay>
				pass++;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
				break;
 8000aaa:	e005      	b.n	8000ab8 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ab6:	dd9b      	ble.n	80009f0 <sendUSB+0x10>
	while(*pass != '\0'){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d194      	bne.n	80009ea <sendUSB+0xa>
			}
		}
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	200002a4 	.word	0x200002a4
 8000ad0:	200009f8 	.word	0x200009f8

08000ad4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ad8:	f001 fc42 	bl	8002360 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000adc:	f000 f970 	bl	8000dc0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ae0:	f7ff fd02 	bl	80004e8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ae4:	f7ff fdaa 	bl	800063c <MX_I2C1_Init>
	MX_SPI3_Init();
 8000ae8:	f000 fb0c 	bl	8001104 <MX_SPI3_Init>
	MX_TIM2_Init();
 8000aec:	f001 f858 	bl	8001ba0 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000af0:	f008 f912 	bl	8008d18 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	//---- Inicjalizacja wyświetlacza OLED ----
	SSD1306_Init();
 8000af4:	f000 fb84 	bl	8001200 <SSD1306_Init>

	//---- Inicjalizacja obsługi enkodera ----
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000af8:	213c      	movs	r1, #60	; 0x3c
 8000afa:	4899      	ldr	r0, [pc, #612]	; (8000d60 <main+0x28c>)
 8000afc:	f005 f888 	bl	8005c10 <HAL_TIM_Encoder_Start_IT>

	//---- Inicjalizacja pamięci FLASH ----
	W25qxx_Init();
 8000b00:	f001 fa02 	bl	8001f08 <W25qxx_Init>
	W25qxx_EraseChip();
 8000b04:	f001 facc 	bl	80020a0 <W25qxx_EraseChip>
	// W25qxx_WriteSector(writeBuffer, 1, 0, 8);
	// W25qxx_ReadSector(readBuffer, 1, 0, 8);

	memcpy(passwordWrite, "123456\0", sizeof(passwordWrite));
 8000b08:	4a96      	ldr	r2, [pc, #600]	; (8000d64 <main+0x290>)
 8000b0a:	4b97      	ldr	r3, [pc, #604]	; (8000d68 <main+0x294>)
 8000b0c:	4610      	mov	r0, r2
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b14:	461a      	mov	r2, r3
 8000b16:	f008 fd4d 	bl	80095b4 <memcpy>
	XORCipher(passwordWrite, cipherKey);
 8000b1a:	4994      	ldr	r1, [pc, #592]	; (8000d6c <main+0x298>)
 8000b1c:	4891      	ldr	r0, [pc, #580]	; (8000d64 <main+0x290>)
 8000b1e:	f7ff fe03 	bl	8000728 <XORCipher>
	W25qxx_WritePage(passwordWrite, 1, 0, 255);
 8000b22:	23ff      	movs	r3, #255	; 0xff
 8000b24:	2200      	movs	r2, #0
 8000b26:	2101      	movs	r1, #1
 8000b28:	488e      	ldr	r0, [pc, #568]	; (8000d64 <main+0x290>)
 8000b2a:	f001 fae9 	bl	8002100 <W25qxx_WritePage>
	memcpy(passwordWrite, "654321\0", sizeof(passwordWrite));
 8000b2e:	4a8d      	ldr	r2, [pc, #564]	; (8000d64 <main+0x290>)
 8000b30:	4b8f      	ldr	r3, [pc, #572]	; (8000d70 <main+0x29c>)
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	f008 fd3a 	bl	80095b4 <memcpy>
	W25qxx_WritePage(passwordWrite, 2, 0, 256);
 8000b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b44:	2200      	movs	r2, #0
 8000b46:	2102      	movs	r1, #2
 8000b48:	4886      	ldr	r0, [pc, #536]	; (8000d64 <main+0x290>)
 8000b4a:	f001 fad9 	bl	8002100 <W25qxx_WritePage>
	memcpy(passwordWrite, "HaloHalo\0", sizeof(passwordWrite));
 8000b4e:	4a85      	ldr	r2, [pc, #532]	; (8000d64 <main+0x290>)
 8000b50:	4b88      	ldr	r3, [pc, #544]	; (8000d74 <main+0x2a0>)
 8000b52:	4610      	mov	r0, r2
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	f008 fd2a 	bl	80095b4 <memcpy>
	W25qxx_WritePage(passwordWrite, 3, 0, 256);
 8000b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b64:	2200      	movs	r2, #0
 8000b66:	2103      	movs	r1, #3
 8000b68:	487e      	ldr	r0, [pc, #504]	; (8000d64 <main+0x290>)
 8000b6a:	f001 fac9 	bl	8002100 <W25qxx_WritePage>
	memcpy(passwordWrite, "Cartoon-Duck-14-Coffee-Glvs\0", sizeof(passwordWrite));
 8000b6e:	4a7d      	ldr	r2, [pc, #500]	; (8000d64 <main+0x290>)
 8000b70:	4b81      	ldr	r3, [pc, #516]	; (8000d78 <main+0x2a4>)
 8000b72:	4610      	mov	r0, r2
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	f008 fd1a 	bl	80095b4 <memcpy>
	W25qxx_WritePage(passwordWrite, 4, 0, 256);
 8000b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b84:	2200      	movs	r2, #0
 8000b86:	2104      	movs	r1, #4
 8000b88:	4876      	ldr	r0, [pc, #472]	; (8000d64 <main+0x290>)
 8000b8a:	f001 fab9 	bl	8002100 <W25qxx_WritePage>
	memcpy(passwordWrite, "doubleclick\0", sizeof(passwordWrite));
 8000b8e:	4a75      	ldr	r2, [pc, #468]	; (8000d64 <main+0x290>)
 8000b90:	4b7a      	ldr	r3, [pc, #488]	; (8000d7c <main+0x2a8>)
 8000b92:	4610      	mov	r0, r2
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	f008 fd0a 	bl	80095b4 <memcpy>
	W25qxx_WritePage(passwordWrite, 5, 0, 256);
 8000ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2105      	movs	r1, #5
 8000ba8:	486e      	ldr	r0, [pc, #440]	; (8000d64 <main+0x290>)
 8000baa:	f001 faa9 	bl	8002100 <W25qxx_WritePage>
	memcpy(passwordWrite, "supersecure\0", sizeof(passwordWrite));
 8000bae:	4a6d      	ldr	r2, [pc, #436]	; (8000d64 <main+0x290>)
 8000bb0:	4b73      	ldr	r3, [pc, #460]	; (8000d80 <main+0x2ac>)
 8000bb2:	4610      	mov	r0, r2
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f008 fcfa 	bl	80095b4 <memcpy>
	W25qxx_WritePage(passwordWrite, 6, 0, 256);
 8000bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2106      	movs	r1, #6
 8000bc8:	4866      	ldr	r0, [pc, #408]	; (8000d64 <main+0x290>)
 8000bca:	f001 fa99 	bl	8002100 <W25qxx_WritePage>
	memcpy(passwordWrite, "Qwerty\0", sizeof(passwordWrite));
 8000bce:	4a65      	ldr	r2, [pc, #404]	; (8000d64 <main+0x290>)
 8000bd0:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <main+0x2b0>)
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f008 fcea 	bl	80095b4 <memcpy>
	W25qxx_WritePage(passwordWrite, 7, 0, 256);
 8000be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be4:	2200      	movs	r2, #0
 8000be6:	2107      	movs	r1, #7
 8000be8:	485e      	ldr	r0, [pc, #376]	; (8000d64 <main+0x290>)
 8000bea:	f001 fa89 	bl	8002100 <W25qxx_WritePage>
	memcpy(passwordWrite, "DEFAULT\0", sizeof(passwordWrite));
 8000bee:	4a5d      	ldr	r2, [pc, #372]	; (8000d64 <main+0x290>)
 8000bf0:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <main+0x2b4>)
 8000bf2:	4610      	mov	r0, r2
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	f008 fcda 	bl	80095b4 <memcpy>
	W25qxx_WritePage(passwordWrite, 8, 0, 256);
 8000c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c04:	2200      	movs	r2, #0
 8000c06:	2108      	movs	r1, #8
 8000c08:	4856      	ldr	r0, [pc, #344]	; (8000d64 <main+0x290>)
 8000c0a:	f001 fa79 	bl	8002100 <W25qxx_WritePage>
	memcpy(passwordWrite, "password\0", sizeof(passwordWrite));
 8000c0e:	4a55      	ldr	r2, [pc, #340]	; (8000d64 <main+0x290>)
 8000c10:	4b5e      	ldr	r3, [pc, #376]	; (8000d8c <main+0x2b8>)
 8000c12:	4610      	mov	r0, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f008 fcca 	bl	80095b4 <memcpy>
	W25qxx_WritePage(passwordWrite, 9, 0, 256);
 8000c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c24:	2200      	movs	r2, #0
 8000c26:	2109      	movs	r1, #9
 8000c28:	484e      	ldr	r0, [pc, #312]	; (8000d64 <main+0x290>)
 8000c2a:	f001 fa69 	bl	8002100 <W25qxx_WritePage>
	memcpy(passwordWrite, "0\0", sizeof(passwordWrite));
 8000c2e:	4a4d      	ldr	r2, [pc, #308]	; (8000d64 <main+0x290>)
 8000c30:	4b57      	ldr	r3, [pc, #348]	; (8000d90 <main+0x2bc>)
 8000c32:	4610      	mov	r0, r2
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	f008 fcba 	bl	80095b4 <memcpy>
	W25qxx_WritePage(passwordWrite, 10, 0, 256);
 8000c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c44:	2200      	movs	r2, #0
 8000c46:	210a      	movs	r1, #10
 8000c48:	4846      	ldr	r0, [pc, #280]	; (8000d64 <main+0x290>)
 8000c4a:	f001 fa59 	bl	8002100 <W25qxx_WritePage>

	//---- Inicjalizacja obsługi macierzy przycisków
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2120      	movs	r1, #32
 8000c52:	4850      	ldr	r0, [pc, #320]	; (8000d94 <main+0x2c0>)
 8000c54:	f001 fec4 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2140      	movs	r1, #64	; 0x40
 8000c5c:	484d      	ldr	r0, [pc, #308]	; (8000d94 <main+0x2c0>)
 8000c5e:	f001 febf 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	484b      	ldr	r0, [pc, #300]	; (8000d94 <main+0x2c0>)
 8000c68:	f001 feba 	bl	80029e0 <HAL_GPIO_WritePin>

	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c72:	4849      	ldr	r0, [pc, #292]	; (8000d98 <main+0x2c4>)
 8000c74:	f001 feb4 	bl	80029e0 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(deviceState == 0){
 8000c78:	4b48      	ldr	r3, [pc, #288]	; (8000d9c <main+0x2c8>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d148      	bne.n	8000d12 <main+0x23e>
			OLED_login_sc();
 8000c80:	f7ff fdf0 	bl	8000864 <OLED_login_sc>
			if(keyFlag){
 8000c84:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <main+0x2cc>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d010      	beq.n	8000cb0 <main+0x1dc>
				loginBuff[loginCounter] = keyPressed;
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <main+0x2d0>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <main+0x2d4>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2d9      	uxtb	r1, r3
 8000c9a:	4b44      	ldr	r3, [pc, #272]	; (8000dac <main+0x2d8>)
 8000c9c:	5499      	strb	r1, [r3, r2]
				loginCounter++;
 8000c9e:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <main+0x2d0>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <main+0x2d0>)
 8000ca8:	701a      	strb	r2, [r3, #0]
				keyFlag = 0;
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <main+0x2cc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
			}
			if(loginCounter == 4){
 8000cb0:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <main+0x2d0>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d124      	bne.n	8000d02 <main+0x22e>
				if(login[0] == loginBuff[0] && login[1] == loginBuff[1] && login[2] == loginBuff[2] && login[3] == loginBuff[3]){
 8000cb8:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <main+0x2dc>)
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <main+0x2d8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d115      	bne.n	8000cf0 <main+0x21c>
 8000cc4:	4b3a      	ldr	r3, [pc, #232]	; (8000db0 <main+0x2dc>)
 8000cc6:	785a      	ldrb	r2, [r3, #1]
 8000cc8:	4b38      	ldr	r3, [pc, #224]	; (8000dac <main+0x2d8>)
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d10f      	bne.n	8000cf0 <main+0x21c>
 8000cd0:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <main+0x2dc>)
 8000cd2:	789a      	ldrb	r2, [r3, #2]
 8000cd4:	4b35      	ldr	r3, [pc, #212]	; (8000dac <main+0x2d8>)
 8000cd6:	789b      	ldrb	r3, [r3, #2]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d109      	bne.n	8000cf0 <main+0x21c>
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <main+0x2dc>)
 8000cde:	78da      	ldrb	r2, [r3, #3]
 8000ce0:	4b32      	ldr	r3, [pc, #200]	; (8000dac <main+0x2d8>)
 8000ce2:	78db      	ldrb	r3, [r3, #3]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d103      	bne.n	8000cf0 <main+0x21c>
					deviceState = 1;
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <main+0x2c8>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e008      	b.n	8000d02 <main+0x22e>
				}else{
					loginCounter = 0;
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <main+0x2d0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
					loginTries--;
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <main+0x2e0>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <main+0x2e0>)
 8000d00:	701a      	strb	r2, [r3, #0]
				}
			}
			if(loginTries == 0){
 8000d02:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <main+0x2e0>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1b6      	bne.n	8000c78 <main+0x1a4>
				deviceState = 99;
 8000d0a:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <main+0x2c8>)
 8000d0c:	2263      	movs	r2, #99	; 0x63
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e7b2      	b.n	8000c78 <main+0x1a4>
			}
		}
		else if(deviceState == 99){
 8000d12:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <main+0x2c8>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b63      	cmp	r3, #99	; 0x63
 8000d18:	d102      	bne.n	8000d20 <main+0x24c>
			OLED_block_sc();
 8000d1a:	f7ff fe13 	bl	8000944 <OLED_block_sc>
 8000d1e:	e7ab      	b.n	8000c78 <main+0x1a4>
		}
		else{
			OLED_page_sc();
 8000d20:	f7ff fd2e 	bl	8000780 <OLED_page_sc>
			if(keyFlag){
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <main+0x2cc>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0a4      	beq.n	8000c78 <main+0x1a4>
				W25qxx_ReadPage(passwordRead, pageNumber*9+keyPressed, 0, 255);
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <main+0x2e4>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4613      	mov	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4413      	add	r3, r2
 8000d38:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <main+0x2d4>)
 8000d3a:	7812      	ldrb	r2, [r2, #0]
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	1899      	adds	r1, r3, r2
 8000d40:	23ff      	movs	r3, #255	; 0xff
 8000d42:	2200      	movs	r2, #0
 8000d44:	481d      	ldr	r0, [pc, #116]	; (8000dbc <main+0x2e8>)
 8000d46:	f001 fa61 	bl	800220c <W25qxx_ReadPage>
				XORCipher(passwordRead, cipherKey);
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <main+0x298>)
 8000d4c:	481b      	ldr	r0, [pc, #108]	; (8000dbc <main+0x2e8>)
 8000d4e:	f7ff fceb 	bl	8000728 <XORCipher>
				sendUSB(passwordRead);
 8000d52:	481a      	ldr	r0, [pc, #104]	; (8000dbc <main+0x2e8>)
 8000d54:	f7ff fe44 	bl	80009e0 <sendUSB>
				keyFlag = 0;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <main+0x2cc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
		if(deviceState == 0){
 8000d5e:	e78b      	b.n	8000c78 <main+0x1a4>
 8000d60:	2000098c 	.word	0x2000098c
 8000d64:	20000830 	.word	0x20000830
 8000d68:	080097b4 	.word	0x080097b4
 8000d6c:	20000098 	.word	0x20000098
 8000d70:	080097bc 	.word	0x080097bc
 8000d74:	080097c4 	.word	0x080097c4
 8000d78:	080097d0 	.word	0x080097d0
 8000d7c:	080097f0 	.word	0x080097f0
 8000d80:	08009800 	.word	0x08009800
 8000d84:	08009810 	.word	0x08009810
 8000d88:	08009818 	.word	0x08009818
 8000d8c:	08009824 	.word	0x08009824
 8000d90:	08009830 	.word	0x08009830
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	20000278 	.word	0x20000278
 8000da0:	20000291 	.word	0x20000291
 8000da4:	20000279 	.word	0x20000279
 8000da8:	20000290 	.word	0x20000290
 8000dac:	20000930 	.word	0x20000930
 8000db0:	20000094 	.word	0x20000094
 8000db4:	20000092 	.word	0x20000092
 8000db8:	200002ac 	.word	0x200002ac
 8000dbc:	20000730 	.word	0x20000730

08000dc0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	2230      	movs	r2, #48	; 0x30
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f008 fbfb 	bl	80095ca <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <SystemClock_Config+0xc8>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a26      	ldr	r2, [pc, #152]	; (8000e88 <SystemClock_Config+0xc8>)
 8000dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <SystemClock_Config+0xc8>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <SystemClock_Config+0xcc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <SystemClock_Config+0xcc>)
 8000e0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <SystemClock_Config+0xcc>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e26:	2302      	movs	r3, #2
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000e30:	2319      	movs	r3, #25
 8000e32:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000e34:	23c0      	movs	r3, #192	; 0xc0
 8000e36:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 fcd5 	bl	80047f4 <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000e50:	f000 f950 	bl	80010f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	230f      	movs	r3, #15
 8000e56:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e64:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	2103      	movs	r1, #3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 ff2f 	bl	8004cd4 <HAL_RCC_ClockConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000e7c:	f000 f93a 	bl	80010f4 <Error_Handler>
	}
}
 8000e80:	bf00      	nop
 8000e82:	3750      	adds	r7, #80	; 0x50
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40007000 	.word	0x40007000

08000e90 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ea0:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000eaa:	801a      	strh	r2, [r3, #0]
	if(count - old_count > 5)
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	dd0e      	ble.n	8000ede <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(pageNumber > 0)
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <HAL_TIM_IC_CaptureCallback+0x42>
			pageNumber--;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ed0:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ed4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000eda:	801a      	strh	r2, [r3, #0]
		if(pageNumber < 9)
			pageNumber++;
		old_count = count;
	}

}
 8000edc:	e018      	b.n	8000f10 <HAL_TIM_IC_CaptureCallback+0x80>
	}else if(count - old_count < -5)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	f113 0f05 	cmn.w	r3, #5
 8000ef2:	da0d      	bge.n	8000f10 <HAL_TIM_IC_CaptureCallback+0x80>
		if(pageNumber < 9)
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d804      	bhi.n	8000f06 <HAL_TIM_IC_CaptureCallback+0x76>
			pageNumber++;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f04:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f0e:	801a      	strh	r2, [r3, #0]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	2000029c 	.word	0x2000029c
 8000f20:	200002a0 	.word	0x200002a0
 8000f24:	200002a2 	.word	0x200002a2
 8000f28:	200002ac 	.word	0x200002ac

08000f2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000f36:	f001 fa79 	bl	800242c <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	4b66      	ldr	r3, [pc, #408]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000f3e:	601a      	str	r2, [r3, #0]
	if(currentMillis - previousMillis > 300)
 8000f40:	4b65      	ldr	r3, [pc, #404]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b65      	ldr	r3, [pc, #404]	; (80010dc <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f4e:	f240 80be 	bls.w	80010ce <HAL_GPIO_EXTI_Callback+0x1a2>
	{
		GPIO_InitStructPrivate.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000f52:	4b63      	ldr	r3, [pc, #396]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f54:	221c      	movs	r2, #28
 8000f56:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000f58:	4b61      	ldr	r3, [pc, #388]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000f5e:	4b60      	ldr	r3, [pc, #384]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	4b5e      	ldr	r3, [pc, #376]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000f6a:	495d      	ldr	r1, [pc, #372]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f6c:	485d      	ldr	r0, [pc, #372]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000f6e:	f001 fb9d 	bl	80026ac <HAL_GPIO_Init>

		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2120      	movs	r1, #32
 8000f76:	485b      	ldr	r0, [pc, #364]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000f78:	f001 fd32 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	4858      	ldr	r0, [pc, #352]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000f82:	f001 fd2d 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	4856      	ldr	r0, [pc, #344]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000f8c:	f001 fd28 	bl	80029e0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8000f90:	2110      	movs	r1, #16
 8000f92:	4854      	ldr	r0, [pc, #336]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000f94:	f001 fd0c 	bl	80029b0 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_EXTI_Callback+0x7a>
			keyPressed = 1;
 8000f9e:	4b52      	ldr	r3, [pc, #328]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e014      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	484e      	ldr	r0, [pc, #312]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000faa:	f001 fd01 	bl	80029b0 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_EXTI_Callback+0x90>
			keyPressed = 4;
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e009      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4849      	ldr	r0, [pc, #292]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fc0:	f001 fcf6 	bl	80029b0 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <HAL_GPIO_EXTI_Callback+0xa4>
			keyPressed = 7;
 8000fca:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	701a      	strb	r2, [r3, #0]

		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	4843      	ldr	r0, [pc, #268]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fd6:	f001 fd03 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2140      	movs	r1, #64	; 0x40
 8000fde:	4841      	ldr	r0, [pc, #260]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fe0:	f001 fcfe 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	483e      	ldr	r0, [pc, #248]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fea:	f001 fcf9 	bl	80029e0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8000fee:	2110      	movs	r1, #16
 8000ff0:	483c      	ldr	r0, [pc, #240]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000ff2:	f001 fcdd 	bl	80029b0 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_EXTI_Callback+0xd8>
			keyPressed = 2;
 8000ffc:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e014      	b.n	800102e <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8001004:	2108      	movs	r1, #8
 8001006:	4837      	ldr	r0, [pc, #220]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001008:	f001 fcd2 	bl	80029b0 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_EXTI_Callback+0xee>
			keyPressed = 5;
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001014:	2205      	movs	r2, #5
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	e009      	b.n	800102e <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 800101a:	2104      	movs	r1, #4
 800101c:	4831      	ldr	r0, [pc, #196]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800101e:	f001 fcc7 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <HAL_GPIO_EXTI_Callback+0x102>
			keyPressed = 8;
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800102a:	2208      	movs	r2, #8
 800102c:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2120      	movs	r1, #32
 8001032:	482c      	ldr	r0, [pc, #176]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001034:	f001 fcd4 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2140      	movs	r1, #64	; 0x40
 800103c:	4829      	ldr	r0, [pc, #164]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800103e:	f001 fccf 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	4827      	ldr	r0, [pc, #156]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001048:	f001 fcca 	bl	80029e0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 800104c:	2110      	movs	r1, #16
 800104e:	4825      	ldr	r0, [pc, #148]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001050:	f001 fcae 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_EXTI_Callback+0x136>
			keyPressed = 3;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800105c:	2203      	movs	r2, #3
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e014      	b.n	800108c <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8001062:	2108      	movs	r1, #8
 8001064:	481f      	ldr	r0, [pc, #124]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001066:	f001 fca3 	bl	80029b0 <HAL_GPIO_ReadPin>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_EXTI_Callback+0x14c>
			keyPressed = 6;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001072:	2206      	movs	r2, #6
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e009      	b.n	800108c <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8001078:	2104      	movs	r1, #4
 800107a:	481a      	ldr	r0, [pc, #104]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800107c:	f001 fc98 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <HAL_GPIO_EXTI_Callback+0x160>
			keyPressed = 9;
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001088:	2209      	movs	r2, #9
 800108a:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	2120      	movs	r1, #32
 8001090:	4814      	ldr	r0, [pc, #80]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001092:	f001 fca5 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	2140      	movs	r1, #64	; 0x40
 800109a:	4812      	ldr	r0, [pc, #72]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800109c:	f001 fca0 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010a6:	f001 fc9b 	bl	80029e0 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80010ac:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <HAL_GPIO_EXTI_Callback+0x1c0>)
 80010ae:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80010b2:	2202      	movs	r2, #2
 80010b4:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 80010b6:	490a      	ldr	r1, [pc, #40]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80010b8:	480a      	ldr	r0, [pc, #40]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010ba:	f001 faf7 	bl	80026ac <HAL_GPIO_Init>


		keyFlag = 1;
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
		previousMillis = HAL_GetTick();
 80010c4:	f001 f9b2 	bl	800242c <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_GPIO_EXTI_Callback+0x1b0>)
 80010cc:	601a      	str	r2, [r3, #0]
	}

}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000298 	.word	0x20000298
 80010dc:	20000294 	.word	0x20000294
 80010e0:	2000027c 	.word	0x2000027c
 80010e4:	40020000 	.word	0x40020000
 80010e8:	20000290 	.word	0x20000290
 80010ec:	10110000 	.word	0x10110000
 80010f0:	20000291 	.word	0x20000291

080010f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_SPI3_Init+0x64>)
 800110a:	4a18      	ldr	r2, [pc, #96]	; (800116c <MX_SPI3_Init+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_SPI3_Init+0x64>)
 8001110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001114:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_SPI3_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_SPI3_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_SPI3_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_SPI3_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_SPI3_Init+0x64>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_SPI3_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_SPI3_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_SPI3_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_SPI3_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_SPI3_Init+0x64>)
 8001150:	220a      	movs	r2, #10
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_SPI3_Init+0x64>)
 8001156:	f003 ff75 	bl	8005044 <HAL_SPI_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001160:	f7ff ffc8 	bl	80010f4 <Error_Handler>
  }

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000934 	.word	0x20000934
 800116c:	40003c00 	.word	0x40003c00

08001170 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_SPI_MspInit+0x84>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d12b      	bne.n	80011ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 800119c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80011ca:	2338      	movs	r3, #56	; 0x38
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011da:	2306      	movs	r3, #6
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <HAL_SPI_MspInit+0x8c>)
 80011e6:	f001 fa61 	bl	80026ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40003c00 	.word	0x40003c00
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020400 	.word	0x40020400

08001200 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001206:	f000 fb85 	bl	8001914 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800120a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800120e:	2201      	movs	r2, #1
 8001210:	2178      	movs	r1, #120	; 0x78
 8001212:	485b      	ldr	r0, [pc, #364]	; (8001380 <SSD1306_Init+0x180>)
 8001214:	f001 fe4c 	bl	8002eb0 <HAL_I2C_IsDeviceReady>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800121e:	2300      	movs	r3, #0
 8001220:	e0a9      	b.n	8001376 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001222:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001226:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001228:	e002      	b.n	8001230 <SSD1306_Init+0x30>
		p--;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3b01      	subs	r3, #1
 800122e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f9      	bne.n	800122a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001236:	22ae      	movs	r2, #174	; 0xae
 8001238:	2100      	movs	r1, #0
 800123a:	2078      	movs	r0, #120	; 0x78
 800123c:	f000 fbc6 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001240:	2220      	movs	r2, #32
 8001242:	2100      	movs	r1, #0
 8001244:	2078      	movs	r0, #120	; 0x78
 8001246:	f000 fbc1 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800124a:	2210      	movs	r2, #16
 800124c:	2100      	movs	r1, #0
 800124e:	2078      	movs	r0, #120	; 0x78
 8001250:	f000 fbbc 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001254:	22b0      	movs	r2, #176	; 0xb0
 8001256:	2100      	movs	r1, #0
 8001258:	2078      	movs	r0, #120	; 0x78
 800125a:	f000 fbb7 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800125e:	22c8      	movs	r2, #200	; 0xc8
 8001260:	2100      	movs	r1, #0
 8001262:	2078      	movs	r0, #120	; 0x78
 8001264:	f000 fbb2 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2078      	movs	r0, #120	; 0x78
 800126e:	f000 fbad 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001272:	2210      	movs	r2, #16
 8001274:	2100      	movs	r1, #0
 8001276:	2078      	movs	r0, #120	; 0x78
 8001278:	f000 fba8 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800127c:	2240      	movs	r2, #64	; 0x40
 800127e:	2100      	movs	r1, #0
 8001280:	2078      	movs	r0, #120	; 0x78
 8001282:	f000 fba3 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001286:	2281      	movs	r2, #129	; 0x81
 8001288:	2100      	movs	r1, #0
 800128a:	2078      	movs	r0, #120	; 0x78
 800128c:	f000 fb9e 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001290:	22ff      	movs	r2, #255	; 0xff
 8001292:	2100      	movs	r1, #0
 8001294:	2078      	movs	r0, #120	; 0x78
 8001296:	f000 fb99 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800129a:	22a1      	movs	r2, #161	; 0xa1
 800129c:	2100      	movs	r1, #0
 800129e:	2078      	movs	r0, #120	; 0x78
 80012a0:	f000 fb94 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80012a4:	22a6      	movs	r2, #166	; 0xa6
 80012a6:	2100      	movs	r1, #0
 80012a8:	2078      	movs	r0, #120	; 0x78
 80012aa:	f000 fb8f 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80012ae:	22a8      	movs	r2, #168	; 0xa8
 80012b0:	2100      	movs	r1, #0
 80012b2:	2078      	movs	r0, #120	; 0x78
 80012b4:	f000 fb8a 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80012b8:	223f      	movs	r2, #63	; 0x3f
 80012ba:	2100      	movs	r1, #0
 80012bc:	2078      	movs	r0, #120	; 0x78
 80012be:	f000 fb85 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012c2:	22a4      	movs	r2, #164	; 0xa4
 80012c4:	2100      	movs	r1, #0
 80012c6:	2078      	movs	r0, #120	; 0x78
 80012c8:	f000 fb80 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80012cc:	22d3      	movs	r2, #211	; 0xd3
 80012ce:	2100      	movs	r1, #0
 80012d0:	2078      	movs	r0, #120	; 0x78
 80012d2:	f000 fb7b 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	; 0x78
 80012dc:	f000 fb76 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80012e0:	22d5      	movs	r2, #213	; 0xd5
 80012e2:	2100      	movs	r1, #0
 80012e4:	2078      	movs	r0, #120	; 0x78
 80012e6:	f000 fb71 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80012ea:	22f0      	movs	r2, #240	; 0xf0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2078      	movs	r0, #120	; 0x78
 80012f0:	f000 fb6c 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80012f4:	22d9      	movs	r2, #217	; 0xd9
 80012f6:	2100      	movs	r1, #0
 80012f8:	2078      	movs	r0, #120	; 0x78
 80012fa:	f000 fb67 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80012fe:	2222      	movs	r2, #34	; 0x22
 8001300:	2100      	movs	r1, #0
 8001302:	2078      	movs	r0, #120	; 0x78
 8001304:	f000 fb62 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001308:	22da      	movs	r2, #218	; 0xda
 800130a:	2100      	movs	r1, #0
 800130c:	2078      	movs	r0, #120	; 0x78
 800130e:	f000 fb5d 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001312:	2212      	movs	r2, #18
 8001314:	2100      	movs	r1, #0
 8001316:	2078      	movs	r0, #120	; 0x78
 8001318:	f000 fb58 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800131c:	22db      	movs	r2, #219	; 0xdb
 800131e:	2100      	movs	r1, #0
 8001320:	2078      	movs	r0, #120	; 0x78
 8001322:	f000 fb53 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001326:	2220      	movs	r2, #32
 8001328:	2100      	movs	r1, #0
 800132a:	2078      	movs	r0, #120	; 0x78
 800132c:	f000 fb4e 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001330:	228d      	movs	r2, #141	; 0x8d
 8001332:	2100      	movs	r1, #0
 8001334:	2078      	movs	r0, #120	; 0x78
 8001336:	f000 fb49 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800133a:	2214      	movs	r2, #20
 800133c:	2100      	movs	r1, #0
 800133e:	2078      	movs	r0, #120	; 0x78
 8001340:	f000 fb44 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001344:	22af      	movs	r2, #175	; 0xaf
 8001346:	2100      	movs	r1, #0
 8001348:	2078      	movs	r0, #120	; 0x78
 800134a:	f000 fb3f 	bl	80019cc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800134e:	222e      	movs	r2, #46	; 0x2e
 8001350:	2100      	movs	r1, #0
 8001352:	2078      	movs	r0, #120	; 0x78
 8001354:	f000 fb3a 	bl	80019cc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001358:	2000      	movs	r0, #0
 800135a:	f000 f843 	bl	80013e4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800135e:	f000 f813 	bl	8001388 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <SSD1306_Init+0x184>)
 8001364:	2200      	movs	r2, #0
 8001366:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <SSD1306_Init+0x184>)
 800136a:	2200      	movs	r2, #0
 800136c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SSD1306_Init+0x184>)
 8001370:	2201      	movs	r2, #1
 8001372:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001374:	2301      	movs	r3, #1
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200006d4 	.word	0x200006d4
 8001384:	200006bc 	.word	0x200006bc

08001388 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800138e:	2300      	movs	r3, #0
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	e01d      	b.n	80013d0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	3b50      	subs	r3, #80	; 0x50
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	2100      	movs	r1, #0
 800139e:	2078      	movs	r0, #120	; 0x78
 80013a0:	f000 fb14 	bl	80019cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2078      	movs	r0, #120	; 0x78
 80013aa:	f000 fb0f 	bl	80019cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80013ae:	2210      	movs	r2, #16
 80013b0:	2100      	movs	r1, #0
 80013b2:	2078      	movs	r0, #120	; 0x78
 80013b4:	f000 fb0a 	bl	80019cc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	01db      	lsls	r3, r3, #7
 80013bc:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <SSD1306_UpdateScreen+0x58>)
 80013be:	441a      	add	r2, r3
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	2140      	movs	r1, #64	; 0x40
 80013c4:	2078      	movs	r0, #120	; 0x78
 80013c6:	f000 fab9 	bl	800193c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	3301      	adds	r3, #1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b07      	cmp	r3, #7
 80013d4:	d9de      	bls.n	8001394 <SSD1306_UpdateScreen+0xc>
	}
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002bc 	.word	0x200002bc

080013e4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <SSD1306_Fill+0x14>
 80013f4:	2300      	movs	r3, #0
 80013f6:	e000      	b.n	80013fa <SSD1306_Fill+0x16>
 80013f8:	23ff      	movs	r3, #255	; 0xff
 80013fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013fe:	4619      	mov	r1, r3
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <SSD1306_Fill+0x2c>)
 8001402:	f008 f8e2 	bl	80095ca <memset>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200002bc 	.word	0x200002bc

08001414 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
 800141e:	460b      	mov	r3, r1
 8001420:	80bb      	strh	r3, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	70fb      	strb	r3, [r7, #3]
	if (
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	2b7f      	cmp	r3, #127	; 0x7f
 800142a:	d848      	bhi.n	80014be <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800142c:	88bb      	ldrh	r3, [r7, #4]
 800142e:	2b3f      	cmp	r3, #63	; 0x3f
 8001430:	d845      	bhi.n	80014be <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <SSD1306_DrawPixel+0xb8>)
 8001434:	791b      	ldrb	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	2b00      	cmp	r3, #0
 800143e:	bf0c      	ite	eq
 8001440:	2301      	moveq	r3, #1
 8001442:	2300      	movne	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d11a      	bne.n	8001484 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	08db      	lsrs	r3, r3, #3
 8001454:	b298      	uxth	r0, r3
 8001456:	4603      	mov	r3, r0
 8001458:	01db      	lsls	r3, r3, #7
 800145a:	4413      	add	r3, r2
 800145c:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <SSD1306_DrawPixel+0xbc>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	b25a      	sxtb	r2, r3
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	2101      	movs	r1, #1
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	b25b      	sxtb	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b259      	sxtb	r1, r3
 8001474:	88fa      	ldrh	r2, [r7, #6]
 8001476:	4603      	mov	r3, r0
 8001478:	01db      	lsls	r3, r3, #7
 800147a:	4413      	add	r3, r2
 800147c:	b2c9      	uxtb	r1, r1
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <SSD1306_DrawPixel+0xbc>)
 8001480:	54d1      	strb	r1, [r2, r3]
 8001482:	e01d      	b.n	80014c0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	b298      	uxth	r0, r3
 800148c:	4603      	mov	r3, r0
 800148e:	01db      	lsls	r3, r3, #7
 8001490:	4413      	add	r3, r2
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <SSD1306_DrawPixel+0xbc>)
 8001494:	5cd3      	ldrb	r3, [r2, r3]
 8001496:	b25a      	sxtb	r2, r3
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	b259      	sxtb	r1, r3
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	4603      	mov	r3, r0
 80014b2:	01db      	lsls	r3, r3, #7
 80014b4:	4413      	add	r3, r2
 80014b6:	b2c9      	uxtb	r1, r1
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <SSD1306_DrawPixel+0xbc>)
 80014ba:	54d1      	strb	r1, [r2, r3]
 80014bc:	e000      	b.n	80014c0 <SSD1306_DrawPixel+0xac>
		return;
 80014be:	bf00      	nop
	}
}
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200006bc 	.word	0x200006bc
 80014d0:	200002bc 	.word	0x200002bc

080014d4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	460a      	mov	r2, r1
 80014de:	80fb      	strh	r3, [r7, #6]
 80014e0:	4613      	mov	r3, r2
 80014e2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80014e4:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SSD1306_GotoXY+0x28>)
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <SSD1306_GotoXY+0x28>)
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	8053      	strh	r3, [r2, #2]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	200006bc 	.word	0x200006bc

08001500 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
 800150c:	4613      	mov	r3, r2
 800150e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001510:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <SSD1306_Putc+0xfc>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
	if (
 800151c:	2b7f      	cmp	r3, #127	; 0x7f
 800151e:	dc07      	bgt.n	8001530 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001520:	4b36      	ldr	r3, [pc, #216]	; (80015fc <SSD1306_Putc+0xfc>)
 8001522:	885b      	ldrh	r3, [r3, #2]
 8001524:	461a      	mov	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	785b      	ldrb	r3, [r3, #1]
 800152a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800152c:	2b3f      	cmp	r3, #63	; 0x3f
 800152e:	dd01      	ble.n	8001534 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001530:	2300      	movs	r3, #0
 8001532:	e05e      	b.n	80015f2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e04b      	b.n	80015d2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	3b20      	subs	r3, #32
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	7849      	ldrb	r1, [r1, #1]
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4619      	mov	r1, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	440b      	add	r3, r1
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	e030      	b.n	80015c0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d010      	beq.n	8001590 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <SSD1306_Putc+0xfc>)
 8001570:	881a      	ldrh	r2, [r3, #0]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	b29b      	uxth	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b298      	uxth	r0, r3
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <SSD1306_Putc+0xfc>)
 800157c:	885a      	ldrh	r2, [r3, #2]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	b29b      	uxth	r3, r3
 8001582:	4413      	add	r3, r2
 8001584:	b29b      	uxth	r3, r3
 8001586:	79ba      	ldrb	r2, [r7, #6]
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff ff43 	bl	8001414 <SSD1306_DrawPixel>
 800158e:	e014      	b.n	80015ba <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <SSD1306_Putc+0xfc>)
 8001592:	881a      	ldrh	r2, [r3, #0]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4413      	add	r3, r2
 800159a:	b298      	uxth	r0, r3
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <SSD1306_Putc+0xfc>)
 800159e:	885a      	ldrh	r2, [r3, #2]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b299      	uxth	r1, r3
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf0c      	ite	eq
 80015ae:	2301      	moveq	r3, #1
 80015b0:	2300      	movne	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	f7ff ff2d 	bl	8001414 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	3301      	adds	r3, #1
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d3c8      	bcc.n	800155e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	785b      	ldrb	r3, [r3, #1]
 80015d6:	461a      	mov	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	4293      	cmp	r3, r2
 80015dc:	d3ad      	bcc.n	800153a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <SSD1306_Putc+0xfc>)
 80015e0:	881a      	ldrh	r2, [r3, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4413      	add	r3, r2
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <SSD1306_Putc+0xfc>)
 80015ee:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80015f0:	79fb      	ldrb	r3, [r7, #7]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200006bc 	.word	0x200006bc

08001600 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800160e:	e012      	b.n	8001636 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	79fa      	ldrb	r2, [r7, #7]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff71 	bl	8001500 <SSD1306_Putc>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d002      	beq.n	8001630 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	e008      	b.n	8001642 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1e8      	bne.n	8001610 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	781b      	ldrb	r3, [r3, #0]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800164a:	b590      	push	{r4, r7, lr}
 800164c:	b087      	sub	sp, #28
 800164e:	af00      	add	r7, sp, #0
 8001650:	4604      	mov	r4, r0
 8001652:	4608      	mov	r0, r1
 8001654:	4611      	mov	r1, r2
 8001656:	461a      	mov	r2, r3
 8001658:	4623      	mov	r3, r4
 800165a:	80fb      	strh	r3, [r7, #6]
 800165c:	4603      	mov	r3, r0
 800165e:	80bb      	strh	r3, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	2b7f      	cmp	r3, #127	; 0x7f
 800166c:	d901      	bls.n	8001672 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800166e:	237f      	movs	r3, #127	; 0x7f
 8001670:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	2b7f      	cmp	r3, #127	; 0x7f
 8001676:	d901      	bls.n	800167c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001678:	237f      	movs	r3, #127	; 0x7f
 800167a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800167c:	88bb      	ldrh	r3, [r7, #4]
 800167e:	2b3f      	cmp	r3, #63	; 0x3f
 8001680:	d901      	bls.n	8001686 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001682:	233f      	movs	r3, #63	; 0x3f
 8001684:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001686:	883b      	ldrh	r3, [r7, #0]
 8001688:	2b3f      	cmp	r3, #63	; 0x3f
 800168a:	d901      	bls.n	8001690 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800168c:	233f      	movs	r3, #63	; 0x3f
 800168e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001690:	88fa      	ldrh	r2, [r7, #6]
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	429a      	cmp	r2, r3
 8001696:	d205      	bcs.n	80016a4 <SSD1306_DrawLine+0x5a>
 8001698:	887a      	ldrh	r2, [r7, #2]
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	e004      	b.n	80016ae <SSD1306_DrawLine+0x64>
 80016a4:	88fa      	ldrh	r2, [r7, #6]
 80016a6:	887b      	ldrh	r3, [r7, #2]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80016b0:	88ba      	ldrh	r2, [r7, #4]
 80016b2:	883b      	ldrh	r3, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d205      	bcs.n	80016c4 <SSD1306_DrawLine+0x7a>
 80016b8:	883a      	ldrh	r2, [r7, #0]
 80016ba:	88bb      	ldrh	r3, [r7, #4]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	e004      	b.n	80016ce <SSD1306_DrawLine+0x84>
 80016c4:	88ba      	ldrh	r2, [r7, #4]
 80016c6:	883b      	ldrh	r3, [r7, #0]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80016d0:	88fa      	ldrh	r2, [r7, #6]
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d201      	bcs.n	80016dc <SSD1306_DrawLine+0x92>
 80016d8:	2301      	movs	r3, #1
 80016da:	e001      	b.n	80016e0 <SSD1306_DrawLine+0x96>
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80016e2:	88ba      	ldrh	r2, [r7, #4]
 80016e4:	883b      	ldrh	r3, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d201      	bcs.n	80016ee <SSD1306_DrawLine+0xa4>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e001      	b.n	80016f2 <SSD1306_DrawLine+0xa8>
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80016f4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dd06      	ble.n	800170e <SSD1306_DrawLine+0xc4>
 8001700:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001704:	0fda      	lsrs	r2, r3, #31
 8001706:	4413      	add	r3, r2
 8001708:	105b      	asrs	r3, r3, #1
 800170a:	b21b      	sxth	r3, r3
 800170c:	e006      	b.n	800171c <SSD1306_DrawLine+0xd2>
 800170e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001712:	425b      	negs	r3, r3
 8001714:	0fda      	lsrs	r2, r3, #31
 8001716:	4413      	add	r3, r2
 8001718:	105b      	asrs	r3, r3, #1
 800171a:	b21b      	sxth	r3, r3
 800171c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800171e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d129      	bne.n	800177a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001726:	883a      	ldrh	r2, [r7, #0]
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	d205      	bcs.n	800173a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800172e:	883b      	ldrh	r3, [r7, #0]
 8001730:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001732:	88bb      	ldrh	r3, [r7, #4]
 8001734:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001736:	893b      	ldrh	r3, [r7, #8]
 8001738:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	429a      	cmp	r2, r3
 8001740:	d205      	bcs.n	800174e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800174a:	893b      	ldrh	r3, [r7, #8]
 800174c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	82bb      	strh	r3, [r7, #20]
 8001752:	e00c      	b.n	800176e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001754:	8ab9      	ldrh	r1, [r7, #20]
 8001756:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fe59 	bl	8001414 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001762:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001766:	b29b      	uxth	r3, r3
 8001768:	3301      	adds	r3, #1
 800176a:	b29b      	uxth	r3, r3
 800176c:	82bb      	strh	r3, [r7, #20]
 800176e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001772:	883b      	ldrh	r3, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	dded      	ble.n	8001754 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001778:	e05f      	b.n	800183a <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800177a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d129      	bne.n	80017d6 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001782:	883a      	ldrh	r2, [r7, #0]
 8001784:	88bb      	ldrh	r3, [r7, #4]
 8001786:	429a      	cmp	r2, r3
 8001788:	d205      	bcs.n	8001796 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800178a:	883b      	ldrh	r3, [r7, #0]
 800178c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001792:	893b      	ldrh	r3, [r7, #8]
 8001794:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	429a      	cmp	r2, r3
 800179c:	d205      	bcs.n	80017aa <SSD1306_DrawLine+0x160>
			tmp = x1;
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80017a6:	893b      	ldrh	r3, [r7, #8]
 80017a8:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	82bb      	strh	r3, [r7, #20]
 80017ae:	e00c      	b.n	80017ca <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80017b0:	8abb      	ldrh	r3, [r7, #20]
 80017b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80017b6:	88b9      	ldrh	r1, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fe2b 	bl	8001414 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80017be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	82bb      	strh	r3, [r7, #20]
 80017ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017ce:	887b      	ldrh	r3, [r7, #2]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dded      	ble.n	80017b0 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80017d4:	e031      	b.n	800183a <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80017d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80017da:	88b9      	ldrh	r1, [r7, #4]
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fe18 	bl	8001414 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80017e4:	88fa      	ldrh	r2, [r7, #6]
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d103      	bne.n	80017f4 <SSD1306_DrawLine+0x1aa>
 80017ec:	88ba      	ldrh	r2, [r7, #4]
 80017ee:	883b      	ldrh	r3, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d021      	beq.n	8001838 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80017f4:	8afb      	ldrh	r3, [r7, #22]
 80017f6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80017f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80017fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001800:	425b      	negs	r3, r3
 8001802:	429a      	cmp	r2, r3
 8001804:	dd08      	ble.n	8001818 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001806:	8afa      	ldrh	r2, [r7, #22]
 8001808:	8a3b      	ldrh	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	b29b      	uxth	r3, r3
 800180e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001810:	89fa      	ldrh	r2, [r7, #14]
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	4413      	add	r3, r2
 8001816:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001818:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800181c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	dad8      	bge.n	80017d6 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001824:	8afa      	ldrh	r2, [r7, #22]
 8001826:	8a7b      	ldrh	r3, [r7, #18]
 8001828:	4413      	add	r3, r2
 800182a:	b29b      	uxth	r3, r3
 800182c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800182e:	89ba      	ldrh	r2, [r7, #12]
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001836:	e7ce      	b.n	80017d6 <SSD1306_DrawLine+0x18c>
			break;
 8001838:	bf00      	nop
		} 
	}
}
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd90      	pop	{r4, r7, pc}

08001840 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b085      	sub	sp, #20
 8001844:	af02      	add	r7, sp, #8
 8001846:	4604      	mov	r4, r0
 8001848:	4608      	mov	r0, r1
 800184a:	4611      	mov	r1, r2
 800184c:	461a      	mov	r2, r3
 800184e:	4623      	mov	r3, r4
 8001850:	80fb      	strh	r3, [r7, #6]
 8001852:	4603      	mov	r3, r0
 8001854:	80bb      	strh	r3, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	807b      	strh	r3, [r7, #2]
 800185a:	4613      	mov	r3, r2
 800185c:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	2b7f      	cmp	r3, #127	; 0x7f
 8001862:	d853      	bhi.n	800190c <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001864:	88bb      	ldrh	r3, [r7, #4]
 8001866:	2b3f      	cmp	r3, #63	; 0x3f
 8001868:	d850      	bhi.n	800190c <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	4413      	add	r3, r2
 8001870:	2b7f      	cmp	r3, #127	; 0x7f
 8001872:	dd03      	ble.n	800187c <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800187a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800187c:	88ba      	ldrh	r2, [r7, #4]
 800187e:	883b      	ldrh	r3, [r7, #0]
 8001880:	4413      	add	r3, r2
 8001882:	2b3f      	cmp	r3, #63	; 0x3f
 8001884:	dd03      	ble.n	800188e <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800188c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 800188e:	88fa      	ldrh	r2, [r7, #6]
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	4413      	add	r3, r2
 8001894:	b29a      	uxth	r2, r3
 8001896:	88bc      	ldrh	r4, [r7, #4]
 8001898:	88b9      	ldrh	r1, [r7, #4]
 800189a:	88f8      	ldrh	r0, [r7, #6]
 800189c:	7e3b      	ldrb	r3, [r7, #24]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	4623      	mov	r3, r4
 80018a2:	f7ff fed2 	bl	800164a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 80018a6:	88ba      	ldrh	r2, [r7, #4]
 80018a8:	883b      	ldrh	r3, [r7, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	b299      	uxth	r1, r3
 80018ae:	88fa      	ldrh	r2, [r7, #6]
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	4413      	add	r3, r2
 80018b4:	b29c      	uxth	r4, r3
 80018b6:	88ba      	ldrh	r2, [r7, #4]
 80018b8:	883b      	ldrh	r3, [r7, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	b29a      	uxth	r2, r3
 80018be:	88f8      	ldrh	r0, [r7, #6]
 80018c0:	7e3b      	ldrb	r3, [r7, #24]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	4622      	mov	r2, r4
 80018c8:	f7ff febf 	bl	800164a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80018cc:	88ba      	ldrh	r2, [r7, #4]
 80018ce:	883b      	ldrh	r3, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	b29c      	uxth	r4, r3
 80018d4:	88fa      	ldrh	r2, [r7, #6]
 80018d6:	88b9      	ldrh	r1, [r7, #4]
 80018d8:	88f8      	ldrh	r0, [r7, #6]
 80018da:	7e3b      	ldrb	r3, [r7, #24]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	4623      	mov	r3, r4
 80018e0:	f7ff feb3 	bl	800164a <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80018e4:	88fa      	ldrh	r2, [r7, #6]
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	4413      	add	r3, r2
 80018ea:	b298      	uxth	r0, r3
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	4413      	add	r3, r2
 80018f2:	b29c      	uxth	r4, r3
 80018f4:	88ba      	ldrh	r2, [r7, #4]
 80018f6:	883b      	ldrh	r3, [r7, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	88b9      	ldrh	r1, [r7, #4]
 80018fe:	7e3b      	ldrb	r3, [r7, #24]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	4613      	mov	r3, r2
 8001904:	4622      	mov	r2, r4
 8001906:	f7ff fea0 	bl	800164a <SSD1306_DrawLine>
 800190a:	e000      	b.n	800190e <SSD1306_DrawRectangle+0xce>
		return;
 800190c:	bf00      	nop
}
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <ssd1306_I2C_Init+0x24>)
 800191c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800191e:	e002      	b.n	8001926 <ssd1306_I2C_Init+0x12>
		p--;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f9      	bne.n	8001920 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	0003d090 	.word	0x0003d090

0800193c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b0c7      	sub	sp, #284	; 0x11c
 8001940:	af02      	add	r7, sp, #8
 8001942:	4604      	mov	r4, r0
 8001944:	4608      	mov	r0, r1
 8001946:	4639      	mov	r1, r7
 8001948:	600a      	str	r2, [r1, #0]
 800194a:	4619      	mov	r1, r3
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	4622      	mov	r2, r4
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	1dbb      	adds	r3, r7, #6
 8001954:	4602      	mov	r2, r0
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	460a      	mov	r2, r1
 800195c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	1dba      	adds	r2, r7, #6
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800196e:	e010      	b.n	8001992 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001970:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001974:	463a      	mov	r2, r7
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	441a      	add	r2, r3
 800197a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800197e:	3301      	adds	r3, #1
 8001980:	7811      	ldrb	r1, [r2, #0]
 8001982:	f107 020c 	add.w	r2, r7, #12
 8001986:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001988:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800198c:	3301      	adds	r3, #1
 800198e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001992:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001996:	b29b      	uxth	r3, r3
 8001998:	1d3a      	adds	r2, r7, #4
 800199a:	8812      	ldrh	r2, [r2, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8e7      	bhi.n	8001970 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b299      	uxth	r1, r3
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	b298      	uxth	r0, r3
 80019ae:	f107 020c 	add.w	r2, r7, #12
 80019b2:	230a      	movs	r3, #10
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	4603      	mov	r3, r0
 80019b8:	4803      	ldr	r0, [pc, #12]	; (80019c8 <ssd1306_I2C_WriteMulti+0x8c>)
 80019ba:	f001 f97b 	bl	8002cb4 <HAL_I2C_Master_Transmit>
}
 80019be:	bf00      	nop
 80019c0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	200006d4 	.word	0x200006d4

080019cc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	460b      	mov	r3, r1
 80019d8:	71bb      	strb	r3, [r7, #6]
 80019da:	4613      	mov	r3, r2
 80019dc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019e2:	797b      	ldrb	r3, [r7, #5]
 80019e4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	b299      	uxth	r1, r3
 80019ea:	f107 020c 	add.w	r2, r7, #12
 80019ee:	230a      	movs	r3, #10
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2302      	movs	r3, #2
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <ssd1306_I2C_Write+0x38>)
 80019f6:	f001 f95d 	bl	8002cb4 <HAL_I2C_Master_Transmit>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200006d4 	.word	0x200006d4

08001a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aac:	f000 fcaa 	bl	8002404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001ab8:	2004      	movs	r0, #4
 8001aba:	f000 ffab 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001ac6:	2008      	movs	r0, #8
 8001ac8:	f000 ffa4 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001ad4:	2010      	movs	r0, #16
 8001ad6:	f000 ff9d 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <TIM2_IRQHandler+0x10>)
 8001ae6:	f004 f8ea 	bl	8005cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000098c 	.word	0x2000098c

08001af4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <OTG_FS_IRQHandler+0x10>)
 8001afa:	f001 fe60 	bl	80037be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000ec8 	.word	0x20000ec8

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f007 fd02 	bl	8009540 <__errno>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	230c      	movs	r3, #12
 8001b40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20020000 	.word	0x20020000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	200006c4 	.word	0x200006c4
 8001b70:	200012d8 	.word	0x200012d8

08001b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <SystemInit+0x28>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <SystemInit+0x28>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <SystemInit+0x28>)
 8001b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	2224      	movs	r2, #36	; 0x24
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f007 fd0b 	bl	80095ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001be4:	2303      	movs	r3, #3
 8001be6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001be8:	2302      	movs	r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bec:	2301      	movs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001bf4:	230a      	movs	r3, #10
 8001bf6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001c04:	230a      	movs	r3, #10
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480d      	ldr	r0, [pc, #52]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001c10:	f003 ff6c 	bl	8005aec <HAL_TIM_Encoder_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c1a:	f7ff fa6b 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001c2c:	f004 fa1e 	bl	800606c <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c36:	f7ff fa5d 	bl	80010f4 <Error_Handler>
  }

}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	; 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000098c 	.word	0x2000098c

08001c48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c68:	d133      	bne.n	8001cd2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x94>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4808      	ldr	r0, [pc, #32]	; (8001ce0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001cbe:	f000 fcf5 	bl	80026ac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	201c      	movs	r0, #28
 8001cc8:	f000 fcb9 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ccc:	201c      	movs	r0, #28
 8001cce:	f000 fcd2 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	; 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001cee:	f107 020f 	add.w	r2, r7, #15
 8001cf2:	1df9      	adds	r1, r7, #7
 8001cf4:	2364      	movs	r3, #100	; 0x64
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	4804      	ldr	r0, [pc, #16]	; (8001d0c <W25qxx_Spi+0x28>)
 8001cfc:	f003 fc43 	bl	8005586 <HAL_SPI_TransmitReceive>
	return ret;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000934 	.word	0x20000934

08001d10 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d2c:	4813      	ldr	r0, [pc, #76]	; (8001d7c <W25qxx_ReadID+0x6c>)
 8001d2e:	f000 fe57 	bl	80029e0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001d32:	209f      	movs	r0, #159	; 0x9f
 8001d34:	f7ff ffd6 	bl	8001ce4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d38:	20a5      	movs	r0, #165	; 0xa5
 8001d3a:	f7ff ffd3 	bl	8001ce4 <W25qxx_Spi>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d42:	20a5      	movs	r0, #165	; 0xa5
 8001d44:	f7ff ffce 	bl	8001ce4 <W25qxx_Spi>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d4c:	20a5      	movs	r0, #165	; 0xa5
 8001d4e:	f7ff ffc9 	bl	8001ce4 <W25qxx_Spi>
 8001d52:	4603      	mov	r3, r0
 8001d54:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d5c:	4807      	ldr	r0, [pc, #28]	; (8001d7c <W25qxx_ReadID+0x6c>)
 8001d5e:	f000 fe3f 	bl	80029e0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40020000 	.word	0x40020000

08001d80 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d8c:	4816      	ldr	r0, [pc, #88]	; (8001de8 <W25qxx_ReadUniqID+0x68>)
 8001d8e:	f000 fe27 	bl	80029e0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8001d92:	204b      	movs	r0, #75	; 0x4b
 8001d94:	f7ff ffa6 	bl	8001ce4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	e005      	b.n	8001daa <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d9e:	20a5      	movs	r0, #165	; 0xa5
 8001da0:	f7ff ffa0 	bl	8001ce4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	3301      	adds	r3, #1
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d9f6      	bls.n	8001d9e <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	71bb      	strb	r3, [r7, #6]
 8001db4:	e00b      	b.n	8001dce <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001db6:	79bc      	ldrb	r4, [r7, #6]
 8001db8:	20a5      	movs	r0, #165	; 0xa5
 8001dba:	f7ff ff93 	bl	8001ce4 <W25qxx_Spi>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <W25qxx_ReadUniqID+0x6c>)
 8001dc4:	4423      	add	r3, r4
 8001dc6:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8001dc8:	79bb      	ldrb	r3, [r7, #6]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	71bb      	strb	r3, [r7, #6]
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	2b07      	cmp	r3, #7
 8001dd2:	d9f0      	bls.n	8001db6 <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dda:	4803      	ldr	r0, [pc, #12]	; (8001de8 <W25qxx_ReadUniqID+0x68>)
 8001ddc:	f000 fe00 	bl	80029e0 <HAL_GPIO_WritePin>
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	40020000 	.word	0x40020000
 8001dec:	200009cc 	.word	0x200009cc

08001df0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dfa:	4808      	ldr	r0, [pc, #32]	; (8001e1c <W25qxx_WriteEnable+0x2c>)
 8001dfc:	f000 fdf0 	bl	80029e0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8001e00:	2006      	movs	r0, #6
 8001e02:	f7ff ff6f 	bl	8001ce4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001e06:	2201      	movs	r2, #1
 8001e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e0c:	4803      	ldr	r0, [pc, #12]	; (8001e1c <W25qxx_WriteEnable+0x2c>)
 8001e0e:	f000 fde7 	bl	80029e0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f000 fb16 	bl	8002444 <HAL_Delay>
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40020000 	.word	0x40020000

08001e20 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e34:	481c      	ldr	r0, [pc, #112]	; (8001ea8 <W25qxx_ReadStatusRegister+0x88>)
 8001e36:	f000 fdd3 	bl	80029e0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d10c      	bne.n	8001e5a <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8001e40:	2005      	movs	r0, #5
 8001e42:	f7ff ff4f 	bl	8001ce4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e46:	20a5      	movs	r0, #165	; 0xa5
 8001e48:	f7ff ff4c 	bl	8001ce4 <W25qxx_Spi>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001e50:	4a16      	ldr	r2, [pc, #88]	; (8001eac <W25qxx_ReadStatusRegister+0x8c>)
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001e58:	e01b      	b.n	8001e92 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d10c      	bne.n	8001e7a <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8001e60:	2035      	movs	r0, #53	; 0x35
 8001e62:	f7ff ff3f 	bl	8001ce4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e66:	20a5      	movs	r0, #165	; 0xa5
 8001e68:	f7ff ff3c 	bl	8001ce4 <W25qxx_Spi>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001e70:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <W25qxx_ReadStatusRegister+0x8c>)
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001e78:	e00b      	b.n	8001e92 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001e7a:	2015      	movs	r0, #21
 8001e7c:	f7ff ff32 	bl	8001ce4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e80:	20a5      	movs	r0, #165	; 0xa5
 8001e82:	f7ff ff2f 	bl	8001ce4 <W25qxx_Spi>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <W25qxx_ReadStatusRegister+0x8c>)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <W25qxx_ReadStatusRegister+0x88>)
 8001e9a:	f000 fda1 	bl	80029e0 <HAL_GPIO_WritePin>
	return status;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	200009cc 	.word	0x200009cc

08001eb0 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f000 fac5 	bl	8002444 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ec0:	480f      	ldr	r0, [pc, #60]	; (8001f00 <W25qxx_WaitForWriteEnd+0x50>)
 8001ec2:	f000 fd8d 	bl	80029e0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8001ec6:	2005      	movs	r0, #5
 8001ec8:	f7ff ff0c 	bl	8001ce4 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001ecc:	20a5      	movs	r0, #165	; 0xa5
 8001ece:	f7ff ff09 	bl	8001ce4 <W25qxx_Spi>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <W25qxx_WaitForWriteEnd+0x54>)
 8001ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f000 fab1 	bl	8002444 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <W25qxx_WaitForWriteEnd+0x54>)
 8001ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ed      	bne.n	8001ecc <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef6:	4802      	ldr	r0, [pc, #8]	; (8001f00 <W25qxx_WaitForWriteEnd+0x50>)
 8001ef8:	f000 fd72 	bl	80029e0 <HAL_GPIO_WritePin>
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40020000 	.word	0x40020000
 8001f04:	200009cc 	.word	0x200009cc

08001f08 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8001f0e:	4b62      	ldr	r3, [pc, #392]	; (8002098 <W25qxx_Init+0x190>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//while (HAL_GetTick() < 100)
	//	W25qxx_Delay(1);
	W25qxx_Delay(100);
 8001f16:	2064      	movs	r0, #100	; 0x64
 8001f18:	f000 fa94 	bl	8002444 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f22:	485e      	ldr	r0, [pc, #376]	; (800209c <W25qxx_Init+0x194>)
 8001f24:	f000 fd5c 	bl	80029e0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001f28:	2064      	movs	r0, #100	; 0x64
 8001f2a:	f000 fa8b 	bl	8002444 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8001f2e:	f7ff feef 	bl	8001d10 <W25qxx_ReadID>
 8001f32:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	3b11      	subs	r3, #17
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	d86b      	bhi.n	8002016 <W25qxx_Init+0x10e>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <W25qxx_Init+0x3c>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08002009 	.word	0x08002009
 8001f48:	08001ffb 	.word	0x08001ffb
 8001f4c:	08001fed 	.word	0x08001fed
 8001f50:	08001fdf 	.word	0x08001fdf
 8001f54:	08001fd1 	.word	0x08001fd1
 8001f58:	08001fc3 	.word	0x08001fc3
 8001f5c:	08001fb5 	.word	0x08001fb5
 8001f60:	08001fa5 	.word	0x08001fa5
 8001f64:	08001f95 	.word	0x08001f95
 8001f68:	08002017 	.word	0x08002017
 8001f6c:	08002017 	.word	0x08002017
 8001f70:	08002017 	.word	0x08002017
 8001f74:	08002017 	.word	0x08002017
 8001f78:	08002017 	.word	0x08002017
 8001f7c:	08002017 	.word	0x08002017
 8001f80:	08001f85 	.word	0x08001f85
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8001f84:	4b44      	ldr	r3, [pc, #272]	; (8002098 <W25qxx_Init+0x190>)
 8001f86:	220a      	movs	r2, #10
 8001f88:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8001f8a:	4b43      	ldr	r3, [pc, #268]	; (8002098 <W25qxx_Init+0x190>)
 8001f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f90:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8001f92:	e046      	b.n	8002022 <W25qxx_Init+0x11a>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8001f94:	4b40      	ldr	r3, [pc, #256]	; (8002098 <W25qxx_Init+0x190>)
 8001f96:	2209      	movs	r2, #9
 8001f98:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8001f9a:	4b3f      	ldr	r3, [pc, #252]	; (8002098 <W25qxx_Init+0x190>)
 8001f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8001fa2:	e03e      	b.n	8002022 <W25qxx_Init+0x11a>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8001fa4:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <W25qxx_Init+0x190>)
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8001faa:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <W25qxx_Init+0x190>)
 8001fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8001fb2:	e036      	b.n	8002022 <W25qxx_Init+0x11a>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8001fb4:	4b38      	ldr	r3, [pc, #224]	; (8002098 <W25qxx_Init+0x190>)
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8001fba:	4b37      	ldr	r3, [pc, #220]	; (8002098 <W25qxx_Init+0x190>)
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8001fc0:	e02f      	b.n	8002022 <W25qxx_Init+0x11a>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8001fc2:	4b35      	ldr	r3, [pc, #212]	; (8002098 <W25qxx_Init+0x190>)
 8001fc4:	2206      	movs	r2, #6
 8001fc6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8001fc8:	4b33      	ldr	r3, [pc, #204]	; (8002098 <W25qxx_Init+0x190>)
 8001fca:	2240      	movs	r2, #64	; 0x40
 8001fcc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8001fce:	e028      	b.n	8002022 <W25qxx_Init+0x11a>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <W25qxx_Init+0x190>)
 8001fd2:	2205      	movs	r2, #5
 8001fd4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8001fd6:	4b30      	ldr	r3, [pc, #192]	; (8002098 <W25qxx_Init+0x190>)
 8001fd8:	2220      	movs	r2, #32
 8001fda:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8001fdc:	e021      	b.n	8002022 <W25qxx_Init+0x11a>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8001fde:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <W25qxx_Init+0x190>)
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8001fe4:	4b2c      	ldr	r3, [pc, #176]	; (8002098 <W25qxx_Init+0x190>)
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8001fea:	e01a      	b.n	8002022 <W25qxx_Init+0x11a>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <W25qxx_Init+0x190>)
 8001fee:	2203      	movs	r2, #3
 8001ff0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8001ff2:	4b29      	ldr	r3, [pc, #164]	; (8002098 <W25qxx_Init+0x190>)
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8001ff8:	e013      	b.n	8002022 <W25qxx_Init+0x11a>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8001ffa:	4b27      	ldr	r3, [pc, #156]	; (8002098 <W25qxx_Init+0x190>)
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <W25qxx_Init+0x190>)
 8002002:	2204      	movs	r2, #4
 8002004:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8002006:	e00c      	b.n	8002022 <W25qxx_Init+0x11a>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <W25qxx_Init+0x190>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800200e:	4b22      	ldr	r3, [pc, #136]	; (8002098 <W25qxx_Init+0x190>)
 8002010:	2202      	movs	r2, #2
 8002012:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8002014:	e005      	b.n	8002022 <W25qxx_Init+0x11a>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <W25qxx_Init+0x190>)
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800201e:	2300      	movs	r3, #0
 8002020:	e036      	b.n	8002090 <W25qxx_Init+0x188>
	}
	w25qxx.PageSize = 256;
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <W25qxx_Init+0x190>)
 8002024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002028:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800202a:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <W25qxx_Init+0x190>)
 800202c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002030:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002032:	4b19      	ldr	r3, [pc, #100]	; (8002098 <W25qxx_Init+0x190>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4a17      	ldr	r2, [pc, #92]	; (8002098 <W25qxx_Init+0x190>)
 800203a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <W25qxx_Init+0x190>)
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	4a15      	ldr	r2, [pc, #84]	; (8002098 <W25qxx_Init+0x190>)
 8002042:	6912      	ldr	r2, [r2, #16]
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <W25qxx_Init+0x190>)
 800204a:	8952      	ldrh	r2, [r2, #10]
 800204c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002050:	4a11      	ldr	r2, [pc, #68]	; (8002098 <W25qxx_Init+0x190>)
 8002052:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <W25qxx_Init+0x190>)
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <W25qxx_Init+0x190>)
 800205c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <W25qxx_Init+0x190>)
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <W25qxx_Init+0x190>)
 8002064:	6912      	ldr	r2, [r2, #16]
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	0a9b      	lsrs	r3, r3, #10
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <W25qxx_Init+0x190>)
 800206e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002070:	f7ff fe86 	bl	8001d80 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002074:	2001      	movs	r0, #1
 8002076:	f7ff fed3 	bl	8001e20 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800207a:	2002      	movs	r0, #2
 800207c:	f7ff fed0 	bl	8001e20 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002080:	2003      	movs	r0, #3
 8002082:	f7ff fecd 	bl	8001e20 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <W25qxx_Init+0x190>)
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200009cc 	.word	0x200009cc
 800209c:	40020000 	.word	0x40020000

080020a0 <W25qxx_EraseChip>:
//###################################################################################################################
void W25qxx_EraseChip(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	while (w25qxx.Lock == 1)
 80020a4:	e002      	b.n	80020ac <W25qxx_EraseChip+0xc>
		W25qxx_Delay(1);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f000 f9cc 	bl	8002444 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <W25qxx_EraseChip+0x58>)
 80020ae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d0f7      	beq.n	80020a6 <W25qxx_EraseChip+0x6>
	w25qxx.Lock = 1;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <W25qxx_EraseChip+0x58>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseChip Begin...\r\n");
#endif
	W25qxx_WriteEnable();
 80020be:	f7ff fe97 	bl	8001df0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c8:	480c      	ldr	r0, [pc, #48]	; (80020fc <W25qxx_EraseChip+0x5c>)
 80020ca:	f000 fc89 	bl	80029e0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0xC7);
 80020ce:	20c7      	movs	r0, #199	; 0xc7
 80020d0:	f7ff fe08 	bl	8001ce4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020da:	4808      	ldr	r0, [pc, #32]	; (80020fc <W25qxx_EraseChip+0x5c>)
 80020dc:	f000 fc80 	bl	80029e0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80020e0:	f7ff fee6 	bl	8001eb0 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms!\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(10);
 80020e4:	200a      	movs	r0, #10
 80020e6:	f000 f9ad 	bl	8002444 <HAL_Delay>
	w25qxx.Lock = 0;
 80020ea:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <W25qxx_EraseChip+0x58>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200009cc 	.word	0x200009cc
 80020fc:	40020000 	.word	0x40020000

08002100 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800210e:	e002      	b.n	8002116 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002110:	2001      	movs	r0, #1
 8002112:	f000 f997 	bl	8002444 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002116:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <W25qxx_WritePage+0x100>)
 8002118:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800211c:	2b01      	cmp	r3, #1
 800211e:	d0f7      	beq.n	8002110 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8002120:	4b37      	ldr	r3, [pc, #220]	; (8002200 <W25qxx_WritePage+0x100>)
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4a34      	ldr	r2, [pc, #208]	; (8002200 <W25qxx_WritePage+0x100>)
 8002130:	8952      	ldrh	r2, [r2, #10]
 8002132:	4293      	cmp	r3, r2
 8002134:	d802      	bhi.n	800213c <W25qxx_WritePage+0x3c>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <W25qxx_WritePage+0x100>)
 800213e:	895b      	ldrh	r3, [r3, #10]
 8002140:	461a      	mov	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	4a2c      	ldr	r2, [pc, #176]	; (8002200 <W25qxx_WritePage+0x100>)
 8002150:	8952      	ldrh	r2, [r2, #10]
 8002152:	4293      	cmp	r3, r2
 8002154:	d905      	bls.n	8002162 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <W25qxx_WritePage+0x100>)
 8002158:	895b      	ldrh	r3, [r3, #10]
 800215a:	461a      	mov	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8002162:	f7ff fea5 	bl	8001eb0 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8002166:	f7ff fe43 	bl	8001df0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002170:	4824      	ldr	r0, [pc, #144]	; (8002204 <W25qxx_WritePage+0x104>)
 8002172:	f000 fc35 	bl	80029e0 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <W25qxx_WritePage+0x100>)
 8002178:	895b      	ldrh	r3, [r3, #10]
 800217a:	461a      	mov	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	fb03 f302 	mul.w	r3, r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <W25qxx_WritePage+0x100>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d909      	bls.n	80021a4 <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 8002190:	2012      	movs	r0, #18
 8002192:	f7ff fda7 	bl	8001ce4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	0e1b      	lsrs	r3, r3, #24
 800219a:	b2db      	uxtb	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fda1 	bl	8001ce4 <W25qxx_Spi>
 80021a2:	e002      	b.n	80021aa <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 80021a4:	2002      	movs	r0, #2
 80021a6:	f7ff fd9d 	bl	8001ce4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fd97 	bl	8001ce4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fd91 	bl	8001ce4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fd8c 	bl	8001ce4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2364      	movs	r3, #100	; 0x64
 80021d2:	68f9      	ldr	r1, [r7, #12]
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <W25qxx_WritePage+0x108>)
 80021d6:	f002 ff99 	bl	800510c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80021da:	2201      	movs	r2, #1
 80021dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021e0:	4808      	ldr	r0, [pc, #32]	; (8002204 <W25qxx_WritePage+0x104>)
 80021e2:	f000 fbfd 	bl	80029e0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80021e6:	f7ff fe63 	bl	8001eb0 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 f92a 	bl	8002444 <HAL_Delay>
	w25qxx.Lock = 0;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <W25qxx_WritePage+0x100>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200009cc 	.word	0x200009cc
 8002204:	40020000 	.word	0x40020000
 8002208:	20000934 	.word	0x20000934

0800220c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800221a:	e002      	b.n	8002222 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800221c:	2001      	movs	r0, #1
 800221e:	f000 f911 	bl	8002444 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <W25qxx_ReadPage+0xf4>)
 8002224:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002228:	2b01      	cmp	r3, #1
 800222a:	d0f7      	beq.n	800221c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800222c:	4b34      	ldr	r3, [pc, #208]	; (8002300 <W25qxx_ReadPage+0xf4>)
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8002234:	4b32      	ldr	r3, [pc, #200]	; (8002300 <W25qxx_ReadPage+0xf4>)
 8002236:	895b      	ldrh	r3, [r3, #10]
 8002238:	461a      	mov	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	4293      	cmp	r3, r2
 800223e:	d802      	bhi.n	8002246 <W25qxx_ReadPage+0x3a>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8002246:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <W25qxx_ReadPage+0xf4>)
 8002248:	895b      	ldrh	r3, [r3, #10]
 800224a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	4413      	add	r3, r2
 8002252:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <W25qxx_ReadPage+0xf4>)
 8002254:	8952      	ldrh	r2, [r2, #10]
 8002256:	4293      	cmp	r3, r2
 8002258:	d905      	bls.n	8002266 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <W25qxx_ReadPage+0xf4>)
 800225c:	895b      	ldrh	r3, [r3, #10]
 800225e:	461a      	mov	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <W25qxx_ReadPage+0xf4>)
 8002268:	895b      	ldrh	r3, [r3, #10]
 800226a:	461a      	mov	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	fb03 f302 	mul.w	r3, r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800227e:	4821      	ldr	r0, [pc, #132]	; (8002304 <W25qxx_ReadPage+0xf8>)
 8002280:	f000 fbae 	bl	80029e0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002284:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <W25qxx_ReadPage+0xf4>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d909      	bls.n	80022a0 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 800228c:	200c      	movs	r0, #12
 800228e:	f7ff fd29 	bl	8001ce4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	0e1b      	lsrs	r3, r3, #24
 8002296:	b2db      	uxtb	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fd23 	bl	8001ce4 <W25qxx_Spi>
 800229e:	e002      	b.n	80022a6 <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80022a0:	200b      	movs	r0, #11
 80022a2:	f7ff fd1f 	bl	8001ce4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fd19 	bl	8001ce4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fd13 	bl	8001ce4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fd0e 	bl	8001ce4 <W25qxx_Spi>
	W25qxx_Spi(0);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff fd0b 	bl	8001ce4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	2364      	movs	r3, #100	; 0x64
 80022d4:	68f9      	ldr	r1, [r7, #12]
 80022d6:	480c      	ldr	r0, [pc, #48]	; (8002308 <W25qxx_ReadPage+0xfc>)
 80022d8:	f003 f84c 	bl	8005374 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80022dc:	2201      	movs	r2, #1
 80022de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e2:	4808      	ldr	r0, [pc, #32]	; (8002304 <W25qxx_ReadPage+0xf8>)
 80022e4:	f000 fb7c 	bl	80029e0 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80022e8:	2001      	movs	r0, #1
 80022ea:	f000 f8ab 	bl	8002444 <HAL_Delay>
	w25qxx.Lock = 0;
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <W25qxx_ReadPage+0xf4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200009cc 	.word	0x200009cc
 8002304:	40020000 	.word	0x40020000
 8002308:	20000934 	.word	0x20000934

0800230c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800230c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002344 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002310:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002312:	e003      	b.n	800231c <LoopCopyDataInit>

08002314 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002316:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002318:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800231a:	3104      	adds	r1, #4

0800231c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800231c:	480b      	ldr	r0, [pc, #44]	; (800234c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002320:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002322:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002324:	d3f6      	bcc.n	8002314 <CopyDataInit>
  ldr  r2, =_sbss
 8002326:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002328:	e002      	b.n	8002330 <LoopFillZerobss>

0800232a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800232a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800232c:	f842 3b04 	str.w	r3, [r2], #4

08002330 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002332:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002334:	d3f9      	bcc.n	800232a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002336:	f7ff fc1d 	bl	8001b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233a:	f007 f907 	bl	800954c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233e:	f7fe fbc9 	bl	8000ad4 <main>
  bx  lr    
 8002342:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002344:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002348:	0800a600 	.word	0x0800a600
  ldr  r0, =_sdata
 800234c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002350:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 8002354:	2000025c 	.word	0x2000025c
  ldr  r3, = _ebss
 8002358:	200012d4 	.word	0x200012d4

0800235c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC_IRQHandler>
	...

08002360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <HAL_Init+0x40>)
 800236a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <HAL_Init+0x40>)
 8002376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800237a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_Init+0x40>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002388:	2003      	movs	r0, #3
 800238a:	f000 f94d 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238e:	2000      	movs	r0, #0
 8002390:	f000 f808 	bl	80023a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002394:	f7ff fb38 	bl	8001a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00

080023a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_InitTick+0x54>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_InitTick+0x58>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4619      	mov	r1, r3
 80023b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f965 	bl	8002692 <HAL_SYSTICK_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00e      	b.n	80023f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b0f      	cmp	r3, #15
 80023d6:	d80a      	bhi.n	80023ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d8:	2200      	movs	r2, #0
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f000 f92d 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e4:	4a06      	ldr	r2, [pc, #24]	; (8002400 <HAL_InitTick+0x5c>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200000a0 	.word	0x200000a0
 80023fc:	200000a8 	.word	0x200000a8
 8002400:	200000a4 	.word	0x200000a4

08002404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x20>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_IncTick+0x24>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4413      	add	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_IncTick+0x24>)
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	200000a8 	.word	0x200000a8
 8002428:	200009f4 	.word	0x200009f4

0800242c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return uwTick;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_GetTick+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	200009f4 	.word	0x200009f4

08002444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff ffee 	bl	800242c <HAL_GetTick>
 8002450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d005      	beq.n	800246a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_Delay+0x40>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800246a:	bf00      	nop
 800246c:	f7ff ffde 	bl	800242c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	429a      	cmp	r2, r3
 800247a:	d8f7      	bhi.n	800246c <HAL_Delay+0x28>
  {
  }
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200000a8 	.word	0x200000a8

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ba:	4a04      	ldr	r2, [pc, #16]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db0b      	blt.n	8002516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4907      	ldr	r1, [pc, #28]	; (8002524 <__NVIC_EnableIRQ+0x38>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	; (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	; (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff8e 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff29 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff3e 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff8e 	bl	800257c <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5d 	bl	8002528 <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff31 	bl	80024ec <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e159      	b.n	800297c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 8148 	bne.w	8002976 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d00b      	beq.n	8002706 <HAL_GPIO_Init+0x5a>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026fa:	2b11      	cmp	r3, #17
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b12      	cmp	r3, #18
 8002704:	d130      	bne.n	8002768 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0xfc>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b12      	cmp	r3, #18
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a2 	beq.w	8002976 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b56      	ldr	r3, [pc, #344]	; (8002990 <HAL_GPIO_Init+0x2e4>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a55      	ldr	r2, [pc, #340]	; (8002990 <HAL_GPIO_Init+0x2e4>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_GPIO_Init+0x2e4>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284e:	4a51      	ldr	r2, [pc, #324]	; (8002994 <HAL_GPIO_Init+0x2e8>)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a48      	ldr	r2, [pc, #288]	; (8002998 <HAL_GPIO_Init+0x2ec>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x202>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a47      	ldr	r2, [pc, #284]	; (800299c <HAL_GPIO_Init+0x2f0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x1fe>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a46      	ldr	r2, [pc, #280]	; (80029a0 <HAL_GPIO_Init+0x2f4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x1fa>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a45      	ldr	r2, [pc, #276]	; (80029a4 <HAL_GPIO_Init+0x2f8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x1f6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a44      	ldr	r2, [pc, #272]	; (80029a8 <HAL_GPIO_Init+0x2fc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x1f2>
 800289a:	2304      	movs	r3, #4
 800289c:	e008      	b.n	80028b0 <HAL_GPIO_Init+0x204>
 800289e:	2307      	movs	r3, #7
 80028a0:	e006      	b.n	80028b0 <HAL_GPIO_Init+0x204>
 80028a2:	2303      	movs	r3, #3
 80028a4:	e004      	b.n	80028b0 <HAL_GPIO_Init+0x204>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e002      	b.n	80028b0 <HAL_GPIO_Init+0x204>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_GPIO_Init+0x204>
 80028ae:	2300      	movs	r3, #0
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	f002 0203 	and.w	r2, r2, #3
 80028b6:	0092      	lsls	r2, r2, #2
 80028b8:	4093      	lsls	r3, r2
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c0:	4934      	ldr	r1, [pc, #208]	; (8002994 <HAL_GPIO_Init+0x2e8>)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	3302      	adds	r3, #2
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <HAL_GPIO_Init+0x300>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f2:	4a2e      	ldr	r2, [pc, #184]	; (80029ac <HAL_GPIO_Init+0x300>)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028f8:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <HAL_GPIO_Init+0x300>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800291c:	4a23      	ldr	r2, [pc, #140]	; (80029ac <HAL_GPIO_Init+0x300>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_GPIO_Init+0x300>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002946:	4a19      	ldr	r2, [pc, #100]	; (80029ac <HAL_GPIO_Init+0x300>)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <HAL_GPIO_Init+0x300>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002970:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <HAL_GPIO_Init+0x300>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3301      	adds	r3, #1
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b0f      	cmp	r3, #15
 8002980:	f67f aea2 	bls.w	80026c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002984:	bf00      	nop
 8002986:	3724      	adds	r7, #36	; 0x24
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40023800 	.word	0x40023800
 8002994:	40013800 	.word	0x40013800
 8002998:	40020000 	.word	0x40020000
 800299c:	40020400 	.word	0x40020400
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020c00 	.word	0x40020c00
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40013c00 	.word	0x40013c00

080029b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	887b      	ldrh	r3, [r7, #2]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
 80029cc:	e001      	b.n	80029d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
 80029ec:	4613      	mov	r3, r2
 80029ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f0:	787b      	ldrb	r3, [r7, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029fc:	e003      	b.n	8002a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	041a      	lsls	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	619a      	str	r2, [r3, #24]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a2a:	4a05      	ldr	r2, [pc, #20]	; (8002a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fa7a 	bl	8000f2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40013c00 	.word	0x40013c00

08002a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e11f      	b.n	8002c96 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fd fe14 	bl	8000698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002aa8:	f002 fab8 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 8002aac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4a7b      	ldr	r2, [pc, #492]	; (8002ca0 <HAL_I2C_Init+0x25c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d807      	bhi.n	8002ac8 <HAL_I2C_Init+0x84>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a7a      	ldr	r2, [pc, #488]	; (8002ca4 <HAL_I2C_Init+0x260>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	bf94      	ite	ls
 8002ac0:	2301      	movls	r3, #1
 8002ac2:	2300      	movhi	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e006      	b.n	8002ad6 <HAL_I2C_Init+0x92>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4a77      	ldr	r2, [pc, #476]	; (8002ca8 <HAL_I2C_Init+0x264>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	bf94      	ite	ls
 8002ad0:	2301      	movls	r3, #1
 8002ad2:	2300      	movhi	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0db      	b.n	8002c96 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4a72      	ldr	r2, [pc, #456]	; (8002cac <HAL_I2C_Init+0x268>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	0c9b      	lsrs	r3, r3, #18
 8002ae8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a64      	ldr	r2, [pc, #400]	; (8002ca0 <HAL_I2C_Init+0x25c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d802      	bhi.n	8002b18 <HAL_I2C_Init+0xd4>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	3301      	adds	r3, #1
 8002b16:	e009      	b.n	8002b2c <HAL_I2C_Init+0xe8>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	4a63      	ldr	r2, [pc, #396]	; (8002cb0 <HAL_I2C_Init+0x26c>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4956      	ldr	r1, [pc, #344]	; (8002ca0 <HAL_I2C_Init+0x25c>)
 8002b48:	428b      	cmp	r3, r1
 8002b4a:	d80d      	bhi.n	8002b68 <HAL_I2C_Init+0x124>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e59      	subs	r1, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	bf38      	it	cc
 8002b64:	2304      	movcc	r3, #4
 8002b66:	e04f      	b.n	8002c08 <HAL_I2C_Init+0x1c4>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d111      	bne.n	8002b94 <HAL_I2C_Init+0x150>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e58      	subs	r0, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e012      	b.n	8002bba <HAL_I2C_Init+0x176>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1e58      	subs	r0, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	0099      	lsls	r1, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002baa:	3301      	adds	r3, #1
 8002bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Init+0x17e>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e022      	b.n	8002c08 <HAL_I2C_Init+0x1c4>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10e      	bne.n	8002be8 <HAL_I2C_Init+0x1a4>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e58      	subs	r0, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	440b      	add	r3, r1
 8002bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be6:	e00f      	b.n	8002c08 <HAL_I2C_Init+0x1c4>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	0099      	lsls	r1, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	6809      	ldr	r1, [r1, #0]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6911      	ldr	r1, [r2, #16]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68d2      	ldr	r2, [r2, #12]
 8002c42:	4311      	orrs	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	000186a0 	.word	0x000186a0
 8002ca4:	001e847f 	.word	0x001e847f
 8002ca8:	003d08ff 	.word	0x003d08ff
 8002cac:	431bde83 	.word	0x431bde83
 8002cb0:	10624dd3 	.word	0x10624dd3

08002cb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	817b      	strh	r3, [r7, #10]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff fbb0 	bl	800242c <HAL_GetTick>
 8002ccc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	f040 80e0 	bne.w	8002e9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2319      	movs	r3, #25
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4970      	ldr	r1, [pc, #448]	; (8002ea8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fa92 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0d3      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_I2C_Master_Transmit+0x50>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e0cc      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d007      	beq.n	8002d2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2221      	movs	r2, #33	; 0x21
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2210      	movs	r2, #16
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	893a      	ldrh	r2, [r7, #8]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a50      	ldr	r2, [pc, #320]	; (8002eac <HAL_I2C_Master_Transmit+0x1f8>)
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d6c:	8979      	ldrh	r1, [r7, #10]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	6a3a      	ldr	r2, [r7, #32]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f9ca 	bl	800310c <I2C_MasterRequestWrite>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e08d      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d98:	e066      	b.n	8002e68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	6a39      	ldr	r1, [r7, #32]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fb0c 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00d      	beq.n	8002dc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d107      	bne.n	8002dc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e06b      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d11b      	bne.n	8002e3c <HAL_I2C_Master_Transmit+0x188>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d017      	beq.n	8002e3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	6a39      	ldr	r1, [r7, #32]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 fafc 	bl	800343e <I2C_WaitOnBTFFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00d      	beq.n	8002e68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d107      	bne.n	8002e64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e01a      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d194      	bne.n	8002d9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e000      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	00100002 	.word	0x00100002
 8002eac:	ffff0000 	.word	0xffff0000

08002eb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7ff fab4 	bl	800242c <HAL_GetTick>
 8002ec4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	f040 8111 	bne.w	80030fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2319      	movs	r3, #25
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4988      	ldr	r1, [pc, #544]	; (8003104 <HAL_I2C_IsDeviceReady+0x254>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f994 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e104      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_I2C_IsDeviceReady+0x50>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0fd      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d007      	beq.n	8002f26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2224      	movs	r2, #36	; 0x24
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a70      	ldr	r2, [pc, #448]	; (8003108 <HAL_I2C_IsDeviceReady+0x258>)
 8002f48:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f952 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f80:	d103      	bne.n	8002f8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0b6      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7ff fa45 	bl	800242c <HAL_GetTick>
 8002fa2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fd2:	e025      	b.n	8003020 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7ff fa2a 	bl	800242c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <HAL_I2C_IsDeviceReady+0x13a>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d103      	bne.n	8002ff2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22a0      	movs	r2, #160	; 0xa0
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2ba0      	cmp	r3, #160	; 0xa0
 800302a:	d005      	beq.n	8003038 <HAL_I2C_IsDeviceReady+0x188>
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_I2C_IsDeviceReady+0x188>
 8003032:	7dbb      	ldrb	r3, [r7, #22]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0cd      	beq.n	8002fd4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d129      	bne.n	80030a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2319      	movs	r3, #25
 800307a:	2201      	movs	r2, #1
 800307c:	4921      	ldr	r1, [pc, #132]	; (8003104 <HAL_I2C_IsDeviceReady+0x254>)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f8c6 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e036      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e02c      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2319      	movs	r3, #25
 80030c2:	2201      	movs	r2, #1
 80030c4:	490f      	ldr	r1, [pc, #60]	; (8003104 <HAL_I2C_IsDeviceReady+0x254>)
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f8a2 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e012      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	3301      	adds	r3, #1
 80030da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	f4ff af32 	bcc.w	8002f4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	00100002 	.word	0x00100002
 8003108:	ffff0000 	.word	0xffff0000

0800310c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	460b      	mov	r3, r1
 800311a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d006      	beq.n	8003136 <I2C_MasterRequestWrite+0x2a>
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d003      	beq.n	8003136 <I2C_MasterRequestWrite+0x2a>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003134:	d108      	bne.n	8003148 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e00b      	b.n	8003160 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	2b12      	cmp	r3, #18
 800314e:	d107      	bne.n	8003160 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f84f 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003186:	d103      	bne.n	8003190 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e035      	b.n	8003200 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800319c:	d108      	bne.n	80031b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800319e:	897b      	ldrh	r3, [r7, #10]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031ac:	611a      	str	r2, [r3, #16]
 80031ae:	e01b      	b.n	80031e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031b0:	897b      	ldrh	r3, [r7, #10]
 80031b2:	11db      	asrs	r3, r3, #7
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f003 0306 	and.w	r3, r3, #6
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f063 030f 	orn	r3, r3, #15
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <I2C_MasterRequestWrite+0xfc>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f875 	bl	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e010      	b.n	8003200 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4907      	ldr	r1, [pc, #28]	; (800320c <I2C_MasterRequestWrite+0x100>)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f865 	bl	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	00010008 	.word	0x00010008
 800320c:	00010002 	.word	0x00010002

08003210 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003220:	e025      	b.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d021      	beq.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7ff f8ff 	bl	800242c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_WaitOnFlagUntilTimeout+0x30>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d116      	bne.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e023      	b.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10d      	bne.n	8003294 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	bf0c      	ite	eq
 800328a:	2301      	moveq	r3, #1
 800328c:	2300      	movne	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	e00c      	b.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4013      	ands	r3, r2
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d0b6      	beq.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032cc:	e051      	b.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	d123      	bne.n	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f043 0204 	orr.w	r2, r3, #4
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e046      	b.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d021      	beq.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7ff f87d 	bl	800242c <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d116      	bne.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e020      	b.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10c      	bne.n	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e00b      	b.n	80033ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	43da      	mvns	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d18d      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c8:	e02d      	b.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f878 	bl	80034c0 <I2C_IsAcknowledgeFailed>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e02d      	b.n	8003436 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d021      	beq.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7ff f823 	bl	800242c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d116      	bne.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f043 0220 	orr.w	r2, r3, #32
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e007      	b.n	8003436 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d1ca      	bne.n	80033ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800344a:	e02d      	b.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f837 	bl	80034c0 <I2C_IsAcknowledgeFailed>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e02d      	b.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d021      	beq.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7fe ffe2 	bl	800242c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e007      	b.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d1ca      	bne.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d6:	d11b      	bne.n	8003510 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800351e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003520:	b08f      	sub	sp, #60	; 0x3c
 8003522:	af0a      	add	r7, sp, #40	; 0x28
 8003524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e10f      	b.n	8003750 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f005 fd18 	bl	8008f80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2203      	movs	r2, #3
 8003554:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f002 ff13 	bl	800639a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	687e      	ldr	r6, [r7, #4]
 800357c:	466d      	mov	r5, sp
 800357e:	f106 0410 	add.w	r4, r6, #16
 8003582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800358e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003592:	1d33      	adds	r3, r6, #4
 8003594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f002 fdea 	bl	8006170 <USB_CoreInit>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0d0      	b.n	8003750 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f002 ff01 	bl	80063bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	e04a      	b.n	8003656 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	333d      	adds	r3, #61	; 0x3d
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	333c      	adds	r3, #60	; 0x3c
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	b298      	uxth	r0, r3
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3342      	adds	r3, #66	; 0x42
 80035fc:	4602      	mov	r2, r0
 80035fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	333f      	adds	r3, #63	; 0x3f
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3344      	adds	r3, #68	; 0x44
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	3348      	adds	r3, #72	; 0x48
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3350      	adds	r3, #80	; 0x50
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	3301      	adds	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	7bfa      	ldrb	r2, [r7, #15]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	429a      	cmp	r2, r3
 800365e:	d3af      	bcc.n	80035c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
 8003664:	e044      	b.n	80036f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	3301      	adds	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3b5      	bcc.n	8003666 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	687e      	ldr	r6, [r7, #4]
 8003702:	466d      	mov	r5, sp
 8003704:	f106 0410 	add.w	r4, r6, #16
 8003708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800370c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003710:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003714:	e885 0003 	stmia.w	r5, {r0, r1}
 8003718:	1d33      	adds	r3, r6, #4
 800371a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800371c:	6838      	ldr	r0, [r7, #0]
 800371e:	f002 fe77 	bl	8006410 <USB_DevInit>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e00d      	b.n	8003750 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f003 febf 	bl	80074cc <USB_DevDisconnect>

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003758 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_PCD_Start+0x1c>
 8003770:	2302      	movs	r3, #2
 8003772:	e020      	b.n	80037b6 <HAL_PCD_Start+0x5e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	2b01      	cmp	r3, #1
 8003782:	d109      	bne.n	8003798 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003788:	2b01      	cmp	r3, #1
 800378a:	d005      	beq.n	8003798 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f002 fdeb 	bl	8006378 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f003 fe6f 	bl	800748a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037be:	b590      	push	{r4, r7, lr}
 80037c0:	b08d      	sub	sp, #52	; 0x34
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f003 ff2d 	bl	8007634 <USB_GetMode>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f040 839d 	bne.w	8003f1c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f003 fe91 	bl	800750e <USB_ReadInterrupts>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8393 	beq.w	8003f1a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 fe88 	bl	800750e <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d107      	bne.n	8003818 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f002 0202 	and.w	r2, r2, #2
 8003816:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fe76 	bl	800750e <USB_ReadInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d161      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0210 	bic.w	r2, r2, #16
 800383a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f003 020f 	and.w	r2, r3, #15
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	3304      	adds	r3, #4
 800385a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	0c5b      	lsrs	r3, r3, #17
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	2b02      	cmp	r3, #2
 8003866:	d124      	bne.n	80038b2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d035      	beq.n	80038e0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800387e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003882:	b29b      	uxth	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	6a38      	ldr	r0, [r7, #32]
 8003888:	f003 fcdc 	bl	8007244 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003898:	441a      	add	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038aa:	441a      	add	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	619a      	str	r2, [r3, #24]
 80038b0:	e016      	b.n	80038e0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	0c5b      	lsrs	r3, r3, #17
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	2b06      	cmp	r3, #6
 80038bc:	d110      	bne.n	80038e0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038c4:	2208      	movs	r2, #8
 80038c6:	4619      	mov	r1, r3
 80038c8:	6a38      	ldr	r0, [r7, #32]
 80038ca:	f003 fcbb 	bl	8007244 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038da:	441a      	add	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0210 	orr.w	r2, r2, #16
 80038ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f003 fe0a 	bl	800750e <USB_ReadInterrupts>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003900:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003904:	d16e      	bne.n	80039e4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f003 fe10 	bl	8007534 <USB_ReadDevAllOutEpInterrupt>
 8003914:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003916:	e062      	b.n	80039de <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d057      	beq.n	80039d2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f003 fe35 	bl	800759c <USB_ReadDevOutEPInterrupt>
 8003932:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	461a      	mov	r2, r3
 800394c:	2301      	movs	r3, #1
 800394e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fd98 	bl	8004488 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	461a      	mov	r2, r3
 8003970:	2308      	movs	r3, #8
 8003972:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fe92 	bl	80046a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003992:	461a      	mov	r2, r3
 8003994:	2310      	movs	r3, #16
 8003996:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ae:	461a      	mov	r2, r3
 80039b0:	2320      	movs	r3, #32
 80039b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	461a      	mov	r2, r3
 80039cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	3301      	adds	r3, #1
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d199      	bne.n	8003918 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f003 fd90 	bl	800750e <USB_ReadInterrupts>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039f8:	f040 80c0 	bne.w	8003b7c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 fdb1 	bl	8007568 <USB_ReadDevAllInEpInterrupt>
 8003a06:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a0c:	e0b2      	b.n	8003b74 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a7 	beq.w	8003b68 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 fdd7 	bl	80075d8 <USB_ReadDevInEPInterrupt>
 8003a2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d057      	beq.n	8003ae6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69f9      	ldr	r1, [r7, #28]
 8003a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a56:	4013      	ands	r3, r2
 8003a58:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a66:	461a      	mov	r2, r3
 8003a68:	2301      	movs	r3, #1
 8003a6a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d132      	bne.n	8003ada <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3348      	adds	r3, #72	; 0x48
 8003a84:	6819      	ldr	r1, [r3, #0]
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4403      	add	r3, r0
 8003a94:	3344      	adds	r3, #68	; 0x44
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4419      	add	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4403      	add	r3, r0
 8003aa8:	3348      	adds	r3, #72	; 0x48
 8003aaa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d113      	bne.n	8003ada <HAL_PCD_IRQHandler+0x31c>
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3350      	adds	r3, #80	; 0x50
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d108      	bne.n	8003ada <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	f003 fddf 	bl	8007698 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f005 face 	bl	8009082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	461a      	mov	r2, r3
 8003afe:	2308      	movs	r3, #8
 8003b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b34:	461a      	mov	r2, r3
 8003b36:	2340      	movs	r3, #64	; 0x40
 8003b38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b50:	461a      	mov	r2, r3
 8003b52:	2302      	movs	r3, #2
 8003b54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fc03 	bl	800436e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f47f af49 	bne.w	8003a0e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 fcc4 	bl	800750e <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b90:	d122      	bne.n	8003bd8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d108      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bb8:	2100      	movs	r1, #0
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fe0e 	bl	80047dc <HAL_PCDEx_LPM_Callback>
 8003bc0:	e002      	b.n	8003bc8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f005 faca 	bl	800915c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f003 fc96 	bl	800750e <USB_ReadInterrupts>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bec:	d112      	bne.n	8003c14 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f005 fa86 	bl	8009110 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c12:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f003 fc78 	bl	800750e <USB_ReadInterrupts>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	f040 80c7 	bne.w	8003dba <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2110      	movs	r1, #16
 8003c46:	4618      	mov	r0, r3
 8003c48:	f002 fd46 	bl	80066d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c50:	e056      	b.n	8003d00 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c64:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c76:	0151      	lsls	r1, r2, #5
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c84:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c96:	0151      	lsls	r1, r2, #5
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	440a      	add	r2, r1
 8003c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ca4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cb8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cca:	0151      	lsls	r1, r2, #5
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	440a      	add	r2, r1
 8003cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d3a3      	bcc.n	8003c52 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d18:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d1c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d016      	beq.n	8003d54 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d36:	f043 030b 	orr.w	r3, r3, #11
 8003d3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4c:	f043 030b 	orr.w	r3, r3, #11
 8003d50:	6453      	str	r3, [r2, #68]	; 0x44
 8003d52:	e015      	b.n	8003d80 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d66:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d6a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7a:	f043 030b 	orr.w	r3, r3, #11
 8003d7e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d92:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003da4:	461a      	mov	r2, r3
 8003da6:	f003 fc77 	bl	8007698 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f003 fba5 	bl	800750e <USB_ReadInterrupts>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dce:	d124      	bne.n	8003e1a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f003 fc3b 	bl	8007650 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f002 fcdb 	bl	800679a <USB_GetDevSpeed>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681c      	ldr	r4, [r3, #0]
 8003df0:	f001 f908 	bl	8005004 <HAL_RCC_GetHCLKFreq>
 8003df4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f002 fa18 	bl	8006234 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f005 f964 	bl	80090d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f003 fb75 	bl	800750e <USB_ReadInterrupts>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d10a      	bne.n	8003e44 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f005 f941 	bl	80090b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f002 0208 	and.w	r2, r2, #8
 8003e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f003 fb60 	bl	800750e <USB_ReadInterrupts>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e58:	d10f      	bne.n	8003e7a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	4619      	mov	r1, r3
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f005 f999 	bl	800919c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f003 fb45 	bl	800750e <USB_ReadInterrupts>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e8e:	d10f      	bne.n	8003eb0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f005 f96c 	bl	8009178 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f003 fb2a 	bl	800750e <USB_ReadInterrupts>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d10a      	bne.n	8003edc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f005 f97a 	bl	80091c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f003 fb14 	bl	800750e <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d115      	bne.n	8003f1c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f005 f96a 	bl	80091dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	e000      	b.n	8003f1c <HAL_PCD_IRQHandler+0x75e>
      return;
 8003f1a:	bf00      	nop
    }
  }
}
 8003f1c:	3734      	adds	r7, #52	; 0x34
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd90      	pop	{r4, r7, pc}

08003f22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_PCD_SetAddress+0x1a>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e013      	b.n	8003f64 <HAL_PCD_SetAddress+0x42>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 fa72 	bl	800743e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	4608      	mov	r0, r1
 8003f76:	4611      	mov	r1, r2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	70fb      	strb	r3, [r7, #3]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	803b      	strh	r3, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	da0f      	bge.n	8003fb2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	f003 020f 	and.w	r2, r3, #15
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	3338      	adds	r3, #56	; 0x38
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	705a      	strb	r2, [r3, #1]
 8003fb0:	e00f      	b.n	8003fd2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	f003 020f 	and.w	r2, r3, #15
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3304      	adds	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fde:	883a      	ldrh	r2, [r7, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	78ba      	ldrb	r2, [r7, #2]
 8003fe8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	785b      	ldrb	r3, [r3, #1]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ffc:	78bb      	ldrb	r3, [r7, #2]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d102      	bne.n	8004008 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_PCD_EP_Open+0xaa>
 8004012:	2302      	movs	r3, #2
 8004014:	e00e      	b.n	8004034 <HAL_PCD_EP_Open+0xc8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	4618      	mov	r0, r3
 8004026:	f002 fbdd 	bl	80067e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004032:	7afb      	ldrb	r3, [r7, #11]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800404c:	2b00      	cmp	r3, #0
 800404e:	da0f      	bge.n	8004070 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 020f 	and.w	r2, r3, #15
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	3338      	adds	r3, #56	; 0x38
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	3304      	adds	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	705a      	strb	r2, [r3, #1]
 800406e:	e00f      	b.n	8004090 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	f003 020f 	and.w	r2, r3, #15
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	3304      	adds	r3, #4
 8004088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_PCD_EP_Close+0x6e>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e00e      	b.n	80040c8 <HAL_PCD_EP_Close+0x8c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f002 fc1b 	bl	80068f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	460b      	mov	r3, r1
 80040de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e0:	7afb      	ldrb	r3, [r7, #11]
 80040e2:	f003 020f 	and.w	r2, r3, #15
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4413      	add	r3, r2
 80040f6:	3304      	adds	r3, #4
 80040f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2200      	movs	r2, #0
 8004110:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004112:	7afb      	ldrb	r3, [r7, #11]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	b2da      	uxtb	r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800412c:	7afb      	ldrb	r3, [r7, #11]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	6979      	ldr	r1, [r7, #20]
 8004144:	f002 fef6 	bl	8006f34 <USB_EP0StartXfer>
 8004148:	e008      	b.n	800415c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	6979      	ldr	r1, [r7, #20]
 8004158:	f002 fca8 	bl	8006aac <USB_EPStartXfer>
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
 8004172:	460b      	mov	r3, r1
 8004174:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004176:	7afb      	ldrb	r3, [r7, #11]
 8004178:	f003 020f 	and.w	r2, r3, #15
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	3338      	adds	r3, #56	; 0x38
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	3304      	adds	r3, #4
 800418c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2200      	movs	r2, #0
 800419e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2201      	movs	r2, #1
 80041a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041a6:	7afb      	ldrb	r3, [r7, #11]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d102      	bne.n	80041c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041c0:	7afb      	ldrb	r3, [r7, #11]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	6979      	ldr	r1, [r7, #20]
 80041d8:	f002 feac 	bl	8006f34 <USB_EP0StartXfer>
 80041dc:	e008      	b.n	80041f0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	6979      	ldr	r1, [r7, #20]
 80041ec:	f002 fc5e 	bl	8006aac <USB_EPStartXfer>
  }

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	f003 020f 	and.w	r2, r3, #15
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d901      	bls.n	8004218 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e050      	b.n	80042ba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800421c:	2b00      	cmp	r3, #0
 800421e:	da0f      	bge.n	8004240 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	f003 020f 	and.w	r2, r3, #15
 8004226:	4613      	mov	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	3338      	adds	r3, #56	; 0x38
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	4413      	add	r3, r2
 8004234:	3304      	adds	r3, #4
 8004236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	705a      	strb	r2, [r3, #1]
 800423e:	e00d      	b.n	800425c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	4413      	add	r3, r2
 8004252:	3304      	adds	r3, #4
 8004254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	b2da      	uxtb	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_PCD_EP_SetStall+0x82>
 8004278:	2302      	movs	r3, #2
 800427a:	e01e      	b.n	80042ba <HAL_PCD_EP_SetStall+0xc0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68f9      	ldr	r1, [r7, #12]
 800428a:	4618      	mov	r0, r3
 800428c:	f003 f803 	bl	8007296 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	b2d9      	uxtb	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042aa:	461a      	mov	r2, r3
 80042ac:	f003 f9f4 	bl	8007698 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	460b      	mov	r3, r1
 80042cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 020f 	and.w	r2, r3, #15
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d901      	bls.n	80042e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e042      	b.n	8004366 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	da0f      	bge.n	8004308 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	3338      	adds	r3, #56	; 0x38
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	3304      	adds	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	705a      	strb	r2, [r3, #1]
 8004306:	e00f      	b.n	8004328 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 020f 	and.w	r2, r3, #15
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	3304      	adds	r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_PCD_EP_ClrStall+0x86>
 8004344:	2302      	movs	r3, #2
 8004346:	e00e      	b.n	8004366 <HAL_PCD_EP_ClrStall+0xa4>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	4618      	mov	r0, r3
 8004358:	f003 f80b 	bl	8007372 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b08a      	sub	sp, #40	; 0x28
 8004372:	af02      	add	r7, sp, #8
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	3338      	adds	r3, #56	; 0x38
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	3304      	adds	r3, #4
 8004394:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d901      	bls.n	80043a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e06c      	b.n	8004480 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d902      	bls.n	80043c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3303      	adds	r3, #3
 80043c6:	089b      	lsrs	r3, r3, #2
 80043c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043ca:	e02b      	b.n	8004424 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d902      	bls.n	80043e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	3303      	adds	r3, #3
 80043ec:	089b      	lsrs	r3, r3, #2
 80043ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68d9      	ldr	r1, [r3, #12]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004400:	b2db      	uxtb	r3, r3
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	4603      	mov	r3, r0
 8004406:	6978      	ldr	r0, [r7, #20]
 8004408:	f002 fee7 	bl	80071da <USB_WritePacket>

    ep->xfer_buff  += len;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	441a      	add	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	441a      	add	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	b29b      	uxth	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	429a      	cmp	r2, r3
 8004438:	d809      	bhi.n	800444e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004442:	429a      	cmp	r2, r3
 8004444:	d203      	bcs.n	800444e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1be      	bne.n	80043cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	429a      	cmp	r2, r3
 8004458:	d811      	bhi.n	800447e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	2201      	movs	r2, #1
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	43db      	mvns	r3, r3
 8004474:	6939      	ldr	r1, [r7, #16]
 8004476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800447a:	4013      	ands	r3, r2
 800447c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3720      	adds	r7, #32
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	333c      	adds	r3, #60	; 0x3c
 80044a0:	3304      	adds	r3, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	f040 80a0 	bne.w	8004600 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d015      	beq.n	80044f6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a72      	ldr	r2, [pc, #456]	; (8004698 <PCD_EP_OutXfrComplete_int+0x210>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	f240 80dd 	bls.w	800468e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 80d7 	beq.w	800468e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ec:	461a      	mov	r2, r3
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	6093      	str	r3, [r2, #8]
 80044f4:	e0cb      	b.n	800468e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d009      	beq.n	8004514 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450c:	461a      	mov	r2, r3
 800450e:	2320      	movs	r3, #32
 8004510:	6093      	str	r3, [r2, #8]
 8004512:	e0bc      	b.n	800468e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 80b7 	bne.w	800468e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a5d      	ldr	r2, [pc, #372]	; (8004698 <PCD_EP_OutXfrComplete_int+0x210>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d90f      	bls.n	8004548 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453e:	461a      	mov	r2, r3
 8004540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004544:	6093      	str	r3, [r2, #8]
 8004546:	e0a2      	b.n	800468e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800455a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	0159      	lsls	r1, r3, #5
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	440b      	add	r3, r1
 8004564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800456e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4403      	add	r3, r0
 800457e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004582:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004596:	6819      	ldr	r1, [r3, #0]
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4403      	add	r3, r0
 80045a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4419      	add	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	4613      	mov	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4403      	add	r3, r0
 80045bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045c0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d114      	bne.n	80045f2 <PCD_EP_OutXfrComplete_int+0x16a>
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d108      	bne.n	80045f2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045ea:	461a      	mov	r2, r3
 80045ec:	2101      	movs	r1, #1
 80045ee:	f003 f853 	bl	8007698 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	4619      	mov	r1, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f004 fd27 	bl	800904c <HAL_PCD_DataOutStageCallback>
 80045fe:	e046      	b.n	800468e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a26      	ldr	r2, [pc, #152]	; (800469c <PCD_EP_OutXfrComplete_int+0x214>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d124      	bne.n	8004652 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	461a      	mov	r2, r3
 8004620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004624:	6093      	str	r3, [r2, #8]
 8004626:	e032      	b.n	800468e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d008      	beq.n	8004644 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	461a      	mov	r2, r3
 8004640:	2320      	movs	r3, #32
 8004642:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f004 fcfe 	bl	800904c <HAL_PCD_DataOutStageCallback>
 8004650:	e01d      	b.n	800468e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d114      	bne.n	8004682 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d108      	bne.n	8004682 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800467a:	461a      	mov	r2, r3
 800467c:	2100      	movs	r1, #0
 800467e:	f003 f80b 	bl	8007698 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	4619      	mov	r1, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f004 fcdf 	bl	800904c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	4f54300a 	.word	0x4f54300a
 800469c:	4f54310a 	.word	0x4f54310a

080046a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	333c      	adds	r3, #60	; 0x3c
 80046b8:	3304      	adds	r3, #4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a15      	ldr	r2, [pc, #84]	; (8004728 <PCD_EP_OutSetupPacket_int+0x88>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d90e      	bls.n	80046f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ec:	461a      	mov	r2, r3
 80046ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f004 fc97 	bl	8009028 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <PCD_EP_OutSetupPacket_int+0x88>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d90c      	bls.n	800471c <PCD_EP_OutSetupPacket_int+0x7c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d108      	bne.n	800471c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004714:	461a      	mov	r2, r3
 8004716:	2101      	movs	r1, #1
 8004718:	f002 ffbe 	bl	8007698 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	4f54300a 	.word	0x4f54300a

0800472c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
 8004738:	4613      	mov	r3, r2
 800473a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d107      	bne.n	800475a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800474a:	883b      	ldrh	r3, [r7, #0]
 800474c:	0419      	lsls	r1, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	430a      	orrs	r2, r1
 8004756:	629a      	str	r2, [r3, #40]	; 0x28
 8004758:	e028      	b.n	80047ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4413      	add	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004768:	2300      	movs	r3, #0
 800476a:	73fb      	strb	r3, [r7, #15]
 800476c:	e00d      	b.n	800478a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	3340      	adds	r3, #64	; 0x40
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	4413      	add	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	3301      	adds	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	3b01      	subs	r3, #1
 8004790:	429a      	cmp	r2, r3
 8004792:	d3ec      	bcc.n	800476e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004794:	883b      	ldrh	r3, [r7, #0]
 8004796:	0418      	lsls	r0, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6819      	ldr	r1, [r3, #0]
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	3b01      	subs	r3, #1
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	4302      	orrs	r2, r0
 80047a4:	3340      	adds	r3, #64	; 0x40
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	460b      	mov	r3, r1
 80047c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	887a      	ldrh	r2, [r7, #2]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e25b      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d075      	beq.n	80048fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004812:	4ba3      	ldr	r3, [pc, #652]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b04      	cmp	r3, #4
 800481c:	d00c      	beq.n	8004838 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481e:	4ba0      	ldr	r3, [pc, #640]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004826:	2b08      	cmp	r3, #8
 8004828:	d112      	bne.n	8004850 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800482a:	4b9d      	ldr	r3, [pc, #628]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004836:	d10b      	bne.n	8004850 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004838:	4b99      	ldr	r3, [pc, #612]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d05b      	beq.n	80048fc <HAL_RCC_OscConfig+0x108>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d157      	bne.n	80048fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e236      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d106      	bne.n	8004868 <HAL_RCC_OscConfig+0x74>
 800485a:	4b91      	ldr	r3, [pc, #580]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a90      	ldr	r2, [pc, #576]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e01d      	b.n	80048a4 <HAL_RCC_OscConfig+0xb0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x98>
 8004872:	4b8b      	ldr	r3, [pc, #556]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a8a      	ldr	r2, [pc, #552]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b88      	ldr	r3, [pc, #544]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a87      	ldr	r2, [pc, #540]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e00b      	b.n	80048a4 <HAL_RCC_OscConfig+0xb0>
 800488c:	4b84      	ldr	r3, [pc, #528]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a83      	ldr	r2, [pc, #524]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a80      	ldr	r2, [pc, #512]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800489e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d013      	beq.n	80048d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fd fdbe 	bl	800242c <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b4:	f7fd fdba 	bl	800242c <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b64      	cmp	r3, #100	; 0x64
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e1fb      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	4b76      	ldr	r3, [pc, #472]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0xc0>
 80048d2:	e014      	b.n	80048fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fd fdaa 	bl	800242c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fd fda6 	bl	800242c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e1e7      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ee:	4b6c      	ldr	r3, [pc, #432]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0xe8>
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d063      	beq.n	80049d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800490a:	4b65      	ldr	r3, [pc, #404]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004916:	4b62      	ldr	r3, [pc, #392]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491e:	2b08      	cmp	r3, #8
 8004920:	d11c      	bne.n	800495c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004922:	4b5f      	ldr	r3, [pc, #380]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d116      	bne.n	800495c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	4b5c      	ldr	r3, [pc, #368]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_RCC_OscConfig+0x152>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e1bb      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004946:	4b56      	ldr	r3, [pc, #344]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4952      	ldr	r1, [pc, #328]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495a:	e03a      	b.n	80049d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004964:	4b4f      	ldr	r3, [pc, #316]	; (8004aa4 <HAL_RCC_OscConfig+0x2b0>)
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7fd fd5f 	bl	800242c <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004972:	f7fd fd5b 	bl	800242c <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e19c      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004984:	4b46      	ldr	r3, [pc, #280]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004990:	4b43      	ldr	r3, [pc, #268]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4940      	ldr	r1, [pc, #256]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
 80049a4:	e015      	b.n	80049d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a6:	4b3f      	ldr	r3, [pc, #252]	; (8004aa4 <HAL_RCC_OscConfig+0x2b0>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fd fd3e 	bl	800242c <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b4:	f7fd fd3a 	bl	800242c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e17b      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	4b36      	ldr	r3, [pc, #216]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d030      	beq.n	8004a40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e6:	4b30      	ldr	r3, [pc, #192]	; (8004aa8 <HAL_RCC_OscConfig+0x2b4>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fd fd1e 	bl	800242c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f4:	f7fd fd1a 	bl	800242c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e15b      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x200>
 8004a12:	e015      	b.n	8004a40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_RCC_OscConfig+0x2b4>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1a:	f7fd fd07 	bl	800242c <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a22:	f7fd fd03 	bl	800242c <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e144      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a34:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f0      	bne.n	8004a22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80a0 	beq.w	8004b8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10f      	bne.n	8004a7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	4a0e      	ldr	r2, [pc, #56]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_OscConfig+0x2b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d121      	bne.n	8004ace <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_RCC_OscConfig+0x2b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a07      	ldr	r2, [pc, #28]	; (8004aac <HAL_RCC_OscConfig+0x2b8>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a96:	f7fd fcc9 	bl	800242c <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9c:	e011      	b.n	8004ac2 <HAL_RCC_OscConfig+0x2ce>
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	42470000 	.word	0x42470000
 8004aa8:	42470e80 	.word	0x42470e80
 8004aac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab0:	f7fd fcbc 	bl	800242c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e0fd      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac2:	4b81      	ldr	r3, [pc, #516]	; (8004cc8 <HAL_RCC_OscConfig+0x4d4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d106      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x2f0>
 8004ad6:	4b7d      	ldr	r3, [pc, #500]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a7c      	ldr	r2, [pc, #496]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae2:	e01c      	b.n	8004b1e <HAL_RCC_OscConfig+0x32a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCC_OscConfig+0x312>
 8004aec:	4b77      	ldr	r3, [pc, #476]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	4a76      	ldr	r2, [pc, #472]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004af2:	f043 0304 	orr.w	r3, r3, #4
 8004af6:	6713      	str	r3, [r2, #112]	; 0x70
 8004af8:	4b74      	ldr	r3, [pc, #464]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	4a73      	ldr	r2, [pc, #460]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6713      	str	r3, [r2, #112]	; 0x70
 8004b04:	e00b      	b.n	8004b1e <HAL_RCC_OscConfig+0x32a>
 8004b06:	4b71      	ldr	r3, [pc, #452]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	4a70      	ldr	r2, [pc, #448]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	6713      	str	r3, [r2, #112]	; 0x70
 8004b12:	4b6e      	ldr	r3, [pc, #440]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a6d      	ldr	r2, [pc, #436]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b18:	f023 0304 	bic.w	r3, r3, #4
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d015      	beq.n	8004b52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b26:	f7fd fc81 	bl	800242c <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fd fc7d 	bl	800242c <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0bc      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ee      	beq.n	8004b2e <HAL_RCC_OscConfig+0x33a>
 8004b50:	e014      	b.n	8004b7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b52:	f7fd fc6b 	bl	800242c <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b5a:	f7fd fc67 	bl	800242c <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e0a6      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b70:	4b56      	ldr	r3, [pc, #344]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ee      	bne.n	8004b5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d105      	bne.n	8004b8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b82:	4b52      	ldr	r3, [pc, #328]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4a51      	ldr	r2, [pc, #324]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8092 	beq.w	8004cbc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b98:	4b4c      	ldr	r3, [pc, #304]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d05c      	beq.n	8004c5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d141      	bne.n	8004c30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bac:	4b48      	ldr	r3, [pc, #288]	; (8004cd0 <HAL_RCC_OscConfig+0x4dc>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fd fc3b 	bl	800242c <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bba:	f7fd fc37 	bl	800242c <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e078      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bcc:	4b3f      	ldr	r3, [pc, #252]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	019b      	lsls	r3, r3, #6
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	061b      	lsls	r3, r3, #24
 8004bfc:	4933      	ldr	r1, [pc, #204]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c02:	4b33      	ldr	r3, [pc, #204]	; (8004cd0 <HAL_RCC_OscConfig+0x4dc>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7fd fc10 	bl	800242c <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c10:	f7fd fc0c 	bl	800242c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e04d      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c22:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x41c>
 8004c2e:	e045      	b.n	8004cbc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c30:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <HAL_RCC_OscConfig+0x4dc>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7fd fbf9 	bl	800242c <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7fd fbf5 	bl	800242c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e036      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c50:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCC_OscConfig+0x44a>
 8004c5c:	e02e      	b.n	8004cbc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e029      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c6a:	4b18      	ldr	r3, [pc, #96]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d11c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d115      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c92:	4013      	ands	r3, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d106      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	42470060 	.word	0x42470060

08004cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0cc      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b68      	ldr	r3, [pc, #416]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d90c      	bls.n	8004d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b65      	ldr	r3, [pc, #404]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	4b63      	ldr	r3, [pc, #396]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0b8      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d020      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d28:	4b59      	ldr	r3, [pc, #356]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4a58      	ldr	r2, [pc, #352]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d40:	4b53      	ldr	r3, [pc, #332]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4a52      	ldr	r2, [pc, #328]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d4c:	4b50      	ldr	r3, [pc, #320]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	494d      	ldr	r1, [pc, #308]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d044      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	4b47      	ldr	r3, [pc, #284]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d119      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e07f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d92:	4b3f      	ldr	r3, [pc, #252]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e06f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da2:	4b3b      	ldr	r3, [pc, #236]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e067      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004db2:	4b37      	ldr	r3, [pc, #220]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f023 0203 	bic.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4934      	ldr	r1, [pc, #208]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc4:	f7fd fb32 	bl	800242c <HAL_GetTick>
 8004dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	e00a      	b.n	8004de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dcc:	f7fd fb2e 	bl	800242c <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e04f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de2:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 020c 	and.w	r2, r3, #12
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d1eb      	bne.n	8004dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d20c      	bcs.n	8004e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0a:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e032      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e28:	4b19      	ldr	r3, [pc, #100]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4916      	ldr	r1, [pc, #88]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	490e      	ldr	r1, [pc, #56]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e5a:	f000 f821 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8004e5e:	4601      	mov	r1, r0
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6c:	5cd3      	ldrb	r3, [r2, r3]
 8004e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8004e72:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_RCC_ClockConfig+0x1c8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fd fa92 	bl	80023a4 <HAL_InitTick>

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023c00 	.word	0x40023c00
 8004e90:	40023800 	.word	0x40023800
 8004e94:	0800a5d8 	.word	0x0800a5d8
 8004e98:	200000a0 	.word	0x200000a0
 8004e9c:	200000a4 	.word	0x200000a4

08004ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb6:	4b50      	ldr	r3, [pc, #320]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d007      	beq.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x32>
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d008      	beq.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x38>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f040 808d 	bne.w	8004fe6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ecc:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ece:	60bb      	str	r3, [r7, #8]
       break;
 8004ed0:	e08c      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ed2:	4b4b      	ldr	r3, [pc, #300]	; (8005000 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ed4:	60bb      	str	r3, [r7, #8]
      break;
 8004ed6:	e089      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ed8:	4b47      	ldr	r3, [pc, #284]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ee0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ee2:	4b45      	ldr	r3, [pc, #276]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d023      	beq.n	8004f36 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eee:	4b42      	ldr	r3, [pc, #264]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	099b      	lsrs	r3, r3, #6
 8004ef4:	f04f 0400 	mov.w	r4, #0
 8004ef8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	ea03 0501 	and.w	r5, r3, r1
 8004f04:	ea04 0602 	and.w	r6, r4, r2
 8004f08:	4a3d      	ldr	r2, [pc, #244]	; (8005000 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f0a:	fb02 f106 	mul.w	r1, r2, r6
 8004f0e:	2200      	movs	r2, #0
 8004f10:	fb02 f205 	mul.w	r2, r2, r5
 8004f14:	440a      	add	r2, r1
 8004f16:	493a      	ldr	r1, [pc, #232]	; (8005000 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f18:	fba5 0101 	umull	r0, r1, r5, r1
 8004f1c:	1853      	adds	r3, r2, r1
 8004f1e:	4619      	mov	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f04f 0400 	mov.w	r4, #0
 8004f26:	461a      	mov	r2, r3
 8004f28:	4623      	mov	r3, r4
 8004f2a:	f7fb f95d 	bl	80001e8 <__aeabi_uldivmod>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	460c      	mov	r4, r1
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e049      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f36:	4b30      	ldr	r3, [pc, #192]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	099b      	lsrs	r3, r3, #6
 8004f3c:	f04f 0400 	mov.w	r4, #0
 8004f40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	ea03 0501 	and.w	r5, r3, r1
 8004f4c:	ea04 0602 	and.w	r6, r4, r2
 8004f50:	4629      	mov	r1, r5
 8004f52:	4632      	mov	r2, r6
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	f04f 0400 	mov.w	r4, #0
 8004f5c:	0154      	lsls	r4, r2, #5
 8004f5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f62:	014b      	lsls	r3, r1, #5
 8004f64:	4619      	mov	r1, r3
 8004f66:	4622      	mov	r2, r4
 8004f68:	1b49      	subs	r1, r1, r5
 8004f6a:	eb62 0206 	sbc.w	r2, r2, r6
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	f04f 0400 	mov.w	r4, #0
 8004f76:	0194      	lsls	r4, r2, #6
 8004f78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f7c:	018b      	lsls	r3, r1, #6
 8004f7e:	1a5b      	subs	r3, r3, r1
 8004f80:	eb64 0402 	sbc.w	r4, r4, r2
 8004f84:	f04f 0100 	mov.w	r1, #0
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	00e2      	lsls	r2, r4, #3
 8004f8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f92:	00d9      	lsls	r1, r3, #3
 8004f94:	460b      	mov	r3, r1
 8004f96:	4614      	mov	r4, r2
 8004f98:	195b      	adds	r3, r3, r5
 8004f9a:	eb44 0406 	adc.w	r4, r4, r6
 8004f9e:	f04f 0100 	mov.w	r1, #0
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	02a2      	lsls	r2, r4, #10
 8004fa8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004fac:	0299      	lsls	r1, r3, #10
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f04f 0400 	mov.w	r4, #0
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	f7fb f912 	bl	80001e8 <__aeabi_uldivmod>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	0c1b      	lsrs	r3, r3, #16
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	60bb      	str	r3, [r7, #8]
      break;
 8004fe4:	e002      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fe6:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x15c>)
 8004fe8:	60bb      	str	r3, [r7, #8]
      break;
 8004fea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fec:	68bb      	ldr	r3, [r7, #8]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	00f42400 	.word	0x00f42400
 8005000:	017d7840 	.word	0x017d7840

08005004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <HAL_RCC_GetHCLKFreq+0x14>)
 800500a:	681b      	ldr	r3, [r3, #0]
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	200000a0 	.word	0x200000a0

0800501c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005020:	f7ff fff0 	bl	8005004 <HAL_RCC_GetHCLKFreq>
 8005024:	4601      	mov	r1, r0
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	0a9b      	lsrs	r3, r3, #10
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4a03      	ldr	r2, [pc, #12]	; (8005040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005032:	5cd3      	ldrb	r3, [r2, r3]
 8005034:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40023800 	.word	0x40023800
 8005040:	0800a5e8 	.word	0x0800a5e8

08005044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e056      	b.n	8005104 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7fc f87d 	bl	8001170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	ea42 0103 	orr.w	r1, r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	0c1b      	lsrs	r3, r3, #16
 80050d4:	f003 0104 	and.w	r1, r3, #4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69da      	ldr	r2, [r3, #28]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_SPI_Transmit+0x22>
 800512a:	2302      	movs	r3, #2
 800512c:	e11e      	b.n	800536c <HAL_SPI_Transmit+0x260>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005136:	f7fd f979 	bl	800242c <HAL_GetTick>
 800513a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800513c:	88fb      	ldrh	r3, [r7, #6]
 800513e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	d002      	beq.n	8005152 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800514c:	2302      	movs	r3, #2
 800514e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005150:	e103      	b.n	800535a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_SPI_Transmit+0x52>
 8005158:	88fb      	ldrh	r3, [r7, #6]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005162:	e0fa      	b.n	800535a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2203      	movs	r2, #3
 8005168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	88fa      	ldrh	r2, [r7, #6]
 8005182:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051aa:	d107      	bne.n	80051bc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b40      	cmp	r3, #64	; 0x40
 80051c8:	d007      	beq.n	80051da <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e2:	d14b      	bne.n	800527c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_SPI_Transmit+0xe6>
 80051ec:	8afb      	ldrh	r3, [r7, #22]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d13e      	bne.n	8005270 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	881a      	ldrh	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	1c9a      	adds	r2, r3, #2
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005216:	e02b      	b.n	8005270 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d112      	bne.n	800524c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	1c9a      	adds	r2, r3, #2
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	86da      	strh	r2, [r3, #54]	; 0x36
 800524a:	e011      	b.n	8005270 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800524c:	f7fd f8ee 	bl	800242c <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d803      	bhi.n	8005264 <HAL_SPI_Transmit+0x158>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005262:	d102      	bne.n	800526a <HAL_SPI_Transmit+0x15e>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800526e:	e074      	b.n	800535a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1ce      	bne.n	8005218 <HAL_SPI_Transmit+0x10c>
 800527a:	e04c      	b.n	8005316 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <HAL_SPI_Transmit+0x17e>
 8005284:	8afb      	ldrh	r3, [r7, #22]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d140      	bne.n	800530c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	7812      	ldrb	r2, [r2, #0]
 8005296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052b0:	e02c      	b.n	800530c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d113      	bne.n	80052e8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80052e6:	e011      	b.n	800530c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052e8:	f7fd f8a0 	bl	800242c <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d803      	bhi.n	8005300 <HAL_SPI_Transmit+0x1f4>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fe:	d102      	bne.n	8005306 <HAL_SPI_Transmit+0x1fa>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	77fb      	strb	r3, [r7, #31]
          goto error;
 800530a:	e026      	b.n	800535a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1cd      	bne.n	80052b2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fba4 	bl	8005a68 <SPI_EndRxTxTransaction>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	77fb      	strb	r3, [r7, #31]
 8005356:	e000      	b.n	800535a <HAL_SPI_Transmit+0x24e>
  }

error:
 8005358:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800536a:	7ffb      	ldrb	r3, [r7, #31]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	4613      	mov	r3, r2
 8005382:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005390:	d112      	bne.n	80053b8 <HAL_SPI_Receive+0x44>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10e      	bne.n	80053b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2204      	movs	r2, #4
 800539e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 f8e9 	bl	8005586 <HAL_SPI_TransmitReceive>
 80053b4:	4603      	mov	r3, r0
 80053b6:	e0e2      	b.n	800557e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_SPI_Receive+0x52>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e0db      	b.n	800557e <HAL_SPI_Receive+0x20a>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ce:	f7fd f82d 	bl	800242c <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d002      	beq.n	80053e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
 80053e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053e4:	e0c2      	b.n	800556c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_SPI_Receive+0x7e>
 80053ec:	88fb      	ldrh	r3, [r7, #6]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d102      	bne.n	80053f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053f6:	e0b9      	b.n	800556c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2204      	movs	r2, #4
 80053fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	88fa      	ldrh	r2, [r7, #6]
 8005410:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	88fa      	ldrh	r2, [r7, #6]
 8005416:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543e:	d107      	bne.n	8005450 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800544e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d007      	beq.n	800546e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d162      	bne.n	800553c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005476:	e02e      	b.n	80054d6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b01      	cmp	r3, #1
 8005484:	d115      	bne.n	80054b2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f103 020c 	add.w	r2, r3, #12
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	7812      	ldrb	r2, [r2, #0]
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054b0:	e011      	b.n	80054d6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054b2:	f7fc ffbb 	bl	800242c <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d803      	bhi.n	80054ca <HAL_SPI_Receive+0x156>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c8:	d102      	bne.n	80054d0 <HAL_SPI_Receive+0x15c>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80054d4:	e04a      	b.n	800556c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1cb      	bne.n	8005478 <HAL_SPI_Receive+0x104>
 80054e0:	e031      	b.n	8005546 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d113      	bne.n	8005518 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	b292      	uxth	r2, r2
 80054fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	1c9a      	adds	r2, r3, #2
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005516:	e011      	b.n	800553c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005518:	f7fc ff88 	bl	800242c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d803      	bhi.n	8005530 <HAL_SPI_Receive+0x1bc>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552e:	d102      	bne.n	8005536 <HAL_SPI_Receive+0x1c2>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d102      	bne.n	800553c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	75fb      	strb	r3, [r7, #23]
          goto error;
 800553a:	e017      	b.n	800556c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1cd      	bne.n	80054e2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 fa27 	bl	800599e <SPI_EndRxTransaction>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	75fb      	strb	r3, [r7, #23]
 8005568:	e000      	b.n	800556c <HAL_SPI_Receive+0x1f8>
  }

error :
 800556a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800557c:	7dfb      	ldrb	r3, [r7, #23]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b08c      	sub	sp, #48	; 0x30
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005594:	2301      	movs	r3, #1
 8005596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_SPI_TransmitReceive+0x26>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e18a      	b.n	80058c2 <HAL_SPI_TransmitReceive+0x33c>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055b4:	f7fc ff3a 	bl	800242c <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055ca:	887b      	ldrh	r3, [r7, #2]
 80055cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d00f      	beq.n	80055f6 <HAL_SPI_TransmitReceive+0x70>
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055dc:	d107      	bne.n	80055ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d103      	bne.n	80055ee <HAL_SPI_TransmitReceive+0x68>
 80055e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d003      	beq.n	80055f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
 80055f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055f4:	e15b      	b.n	80058ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_SPI_TransmitReceive+0x82>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <HAL_SPI_TransmitReceive+0x82>
 8005602:	887b      	ldrh	r3, [r7, #2]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d103      	bne.n	8005610 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800560e:	e14e      	b.n	80058ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b04      	cmp	r3, #4
 800561a:	d003      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2205      	movs	r2, #5
 8005620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	887a      	ldrh	r2, [r7, #2]
 8005634:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	887a      	ldrh	r2, [r7, #2]
 800563a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	887a      	ldrh	r2, [r7, #2]
 8005646:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d007      	beq.n	8005678 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005680:	d178      	bne.n	8005774 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_SPI_TransmitReceive+0x10a>
 800568a:	8b7b      	ldrh	r3, [r7, #26]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d166      	bne.n	800575e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	881a      	ldrh	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	1c9a      	adds	r2, r3, #2
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056b4:	e053      	b.n	800575e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d11b      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x176>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d016      	beq.n	80056fc <HAL_SPI_TransmitReceive+0x176>
 80056ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d113      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	881a      	ldrh	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	1c9a      	adds	r2, r3, #2
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d119      	bne.n	800573e <HAL_SPI_TransmitReceive+0x1b8>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d014      	beq.n	800573e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	b292      	uxth	r2, r2
 8005720:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	1c9a      	adds	r2, r3, #2
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800573a:	2301      	movs	r3, #1
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800573e:	f7fc fe75 	bl	800242c <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800574a:	429a      	cmp	r2, r3
 800574c:	d807      	bhi.n	800575e <HAL_SPI_TransmitReceive+0x1d8>
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d003      	beq.n	800575e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800575c:	e0a7      	b.n	80058ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1a6      	bne.n	80056b6 <HAL_SPI_TransmitReceive+0x130>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1a1      	bne.n	80056b6 <HAL_SPI_TransmitReceive+0x130>
 8005772:	e07c      	b.n	800586e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_SPI_TransmitReceive+0x1fc>
 800577c:	8b7b      	ldrh	r3, [r7, #26]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d16b      	bne.n	800585a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	7812      	ldrb	r2, [r2, #0]
 800578e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057a8:	e057      	b.n	800585a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d11c      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x26c>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d017      	beq.n	80057f2 <HAL_SPI_TransmitReceive+0x26c>
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d114      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d119      	bne.n	8005834 <HAL_SPI_TransmitReceive+0x2ae>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d014      	beq.n	8005834 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005830:	2301      	movs	r3, #1
 8005832:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005834:	f7fc fdfa 	bl	800242c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005840:	429a      	cmp	r2, r3
 8005842:	d803      	bhi.n	800584c <HAL_SPI_TransmitReceive+0x2c6>
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d102      	bne.n	8005852 <HAL_SPI_TransmitReceive+0x2cc>
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005858:	e029      	b.n	80058ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1a2      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x224>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d19d      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800586e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f8f8 	bl	8005a68 <SPI_EndRxTxTransaction>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d006      	beq.n	800588c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800588a:	e010      	b.n	80058ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	e000      	b.n	80058ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80058ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3730      	adds	r7, #48	; 0x30
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	603b      	str	r3, [r7, #0]
 80058d6:	4613      	mov	r3, r2
 80058d8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058da:	e04c      	b.n	8005976 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e2:	d048      	beq.n	8005976 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80058e4:	f7fc fda2 	bl	800242c <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d902      	bls.n	80058fa <SPI_WaitFlagStateUntilTimeout+0x30>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d13d      	bne.n	8005976 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005908:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005912:	d111      	bne.n	8005938 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800591c:	d004      	beq.n	8005928 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005926:	d107      	bne.n	8005938 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005936:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005940:	d10f      	bne.n	8005962 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e00f      	b.n	8005996 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	429a      	cmp	r2, r3
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	429a      	cmp	r2, r3
 8005992:	d1a3      	bne.n	80058dc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b086      	sub	sp, #24
 80059a2:	af02      	add	r7, sp, #8
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b2:	d111      	bne.n	80059d8 <SPI_EndRxTransaction+0x3a>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059bc:	d004      	beq.n	80059c8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c6:	d107      	bne.n	80059d8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059e0:	d12a      	bne.n	8005a38 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ea:	d012      	beq.n	8005a12 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2200      	movs	r2, #0
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff ff67 	bl	80058ca <SPI_WaitFlagStateUntilTimeout>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d02d      	beq.n	8005a5e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a06:	f043 0220 	orr.w	r2, r3, #32
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e026      	b.n	8005a60 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7ff ff54 	bl	80058ca <SPI_WaitFlagStateUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01a      	beq.n	8005a5e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	f043 0220 	orr.w	r2, r3, #32
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e013      	b.n	8005a60 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2101      	movs	r1, #1
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f7ff ff41 	bl	80058ca <SPI_WaitFlagStateUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d007      	beq.n	8005a5e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e000      	b.n	8005a60 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a74:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <SPI_EndRxTxTransaction+0x7c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <SPI_EndRxTxTransaction+0x80>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	0d5b      	lsrs	r3, r3, #21
 8005a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a84:	fb02 f303 	mul.w	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a92:	d112      	bne.n	8005aba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2180      	movs	r1, #128	; 0x80
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff ff13 	bl	80058ca <SPI_WaitFlagStateUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	f043 0220 	orr.w	r2, r3, #32
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e00f      	b.n	8005ada <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad0:	2b80      	cmp	r3, #128	; 0x80
 8005ad2:	d0f2      	beq.n	8005aba <SPI_EndRxTxTransaction+0x52>
 8005ad4:	e000      	b.n	8005ad8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ad6:	bf00      	nop
  }

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200000a0 	.word	0x200000a0
 8005ae8:	165e9f81 	.word	0x165e9f81

08005aec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e083      	b.n	8005c08 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fc f897 	bl	8001c48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6812      	ldr	r2, [r2, #0]
 8005b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b30:	f023 0307 	bic.w	r3, r3, #7
 8005b34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f000 f9ed 	bl	8005f20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b8c:	f023 030c 	bic.w	r3, r3, #12
 8005b90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	011a      	lsls	r2, r3, #4
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	031b      	lsls	r3, r3, #12
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	4313      	orrs	r3, r2
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_TIM_Encoder_Start_IT+0x16>
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d010      	beq.n	8005c46 <HAL_TIM_Encoder_Start_IT+0x36>
 8005c24:	e01f      	b.n	8005c66 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 f9f6 	bl	8006020 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0202 	orr.w	r2, r2, #2
 8005c42:	60da      	str	r2, [r3, #12]
      break;
 8005c44:	e02e      	b.n	8005ca4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	2104      	movs	r1, #4
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f9e6 	bl	8006020 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0204 	orr.w	r2, r2, #4
 8005c62:	60da      	str	r2, [r3, #12]
      break;
 8005c64:	e01e      	b.n	8005ca4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f9d6 	bl	8006020 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	2104      	movs	r1, #4
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f9cf 	bl	8006020 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0202 	orr.w	r2, r2, #2
 8005c90:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0204 	orr.w	r2, r2, #4
 8005ca0:	60da      	str	r2, [r3, #12]
      break;
 8005ca2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b082      	sub	sp, #8
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d122      	bne.n	8005d1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d11b      	bne.n	8005d1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f06f 0202 	mvn.w	r2, #2
 8005cea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7fb f8c5 	bl	8000e90 <HAL_TIM_IC_CaptureCallback>
 8005d06:	e005      	b.n	8005d14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f8ea 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f8f1 	bl	8005ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d122      	bne.n	8005d6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d11b      	bne.n	8005d6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f06f 0204 	mvn.w	r2, #4
 8005d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7fb f89b 	bl	8000e90 <HAL_TIM_IC_CaptureCallback>
 8005d5a:	e005      	b.n	8005d68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f8c0 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f8c7 	bl	8005ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d122      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d11b      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f06f 0208 	mvn.w	r2, #8
 8005d92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2204      	movs	r2, #4
 8005d98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7fb f871 	bl	8000e90 <HAL_TIM_IC_CaptureCallback>
 8005dae:	e005      	b.n	8005dbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f896 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f89d 	bl	8005ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b10      	cmp	r3, #16
 8005dce:	d122      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d11b      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f06f 0210 	mvn.w	r2, #16
 8005de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2208      	movs	r2, #8
 8005dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7fb f847 	bl	8000e90 <HAL_TIM_IC_CaptureCallback>
 8005e02:	e005      	b.n	8005e10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f86c 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f873 	bl	8005ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d10e      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d107      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f06f 0201 	mvn.w	r2, #1
 8005e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f846 	bl	8005ece <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4c:	2b80      	cmp	r3, #128	; 0x80
 8005e4e:	d10e      	bne.n	8005e6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b80      	cmp	r3, #128	; 0x80
 8005e5c:	d107      	bne.n	8005e6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f977 	bl	800615c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d10e      	bne.n	8005e9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b40      	cmp	r3, #64	; 0x40
 8005e88:	d107      	bne.n	8005e9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f838 	bl	8005f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d10e      	bne.n	8005ec6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d107      	bne.n	8005ec6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f06f 0220 	mvn.w	r2, #32
 8005ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f941 	bl	8006148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
	...

08005f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a34      	ldr	r2, [pc, #208]	; (8006004 <TIM_Base_SetConfig+0xe4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00f      	beq.n	8005f58 <TIM_Base_SetConfig+0x38>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3e:	d00b      	beq.n	8005f58 <TIM_Base_SetConfig+0x38>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a31      	ldr	r2, [pc, #196]	; (8006008 <TIM_Base_SetConfig+0xe8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d007      	beq.n	8005f58 <TIM_Base_SetConfig+0x38>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a30      	ldr	r2, [pc, #192]	; (800600c <TIM_Base_SetConfig+0xec>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_Base_SetConfig+0x38>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a2f      	ldr	r2, [pc, #188]	; (8006010 <TIM_Base_SetConfig+0xf0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d108      	bne.n	8005f6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a25      	ldr	r2, [pc, #148]	; (8006004 <TIM_Base_SetConfig+0xe4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01b      	beq.n	8005faa <TIM_Base_SetConfig+0x8a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f78:	d017      	beq.n	8005faa <TIM_Base_SetConfig+0x8a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a22      	ldr	r2, [pc, #136]	; (8006008 <TIM_Base_SetConfig+0xe8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <TIM_Base_SetConfig+0x8a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a21      	ldr	r2, [pc, #132]	; (800600c <TIM_Base_SetConfig+0xec>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00f      	beq.n	8005faa <TIM_Base_SetConfig+0x8a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a20      	ldr	r2, [pc, #128]	; (8006010 <TIM_Base_SetConfig+0xf0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00b      	beq.n	8005faa <TIM_Base_SetConfig+0x8a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a1f      	ldr	r2, [pc, #124]	; (8006014 <TIM_Base_SetConfig+0xf4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_Base_SetConfig+0x8a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a1e      	ldr	r2, [pc, #120]	; (8006018 <TIM_Base_SetConfig+0xf8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_Base_SetConfig+0x8a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1d      	ldr	r2, [pc, #116]	; (800601c <TIM_Base_SetConfig+0xfc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d108      	bne.n	8005fbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a08      	ldr	r2, [pc, #32]	; (8006004 <TIM_Base_SetConfig+0xe4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d103      	bne.n	8005ff0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	615a      	str	r2, [r3, #20]
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400
 800601c:	40014800 	.word	0x40014800

08006020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	2201      	movs	r2, #1
 8006034:	fa02 f303 	lsl.w	r3, r2, r3
 8006038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a1a      	ldr	r2, [r3, #32]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	43db      	mvns	r3, r3
 8006042:	401a      	ands	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	fa01 f303 	lsl.w	r3, r1, r3
 8006058:	431a      	orrs	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006080:	2302      	movs	r3, #2
 8006082:	e050      	b.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d0:	d013      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a18      	ldr	r2, [pc, #96]	; (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00e      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a16      	ldr	r2, [pc, #88]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a15      	ldr	r2, [pc, #84]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a13      	ldr	r2, [pc, #76]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d10c      	bne.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	4313      	orrs	r3, r2
 800610a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40010000 	.word	0x40010000
 8006138:	40000400 	.word	0x40000400
 800613c:	40000800 	.word	0x40000800
 8006140:	40000c00 	.word	0x40000c00
 8006144:	40014000 	.word	0x40014000

08006148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006170:	b084      	sub	sp, #16
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	f107 001c 	add.w	r0, r7, #28
 800617e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	2b01      	cmp	r3, #1
 8006186:	d122      	bne.n	80061ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800619c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d105      	bne.n	80061c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 fac6 	bl	8007754 <USB_CoreReset>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73fb      	strb	r3, [r7, #15]
 80061cc:	e01a      	b.n	8006204 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 faba 	bl	8007754 <USB_CoreReset>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
 80061f6:	e005      	b.n	8006204 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	2b01      	cmp	r3, #1
 8006208:	d10b      	bne.n	8006222 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f043 0206 	orr.w	r2, r3, #6
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f043 0220 	orr.w	r2, r3, #32
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006222:	7bfb      	ldrb	r3, [r7, #15]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800622e:	b004      	add	sp, #16
 8006230:	4770      	bx	lr
	...

08006234 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	4613      	mov	r3, r2
 8006240:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d165      	bne.n	8006314 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4a41      	ldr	r2, [pc, #260]	; (8006350 <USB_SetTurnaroundTime+0x11c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d906      	bls.n	800625e <USB_SetTurnaroundTime+0x2a>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4a40      	ldr	r2, [pc, #256]	; (8006354 <USB_SetTurnaroundTime+0x120>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d802      	bhi.n	800625e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006258:	230f      	movs	r3, #15
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e062      	b.n	8006324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4a3c      	ldr	r2, [pc, #240]	; (8006354 <USB_SetTurnaroundTime+0x120>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d906      	bls.n	8006274 <USB_SetTurnaroundTime+0x40>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4a3b      	ldr	r2, [pc, #236]	; (8006358 <USB_SetTurnaroundTime+0x124>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d802      	bhi.n	8006274 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800626e:	230e      	movs	r3, #14
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	e057      	b.n	8006324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4a38      	ldr	r2, [pc, #224]	; (8006358 <USB_SetTurnaroundTime+0x124>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d906      	bls.n	800628a <USB_SetTurnaroundTime+0x56>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a37      	ldr	r2, [pc, #220]	; (800635c <USB_SetTurnaroundTime+0x128>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d802      	bhi.n	800628a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006284:	230d      	movs	r3, #13
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e04c      	b.n	8006324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4a33      	ldr	r2, [pc, #204]	; (800635c <USB_SetTurnaroundTime+0x128>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d906      	bls.n	80062a0 <USB_SetTurnaroundTime+0x6c>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4a32      	ldr	r2, [pc, #200]	; (8006360 <USB_SetTurnaroundTime+0x12c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d802      	bhi.n	80062a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800629a:	230c      	movs	r3, #12
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	e041      	b.n	8006324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4a2f      	ldr	r2, [pc, #188]	; (8006360 <USB_SetTurnaroundTime+0x12c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d906      	bls.n	80062b6 <USB_SetTurnaroundTime+0x82>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4a2e      	ldr	r2, [pc, #184]	; (8006364 <USB_SetTurnaroundTime+0x130>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d802      	bhi.n	80062b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062b0:	230b      	movs	r3, #11
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	e036      	b.n	8006324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4a2a      	ldr	r2, [pc, #168]	; (8006364 <USB_SetTurnaroundTime+0x130>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d906      	bls.n	80062cc <USB_SetTurnaroundTime+0x98>
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4a29      	ldr	r2, [pc, #164]	; (8006368 <USB_SetTurnaroundTime+0x134>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d802      	bhi.n	80062cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062c6:	230a      	movs	r3, #10
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e02b      	b.n	8006324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a26      	ldr	r2, [pc, #152]	; (8006368 <USB_SetTurnaroundTime+0x134>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d906      	bls.n	80062e2 <USB_SetTurnaroundTime+0xae>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a25      	ldr	r2, [pc, #148]	; (800636c <USB_SetTurnaroundTime+0x138>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d802      	bhi.n	80062e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062dc:	2309      	movs	r3, #9
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	e020      	b.n	8006324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4a21      	ldr	r2, [pc, #132]	; (800636c <USB_SetTurnaroundTime+0x138>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d906      	bls.n	80062f8 <USB_SetTurnaroundTime+0xc4>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4a20      	ldr	r2, [pc, #128]	; (8006370 <USB_SetTurnaroundTime+0x13c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d802      	bhi.n	80062f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062f2:	2308      	movs	r3, #8
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	e015      	b.n	8006324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a1d      	ldr	r2, [pc, #116]	; (8006370 <USB_SetTurnaroundTime+0x13c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d906      	bls.n	800630e <USB_SetTurnaroundTime+0xda>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <USB_SetTurnaroundTime+0x140>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d802      	bhi.n	800630e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006308:	2307      	movs	r3, #7
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e00a      	b.n	8006324 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800630e:	2306      	movs	r3, #6
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	e007      	b.n	8006324 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800631a:	2309      	movs	r3, #9
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	e001      	b.n	8006324 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006320:	2309      	movs	r3, #9
 8006322:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	029b      	lsls	r3, r3, #10
 8006338:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800633c:	431a      	orrs	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	00d8acbf 	.word	0x00d8acbf
 8006354:	00e4e1bf 	.word	0x00e4e1bf
 8006358:	00f423ff 	.word	0x00f423ff
 800635c:	0106737f 	.word	0x0106737f
 8006360:	011a499f 	.word	0x011a499f
 8006364:	01312cff 	.word	0x01312cff
 8006368:	014ca43f 	.word	0x014ca43f
 800636c:	016e35ff 	.word	0x016e35ff
 8006370:	01a6ab1f 	.word	0x01a6ab1f
 8006374:	01e847ff 	.word	0x01e847ff

08006378 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f043 0201 	orr.w	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f023 0201 	bic.w	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d106      	bne.n	80063e8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60da      	str	r2, [r3, #12]
 80063e6:	e00b      	b.n	8006400 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e001      	b.n	8006400 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e003      	b.n	8006408 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006400:	2032      	movs	r0, #50	; 0x32
 8006402:	f7fc f81f 	bl	8002444 <HAL_Delay>

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006410:	b084      	sub	sp, #16
 8006412:	b580      	push	{r7, lr}
 8006414:	b086      	sub	sp, #24
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800641e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	e009      	b.n	8006444 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3340      	adds	r3, #64	; 0x40
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	2200      	movs	r2, #0
 800643c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	3301      	adds	r3, #1
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b0e      	cmp	r3, #14
 8006448:	d9f2      	bls.n	8006430 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800644a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d11c      	bne.n	800648a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800645e:	f043 0302 	orr.w	r3, r3, #2
 8006462:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	639a      	str	r2, [r3, #56]	; 0x38
 8006488:	e00b      	b.n	80064a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064a8:	461a      	mov	r2, r3
 80064aa:	2300      	movs	r3, #0
 80064ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b4:	4619      	mov	r1, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064bc:	461a      	mov	r2, r3
 80064be:	680b      	ldr	r3, [r1, #0]
 80064c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10c      	bne.n	80064e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064ce:	2100      	movs	r1, #0
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f949 	bl	8006768 <USB_SetDevSpeed>
 80064d6:	e008      	b.n	80064ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064d8:	2101      	movs	r1, #1
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f944 	bl	8006768 <USB_SetDevSpeed>
 80064e0:	e003      	b.n	80064ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064e2:	2103      	movs	r1, #3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f93f 	bl	8006768 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064ea:	2110      	movs	r1, #16
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f8f3 	bl	80066d8 <USB_FlushTxFifo>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f911 	bl	8006724 <USB_FlushRxFifo>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006512:	461a      	mov	r2, r3
 8006514:	2300      	movs	r3, #0
 8006516:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651e:	461a      	mov	r2, r3
 8006520:	2300      	movs	r3, #0
 8006522:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652a:	461a      	mov	r2, r3
 800652c:	2300      	movs	r3, #0
 800652e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	e043      	b.n	80065be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800654c:	d118      	bne.n	8006580 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	461a      	mov	r2, r3
 8006562:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e013      	b.n	8006592 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006576:	461a      	mov	r2, r3
 8006578:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	e008      	b.n	8006592 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4413      	add	r3, r2
 8006588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658c:	461a      	mov	r2, r3
 800658e:	2300      	movs	r3, #0
 8006590:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659e:	461a      	mov	r2, r3
 80065a0:	2300      	movs	r3, #0
 80065a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b0:	461a      	mov	r2, r3
 80065b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	3301      	adds	r3, #1
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d3b7      	bcc.n	8006536 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	e043      	b.n	8006654 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e2:	d118      	bne.n	8006616 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f6:	461a      	mov	r2, r3
 80065f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	e013      	b.n	8006628 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	461a      	mov	r2, r3
 800660e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	e008      	b.n	8006628 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006622:	461a      	mov	r2, r3
 8006624:	2300      	movs	r3, #0
 8006626:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	461a      	mov	r2, r3
 8006636:	2300      	movs	r3, #0
 8006638:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	461a      	mov	r2, r3
 8006648:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800664c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	3301      	adds	r3, #1
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	429a      	cmp	r2, r3
 800665a:	d3b7      	bcc.n	80065cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800666a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800666e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800667c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	2b00      	cmp	r3, #0
 8006682:	d105      	bne.n	8006690 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f043 0210 	orr.w	r2, r3, #16
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699a      	ldr	r2, [r3, #24]
 8006694:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <USB_DevInit+0x2c4>)
 8006696:	4313      	orrs	r3, r2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800669c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f043 0208 	orr.w	r2, r3, #8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d107      	bne.n	80066c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066bc:	f043 0304 	orr.w	r3, r3, #4
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066d0:	b004      	add	sp, #16
 80066d2:	4770      	bx	lr
 80066d4:	803c3800 	.word	0x803c3800

080066d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	019b      	lsls	r3, r3, #6
 80066ea:	f043 0220 	orr.w	r2, r3, #32
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3301      	adds	r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a09      	ldr	r2, [pc, #36]	; (8006720 <USB_FlushTxFifo+0x48>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d901      	bls.n	8006704 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e006      	b.n	8006712 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b20      	cmp	r3, #32
 800670e:	d0f0      	beq.n	80066f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	00030d40 	.word	0x00030d40

08006724 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2210      	movs	r2, #16
 8006734:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3301      	adds	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <USB_FlushRxFifo+0x40>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d901      	bls.n	8006748 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e006      	b.n	8006756 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	f003 0310 	and.w	r3, r3, #16
 8006750:	2b10      	cmp	r3, #16
 8006752:	d0f0      	beq.n	8006736 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	00030d40 	.word	0x00030d40

08006768 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006788:	4313      	orrs	r3, r2
 800678a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800679a:	b480      	push	{r7}
 800679c:	b087      	sub	sp, #28
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0306 	and.w	r3, r3, #6
 80067b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067ba:	2300      	movs	r3, #0
 80067bc:	75fb      	strb	r3, [r7, #23]
 80067be:	e00a      	b.n	80067d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d002      	beq.n	80067cc <USB_GetDevSpeed+0x32>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b06      	cmp	r3, #6
 80067ca:	d102      	bne.n	80067d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80067cc:	2302      	movs	r3, #2
 80067ce:	75fb      	strb	r3, [r7, #23]
 80067d0:	e001      	b.n	80067d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80067d2:	230f      	movs	r3, #15
 80067d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d13a      	bne.n	8006876 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	2101      	movs	r1, #1
 8006812:	fa01 f303 	lsl.w	r3, r1, r3
 8006816:	b29b      	uxth	r3, r3
 8006818:	68f9      	ldr	r1, [r7, #12]
 800681a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800681e:	4313      	orrs	r3, r2
 8006820:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d155      	bne.n	80068e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	78db      	ldrb	r3, [r3, #3]
 8006852:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006854:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	059b      	lsls	r3, r3, #22
 800685a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800685c:	4313      	orrs	r3, r2
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800686e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	e036      	b.n	80068e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687c:	69da      	ldr	r2, [r3, #28]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	2101      	movs	r1, #1
 8006888:	fa01 f303 	lsl.w	r3, r1, r3
 800688c:	041b      	lsls	r3, r3, #16
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006894:	4313      	orrs	r3, r2
 8006896:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d11a      	bne.n	80068e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	78db      	ldrb	r3, [r3, #3]
 80068c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068ca:	430b      	orrs	r3, r1
 80068cc:	4313      	orrs	r3, r2
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d161      	bne.n	80069d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006926:	d11f      	bne.n	8006968 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	440a      	add	r2, r1
 800693e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006942:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006946:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	0151      	lsls	r1, r2, #5
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	440a      	add	r2, r1
 800695e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006966:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	2101      	movs	r1, #1
 800697a:	fa01 f303 	lsl.w	r3, r1, r3
 800697e:	b29b      	uxth	r3, r3
 8006980:	43db      	mvns	r3, r3
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006988:	4013      	ands	r3, r2
 800698a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006992:	69da      	ldr	r2, [r3, #28]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f003 030f 	and.w	r3, r3, #15
 800699c:	2101      	movs	r1, #1
 800699e:	fa01 f303 	lsl.w	r3, r1, r3
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	43db      	mvns	r3, r3
 80069a6:	68f9      	ldr	r1, [r7, #12]
 80069a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ac:	4013      	ands	r3, r2
 80069ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	0159      	lsls	r1, r3, #5
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	440b      	add	r3, r1
 80069c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ca:	4619      	mov	r1, r3
 80069cc:	4b35      	ldr	r3, [pc, #212]	; (8006aa4 <USB_DeactivateEndpoint+0x1b0>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	600b      	str	r3, [r1, #0]
 80069d2:	e060      	b.n	8006a96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ea:	d11f      	bne.n	8006a2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	0151      	lsls	r1, r2, #5
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	440a      	add	r2, r1
 8006a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a42:	041b      	lsls	r3, r3, #16
 8006a44:	43db      	mvns	r3, r3
 8006a46:	68f9      	ldr	r1, [r7, #12]
 8006a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	2101      	movs	r1, #1
 8006a62:	fa01 f303 	lsl.w	r3, r1, r3
 8006a66:	041b      	lsls	r3, r3, #16
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a70:	4013      	ands	r3, r2
 8006a72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	0159      	lsls	r1, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	440b      	add	r3, r1
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <USB_DeactivateEndpoint+0x1b4>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	ec337800 	.word	0xec337800
 8006aa8:	eff37800 	.word	0xeff37800

08006aac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08a      	sub	sp, #40	; 0x28
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	f040 815c 	bne.w	8006d86 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d132      	bne.n	8006b3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006af4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006af8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b34:	0cdb      	lsrs	r3, r3, #19
 8006b36:	04db      	lsls	r3, r3, #19
 8006b38:	6113      	str	r3, [r2, #16]
 8006b3a:	e074      	b.n	8006c26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	0151      	lsls	r1, r2, #5
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	440a      	add	r2, r1
 8006b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b56:	0cdb      	lsrs	r3, r3, #19
 8006b58:	04db      	lsls	r3, r3, #19
 8006b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	0151      	lsls	r1, r2, #5
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	440a      	add	r2, r1
 8006b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8c:	691a      	ldr	r2, [r3, #16]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6959      	ldr	r1, [r3, #20]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	440b      	add	r3, r1
 8006b98:	1e59      	subs	r1, r3, #1
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ba2:	04d9      	lsls	r1, r3, #19
 8006ba4:	4b9d      	ldr	r3, [pc, #628]	; (8006e1c <USB_EPStartXfer+0x370>)
 8006ba6:	400b      	ands	r3, r1
 8006ba8:	69b9      	ldr	r1, [r7, #24]
 8006baa:	0148      	lsls	r0, r1, #5
 8006bac:	69f9      	ldr	r1, [r7, #28]
 8006bae:	4401      	add	r1, r0
 8006bb0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc4:	691a      	ldr	r2, [r3, #16]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bce:	69b9      	ldr	r1, [r7, #24]
 8006bd0:	0148      	lsls	r0, r1, #5
 8006bd2:	69f9      	ldr	r1, [r7, #28]
 8006bd4:	4401      	add	r1, r0
 8006bd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	78db      	ldrb	r3, [r3, #3]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d11f      	bne.n	8006c26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	0151      	lsls	r1, r2, #5
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	440a      	add	r2, r1
 8006c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d14b      	bne.n	8006cc4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d009      	beq.n	8006c48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	461a      	mov	r2, r3
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	78db      	ldrb	r3, [r3, #3]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d128      	bne.n	8006ca2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d110      	bne.n	8006c82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	0151      	lsls	r1, r2, #5
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	440a      	add	r2, r1
 8006c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	e00f      	b.n	8006ca2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	e12f      	b.n	8006f24 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ce2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	78db      	ldrb	r3, [r3, #3]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d015      	beq.n	8006d18 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8117 	beq.w	8006f24 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	2101      	movs	r1, #1
 8006d08:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0c:	69f9      	ldr	r1, [r7, #28]
 8006d0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d12:	4313      	orrs	r3, r2
 8006d14:	634b      	str	r3, [r1, #52]	; 0x34
 8006d16:	e105      	b.n	8006f24 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d110      	bne.n	8006d4a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	e00f      	b.n	8006d6a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	69fa      	ldr	r2, [r7, #28]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d68:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	68d9      	ldr	r1, [r3, #12]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	781a      	ldrb	r2, [r3, #0]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	b298      	uxth	r0, r3
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 fa2b 	bl	80071da <USB_WritePacket>
 8006d84:	e0ce      	b.n	8006f24 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	0151      	lsls	r1, r2, #5
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	440a      	add	r2, r1
 8006d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da0:	0cdb      	lsrs	r3, r3, #19
 8006da2:	04db      	lsls	r3, r3, #19
 8006da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	0151      	lsls	r1, r2, #5
 8006db8:	69fa      	ldr	r2, [r7, #28]
 8006dba:	440a      	add	r2, r1
 8006dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d126      	bne.n	8006e20 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006de8:	69b9      	ldr	r1, [r7, #24]
 8006dea:	0148      	lsls	r0, r1, #5
 8006dec:	69f9      	ldr	r1, [r7, #28]
 8006dee:	4401      	add	r1, r0
 8006df0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006df4:	4313      	orrs	r3, r2
 8006df6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e16:	6113      	str	r3, [r2, #16]
 8006e18:	e036      	b.n	8006e88 <USB_EPStartXfer+0x3dc>
 8006e1a:	bf00      	nop
 8006e1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	695a      	ldr	r2, [r3, #20]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	4413      	add	r3, r2
 8006e2a:	1e5a      	subs	r2, r3, #1
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e34:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	8afb      	ldrh	r3, [r7, #22]
 8006e46:	04d9      	lsls	r1, r3, #19
 8006e48:	4b39      	ldr	r3, [pc, #228]	; (8006f30 <USB_EPStartXfer+0x484>)
 8006e4a:	400b      	ands	r3, r1
 8006e4c:	69b9      	ldr	r1, [r7, #24]
 8006e4e:	0148      	lsls	r0, r1, #5
 8006e50:	69f9      	ldr	r1, [r7, #28]
 8006e52:	4401      	add	r1, r0
 8006e54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	8af9      	ldrh	r1, [r7, #22]
 8006e70:	fb01 f303 	mul.w	r3, r1, r3
 8006e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e78:	69b9      	ldr	r1, [r7, #24]
 8006e7a:	0148      	lsls	r0, r1, #5
 8006e7c:	69f9      	ldr	r1, [r7, #28]
 8006e7e:	4401      	add	r1, r0
 8006e80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e84:	4313      	orrs	r3, r2
 8006e86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d10d      	bne.n	8006eaa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	68d9      	ldr	r1, [r3, #12]
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	460a      	mov	r2, r1
 8006ea8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	78db      	ldrb	r3, [r3, #3]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d128      	bne.n	8006f04 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d110      	bne.n	8006ee4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	69fa      	ldr	r2, [r7, #28]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006edc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	e00f      	b.n	8006f04 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3720      	adds	r7, #32
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	1ff80000 	.word	0x1ff80000

08006f34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	785b      	ldrb	r3, [r3, #1]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	f040 80cd 	bne.w	80070f0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d132      	bne.n	8006fc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	0151      	lsls	r1, r2, #5
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	440a      	add	r2, r1
 8006f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fbc:	0cdb      	lsrs	r3, r3, #19
 8006fbe:	04db      	lsls	r3, r3, #19
 8006fc0:	6113      	str	r3, [r2, #16]
 8006fc2:	e04e      	b.n	8007062 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	440a      	add	r2, r1
 8006fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fde:	0cdb      	lsrs	r3, r3, #19
 8006fe0:	04db      	lsls	r3, r3, #19
 8006fe2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007002:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007006:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	695a      	ldr	r2, [r3, #20]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	429a      	cmp	r2, r3
 8007012:	d903      	bls.n	800701c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800703a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007052:	6939      	ldr	r1, [r7, #16]
 8007054:	0148      	lsls	r0, r1, #5
 8007056:	6979      	ldr	r1, [r7, #20]
 8007058:	4401      	add	r1, r0
 800705a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800705e:	4313      	orrs	r3, r2
 8007060:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d11e      	bne.n	80070a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	461a      	mov	r2, r3
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	440a      	add	r2, r1
 800709a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	e092      	b.n	80071cc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d07e      	beq.n	80071cc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	2101      	movs	r1, #1
 80070e0:	fa01 f303 	lsl.w	r3, r1, r3
 80070e4:	6979      	ldr	r1, [r7, #20]
 80070e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ea:	4313      	orrs	r3, r2
 80070ec:	634b      	str	r3, [r1, #52]	; 0x34
 80070ee:	e06d      	b.n	80071cc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710a:	0cdb      	lsrs	r3, r3, #19
 800710c:	04db      	lsls	r3, r3, #19
 800710e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	440a      	add	r2, r1
 8007126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800712a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800712e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007132:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007162:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800717a:	6939      	ldr	r1, [r7, #16]
 800717c:	0148      	lsls	r0, r1, #5
 800717e:	6979      	ldr	r1, [r7, #20]
 8007180:	4401      	add	r1, r0
 8007182:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007186:	4313      	orrs	r3, r2
 8007188:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d10d      	bne.n	80071ac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d009      	beq.n	80071ac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	68d9      	ldr	r1, [r3, #12]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a8:	460a      	mov	r2, r1
 80071aa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071da:	b480      	push	{r7}
 80071dc:	b089      	sub	sp, #36	; 0x24
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	4611      	mov	r1, r2
 80071e6:	461a      	mov	r2, r3
 80071e8:	460b      	mov	r3, r1
 80071ea:	71fb      	strb	r3, [r7, #7]
 80071ec:	4613      	mov	r3, r2
 80071ee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80071f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d11a      	bne.n	8007236 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007200:	88bb      	ldrh	r3, [r7, #4]
 8007202:	3303      	adds	r3, #3
 8007204:	089b      	lsrs	r3, r3, #2
 8007206:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007208:	2300      	movs	r3, #0
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	e00f      	b.n	800722e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	031a      	lsls	r2, r3, #12
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	4413      	add	r3, r2
 8007216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721a:	461a      	mov	r2, r3
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	3304      	adds	r3, #4
 8007226:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	3301      	adds	r3, #1
 800722c:	61bb      	str	r3, [r7, #24]
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	429a      	cmp	r2, r3
 8007234:	d3eb      	bcc.n	800720e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3724      	adds	r7, #36	; 0x24
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007244:	b480      	push	{r7}
 8007246:	b089      	sub	sp, #36	; 0x24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	3303      	adds	r3, #3
 800725e:	089b      	lsrs	r3, r3, #2
 8007260:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007262:	2300      	movs	r3, #0
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	e00b      	b.n	8007280 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	601a      	str	r2, [r3, #0]
    pDest++;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	3304      	adds	r3, #4
 8007278:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	3301      	adds	r3, #1
 800727e:	61bb      	str	r3, [r7, #24]
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	429a      	cmp	r2, r3
 8007286:	d3ef      	bcc.n	8007268 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007288:	69fb      	ldr	r3, [r7, #28]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3724      	adds	r7, #36	; 0x24
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007296:	b480      	push	{r7}
 8007298:	b085      	sub	sp, #20
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	785b      	ldrb	r3, [r3, #1]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d12c      	bne.n	800730c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	db12      	blt.n	80072ea <USB_EPSetStall+0x54>
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00f      	beq.n	80072ea <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072e8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	0151      	lsls	r1, r2, #5
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	440a      	add	r2, r1
 8007300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	e02b      	b.n	8007364 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	db12      	blt.n	8007344 <USB_EPSetStall+0xae>
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00f      	beq.n	8007344 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007342:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	440a      	add	r2, r1
 800735a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800735e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007362:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007372:	b480      	push	{r7}
 8007374:	b085      	sub	sp, #20
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d128      	bne.n	80073e0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	78db      	ldrb	r3, [r3, #3]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d003      	beq.n	80073be <USB_EPClearStall+0x4c>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	78db      	ldrb	r3, [r3, #3]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d138      	bne.n	8007430 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	e027      	b.n	8007430 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	78db      	ldrb	r3, [r3, #3]
 8007404:	2b03      	cmp	r3, #3
 8007406:	d003      	beq.n	8007410 <USB_EPClearStall+0x9e>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	78db      	ldrb	r3, [r3, #3]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d10f      	bne.n	8007430 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800742e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800745c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007460:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	011b      	lsls	r3, r3, #4
 800746e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007472:	68f9      	ldr	r1, [r7, #12]
 8007474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007478:	4313      	orrs	r3, r2
 800747a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074a4:	f023 0303 	bic.w	r3, r3, #3
 80074a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074b8:	f023 0302 	bic.w	r3, r3, #2
 80074bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074fa:	f043 0302 	orr.w	r3, r3, #2
 80074fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4013      	ands	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007526:	68fb      	ldr	r3, [r7, #12]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	4013      	ands	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	0c1b      	lsrs	r3, r3, #16
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	4013      	ands	r3, r2
 800758a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	b29b      	uxth	r3, r3
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	4013      	ands	r3, r2
 80075c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075ca:	68bb      	ldr	r3, [r7, #8]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	f003 030f 	and.w	r3, r3, #15
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	fa22 f303 	lsr.w	r3, r2, r3
 8007608:	01db      	lsls	r3, r3, #7
 800760a:	b2db      	uxtb	r3, r3
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	4313      	orrs	r3, r2
 8007610:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4013      	ands	r3, r2
 8007624:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007626:	68bb      	ldr	r3, [r7, #8]
}
 8007628:	4618      	mov	r0, r3
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	f003 0301 	and.w	r3, r3, #1
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800766a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800766e:	f023 0307 	bic.w	r3, r3, #7
 8007672:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007686:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	460b      	mov	r3, r1
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	333c      	adds	r3, #60	; 0x3c
 80076ae:	3304      	adds	r3, #4
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	4a26      	ldr	r2, [pc, #152]	; (8007750 <USB_EP0_OutStart+0xb8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d90a      	bls.n	80076d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076cc:	d101      	bne.n	80076d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	e037      	b.n	8007742 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d8:	461a      	mov	r2, r3
 80076da:	2300      	movs	r3, #0
 80076dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007700:	f043 0318 	orr.w	r3, r3, #24
 8007704:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007714:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007718:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d10f      	bne.n	8007740 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007726:	461a      	mov	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800773e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	4f54300a 	.word	0x4f54300a

08007754 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3301      	adds	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4a13      	ldr	r2, [pc, #76]	; (80077b8 <USB_CoreReset+0x64>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d901      	bls.n	8007772 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e01b      	b.n	80077aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	daf2      	bge.n	8007760 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f043 0201 	orr.w	r2, r3, #1
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a09      	ldr	r2, [pc, #36]	; (80077b8 <USB_CoreReset+0x64>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d901      	bls.n	800779c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e006      	b.n	80077aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d0f0      	beq.n	800778a <USB_CoreReset+0x36>

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	00030d40 	.word	0x00030d40

080077bc <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	USBD_HID_HandleTypeDef *hhid;

	hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80077c8:	2010      	movs	r0, #16
 80077ca:	f001 fee3 	bl	8009594 <malloc>
 80077ce:	4603      	mov	r3, r0
 80077d0:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d105      	bne.n	80077e4 <USBD_HID_Init+0x28>
	{
		pdev->pClassData = NULL;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		return (uint8_t)USBD_EMEM;
 80077e0:	2302      	movs	r3, #2
 80077e2:	e01b      	b.n	800781c <USBD_HID_Init+0x60>
	}

	pdev->pClassData = (void *)hhid;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	7c1b      	ldrb	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <USBD_HID_Init+0x40>
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2207      	movs	r2, #7
 80077f8:	875a      	strh	r2, [r3, #58]	; 0x3a
 80077fa:	e002      	b.n	8007802 <USBD_HID_Init+0x46>
	}
	else   /* LOW and FULL-speed endpoints */
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	220a      	movs	r2, #10
 8007800:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	/* Open EP IN */
	(void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007802:	2304      	movs	r3, #4
 8007804:	2203      	movs	r2, #3
 8007806:	2181      	movs	r1, #129	; 0x81
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 fd5c 	bl	80092c6 <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	871a      	strh	r2, [r3, #56]	; 0x38

	hhid->state = HID_IDLE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_HID_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	/* Close HID EPs */
	(void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007830:	2181      	movs	r1, #129	; 0x81
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 fd6d 	bl	8009312 <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	871a      	strh	r2, [r3, #56]	; 0x38
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	875a      	strh	r2, [r3, #58]	; 0x3a

	/* FRee allocated memory */
	if (pdev->pClassData != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <USBD_HID_DeInit+0x3e>
	{
		(void)USBD_free(pdev->pClassData);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007854:	4618      	mov	r0, r3
 8007856:	f001 fea5 	bl	80095a4 <free>
		pdev->pClassData = NULL;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t)USBD_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800787c:	60fb      	str	r3, [r7, #12]
	USBD_StatusTypeDef ret = USBD_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	817b      	strh	r3, [r7, #10]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800788e:	2b00      	cmp	r3, #0
 8007890:	d045      	beq.n	800791e <USBD_HID_Setup+0xb2>
 8007892:	2b20      	cmp	r3, #32
 8007894:	f040 80d4 	bne.w	8007a40 <USBD_HID_Setup+0x1d4>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	3b02      	subs	r3, #2
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d835      	bhi.n	800790e <USBD_HID_Setup+0xa2>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <USBD_HID_Setup+0x3c>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078ff 	.word	0x080078ff
 80078ac:	080078df 	.word	0x080078df
 80078b0:	0800790f 	.word	0x0800790f
 80078b4:	0800790f 	.word	0x0800790f
 80078b8:	0800790f 	.word	0x0800790f
 80078bc:	0800790f 	.word	0x0800790f
 80078c0:	0800790f 	.word	0x0800790f
 80078c4:	0800790f 	.word	0x0800790f
 80078c8:	080078ed 	.word	0x080078ed
 80078cc:	080078d1 	.word	0x080078d1
		{
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	885b      	ldrh	r3, [r3, #2]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	601a      	str	r2, [r3, #0]
			break;
 80078dc:	e01e      	b.n	800791c <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 f9b4 	bl	8008c52 <USBD_CtlSendData>
			break;
 80078ea:	e017      	b.n	800791c <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	885b      	ldrh	r3, [r3, #2]
 80078f0:	0a1b      	lsrs	r3, r3, #8
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	461a      	mov	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	605a      	str	r2, [r3, #4]
			break;
 80078fc:	e00e      	b.n	800791c <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3304      	adds	r3, #4
 8007902:	2201      	movs	r2, #1
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f001 f9a3 	bl	8008c52 <USBD_CtlSendData>
			break;
 800790c:	e006      	b.n	800791c <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 f92d 	bl	8008b70 <USBD_CtlError>
			ret = USBD_FAIL;
 8007916:	2303      	movs	r3, #3
 8007918:	75fb      	strb	r3, [r7, #23]
			break;
 800791a:	bf00      	nop
		}
		break;
 800791c:	e097      	b.n	8007a4e <USBD_HID_Setup+0x1e2>
		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b0b      	cmp	r3, #11
 8007924:	f200 8083 	bhi.w	8007a2e <USBD_HID_Setup+0x1c2>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <USBD_HID_Setup+0xc4>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	08007961 	.word	0x08007961
 8007934:	08007a3d 	.word	0x08007a3d
 8007938:	08007a2f 	.word	0x08007a2f
 800793c:	08007a2f 	.word	0x08007a2f
 8007940:	08007a2f 	.word	0x08007a2f
 8007944:	08007a2f 	.word	0x08007a2f
 8007948:	08007989 	.word	0x08007989
 800794c:	08007a2f 	.word	0x08007a2f
 8007950:	08007a2f 	.word	0x08007a2f
 8007954:	08007a2f 	.word	0x08007a2f
 8007958:	080079e1 	.word	0x080079e1
 800795c:	08007a09 	.word	0x08007a09
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007966:	2b03      	cmp	r3, #3
 8007968:	d107      	bne.n	800797a <USBD_HID_Setup+0x10e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800796a:	f107 030a 	add.w	r3, r7, #10
 800796e:	2202      	movs	r2, #2
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 f96d 	bl	8008c52 <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8007978:	e061      	b.n	8007a3e <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f8f7 	bl	8008b70 <USBD_CtlError>
					ret = USBD_FAIL;
 8007982:	2303      	movs	r3, #3
 8007984:	75fb      	strb	r3, [r7, #23]
				break;
 8007986:	e05a      	b.n	8007a3e <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_DESCRIPTOR:
				if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	885b      	ldrh	r3, [r3, #2]
 800798c:	0a1b      	lsrs	r3, r3, #8
 800798e:	b29b      	uxth	r3, r3
 8007990:	2b22      	cmp	r3, #34	; 0x22
 8007992:	d108      	bne.n	80079a6 <USBD_HID_Setup+0x13a>
				{
					len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	88db      	ldrh	r3, [r3, #6]
 8007998:	2b3f      	cmp	r3, #63	; 0x3f
 800799a:	bf28      	it	cs
 800799c:	233f      	movcs	r3, #63	; 0x3f
 800799e:	82bb      	strh	r3, [r7, #20]
					pbuf = HID_MOUSE_ReportDesc;
 80079a0:	4b2d      	ldr	r3, [pc, #180]	; (8007a58 <USBD_HID_Setup+0x1ec>)
 80079a2:	613b      	str	r3, [r7, #16]
 80079a4:	e015      	b.n	80079d2 <USBD_HID_Setup+0x166>
				}
				else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	885b      	ldrh	r3, [r3, #2]
 80079aa:	0a1b      	lsrs	r3, r3, #8
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b21      	cmp	r3, #33	; 0x21
 80079b0:	d108      	bne.n	80079c4 <USBD_HID_Setup+0x158>
				{
					pbuf = USBD_HID_Desc;
 80079b2:	4b2a      	ldr	r3, [pc, #168]	; (8007a5c <USBD_HID_Setup+0x1f0>)
 80079b4:	613b      	str	r3, [r7, #16]
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	88db      	ldrh	r3, [r3, #6]
 80079ba:	2b09      	cmp	r3, #9
 80079bc:	bf28      	it	cs
 80079be:	2309      	movcs	r3, #9
 80079c0:	82bb      	strh	r3, [r7, #20]
 80079c2:	e006      	b.n	80079d2 <USBD_HID_Setup+0x166>
				}
				else
				{
					USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 f8d2 	bl	8008b70 <USBD_CtlError>
					ret = USBD_FAIL;
 80079cc:	2303      	movs	r3, #3
 80079ce:	75fb      	strb	r3, [r7, #23]
					break;
 80079d0:	e035      	b.n	8007a3e <USBD_HID_Setup+0x1d2>
				}
				(void)USBD_CtlSendData(pdev, pbuf, len);
 80079d2:	8abb      	ldrh	r3, [r7, #20]
 80079d4:	461a      	mov	r2, r3
 80079d6:	6939      	ldr	r1, [r7, #16]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 f93a 	bl	8008c52 <USBD_CtlSendData>
				break;
 80079de:	e02e      	b.n	8007a3e <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d107      	bne.n	80079fa <USBD_HID_Setup+0x18e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3308      	adds	r3, #8
 80079ee:	2201      	movs	r2, #1
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 f92d 	bl	8008c52 <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 80079f8:	e021      	b.n	8007a3e <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 f8b7 	bl	8008b70 <USBD_CtlError>
					ret = USBD_FAIL;
 8007a02:	2303      	movs	r3, #3
 8007a04:	75fb      	strb	r3, [r7, #23]
				break;
 8007a06:	e01a      	b.n	8007a3e <USBD_HID_Setup+0x1d2>

			case USB_REQ_SET_INTERFACE:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d106      	bne.n	8007a20 <USBD_HID_Setup+0x1b4>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	885b      	ldrh	r3, [r3, #2]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	609a      	str	r2, [r3, #8]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8007a1e:	e00e      	b.n	8007a3e <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f001 f8a4 	bl	8008b70 <USBD_CtlError>
					ret = USBD_FAIL;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	75fb      	strb	r3, [r7, #23]
				break;
 8007a2c:	e007      	b.n	8007a3e <USBD_HID_Setup+0x1d2>

			case USB_REQ_CLEAR_FEATURE:
				break;

			default:
				USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 f89d 	bl	8008b70 <USBD_CtlError>
				ret = USBD_FAIL;
 8007a36:	2303      	movs	r3, #3
 8007a38:	75fb      	strb	r3, [r7, #23]
				break;
 8007a3a:	e000      	b.n	8007a3e <USBD_HID_Setup+0x1d2>
				break;
 8007a3c:	bf00      	nop
			}
			break;
 8007a3e:	e006      	b.n	8007a4e <USBD_HID_Setup+0x1e2>

			default:
				USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f001 f894 	bl	8008b70 <USBD_CtlError>
				ret = USBD_FAIL;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	75fb      	strb	r3, [r7, #23]
				break;
 8007a4c:	bf00      	nop
	}

	return (uint8_t)ret;
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000168 	.word	0x20000168
 8007a5c:	20000150 	.word	0x20000150

08007a60 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80fb      	strh	r3, [r7, #6]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a74:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d10c      	bne.n	8007a9a <USBD_HID_SendReport+0x3a>
	{
		if (hhid->state == HID_IDLE)
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	7b1b      	ldrb	r3, [r3, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d108      	bne.n	8007a9a <USBD_HID_SendReport+0x3a>
		{
			hhid->state = HID_BUSY;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	731a      	strb	r2, [r3, #12]
			(void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007a8e:	88fb      	ldrh	r3, [r7, #6]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	2181      	movs	r1, #129	; 0x81
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f001 fce4 	bl	8009462 <USBD_LL_Transmit>
		}
	}

	return (uint8_t)USBD_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2222      	movs	r2, #34	; 0x22
 8007ab0:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgFSDesc;
 8007ab2:	4b03      	ldr	r3, [pc, #12]	; (8007ac0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	200000e4 	.word	0x200000e4

08007ac4 <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2222      	movs	r2, #34	; 0x22
 8007ad0:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgHSDesc;
 8007ad2:	4b03      	ldr	r3, [pc, #12]	; (8007ae0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	20000108 	.word	0x20000108

08007ae4 <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2222      	movs	r2, #34	; 0x22
 8007af0:	801a      	strh	r2, [r3, #0]

	return USBD_HID_OtherSpeedCfgDesc;
 8007af2:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	2000012c 	.word	0x2000012c

08007b04 <USBD_HID_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
	UNUSED(epnum);
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b16:	2200      	movs	r2, #0
 8007b18:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	220a      	movs	r2, #10
 8007b34:	801a      	strh	r2, [r3, #0]

	return USBD_HID_DeviceQualifierDesc;
 8007b36:	4b03      	ldr	r3, [pc, #12]	; (8007b44 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	2000015c 	.word	0x2000015c

08007b48 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	4613      	mov	r3, r2
 8007b54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e025      	b.n	8007bac <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	79fa      	ldrb	r2, [r7, #7]
 8007b9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f001 fb29 	bl	80091f8 <USBD_LL_Init>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3718      	adds	r7, #24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e010      	b.n	8007bee <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bdc:	f107 020e 	add.w	r2, r7, #14
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	4602      	mov	r2, r0
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 fb46 	bl	8009290 <USBD_LL_Start>
 8007c04:	4603      	mov	r3, r0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c30:	2303      	movs	r3, #3
 8007c32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d009      	beq.n	8007c52 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
  }

  return USBD_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 ff2c 	bl	8008afc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cc0:	f003 031f 	and.w	r3, r3, #31
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d00e      	beq.n	8007ce6 <USBD_LL_SetupStage+0x5a>
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d302      	bcc.n	8007cd2 <USBD_LL_SetupStage+0x46>
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d014      	beq.n	8007cfa <USBD_LL_SetupStage+0x6e>
 8007cd0:	e01d      	b.n	8007d0e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa18 	bl	8008110 <USBD_StdDevReq>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	e020      	b.n	8007d28 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa7c 	bl	80081ec <USBD_StdItfReq>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf8:	e016      	b.n	8007d28 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fab8 	bl	8008278 <USBD_StdEPReq>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0c:	e00c      	b.n	8007d28 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 fb17 	bl	8009350 <USBD_LL_StallEP>
 8007d22:	4603      	mov	r3, r0
 8007d24:	73fb      	strb	r3, [r7, #15]
      break;
 8007d26:	bf00      	nop
  }

  return ret;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b086      	sub	sp, #24
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	607a      	str	r2, [r7, #4]
 8007d3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d137      	bne.n	8007db6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d14a      	bne.n	8007dee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d913      	bls.n	8007d8c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	1ad2      	subs	r2, r2, r3
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	bf28      	it	cs
 8007d7e:	4613      	movcs	r3, r2
 8007d80:	461a      	mov	r2, r3
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 ff90 	bl	8008caa <USBD_CtlContinueRx>
 8007d8a:	e030      	b.n	8007dee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d105      	bne.n	8007dae <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 ff8c 	bl	8008ccc <USBD_CtlSendStatus>
 8007db4:	e01b      	b.n	8007dee <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d013      	beq.n	8007dea <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d10e      	bne.n	8007dea <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	7afa      	ldrb	r2, [r7, #11]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	4798      	blx	r3
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	e002      	b.n	8007df0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e000      	b.n	8007df0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	460b      	mov	r3, r1
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e06:	7afb      	ldrb	r3, [r7, #11]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d16a      	bne.n	8007ee2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3314      	adds	r3, #20
 8007e10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d155      	bne.n	8007ec8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d914      	bls.n	8007e52 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	1ad2      	subs	r2, r2, r3
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 ff22 	bl	8008c88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e44:	2300      	movs	r3, #0
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f001 fb2a 	bl	80094a4 <USBD_LL_PrepareReceive>
 8007e50:	e03a      	b.n	8007ec8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d11c      	bne.n	8007e98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d316      	bcc.n	8007e98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d20f      	bcs.n	8007e98 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 ff03 	bl	8008c88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f001 fb07 	bl	80094a4 <USBD_LL_PrepareReceive>
 8007e96:	e017      	b.n	8007ec8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d105      	bne.n	8007eba <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eba:	2180      	movs	r1, #128	; 0x80
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f001 fa47 	bl	8009350 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 ff15 	bl	8008cf2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d123      	bne.n	8007f1a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f7ff fe9b 	bl	8007c0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ee0:	e01b      	b.n	8007f1a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d013      	beq.n	8007f16 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d10e      	bne.n	8007f16 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	7afa      	ldrb	r2, [r7, #11]
 8007f02:	4611      	mov	r1, r2
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	4798      	blx	r3
 8007f08:	4603      	mov	r3, r0
 8007f0a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	e002      	b.n	8007f1c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e000      	b.n	8007f1c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d009      	beq.n	8007f68 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6852      	ldr	r2, [r2, #4]
 8007f60:	b2d2      	uxtb	r2, r2
 8007f62:	4611      	mov	r1, r2
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f68:	2340      	movs	r3, #64	; 0x40
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 f9a9 	bl	80092c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2240      	movs	r2, #64	; 0x40
 8007f80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f84:	2340      	movs	r3, #64	; 0x40
 8007f86:	2200      	movs	r2, #0
 8007f88:	2180      	movs	r1, #128	; 0x80
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f001 f99b 	bl	80092c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2240      	movs	r2, #64	; 0x40
 8007f9a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	78fa      	ldrb	r2, [r7, #3]
 8007fb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2204      	movs	r2, #4
 8007fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d105      	bne.n	800800e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800802a:	2b03      	cmp	r3, #3
 800802c:	d10b      	bne.n	8008046 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	460b      	mov	r3, r1
 8008074:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d009      	beq.n	80080c8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6852      	ldr	r2, [r2, #4]
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	4611      	mov	r1, r2
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	4798      	blx	r3
  }

  return USBD_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b087      	sub	sp, #28
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	3301      	adds	r3, #1
 80080e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080f0:	8a3b      	ldrh	r3, [r7, #16]
 80080f2:	021b      	lsls	r3, r3, #8
 80080f4:	b21a      	sxth	r2, r3
 80080f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	b21b      	sxth	r3, r3
 80080fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008100:	89fb      	ldrh	r3, [r7, #14]
}
 8008102:	4618      	mov	r0, r3
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
	...

08008110 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008126:	2b20      	cmp	r3, #32
 8008128:	d004      	beq.n	8008134 <USBD_StdDevReq+0x24>
 800812a:	2b40      	cmp	r3, #64	; 0x40
 800812c:	d002      	beq.n	8008134 <USBD_StdDevReq+0x24>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <USBD_StdDevReq+0x38>
 8008132:	e050      	b.n	80081d6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
 8008142:	4603      	mov	r3, r0
 8008144:	73fb      	strb	r3, [r7, #15]
    break;
 8008146:	e04b      	b.n	80081e0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	785b      	ldrb	r3, [r3, #1]
 800814c:	2b09      	cmp	r3, #9
 800814e:	d83c      	bhi.n	80081ca <USBD_StdDevReq+0xba>
 8008150:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <USBD_StdDevReq+0x48>)
 8008152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008156:	bf00      	nop
 8008158:	080081ad 	.word	0x080081ad
 800815c:	080081c1 	.word	0x080081c1
 8008160:	080081cb 	.word	0x080081cb
 8008164:	080081b7 	.word	0x080081b7
 8008168:	080081cb 	.word	0x080081cb
 800816c:	0800818b 	.word	0x0800818b
 8008170:	08008181 	.word	0x08008181
 8008174:	080081cb 	.word	0x080081cb
 8008178:	080081a3 	.word	0x080081a3
 800817c:	08008195 	.word	0x08008195
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f9ce 	bl	8008524 <USBD_GetDescriptor>
      break;
 8008188:	e024      	b.n	80081d4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fb33 	bl	80087f8 <USBD_SetAddress>
      break;
 8008192:	e01f      	b.n	80081d4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fb70 	bl	800887c <USBD_SetConfig>
 800819c:	4603      	mov	r3, r0
 800819e:	73fb      	strb	r3, [r7, #15]
      break;
 80081a0:	e018      	b.n	80081d4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fc0d 	bl	80089c4 <USBD_GetConfig>
      break;
 80081aa:	e013      	b.n	80081d4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fc3c 	bl	8008a2c <USBD_GetStatus>
      break;
 80081b4:	e00e      	b.n	80081d4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fc6a 	bl	8008a92 <USBD_SetFeature>
      break;
 80081be:	e009      	b.n	80081d4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fc79 	bl	8008aba <USBD_ClrFeature>
      break;
 80081c8:	e004      	b.n	80081d4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fccf 	bl	8008b70 <USBD_CtlError>
      break;
 80081d2:	bf00      	nop
    }
    break;
 80081d4:	e004      	b.n	80081e0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fcc9 	bl	8008b70 <USBD_CtlError>
    break;
 80081de:	bf00      	nop
  }

  return ret;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop

080081ec <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008202:	2b20      	cmp	r3, #32
 8008204:	d003      	beq.n	800820e <USBD_StdItfReq+0x22>
 8008206:	2b40      	cmp	r3, #64	; 0x40
 8008208:	d001      	beq.n	800820e <USBD_StdItfReq+0x22>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d12a      	bne.n	8008264 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008214:	3b01      	subs	r3, #1
 8008216:	2b02      	cmp	r3, #2
 8008218:	d81d      	bhi.n	8008256 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	889b      	ldrh	r3, [r3, #4]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b01      	cmp	r3, #1
 8008222:	d813      	bhi.n	800824c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	88db      	ldrh	r3, [r3, #6]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d110      	bne.n	8008260 <USBD_StdItfReq+0x74>
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10d      	bne.n	8008260 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fd41 	bl	8008ccc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800824a:	e009      	b.n	8008260 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fc8e 	bl	8008b70 <USBD_CtlError>
      break;
 8008254:	e004      	b.n	8008260 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fc89 	bl	8008b70 <USBD_CtlError>
      break;
 800825e:	e000      	b.n	8008262 <USBD_StdItfReq+0x76>
      break;
 8008260:	bf00      	nop
    }
    break;
 8008262:	e004      	b.n	800826e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fc82 	bl	8008b70 <USBD_CtlError>
    break;
 800826c:	bf00      	nop
  }

  return ret;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	889b      	ldrh	r3, [r3, #4]
 800828a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008294:	2b20      	cmp	r3, #32
 8008296:	d004      	beq.n	80082a2 <USBD_StdEPReq+0x2a>
 8008298:	2b40      	cmp	r3, #64	; 0x40
 800829a:	d002      	beq.n	80082a2 <USBD_StdEPReq+0x2a>
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <USBD_StdEPReq+0x3e>
 80082a0:	e135      	b.n	800850e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	4798      	blx	r3
 80082b0:	4603      	mov	r3, r0
 80082b2:	73fb      	strb	r3, [r7, #15]
    break;
 80082b4:	e130      	b.n	8008518 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d03e      	beq.n	800833c <USBD_StdEPReq+0xc4>
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d002      	beq.n	80082c8 <USBD_StdEPReq+0x50>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d077      	beq.n	80083b6 <USBD_StdEPReq+0x13e>
 80082c6:	e11c      	b.n	8008502 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d002      	beq.n	80082d8 <USBD_StdEPReq+0x60>
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d015      	beq.n	8008302 <USBD_StdEPReq+0x8a>
 80082d6:	e02b      	b.n	8008330 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00c      	beq.n	80082f8 <USBD_StdEPReq+0x80>
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	2b80      	cmp	r3, #128	; 0x80
 80082e2:	d009      	beq.n	80082f8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f831 	bl	8009350 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082ee:	2180      	movs	r1, #128	; 0x80
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 f82d 	bl	8009350 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80082f6:	e020      	b.n	800833a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fc38 	bl	8008b70 <USBD_CtlError>
        break;
 8008300:	e01b      	b.n	800833a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	885b      	ldrh	r3, [r3, #2]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10e      	bne.n	8008328 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <USBD_StdEPReq+0xb0>
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	2b80      	cmp	r3, #128	; 0x80
 8008314:	d008      	beq.n	8008328 <USBD_StdEPReq+0xb0>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	88db      	ldrh	r3, [r3, #6]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d104      	bne.n	8008328 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 f814 	bl	8009350 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fccf 	bl	8008ccc <USBD_CtlSendStatus>

        break;
 800832e:	e004      	b.n	800833a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fc1c 	bl	8008b70 <USBD_CtlError>
        break;
 8008338:	bf00      	nop
      }
      break;
 800833a:	e0e7      	b.n	800850c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008342:	2b02      	cmp	r3, #2
 8008344:	d002      	beq.n	800834c <USBD_StdEPReq+0xd4>
 8008346:	2b03      	cmp	r3, #3
 8008348:	d015      	beq.n	8008376 <USBD_StdEPReq+0xfe>
 800834a:	e02d      	b.n	80083a8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00c      	beq.n	800836c <USBD_StdEPReq+0xf4>
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	2b80      	cmp	r3, #128	; 0x80
 8008356:	d009      	beq.n	800836c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fff7 	bl	8009350 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008362:	2180      	movs	r1, #128	; 0x80
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fff3 	bl	8009350 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800836a:	e023      	b.n	80083b4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fbfe 	bl	8008b70 <USBD_CtlError>
        break;
 8008374:	e01e      	b.n	80083b4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	885b      	ldrh	r3, [r3, #2]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d119      	bne.n	80083b2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008384:	2b00      	cmp	r3, #0
 8008386:	d004      	beq.n	8008392 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fffe 	bl	800938e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fc9a 	bl	8008ccc <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
        }
        break;
 80083a6:	e004      	b.n	80083b2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fbe0 	bl	8008b70 <USBD_CtlError>
        break;
 80083b0:	e000      	b.n	80083b4 <USBD_StdEPReq+0x13c>
        break;
 80083b2:	bf00      	nop
      }
      break;
 80083b4:	e0aa      	b.n	800850c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d002      	beq.n	80083c6 <USBD_StdEPReq+0x14e>
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d032      	beq.n	800842a <USBD_StdEPReq+0x1b2>
 80083c4:	e097      	b.n	80084f6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d007      	beq.n	80083dc <USBD_StdEPReq+0x164>
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b80      	cmp	r3, #128	; 0x80
 80083d0:	d004      	beq.n	80083dc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fbcb 	bl	8008b70 <USBD_CtlError>
          break;
 80083da:	e091      	b.n	8008500 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	da0b      	bge.n	80083fc <USBD_StdEPReq+0x184>
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	3310      	adds	r3, #16
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	4413      	add	r3, r2
 80083f8:	3304      	adds	r3, #4
 80083fa:	e00b      	b.n	8008414 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4413      	add	r3, r2
 8008412:	3304      	adds	r3, #4
 8008414:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2202      	movs	r2, #2
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fc15 	bl	8008c52 <USBD_CtlSendData>
        break;
 8008428:	e06a      	b.n	8008500 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800842a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800842e:	2b00      	cmp	r3, #0
 8008430:	da11      	bge.n	8008456 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008432:	7bbb      	ldrb	r3, [r7, #14]
 8008434:	f003 020f 	and.w	r2, r3, #15
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	440b      	add	r3, r1
 8008444:	3324      	adds	r3, #36	; 0x24
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d117      	bne.n	800847c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fb8e 	bl	8008b70 <USBD_CtlError>
            break;
 8008454:	e054      	b.n	8008500 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	f003 020f 	and.w	r2, r3, #15
 800845c:	6879      	ldr	r1, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	440b      	add	r3, r1
 8008468:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d104      	bne.n	800847c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fb7b 	bl	8008b70 <USBD_CtlError>
            break;
 800847a:	e041      	b.n	8008500 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800847c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008480:	2b00      	cmp	r3, #0
 8008482:	da0b      	bge.n	800849c <USBD_StdEPReq+0x224>
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	3310      	adds	r3, #16
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	4413      	add	r3, r2
 8008498:	3304      	adds	r3, #4
 800849a:	e00b      	b.n	80084b4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	3304      	adds	r3, #4
 80084b4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <USBD_StdEPReq+0x24a>
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	2b80      	cmp	r3, #128	; 0x80
 80084c0:	d103      	bne.n	80084ca <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	e00e      	b.n	80084e8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 ff7c 	bl	80093cc <USBD_LL_IsStallEP>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2201      	movs	r2, #1
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	e002      	b.n	80084e8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2202      	movs	r2, #2
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fbaf 	bl	8008c52 <USBD_CtlSendData>
          break;
 80084f4:	e004      	b.n	8008500 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fb39 	bl	8008b70 <USBD_CtlError>
        break;
 80084fe:	bf00      	nop
      }
      break;
 8008500:	e004      	b.n	800850c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fb33 	bl	8008b70 <USBD_CtlError>
      break;
 800850a:	bf00      	nop
    }
    break;
 800850c:	e004      	b.n	8008518 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fb2d 	bl	8008b70 <USBD_CtlError>
    break;
 8008516:	bf00      	nop
  }

  return ret;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	885b      	ldrh	r3, [r3, #2]
 800853e:	0a1b      	lsrs	r3, r3, #8
 8008540:	b29b      	uxth	r3, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	2b06      	cmp	r3, #6
 8008546:	f200 8128 	bhi.w	800879a <USBD_GetDescriptor+0x276>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <USBD_GetDescriptor+0x2c>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	0800856d 	.word	0x0800856d
 8008554:	08008585 	.word	0x08008585
 8008558:	080085c5 	.word	0x080085c5
 800855c:	0800879b 	.word	0x0800879b
 8008560:	0800879b 	.word	0x0800879b
 8008564:	0800873b 	.word	0x0800873b
 8008568:	08008767 	.word	0x08008767
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	7c12      	ldrb	r2, [r2, #16]
 8008578:	f107 0108 	add.w	r1, r7, #8
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	60f8      	str	r0, [r7, #12]
    break;
 8008582:	e112      	b.n	80087aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	7c1b      	ldrb	r3, [r3, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10d      	bne.n	80085a8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	f107 0208 	add.w	r2, r7, #8
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
 800859c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3301      	adds	r3, #1
 80085a2:	2202      	movs	r2, #2
 80085a4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80085a6:	e100      	b.n	80087aa <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	f107 0208 	add.w	r2, r7, #8
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3301      	adds	r3, #1
 80085be:	2202      	movs	r2, #2
 80085c0:	701a      	strb	r2, [r3, #0]
    break;
 80085c2:	e0f2      	b.n	80087aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	885b      	ldrh	r3, [r3, #2]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b05      	cmp	r3, #5
 80085cc:	f200 80ac 	bhi.w	8008728 <USBD_GetDescriptor+0x204>
 80085d0:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <USBD_GetDescriptor+0xb4>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	080085f1 	.word	0x080085f1
 80085dc:	08008625 	.word	0x08008625
 80085e0:	08008659 	.word	0x08008659
 80085e4:	0800868d 	.word	0x0800868d
 80085e8:	080086c1 	.word	0x080086c1
 80085ec:	080086f5 	.word	0x080086f5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	7c12      	ldrb	r2, [r2, #16]
 8008608:	f107 0108 	add.w	r1, r7, #8
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008612:	e091      	b.n	8008738 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 faaa 	bl	8008b70 <USBD_CtlError>
        err++;
 800861c:	7afb      	ldrb	r3, [r7, #11]
 800861e:	3301      	adds	r3, #1
 8008620:	72fb      	strb	r3, [r7, #11]
      break;
 8008622:	e089      	b.n	8008738 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	7c12      	ldrb	r2, [r2, #16]
 800863c:	f107 0108 	add.w	r1, r7, #8
 8008640:	4610      	mov	r0, r2
 8008642:	4798      	blx	r3
 8008644:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008646:	e077      	b.n	8008738 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fa90 	bl	8008b70 <USBD_CtlError>
        err++;
 8008650:	7afb      	ldrb	r3, [r7, #11]
 8008652:	3301      	adds	r3, #1
 8008654:	72fb      	strb	r3, [r7, #11]
      break;
 8008656:	e06f      	b.n	8008738 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	7c12      	ldrb	r2, [r2, #16]
 8008670:	f107 0108 	add.w	r1, r7, #8
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800867a:	e05d      	b.n	8008738 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa76 	bl	8008b70 <USBD_CtlError>
        err++;
 8008684:	7afb      	ldrb	r3, [r7, #11]
 8008686:	3301      	adds	r3, #1
 8008688:	72fb      	strb	r3, [r7, #11]
      break;
 800868a:	e055      	b.n	8008738 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086ae:	e043      	b.n	8008738 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa5c 	bl	8008b70 <USBD_CtlError>
        err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
      break;
 80086be:	e03b      	b.n	8008738 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086e2:	e029      	b.n	8008738 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa42 	bl	8008b70 <USBD_CtlError>
        err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
      break;
 80086f2:	e021      	b.n	8008738 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008716:	e00f      	b.n	8008738 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa28 	bl	8008b70 <USBD_CtlError>
        err++;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	3301      	adds	r3, #1
 8008724:	72fb      	strb	r3, [r7, #11]
      break;
 8008726:	e007      	b.n	8008738 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa20 	bl	8008b70 <USBD_CtlError>
      err++;
 8008730:	7afb      	ldrb	r3, [r7, #11]
 8008732:	3301      	adds	r3, #1
 8008734:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008736:	bf00      	nop
    }
    break;
 8008738:	e037      	b.n	80087aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	7c1b      	ldrb	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874a:	f107 0208 	add.w	r2, r7, #8
 800874e:	4610      	mov	r0, r2
 8008750:	4798      	blx	r3
 8008752:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008754:	e029      	b.n	80087aa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fa09 	bl	8008b70 <USBD_CtlError>
      err++;
 800875e:	7afb      	ldrb	r3, [r7, #11]
 8008760:	3301      	adds	r3, #1
 8008762:	72fb      	strb	r3, [r7, #11]
    break;
 8008764:	e021      	b.n	80087aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7c1b      	ldrb	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10d      	bne.n	800878a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	f107 0208 	add.w	r2, r7, #8
 800877a:	4610      	mov	r0, r2
 800877c:	4798      	blx	r3
 800877e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3301      	adds	r3, #1
 8008784:	2207      	movs	r2, #7
 8008786:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008788:	e00f      	b.n	80087aa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f9ef 	bl	8008b70 <USBD_CtlError>
      err++;
 8008792:	7afb      	ldrb	r3, [r7, #11]
 8008794:	3301      	adds	r3, #1
 8008796:	72fb      	strb	r3, [r7, #11]
    break;
 8008798:	e007      	b.n	80087aa <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f9e7 	bl	8008b70 <USBD_CtlError>
    err++;
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	3301      	adds	r3, #1
 80087a6:	72fb      	strb	r3, [r7, #11]
    break;
 80087a8:	bf00      	nop
  }

  if (err != 0U)
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d11e      	bne.n	80087ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	88db      	ldrh	r3, [r3, #6]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d016      	beq.n	80087e6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80087b8:	893b      	ldrh	r3, [r7, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00e      	beq.n	80087dc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	88da      	ldrh	r2, [r3, #6]
 80087c2:	893b      	ldrh	r3, [r7, #8]
 80087c4:	4293      	cmp	r3, r2
 80087c6:	bf28      	it	cs
 80087c8:	4613      	movcs	r3, r2
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80087ce:	893b      	ldrh	r3, [r7, #8]
 80087d0:	461a      	mov	r2, r3
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fa3c 	bl	8008c52 <USBD_CtlSendData>
 80087da:	e009      	b.n	80087f0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f9c6 	bl	8008b70 <USBD_CtlError>
 80087e4:	e004      	b.n	80087f0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fa70 	bl	8008ccc <USBD_CtlSendStatus>
 80087ec:	e000      	b.n	80087f0 <USBD_GetDescriptor+0x2cc>
    return;
 80087ee:	bf00      	nop
    }
  }
}
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop

080087f8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	889b      	ldrh	r3, [r3, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d130      	bne.n	800886c <USBD_SetAddress+0x74>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	88db      	ldrh	r3, [r3, #6]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d12c      	bne.n	800886c <USBD_SetAddress+0x74>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	885b      	ldrh	r3, [r3, #2]
 8008816:	2b7f      	cmp	r3, #127	; 0x7f
 8008818:	d828      	bhi.n	800886c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	885b      	ldrh	r3, [r3, #2]
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008824:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882c:	2b03      	cmp	r3, #3
 800882e:	d104      	bne.n	800883a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f99c 	bl	8008b70 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008838:	e01c      	b.n	8008874 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	7bfa      	ldrb	r2, [r7, #15]
 800883e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fdec 	bl	8009424 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fa3d 	bl	8008ccc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d004      	beq.n	8008862 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008860:	e008      	b.n	8008874 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886a:	e003      	b.n	8008874 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f97e 	bl	8008b70 <USBD_CtlError>
  }
}
 8008874:	bf00      	nop
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	885b      	ldrh	r3, [r3, #2]
 800888e:	b2da      	uxtb	r2, r3
 8008890:	4b4b      	ldr	r3, [pc, #300]	; (80089c0 <USBD_SetConfig+0x144>)
 8008892:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008894:	4b4a      	ldr	r3, [pc, #296]	; (80089c0 <USBD_SetConfig+0x144>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d905      	bls.n	80088a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f966 	bl	8008b70 <USBD_CtlError>
    return USBD_FAIL;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e087      	b.n	80089b8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d002      	beq.n	80088b8 <USBD_SetConfig+0x3c>
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d025      	beq.n	8008902 <USBD_SetConfig+0x86>
 80088b6:	e071      	b.n	800899c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80088b8:	4b41      	ldr	r3, [pc, #260]	; (80089c0 <USBD_SetConfig+0x144>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01c      	beq.n	80088fa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80088c0:	4b3f      	ldr	r3, [pc, #252]	; (80089c0 <USBD_SetConfig+0x144>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	461a      	mov	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80088ca:	4b3d      	ldr	r3, [pc, #244]	; (80089c0 <USBD_SetConfig+0x144>)
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7ff f9a7 	bl	8007c24 <USBD_SetClassConfig>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d004      	beq.n	80088ea <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f944 	bl	8008b70 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80088e8:	e065      	b.n	80089b6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f9ee 	bl	8008ccc <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2203      	movs	r2, #3
 80088f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80088f8:	e05d      	b.n	80089b6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f9e6 	bl	8008ccc <USBD_CtlSendStatus>
    break;
 8008900:	e059      	b.n	80089b6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008902:	4b2f      	ldr	r3, [pc, #188]	; (80089c0 <USBD_SetConfig+0x144>)
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d112      	bne.n	8008930 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2202      	movs	r2, #2
 800890e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008912:	4b2b      	ldr	r3, [pc, #172]	; (80089c0 <USBD_SetConfig+0x144>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800891c:	4b28      	ldr	r3, [pc, #160]	; (80089c0 <USBD_SetConfig+0x144>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff f99a 	bl	8007c5c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f9cf 	bl	8008ccc <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800892e:	e042      	b.n	80089b6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008930:	4b23      	ldr	r3, [pc, #140]	; (80089c0 <USBD_SetConfig+0x144>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	429a      	cmp	r2, r3
 800893c:	d02a      	beq.n	8008994 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7ff f988 	bl	8007c5c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800894c:	4b1c      	ldr	r3, [pc, #112]	; (80089c0 <USBD_SetConfig+0x144>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	461a      	mov	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008956:	4b1a      	ldr	r3, [pc, #104]	; (80089c0 <USBD_SetConfig+0x144>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7ff f961 	bl	8007c24 <USBD_SetClassConfig>
 8008962:	4603      	mov	r3, r0
 8008964:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00f      	beq.n	800898c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f8fe 	bl	8008b70 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	b2db      	uxtb	r3, r3
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff f96d 	bl	8007c5c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2202      	movs	r2, #2
 8008986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800898a:	e014      	b.n	80089b6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f99d 	bl	8008ccc <USBD_CtlSendStatus>
    break;
 8008992:	e010      	b.n	80089b6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f999 	bl	8008ccc <USBD_CtlSendStatus>
    break;
 800899a:	e00c      	b.n	80089b6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f8e6 	bl	8008b70 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089a4:	4b06      	ldr	r3, [pc, #24]	; (80089c0 <USBD_SetConfig+0x144>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7ff f956 	bl	8007c5c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80089b0:	2303      	movs	r3, #3
 80089b2:	73fb      	strb	r3, [r7, #15]
    break;
 80089b4:	bf00      	nop
  }

  return ret;
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	200006c8 	.word	0x200006c8

080089c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	88db      	ldrh	r3, [r3, #6]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d004      	beq.n	80089e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f8c9 	bl	8008b70 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80089de:	e021      	b.n	8008a24 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	db17      	blt.n	8008a1a <USBD_GetConfig+0x56>
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	dd02      	ble.n	80089f4 <USBD_GetConfig+0x30>
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d00b      	beq.n	8008a0a <USBD_GetConfig+0x46>
 80089f2:	e012      	b.n	8008a1a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3308      	adds	r3, #8
 80089fe:	2201      	movs	r2, #1
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f925 	bl	8008c52 <USBD_CtlSendData>
      break;
 8008a08:	e00c      	b.n	8008a24 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	2201      	movs	r2, #1
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f91d 	bl	8008c52 <USBD_CtlSendData>
      break;
 8008a18:	e004      	b.n	8008a24 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f8a7 	bl	8008b70 <USBD_CtlError>
      break;
 8008a22:	bf00      	nop
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d81e      	bhi.n	8008a80 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	88db      	ldrh	r3, [r3, #6]
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d004      	beq.n	8008a54 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f88f 	bl	8008b70 <USBD_CtlError>
      break;
 8008a52:	e01a      	b.n	8008a8a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d005      	beq.n	8008a70 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f043 0202 	orr.w	r2, r3, #2
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	330c      	adds	r3, #12
 8008a74:	2202      	movs	r2, #2
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f8ea 	bl	8008c52 <USBD_CtlSendData>
    break;
 8008a7e:	e004      	b.n	8008a8a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f874 	bl	8008b70 <USBD_CtlError>
    break;
 8008a88:	bf00      	nop
  }
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	885b      	ldrh	r3, [r3, #2]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d106      	bne.n	8008ab2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f90d 	bl	8008ccc <USBD_CtlSendStatus>
  }
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aca:	3b01      	subs	r3, #1
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d80b      	bhi.n	8008ae8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	885b      	ldrh	r3, [r3, #2]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d10c      	bne.n	8008af2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f8f3 	bl	8008ccc <USBD_CtlSendStatus>
      }
      break;
 8008ae6:	e004      	b.n	8008af2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f840 	bl	8008b70 <USBD_CtlError>
      break;
 8008af0:	e000      	b.n	8008af4 <USBD_ClrFeature+0x3a>
      break;
 8008af2:	bf00      	nop
  }
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	781a      	ldrb	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3301      	adds	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	781a      	ldrb	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3301      	adds	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7ff fad3 	bl	80080d2 <SWAPBYTE>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	461a      	mov	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f7ff fac6 	bl	80080d2 <SWAPBYTE>
 8008b46:	4603      	mov	r3, r0
 8008b48:	461a      	mov	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3301      	adds	r3, #1
 8008b52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3301      	adds	r3, #1
 8008b58:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f7ff fab9 	bl	80080d2 <SWAPBYTE>
 8008b60:	4603      	mov	r3, r0
 8008b62:	461a      	mov	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	80da      	strh	r2, [r3, #6]
}
 8008b68:	bf00      	nop
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b7a:	2180      	movs	r1, #128	; 0x80
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fbe7 	bl	8009350 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b82:	2100      	movs	r1, #0
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fbe3 	bl	8009350 <USBD_LL_StallEP>
}
 8008b8a:	bf00      	nop
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	60b9      	str	r1, [r7, #8]
 8008b9c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d036      	beq.n	8008c16 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bac:	6938      	ldr	r0, [r7, #16]
 8008bae:	f000 f836 	bl	8008c1e <USBD_GetLen>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	7812      	ldrb	r2, [r2, #0]
 8008bca:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	2203      	movs	r2, #3
 8008bda:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	3301      	adds	r3, #1
 8008be0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008be2:	e013      	b.n	8008c0c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	4413      	add	r3, r2
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	7812      	ldrb	r2, [r2, #0]
 8008bee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	613b      	str	r3, [r7, #16]
    idx++;
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	4413      	add	r3, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e7      	bne.n	8008be4 <USBD_GetString+0x52>
 8008c14:	e000      	b.n	8008c18 <USBD_GetString+0x86>
    return;
 8008c16:	bf00      	nop
  }
}
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b085      	sub	sp, #20
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c2e:	e005      	b.n	8008c3c <USBD_GetLen+0x1e>
  {
    len++;
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	3301      	adds	r3, #1
 8008c34:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1f5      	bne.n	8008c30 <USBD_GetLen+0x12>
  }

  return len;
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2202      	movs	r2, #2
 8008c62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	2100      	movs	r1, #0
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fbf2 	bl	8009462 <USBD_LL_Transmit>

  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	2100      	movs	r1, #0
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fbe1 	bl	8009462 <USBD_LL_Transmit>

  return USBD_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	2100      	movs	r1, #0
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fbf1 	bl	80094a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2204      	movs	r2, #4
 8008cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cdc:	2300      	movs	r3, #0
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fbbd 	bl	8009462 <USBD_LL_Transmit>

  return USBD_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2205      	movs	r2, #5
 8008cfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d02:	2300      	movs	r3, #0
 8008d04:	2200      	movs	r2, #0
 8008d06:	2100      	movs	r1, #0
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fbcb 	bl	80094a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	490e      	ldr	r1, [pc, #56]	; (8008d58 <MX_USB_DEVICE_Init+0x40>)
 8008d20:	480e      	ldr	r0, [pc, #56]	; (8008d5c <MX_USB_DEVICE_Init+0x44>)
 8008d22:	f7fe ff11 	bl	8007b48 <USBD_Init>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d2c:	f7f8 f9e2 	bl	80010f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008d30:	490b      	ldr	r1, [pc, #44]	; (8008d60 <MX_USB_DEVICE_Init+0x48>)
 8008d32:	480a      	ldr	r0, [pc, #40]	; (8008d5c <MX_USB_DEVICE_Init+0x44>)
 8008d34:	f7fe ff3e 	bl	8007bb4 <USBD_RegisterClass>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d3e:	f7f8 f9d9 	bl	80010f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d42:	4806      	ldr	r0, [pc, #24]	; (8008d5c <MX_USB_DEVICE_Init+0x44>)
 8008d44:	f7fe ff57 	bl	8007bf6 <USBD_Start>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008d4e:	f7f8 f9d1 	bl	80010f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d52:	bf00      	nop
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	200001a8 	.word	0x200001a8
 8008d5c:	200009f8 	.word	0x200009f8
 8008d60:	200000ac 	.word	0x200000ac

08008d64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	6039      	str	r1, [r7, #0]
 8008d6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2212      	movs	r2, #18
 8008d74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d76:	4b03      	ldr	r3, [pc, #12]	; (8008d84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	200001c4 	.word	0x200001c4

08008d88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	6039      	str	r1, [r7, #0]
 8008d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2204      	movs	r2, #4
 8008d98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d9a:	4b03      	ldr	r3, [pc, #12]	; (8008da8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	200001d8 	.word	0x200001d8

08008dac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	6039      	str	r1, [r7, #0]
 8008db6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008db8:	79fb      	ldrb	r3, [r7, #7]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d105      	bne.n	8008dca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	4907      	ldr	r1, [pc, #28]	; (8008de0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dc2:	4808      	ldr	r0, [pc, #32]	; (8008de4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008dc4:	f7ff fee5 	bl	8008b92 <USBD_GetString>
 8008dc8:	e004      	b.n	8008dd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	4904      	ldr	r1, [pc, #16]	; (8008de0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dce:	4805      	ldr	r0, [pc, #20]	; (8008de4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008dd0:	f7ff fedf 	bl	8008b92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dd4:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000cc8 	.word	0x20000cc8
 8008de4:	08009834 	.word	0x08009834

08008de8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	4603      	mov	r3, r0
 8008df0:	6039      	str	r1, [r7, #0]
 8008df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	4904      	ldr	r1, [pc, #16]	; (8008e08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008df8:	4804      	ldr	r0, [pc, #16]	; (8008e0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008dfa:	f7ff feca 	bl	8008b92 <USBD_GetString>
  return USBD_StrDesc;
 8008dfe:	4b02      	ldr	r3, [pc, #8]	; (8008e08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20000cc8 	.word	0x20000cc8
 8008e0c:	0800984c 	.word	0x0800984c

08008e10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4603      	mov	r3, r0
 8008e18:	6039      	str	r1, [r7, #0]
 8008e1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	221a      	movs	r2, #26
 8008e20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e22:	f000 f843 	bl	8008eac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e26:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	200001dc 	.word	0x200001dc

08008e34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	6039      	str	r1, [r7, #0]
 8008e3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d105      	bne.n	8008e52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	4907      	ldr	r1, [pc, #28]	; (8008e68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e4a:	4808      	ldr	r0, [pc, #32]	; (8008e6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e4c:	f7ff fea1 	bl	8008b92 <USBD_GetString>
 8008e50:	e004      	b.n	8008e5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	4904      	ldr	r1, [pc, #16]	; (8008e68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e56:	4805      	ldr	r0, [pc, #20]	; (8008e6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e58:	f7ff fe9b 	bl	8008b92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e5c:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000cc8 	.word	0x20000cc8
 8008e6c:	08009860 	.word	0x08009860

08008e70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	6039      	str	r1, [r7, #0]
 8008e7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d105      	bne.n	8008e8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4907      	ldr	r1, [pc, #28]	; (8008ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e86:	4808      	ldr	r0, [pc, #32]	; (8008ea8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e88:	f7ff fe83 	bl	8008b92 <USBD_GetString>
 8008e8c:	e004      	b.n	8008e98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	4904      	ldr	r1, [pc, #16]	; (8008ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e92:	4805      	ldr	r0, [pc, #20]	; (8008ea8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e94:	f7ff fe7d 	bl	8008b92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e98:	4b02      	ldr	r3, [pc, #8]	; (8008ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000cc8 	.word	0x20000cc8
 8008ea8:	0800986c 	.word	0x0800986c

08008eac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008eb2:	4b0f      	ldr	r3, [pc, #60]	; (8008ef0 <Get_SerialNum+0x44>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008eb8:	4b0e      	ldr	r3, [pc, #56]	; (8008ef4 <Get_SerialNum+0x48>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ebe:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <Get_SerialNum+0x4c>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4413      	add	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d009      	beq.n	8008ee6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ed2:	2208      	movs	r2, #8
 8008ed4:	4909      	ldr	r1, [pc, #36]	; (8008efc <Get_SerialNum+0x50>)
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 f814 	bl	8008f04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008edc:	2204      	movs	r2, #4
 8008ede:	4908      	ldr	r1, [pc, #32]	; (8008f00 <Get_SerialNum+0x54>)
 8008ee0:	68b8      	ldr	r0, [r7, #8]
 8008ee2:	f000 f80f 	bl	8008f04 <IntToUnicode>
  }
}
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	1fff7a10 	.word	0x1fff7a10
 8008ef4:	1fff7a14 	.word	0x1fff7a14
 8008ef8:	1fff7a18 	.word	0x1fff7a18
 8008efc:	200001de 	.word	0x200001de
 8008f00:	200001ee 	.word	0x200001ee

08008f04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f16:	2300      	movs	r3, #0
 8008f18:	75fb      	strb	r3, [r7, #23]
 8008f1a:	e027      	b.n	8008f6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	0f1b      	lsrs	r3, r3, #28
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	d80b      	bhi.n	8008f3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	0f1b      	lsrs	r3, r3, #28
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	4619      	mov	r1, r3
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	440b      	add	r3, r1
 8008f34:	3230      	adds	r2, #48	; 0x30
 8008f36:	b2d2      	uxtb	r2, r2
 8008f38:	701a      	strb	r2, [r3, #0]
 8008f3a:	e00a      	b.n	8008f52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	0f1b      	lsrs	r3, r3, #28
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	4619      	mov	r1, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	440b      	add	r3, r1
 8008f4c:	3237      	adds	r2, #55	; 0x37
 8008f4e:	b2d2      	uxtb	r2, r2
 8008f50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	011b      	lsls	r3, r3, #4
 8008f56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	4413      	add	r3, r2
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	75fb      	strb	r3, [r7, #23]
 8008f6c:	7dfa      	ldrb	r2, [r7, #23]
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d3d3      	bcc.n	8008f1c <IntToUnicode+0x18>
  }
}
 8008f74:	bf00      	nop
 8008f76:	371c      	adds	r7, #28
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08a      	sub	sp, #40	; 0x28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f88:	f107 0314 	add.w	r3, r7, #20
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	605a      	str	r2, [r3, #4]
 8008f92:	609a      	str	r2, [r3, #8]
 8008f94:	60da      	str	r2, [r3, #12]
 8008f96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fa0:	d13a      	bne.n	8009018 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	613b      	str	r3, [r7, #16]
 8008fa6:	4b1e      	ldr	r3, [pc, #120]	; (8009020 <HAL_PCD_MspInit+0xa0>)
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008faa:	4a1d      	ldr	r2, [pc, #116]	; (8009020 <HAL_PCD_MspInit+0xa0>)
 8008fac:	f043 0301 	orr.w	r3, r3, #1
 8008fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8008fb2:	4b1b      	ldr	r3, [pc, #108]	; (8009020 <HAL_PCD_MspInit+0xa0>)
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	613b      	str	r3, [r7, #16]
 8008fbc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008fbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008fd0:	230a      	movs	r3, #10
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fd4:	f107 0314 	add.w	r3, r7, #20
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4812      	ldr	r0, [pc, #72]	; (8009024 <HAL_PCD_MspInit+0xa4>)
 8008fdc:	f7f9 fb66 	bl	80026ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008fe0:	4b0f      	ldr	r3, [pc, #60]	; (8009020 <HAL_PCD_MspInit+0xa0>)
 8008fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe4:	4a0e      	ldr	r2, [pc, #56]	; (8009020 <HAL_PCD_MspInit+0xa0>)
 8008fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fea:	6353      	str	r3, [r2, #52]	; 0x34
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <HAL_PCD_MspInit+0xa0>)
 8008ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff4:	4a0a      	ldr	r2, [pc, #40]	; (8009020 <HAL_PCD_MspInit+0xa0>)
 8008ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ffa:	6453      	str	r3, [r2, #68]	; 0x44
 8008ffc:	4b08      	ldr	r3, [pc, #32]	; (8009020 <HAL_PCD_MspInit+0xa0>)
 8008ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009008:	2200      	movs	r2, #0
 800900a:	2100      	movs	r1, #0
 800900c:	2043      	movs	r0, #67	; 0x43
 800900e:	f7f9 fb16 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009012:	2043      	movs	r0, #67	; 0x43
 8009014:	f7f9 fb2f 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009018:	bf00      	nop
 800901a:	3728      	adds	r7, #40	; 0x28
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	40023800 	.word	0x40023800
 8009024:	40020000 	.word	0x40020000

08009028 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f7fe fe24 	bl	8007c8c <USBD_LL_SetupStage>
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	4613      	mov	r3, r2
 8009064:	00db      	lsls	r3, r3, #3
 8009066:	1a9b      	subs	r3, r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	440b      	add	r3, r1
 800906c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	4619      	mov	r1, r3
 8009076:	f7fe fe5c 	bl	8007d32 <USBD_LL_DataOutStage>
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b082      	sub	sp, #8
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	4613      	mov	r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	3348      	adds	r3, #72	; 0x48
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	78fb      	ldrb	r3, [r7, #3]
 80090a8:	4619      	mov	r1, r3
 80090aa:	f7fe fea5 	bl	8007df8 <USBD_LL_DataInStage>
}
 80090ae:	bf00      	nop
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe ffa9 	bl	800801c <USBD_LL_SOF>
}
 80090ca:	bf00      	nop
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090da:	2301      	movs	r3, #1
 80090dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d001      	beq.n	80090ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090e6:	f7f8 f805 	bl	80010f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090f0:	7bfa      	ldrb	r2, [r7, #15]
 80090f2:	4611      	mov	r1, r2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe ff56 	bl	8007fa6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe ff0f 	bl	8007f24 <USBD_LL_Reset>
}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe ff51 	bl	8007fc6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6812      	ldr	r2, [r2, #0]
 8009132:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009136:	f043 0301 	orr.w	r3, r3, #1
 800913a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009144:	4b04      	ldr	r3, [pc, #16]	; (8009158 <HAL_PCD_SuspendCallback+0x48>)
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	4a03      	ldr	r2, [pc, #12]	; (8009158 <HAL_PCD_SuspendCallback+0x48>)
 800914a:	f043 0306 	orr.w	r3, r3, #6
 800914e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	e000ed00 	.word	0xe000ed00

0800915c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe ff40 	bl	8007ff0 <USBD_LL_Resume>
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800918a:	78fa      	ldrb	r2, [r7, #3]
 800918c:	4611      	mov	r1, r2
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe ff6b 	bl	800806a <USBD_LL_IsoOUTIncomplete>
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe ff4c 	bl	8008050 <USBD_LL_IsoINIncomplete>
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe ff58 	bl	8008084 <USBD_LL_DevConnected>
}
 80091d4:	bf00      	nop
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe ff55 	bl	800809a <USBD_LL_DevDisconnected>
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d13c      	bne.n	8009282 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009208:	4a20      	ldr	r2, [pc, #128]	; (800928c <USBD_LL_Init+0x94>)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a1e      	ldr	r2, [pc, #120]	; (800928c <USBD_LL_Init+0x94>)
 8009214:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009218:	4b1c      	ldr	r3, [pc, #112]	; (800928c <USBD_LL_Init+0x94>)
 800921a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800921e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009220:	4b1a      	ldr	r3, [pc, #104]	; (800928c <USBD_LL_Init+0x94>)
 8009222:	2204      	movs	r2, #4
 8009224:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009226:	4b19      	ldr	r3, [pc, #100]	; (800928c <USBD_LL_Init+0x94>)
 8009228:	2202      	movs	r2, #2
 800922a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800922c:	4b17      	ldr	r3, [pc, #92]	; (800928c <USBD_LL_Init+0x94>)
 800922e:	2200      	movs	r2, #0
 8009230:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009232:	4b16      	ldr	r3, [pc, #88]	; (800928c <USBD_LL_Init+0x94>)
 8009234:	2202      	movs	r2, #2
 8009236:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009238:	4b14      	ldr	r3, [pc, #80]	; (800928c <USBD_LL_Init+0x94>)
 800923a:	2200      	movs	r2, #0
 800923c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800923e:	4b13      	ldr	r3, [pc, #76]	; (800928c <USBD_LL_Init+0x94>)
 8009240:	2200      	movs	r2, #0
 8009242:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009244:	4b11      	ldr	r3, [pc, #68]	; (800928c <USBD_LL_Init+0x94>)
 8009246:	2200      	movs	r2, #0
 8009248:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800924a:	4b10      	ldr	r3, [pc, #64]	; (800928c <USBD_LL_Init+0x94>)
 800924c:	2200      	movs	r2, #0
 800924e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009250:	4b0e      	ldr	r3, [pc, #56]	; (800928c <USBD_LL_Init+0x94>)
 8009252:	2200      	movs	r2, #0
 8009254:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009256:	480d      	ldr	r0, [pc, #52]	; (800928c <USBD_LL_Init+0x94>)
 8009258:	f7fa f961 	bl	800351e <HAL_PCD_Init>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009262:	f7f7 ff47 	bl	80010f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009266:	2180      	movs	r1, #128	; 0x80
 8009268:	4808      	ldr	r0, [pc, #32]	; (800928c <USBD_LL_Init+0x94>)
 800926a:	f7fb faa6 	bl	80047ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800926e:	2240      	movs	r2, #64	; 0x40
 8009270:	2100      	movs	r1, #0
 8009272:	4806      	ldr	r0, [pc, #24]	; (800928c <USBD_LL_Init+0x94>)
 8009274:	f7fb fa5a 	bl	800472c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009278:	2280      	movs	r2, #128	; 0x80
 800927a:	2101      	movs	r1, #1
 800927c:	4803      	ldr	r0, [pc, #12]	; (800928c <USBD_LL_Init+0x94>)
 800927e:	f7fb fa55 	bl	800472c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	20000ec8 	.word	0x20000ec8

08009290 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fa fa56 	bl	8003758 <HAL_PCD_Start>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f918 	bl	80094e8 <USBD_Get_USB_Status>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	4608      	mov	r0, r1
 80092d0:	4611      	mov	r1, r2
 80092d2:	461a      	mov	r2, r3
 80092d4:	4603      	mov	r3, r0
 80092d6:	70fb      	strb	r3, [r7, #3]
 80092d8:	460b      	mov	r3, r1
 80092da:	70bb      	strb	r3, [r7, #2]
 80092dc:	4613      	mov	r3, r2
 80092de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092ee:	78bb      	ldrb	r3, [r7, #2]
 80092f0:	883a      	ldrh	r2, [r7, #0]
 80092f2:	78f9      	ldrb	r1, [r7, #3]
 80092f4:	f7fa fe3a 	bl	8003f6c <HAL_PCD_EP_Open>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f8f2 	bl	80094e8 <USBD_Get_USB_Status>
 8009304:	4603      	mov	r3, r0
 8009306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009308:	7bbb      	ldrb	r3, [r7, #14]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800932c:	78fa      	ldrb	r2, [r7, #3]
 800932e:	4611      	mov	r1, r2
 8009330:	4618      	mov	r0, r3
 8009332:	f7fa fe83 	bl	800403c <HAL_PCD_EP_Close>
 8009336:	4603      	mov	r3, r0
 8009338:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	4618      	mov	r0, r3
 800933e:	f000 f8d3 	bl	80094e8 <USBD_Get_USB_Status>
 8009342:	4603      	mov	r3, r0
 8009344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009346:	7bbb      	ldrb	r3, [r7, #14]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800936a:	78fa      	ldrb	r2, [r7, #3]
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f7fa ff43 	bl	80041fa <HAL_PCD_EP_SetStall>
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f8b4 	bl	80094e8 <USBD_Get_USB_Status>
 8009380:	4603      	mov	r3, r0
 8009382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009384:	7bbb      	ldrb	r3, [r7, #14]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fa ff88 	bl	80042c2 <HAL_PCD_EP_ClrStall>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 f895 	bl	80094e8 <USBD_Get_USB_Status>
 80093be:	4603      	mov	r3, r0
 80093c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	da0b      	bge.n	8009400 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	4613      	mov	r3, r2
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	1a9b      	subs	r3, r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	333e      	adds	r3, #62	; 0x3e
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	e00b      	b.n	8009418 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	4613      	mov	r3, r2
 800940a:	00db      	lsls	r3, r3, #3
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	440b      	add	r3, r1
 8009412:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009416:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800943e:	78fa      	ldrb	r2, [r7, #3]
 8009440:	4611      	mov	r1, r2
 8009442:	4618      	mov	r0, r3
 8009444:	f7fa fd6d 	bl	8003f22 <HAL_PCD_SetAddress>
 8009448:	4603      	mov	r3, r0
 800944a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800944c:	7bfb      	ldrb	r3, [r7, #15]
 800944e:	4618      	mov	r0, r3
 8009450:	f000 f84a 	bl	80094e8 <USBD_Get_USB_Status>
 8009454:	4603      	mov	r3, r0
 8009456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009458:	7bbb      	ldrb	r3, [r7, #14]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b086      	sub	sp, #24
 8009466:	af00      	add	r7, sp, #0
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
 800946e:	460b      	mov	r3, r1
 8009470:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009480:	7af9      	ldrb	r1, [r7, #11]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	f7fa fe6e 	bl	8004166 <HAL_PCD_EP_Transmit>
 800948a:	4603      	mov	r3, r0
 800948c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	4618      	mov	r0, r3
 8009492:	f000 f829 	bl	80094e8 <USBD_Get_USB_Status>
 8009496:	4603      	mov	r3, r0
 8009498:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800949a:	7dbb      	ldrb	r3, [r7, #22]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	607a      	str	r2, [r7, #4]
 80094ae:	603b      	str	r3, [r7, #0]
 80094b0:	460b      	mov	r3, r1
 80094b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094c2:	7af9      	ldrb	r1, [r7, #11]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	f7fa fe02 	bl	80040d0 <HAL_PCD_EP_Receive>
 80094cc:	4603      	mov	r3, r0
 80094ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 f808 	bl	80094e8 <USBD_Get_USB_Status>
 80094d8:	4603      	mov	r3, r0
 80094da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
	...

080094e8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094f6:	79fb      	ldrb	r3, [r7, #7]
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d817      	bhi.n	800952c <USBD_Get_USB_Status+0x44>
 80094fc:	a201      	add	r2, pc, #4	; (adr r2, 8009504 <USBD_Get_USB_Status+0x1c>)
 80094fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009502:	bf00      	nop
 8009504:	08009515 	.word	0x08009515
 8009508:	0800951b 	.word	0x0800951b
 800950c:	08009521 	.word	0x08009521
 8009510:	08009527 	.word	0x08009527
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]
    break;
 8009518:	e00b      	b.n	8009532 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800951a:	2303      	movs	r3, #3
 800951c:	73fb      	strb	r3, [r7, #15]
    break;
 800951e:	e008      	b.n	8009532 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009520:	2301      	movs	r3, #1
 8009522:	73fb      	strb	r3, [r7, #15]
    break;
 8009524:	e005      	b.n	8009532 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009526:	2303      	movs	r3, #3
 8009528:	73fb      	strb	r3, [r7, #15]
    break;
 800952a:	e002      	b.n	8009532 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800952c:	2303      	movs	r3, #3
 800952e:	73fb      	strb	r3, [r7, #15]
    break;
 8009530:	bf00      	nop
  }
  return usb_status;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <__errno>:
 8009540:	4b01      	ldr	r3, [pc, #4]	; (8009548 <__errno+0x8>)
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	200001f8 	.word	0x200001f8

0800954c <__libc_init_array>:
 800954c:	b570      	push	{r4, r5, r6, lr}
 800954e:	4e0d      	ldr	r6, [pc, #52]	; (8009584 <__libc_init_array+0x38>)
 8009550:	4c0d      	ldr	r4, [pc, #52]	; (8009588 <__libc_init_array+0x3c>)
 8009552:	1ba4      	subs	r4, r4, r6
 8009554:	10a4      	asrs	r4, r4, #2
 8009556:	2500      	movs	r5, #0
 8009558:	42a5      	cmp	r5, r4
 800955a:	d109      	bne.n	8009570 <__libc_init_array+0x24>
 800955c:	4e0b      	ldr	r6, [pc, #44]	; (800958c <__libc_init_array+0x40>)
 800955e:	4c0c      	ldr	r4, [pc, #48]	; (8009590 <__libc_init_array+0x44>)
 8009560:	f000 f8f6 	bl	8009750 <_init>
 8009564:	1ba4      	subs	r4, r4, r6
 8009566:	10a4      	asrs	r4, r4, #2
 8009568:	2500      	movs	r5, #0
 800956a:	42a5      	cmp	r5, r4
 800956c:	d105      	bne.n	800957a <__libc_init_array+0x2e>
 800956e:	bd70      	pop	{r4, r5, r6, pc}
 8009570:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009574:	4798      	blx	r3
 8009576:	3501      	adds	r5, #1
 8009578:	e7ee      	b.n	8009558 <__libc_init_array+0xc>
 800957a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800957e:	4798      	blx	r3
 8009580:	3501      	adds	r5, #1
 8009582:	e7f2      	b.n	800956a <__libc_init_array+0x1e>
 8009584:	0800a5f8 	.word	0x0800a5f8
 8009588:	0800a5f8 	.word	0x0800a5f8
 800958c:	0800a5f8 	.word	0x0800a5f8
 8009590:	0800a5fc 	.word	0x0800a5fc

08009594 <malloc>:
 8009594:	4b02      	ldr	r3, [pc, #8]	; (80095a0 <malloc+0xc>)
 8009596:	4601      	mov	r1, r0
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	f000 b86d 	b.w	8009678 <_malloc_r>
 800959e:	bf00      	nop
 80095a0:	200001f8 	.word	0x200001f8

080095a4 <free>:
 80095a4:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <free+0xc>)
 80095a6:	4601      	mov	r1, r0
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	f000 b817 	b.w	80095dc <_free_r>
 80095ae:	bf00      	nop
 80095b0:	200001f8 	.word	0x200001f8

080095b4 <memcpy>:
 80095b4:	b510      	push	{r4, lr}
 80095b6:	1e43      	subs	r3, r0, #1
 80095b8:	440a      	add	r2, r1
 80095ba:	4291      	cmp	r1, r2
 80095bc:	d100      	bne.n	80095c0 <memcpy+0xc>
 80095be:	bd10      	pop	{r4, pc}
 80095c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c8:	e7f7      	b.n	80095ba <memcpy+0x6>

080095ca <memset>:
 80095ca:	4402      	add	r2, r0
 80095cc:	4603      	mov	r3, r0
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d100      	bne.n	80095d4 <memset+0xa>
 80095d2:	4770      	bx	lr
 80095d4:	f803 1b01 	strb.w	r1, [r3], #1
 80095d8:	e7f9      	b.n	80095ce <memset+0x4>
	...

080095dc <_free_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4605      	mov	r5, r0
 80095e0:	2900      	cmp	r1, #0
 80095e2:	d045      	beq.n	8009670 <_free_r+0x94>
 80095e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095e8:	1f0c      	subs	r4, r1, #4
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	bfb8      	it	lt
 80095ee:	18e4      	addlt	r4, r4, r3
 80095f0:	f000 f8ac 	bl	800974c <__malloc_lock>
 80095f4:	4a1f      	ldr	r2, [pc, #124]	; (8009674 <_free_r+0x98>)
 80095f6:	6813      	ldr	r3, [r2, #0]
 80095f8:	4610      	mov	r0, r2
 80095fa:	b933      	cbnz	r3, 800960a <_free_r+0x2e>
 80095fc:	6063      	str	r3, [r4, #4]
 80095fe:	6014      	str	r4, [r2, #0]
 8009600:	4628      	mov	r0, r5
 8009602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009606:	f000 b8a2 	b.w	800974e <__malloc_unlock>
 800960a:	42a3      	cmp	r3, r4
 800960c:	d90c      	bls.n	8009628 <_free_r+0x4c>
 800960e:	6821      	ldr	r1, [r4, #0]
 8009610:	1862      	adds	r2, r4, r1
 8009612:	4293      	cmp	r3, r2
 8009614:	bf04      	itt	eq
 8009616:	681a      	ldreq	r2, [r3, #0]
 8009618:	685b      	ldreq	r3, [r3, #4]
 800961a:	6063      	str	r3, [r4, #4]
 800961c:	bf04      	itt	eq
 800961e:	1852      	addeq	r2, r2, r1
 8009620:	6022      	streq	r2, [r4, #0]
 8009622:	6004      	str	r4, [r0, #0]
 8009624:	e7ec      	b.n	8009600 <_free_r+0x24>
 8009626:	4613      	mov	r3, r2
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	b10a      	cbz	r2, 8009630 <_free_r+0x54>
 800962c:	42a2      	cmp	r2, r4
 800962e:	d9fa      	bls.n	8009626 <_free_r+0x4a>
 8009630:	6819      	ldr	r1, [r3, #0]
 8009632:	1858      	adds	r0, r3, r1
 8009634:	42a0      	cmp	r0, r4
 8009636:	d10b      	bne.n	8009650 <_free_r+0x74>
 8009638:	6820      	ldr	r0, [r4, #0]
 800963a:	4401      	add	r1, r0
 800963c:	1858      	adds	r0, r3, r1
 800963e:	4282      	cmp	r2, r0
 8009640:	6019      	str	r1, [r3, #0]
 8009642:	d1dd      	bne.n	8009600 <_free_r+0x24>
 8009644:	6810      	ldr	r0, [r2, #0]
 8009646:	6852      	ldr	r2, [r2, #4]
 8009648:	605a      	str	r2, [r3, #4]
 800964a:	4401      	add	r1, r0
 800964c:	6019      	str	r1, [r3, #0]
 800964e:	e7d7      	b.n	8009600 <_free_r+0x24>
 8009650:	d902      	bls.n	8009658 <_free_r+0x7c>
 8009652:	230c      	movs	r3, #12
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	e7d3      	b.n	8009600 <_free_r+0x24>
 8009658:	6820      	ldr	r0, [r4, #0]
 800965a:	1821      	adds	r1, r4, r0
 800965c:	428a      	cmp	r2, r1
 800965e:	bf04      	itt	eq
 8009660:	6811      	ldreq	r1, [r2, #0]
 8009662:	6852      	ldreq	r2, [r2, #4]
 8009664:	6062      	str	r2, [r4, #4]
 8009666:	bf04      	itt	eq
 8009668:	1809      	addeq	r1, r1, r0
 800966a:	6021      	streq	r1, [r4, #0]
 800966c:	605c      	str	r4, [r3, #4]
 800966e:	e7c7      	b.n	8009600 <_free_r+0x24>
 8009670:	bd38      	pop	{r3, r4, r5, pc}
 8009672:	bf00      	nop
 8009674:	200006cc 	.word	0x200006cc

08009678 <_malloc_r>:
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	1ccd      	adds	r5, r1, #3
 800967c:	f025 0503 	bic.w	r5, r5, #3
 8009680:	3508      	adds	r5, #8
 8009682:	2d0c      	cmp	r5, #12
 8009684:	bf38      	it	cc
 8009686:	250c      	movcc	r5, #12
 8009688:	2d00      	cmp	r5, #0
 800968a:	4606      	mov	r6, r0
 800968c:	db01      	blt.n	8009692 <_malloc_r+0x1a>
 800968e:	42a9      	cmp	r1, r5
 8009690:	d903      	bls.n	800969a <_malloc_r+0x22>
 8009692:	230c      	movs	r3, #12
 8009694:	6033      	str	r3, [r6, #0]
 8009696:	2000      	movs	r0, #0
 8009698:	bd70      	pop	{r4, r5, r6, pc}
 800969a:	f000 f857 	bl	800974c <__malloc_lock>
 800969e:	4a21      	ldr	r2, [pc, #132]	; (8009724 <_malloc_r+0xac>)
 80096a0:	6814      	ldr	r4, [r2, #0]
 80096a2:	4621      	mov	r1, r4
 80096a4:	b991      	cbnz	r1, 80096cc <_malloc_r+0x54>
 80096a6:	4c20      	ldr	r4, [pc, #128]	; (8009728 <_malloc_r+0xb0>)
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	b91b      	cbnz	r3, 80096b4 <_malloc_r+0x3c>
 80096ac:	4630      	mov	r0, r6
 80096ae:	f000 f83d 	bl	800972c <_sbrk_r>
 80096b2:	6020      	str	r0, [r4, #0]
 80096b4:	4629      	mov	r1, r5
 80096b6:	4630      	mov	r0, r6
 80096b8:	f000 f838 	bl	800972c <_sbrk_r>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d124      	bne.n	800970a <_malloc_r+0x92>
 80096c0:	230c      	movs	r3, #12
 80096c2:	6033      	str	r3, [r6, #0]
 80096c4:	4630      	mov	r0, r6
 80096c6:	f000 f842 	bl	800974e <__malloc_unlock>
 80096ca:	e7e4      	b.n	8009696 <_malloc_r+0x1e>
 80096cc:	680b      	ldr	r3, [r1, #0]
 80096ce:	1b5b      	subs	r3, r3, r5
 80096d0:	d418      	bmi.n	8009704 <_malloc_r+0x8c>
 80096d2:	2b0b      	cmp	r3, #11
 80096d4:	d90f      	bls.n	80096f6 <_malloc_r+0x7e>
 80096d6:	600b      	str	r3, [r1, #0]
 80096d8:	50cd      	str	r5, [r1, r3]
 80096da:	18cc      	adds	r4, r1, r3
 80096dc:	4630      	mov	r0, r6
 80096de:	f000 f836 	bl	800974e <__malloc_unlock>
 80096e2:	f104 000b 	add.w	r0, r4, #11
 80096e6:	1d23      	adds	r3, r4, #4
 80096e8:	f020 0007 	bic.w	r0, r0, #7
 80096ec:	1ac3      	subs	r3, r0, r3
 80096ee:	d0d3      	beq.n	8009698 <_malloc_r+0x20>
 80096f0:	425a      	negs	r2, r3
 80096f2:	50e2      	str	r2, [r4, r3]
 80096f4:	e7d0      	b.n	8009698 <_malloc_r+0x20>
 80096f6:	428c      	cmp	r4, r1
 80096f8:	684b      	ldr	r3, [r1, #4]
 80096fa:	bf16      	itet	ne
 80096fc:	6063      	strne	r3, [r4, #4]
 80096fe:	6013      	streq	r3, [r2, #0]
 8009700:	460c      	movne	r4, r1
 8009702:	e7eb      	b.n	80096dc <_malloc_r+0x64>
 8009704:	460c      	mov	r4, r1
 8009706:	6849      	ldr	r1, [r1, #4]
 8009708:	e7cc      	b.n	80096a4 <_malloc_r+0x2c>
 800970a:	1cc4      	adds	r4, r0, #3
 800970c:	f024 0403 	bic.w	r4, r4, #3
 8009710:	42a0      	cmp	r0, r4
 8009712:	d005      	beq.n	8009720 <_malloc_r+0xa8>
 8009714:	1a21      	subs	r1, r4, r0
 8009716:	4630      	mov	r0, r6
 8009718:	f000 f808 	bl	800972c <_sbrk_r>
 800971c:	3001      	adds	r0, #1
 800971e:	d0cf      	beq.n	80096c0 <_malloc_r+0x48>
 8009720:	6025      	str	r5, [r4, #0]
 8009722:	e7db      	b.n	80096dc <_malloc_r+0x64>
 8009724:	200006cc 	.word	0x200006cc
 8009728:	200006d0 	.word	0x200006d0

0800972c <_sbrk_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4c06      	ldr	r4, [pc, #24]	; (8009748 <_sbrk_r+0x1c>)
 8009730:	2300      	movs	r3, #0
 8009732:	4605      	mov	r5, r0
 8009734:	4608      	mov	r0, r1
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	f7f8 f9e6 	bl	8001b08 <_sbrk>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_sbrk_r+0x1a>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	b103      	cbz	r3, 8009746 <_sbrk_r+0x1a>
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	200012d0 	.word	0x200012d0

0800974c <__malloc_lock>:
 800974c:	4770      	bx	lr

0800974e <__malloc_unlock>:
 800974e:	4770      	bx	lr

08009750 <_init>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	bf00      	nop
 8009754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009756:	bc08      	pop	{r3}
 8009758:	469e      	mov	lr, r3
 800975a:	4770      	bx	lr

0800975c <_fini>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	bf00      	nop
 8009760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009762:	bc08      	pop	{r3}
 8009764:	469e      	mov	lr, r3
 8009766:	4770      	bx	lr
